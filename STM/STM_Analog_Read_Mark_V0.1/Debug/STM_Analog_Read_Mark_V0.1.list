
STM_Analog_Read_Mark_V0.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000073b8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08007540  08007540  00017540  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800755c  0800755c  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  0800755c  0800755c  0001755c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007564  08007564  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007564  08007564  00017564  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007568  08007568  00017568  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  0800756c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002007c  2**0
                  CONTENTS
 10 .bss          0000098c  2000007c  2000007c  0002007c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000a08  20000a08  0002007c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 14 .debug_info   00015a38  00000000  00000000  000200ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003abd  00000000  00000000  00035b27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001210  00000000  00000000  000395e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000dc3  00000000  00000000  0003a7f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00024a48  00000000  00000000  0003b5bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00018a89  00000000  00000000  00060003  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d791b  00000000  00000000  00078a8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004e4c  00000000  00000000  001503a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000061  00000000  00000000  001551f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000007c 	.word	0x2000007c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007528 	.word	0x08007528

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000080 	.word	0x20000080
 80001c4:	08007528 	.word	0x08007528

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c8:	f000 fc9c 	bl	8000e04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004cc:	f000 f826 	bl	800051c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d0:	f000 f974 	bl	80007bc <MX_GPIO_Init>
  MX_I2C1_Init();
 80004d4:	f000 f8de 	bl	8000694 <MX_I2C1_Init>
  MX_I2S3_Init();
 80004d8:	f000 f90a 	bl	80006f0 <MX_I2S3_Init>
  MX_SPI1_Init();
 80004dc:	f000 f938 	bl	8000750 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80004e0:	f006 fc26 	bl	8006d30 <MX_USB_HOST_Init>
  MX_ADC1_Init();
 80004e4:	f000 f884 	bl	80005f0 <MX_ADC1_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_ADC_Start(&hadc1); // start the adc
 80004e8:	480a      	ldr	r0, [pc, #40]	; (8000514 <main+0x50>)
 80004ea:	f000 fd65 	bl	8000fb8 <HAL_ADC_Start>

	  HAL_ADC_PollForConversion(&hadc1, 100); // poll for conversion
 80004ee:	2164      	movs	r1, #100	; 0x64
 80004f0:	4808      	ldr	r0, [pc, #32]	; (8000514 <main+0x50>)
 80004f2:	f000 fe66 	bl	80011c2 <HAL_ADC_PollForConversion>

	  adc_val = HAL_ADC_GetValue(&hadc1); // get the adc value
 80004f6:	4807      	ldr	r0, [pc, #28]	; (8000514 <main+0x50>)
 80004f8:	f000 feee 	bl	80012d8 <HAL_ADC_GetValue>
 80004fc:	4603      	mov	r3, r0
 80004fe:	b29a      	uxth	r2, r3
 8000500:	4b05      	ldr	r3, [pc, #20]	; (8000518 <main+0x54>)
 8000502:	801a      	strh	r2, [r3, #0]

	  HAL_ADC_Stop(&hadc1); // stop adc
 8000504:	4803      	ldr	r0, [pc, #12]	; (8000514 <main+0x50>)
 8000506:	f000 fe29 	bl	800115c <HAL_ADC_Stop>

	  HAL_Delay (500); // wait for 500ms
 800050a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800050e:	f000 fceb 	bl	8000ee8 <HAL_Delay>
	  HAL_ADC_Start(&hadc1); // start the adc
 8000512:	e7e9      	b.n	80004e8 <main+0x24>
 8000514:	20000098 	.word	0x20000098
 8000518:	200001d4 	.word	0x200001d4

0800051c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b094      	sub	sp, #80	; 0x50
 8000520:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000522:	f107 0320 	add.w	r3, r7, #32
 8000526:	2230      	movs	r2, #48	; 0x30
 8000528:	2100      	movs	r1, #0
 800052a:	4618      	mov	r0, r3
 800052c:	f006 ff6c 	bl	8007408 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000530:	f107 030c 	add.w	r3, r7, #12
 8000534:	2200      	movs	r2, #0
 8000536:	601a      	str	r2, [r3, #0]
 8000538:	605a      	str	r2, [r3, #4]
 800053a:	609a      	str	r2, [r3, #8]
 800053c:	60da      	str	r2, [r3, #12]
 800053e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000540:	2300      	movs	r3, #0
 8000542:	60bb      	str	r3, [r7, #8]
 8000544:	4b28      	ldr	r3, [pc, #160]	; (80005e8 <SystemClock_Config+0xcc>)
 8000546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000548:	4a27      	ldr	r2, [pc, #156]	; (80005e8 <SystemClock_Config+0xcc>)
 800054a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800054e:	6413      	str	r3, [r2, #64]	; 0x40
 8000550:	4b25      	ldr	r3, [pc, #148]	; (80005e8 <SystemClock_Config+0xcc>)
 8000552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000554:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000558:	60bb      	str	r3, [r7, #8]
 800055a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800055c:	2300      	movs	r3, #0
 800055e:	607b      	str	r3, [r7, #4]
 8000560:	4b22      	ldr	r3, [pc, #136]	; (80005ec <SystemClock_Config+0xd0>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	4a21      	ldr	r2, [pc, #132]	; (80005ec <SystemClock_Config+0xd0>)
 8000566:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800056a:	6013      	str	r3, [r2, #0]
 800056c:	4b1f      	ldr	r3, [pc, #124]	; (80005ec <SystemClock_Config+0xd0>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000574:	607b      	str	r3, [r7, #4]
 8000576:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000578:	2301      	movs	r3, #1
 800057a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800057c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000580:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000582:	2302      	movs	r3, #2
 8000584:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000586:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800058a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800058c:	2308      	movs	r3, #8
 800058e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000590:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000594:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000596:	2302      	movs	r3, #2
 8000598:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800059a:	2307      	movs	r3, #7
 800059c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800059e:	f107 0320 	add.w	r3, r7, #32
 80005a2:	4618      	mov	r0, r3
 80005a4:	f003 fd5e 	bl	8004064 <HAL_RCC_OscConfig>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d001      	beq.n	80005b2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005ae:	f000 fa01 	bl	80009b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b2:	230f      	movs	r3, #15
 80005b4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005b6:	2302      	movs	r3, #2
 80005b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ba:	2300      	movs	r3, #0
 80005bc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005be:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005c2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005c8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005ca:	f107 030c 	add.w	r3, r7, #12
 80005ce:	2105      	movs	r1, #5
 80005d0:	4618      	mov	r0, r3
 80005d2:	f003 ffbf 	bl	8004554 <HAL_RCC_ClockConfig>
 80005d6:	4603      	mov	r3, r0
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d001      	beq.n	80005e0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80005dc:	f000 f9ea 	bl	80009b4 <Error_Handler>
  }
}
 80005e0:	bf00      	nop
 80005e2:	3750      	adds	r7, #80	; 0x50
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	40023800 	.word	0x40023800
 80005ec:	40007000 	.word	0x40007000

080005f0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b084      	sub	sp, #16
 80005f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005f6:	463b      	mov	r3, r7
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
 80005fc:	605a      	str	r2, [r3, #4]
 80005fe:	609a      	str	r2, [r3, #8]
 8000600:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000602:	4b21      	ldr	r3, [pc, #132]	; (8000688 <MX_ADC1_Init+0x98>)
 8000604:	4a21      	ldr	r2, [pc, #132]	; (800068c <MX_ADC1_Init+0x9c>)
 8000606:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000608:	4b1f      	ldr	r3, [pc, #124]	; (8000688 <MX_ADC1_Init+0x98>)
 800060a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800060e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000610:	4b1d      	ldr	r3, [pc, #116]	; (8000688 <MX_ADC1_Init+0x98>)
 8000612:	2200      	movs	r2, #0
 8000614:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000616:	4b1c      	ldr	r3, [pc, #112]	; (8000688 <MX_ADC1_Init+0x98>)
 8000618:	2200      	movs	r2, #0
 800061a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800061c:	4b1a      	ldr	r3, [pc, #104]	; (8000688 <MX_ADC1_Init+0x98>)
 800061e:	2200      	movs	r2, #0
 8000620:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000622:	4b19      	ldr	r3, [pc, #100]	; (8000688 <MX_ADC1_Init+0x98>)
 8000624:	2200      	movs	r2, #0
 8000626:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800062a:	4b17      	ldr	r3, [pc, #92]	; (8000688 <MX_ADC1_Init+0x98>)
 800062c:	2200      	movs	r2, #0
 800062e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000630:	4b15      	ldr	r3, [pc, #84]	; (8000688 <MX_ADC1_Init+0x98>)
 8000632:	4a17      	ldr	r2, [pc, #92]	; (8000690 <MX_ADC1_Init+0xa0>)
 8000634:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000636:	4b14      	ldr	r3, [pc, #80]	; (8000688 <MX_ADC1_Init+0x98>)
 8000638:	2200      	movs	r2, #0
 800063a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800063c:	4b12      	ldr	r3, [pc, #72]	; (8000688 <MX_ADC1_Init+0x98>)
 800063e:	2201      	movs	r2, #1
 8000640:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000642:	4b11      	ldr	r3, [pc, #68]	; (8000688 <MX_ADC1_Init+0x98>)
 8000644:	2200      	movs	r2, #0
 8000646:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800064a:	4b0f      	ldr	r3, [pc, #60]	; (8000688 <MX_ADC1_Init+0x98>)
 800064c:	2201      	movs	r2, #1
 800064e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000650:	480d      	ldr	r0, [pc, #52]	; (8000688 <MX_ADC1_Init+0x98>)
 8000652:	f000 fc6d 	bl	8000f30 <HAL_ADC_Init>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d001      	beq.n	8000660 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800065c:	f000 f9aa 	bl	80009b4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000660:	2301      	movs	r3, #1
 8000662:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000664:	2301      	movs	r3, #1
 8000666:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8000668:	2303      	movs	r3, #3
 800066a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800066c:	463b      	mov	r3, r7
 800066e:	4619      	mov	r1, r3
 8000670:	4805      	ldr	r0, [pc, #20]	; (8000688 <MX_ADC1_Init+0x98>)
 8000672:	f000 fe3f 	bl	80012f4 <HAL_ADC_ConfigChannel>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800067c:	f000 f99a 	bl	80009b4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000680:	bf00      	nop
 8000682:	3710      	adds	r7, #16
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	20000098 	.word	0x20000098
 800068c:	40012000 	.word	0x40012000
 8000690:	0f000001 	.word	0x0f000001

08000694 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000698:	4b12      	ldr	r3, [pc, #72]	; (80006e4 <MX_I2C1_Init+0x50>)
 800069a:	4a13      	ldr	r2, [pc, #76]	; (80006e8 <MX_I2C1_Init+0x54>)
 800069c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800069e:	4b11      	ldr	r3, [pc, #68]	; (80006e4 <MX_I2C1_Init+0x50>)
 80006a0:	4a12      	ldr	r2, [pc, #72]	; (80006ec <MX_I2C1_Init+0x58>)
 80006a2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006a4:	4b0f      	ldr	r3, [pc, #60]	; (80006e4 <MX_I2C1_Init+0x50>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006aa:	4b0e      	ldr	r3, [pc, #56]	; (80006e4 <MX_I2C1_Init+0x50>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006b0:	4b0c      	ldr	r3, [pc, #48]	; (80006e4 <MX_I2C1_Init+0x50>)
 80006b2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006b6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006b8:	4b0a      	ldr	r3, [pc, #40]	; (80006e4 <MX_I2C1_Init+0x50>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006be:	4b09      	ldr	r3, [pc, #36]	; (80006e4 <MX_I2C1_Init+0x50>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006c4:	4b07      	ldr	r3, [pc, #28]	; (80006e4 <MX_I2C1_Init+0x50>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006ca:	4b06      	ldr	r3, [pc, #24]	; (80006e4 <MX_I2C1_Init+0x50>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006d0:	4804      	ldr	r0, [pc, #16]	; (80006e4 <MX_I2C1_Init+0x50>)
 80006d2:	f002 fee3 	bl	800349c <HAL_I2C_Init>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006dc:	f000 f96a 	bl	80009b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006e0:	bf00      	nop
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	200000e0 	.word	0x200000e0
 80006e8:	40005400 	.word	0x40005400
 80006ec:	000186a0 	.word	0x000186a0

080006f0 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80006f4:	4b13      	ldr	r3, [pc, #76]	; (8000744 <MX_I2S3_Init+0x54>)
 80006f6:	4a14      	ldr	r2, [pc, #80]	; (8000748 <MX_I2S3_Init+0x58>)
 80006f8:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80006fa:	4b12      	ldr	r3, [pc, #72]	; (8000744 <MX_I2S3_Init+0x54>)
 80006fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000700:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000702:	4b10      	ldr	r3, [pc, #64]	; (8000744 <MX_I2S3_Init+0x54>)
 8000704:	2200      	movs	r2, #0
 8000706:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000708:	4b0e      	ldr	r3, [pc, #56]	; (8000744 <MX_I2S3_Init+0x54>)
 800070a:	2200      	movs	r2, #0
 800070c:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800070e:	4b0d      	ldr	r3, [pc, #52]	; (8000744 <MX_I2S3_Init+0x54>)
 8000710:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000714:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000716:	4b0b      	ldr	r3, [pc, #44]	; (8000744 <MX_I2S3_Init+0x54>)
 8000718:	4a0c      	ldr	r2, [pc, #48]	; (800074c <MX_I2S3_Init+0x5c>)
 800071a:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 800071c:	4b09      	ldr	r3, [pc, #36]	; (8000744 <MX_I2S3_Init+0x54>)
 800071e:	2200      	movs	r2, #0
 8000720:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000722:	4b08      	ldr	r3, [pc, #32]	; (8000744 <MX_I2S3_Init+0x54>)
 8000724:	2200      	movs	r2, #0
 8000726:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000728:	4b06      	ldr	r3, [pc, #24]	; (8000744 <MX_I2S3_Init+0x54>)
 800072a:	2200      	movs	r2, #0
 800072c:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800072e:	4805      	ldr	r0, [pc, #20]	; (8000744 <MX_I2S3_Init+0x54>)
 8000730:	f002 fff8 	bl	8003724 <HAL_I2S_Init>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800073a:	f000 f93b 	bl	80009b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800073e:	bf00      	nop
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	20000134 	.word	0x20000134
 8000748:	40003c00 	.word	0x40003c00
 800074c:	00017700 	.word	0x00017700

08000750 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000754:	4b17      	ldr	r3, [pc, #92]	; (80007b4 <MX_SPI1_Init+0x64>)
 8000756:	4a18      	ldr	r2, [pc, #96]	; (80007b8 <MX_SPI1_Init+0x68>)
 8000758:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800075a:	4b16      	ldr	r3, [pc, #88]	; (80007b4 <MX_SPI1_Init+0x64>)
 800075c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000760:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000762:	4b14      	ldr	r3, [pc, #80]	; (80007b4 <MX_SPI1_Init+0x64>)
 8000764:	2200      	movs	r2, #0
 8000766:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000768:	4b12      	ldr	r3, [pc, #72]	; (80007b4 <MX_SPI1_Init+0x64>)
 800076a:	2200      	movs	r2, #0
 800076c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800076e:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <MX_SPI1_Init+0x64>)
 8000770:	2200      	movs	r2, #0
 8000772:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000774:	4b0f      	ldr	r3, [pc, #60]	; (80007b4 <MX_SPI1_Init+0x64>)
 8000776:	2200      	movs	r2, #0
 8000778:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800077a:	4b0e      	ldr	r3, [pc, #56]	; (80007b4 <MX_SPI1_Init+0x64>)
 800077c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000780:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000782:	4b0c      	ldr	r3, [pc, #48]	; (80007b4 <MX_SPI1_Init+0x64>)
 8000784:	2200      	movs	r2, #0
 8000786:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000788:	4b0a      	ldr	r3, [pc, #40]	; (80007b4 <MX_SPI1_Init+0x64>)
 800078a:	2200      	movs	r2, #0
 800078c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800078e:	4b09      	ldr	r3, [pc, #36]	; (80007b4 <MX_SPI1_Init+0x64>)
 8000790:	2200      	movs	r2, #0
 8000792:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000794:	4b07      	ldr	r3, [pc, #28]	; (80007b4 <MX_SPI1_Init+0x64>)
 8000796:	2200      	movs	r2, #0
 8000798:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800079a:	4b06      	ldr	r3, [pc, #24]	; (80007b4 <MX_SPI1_Init+0x64>)
 800079c:	220a      	movs	r2, #10
 800079e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007a0:	4804      	ldr	r0, [pc, #16]	; (80007b4 <MX_SPI1_Init+0x64>)
 80007a2:	f004 fa23 	bl	8004bec <HAL_SPI_Init>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80007ac:	f000 f902 	bl	80009b4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007b0:	bf00      	nop
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	2000017c 	.word	0x2000017c
 80007b8:	40013000 	.word	0x40013000

080007bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b08c      	sub	sp, #48	; 0x30
 80007c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c2:	f107 031c 	add.w	r3, r7, #28
 80007c6:	2200      	movs	r2, #0
 80007c8:	601a      	str	r2, [r3, #0]
 80007ca:	605a      	str	r2, [r3, #4]
 80007cc:	609a      	str	r2, [r3, #8]
 80007ce:	60da      	str	r2, [r3, #12]
 80007d0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007d2:	2300      	movs	r3, #0
 80007d4:	61bb      	str	r3, [r7, #24]
 80007d6:	4b71      	ldr	r3, [pc, #452]	; (800099c <MX_GPIO_Init+0x1e0>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	4a70      	ldr	r2, [pc, #448]	; (800099c <MX_GPIO_Init+0x1e0>)
 80007dc:	f043 0310 	orr.w	r3, r3, #16
 80007e0:	6313      	str	r3, [r2, #48]	; 0x30
 80007e2:	4b6e      	ldr	r3, [pc, #440]	; (800099c <MX_GPIO_Init+0x1e0>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	f003 0310 	and.w	r3, r3, #16
 80007ea:	61bb      	str	r3, [r7, #24]
 80007ec:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ee:	2300      	movs	r3, #0
 80007f0:	617b      	str	r3, [r7, #20]
 80007f2:	4b6a      	ldr	r3, [pc, #424]	; (800099c <MX_GPIO_Init+0x1e0>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	4a69      	ldr	r2, [pc, #420]	; (800099c <MX_GPIO_Init+0x1e0>)
 80007f8:	f043 0304 	orr.w	r3, r3, #4
 80007fc:	6313      	str	r3, [r2, #48]	; 0x30
 80007fe:	4b67      	ldr	r3, [pc, #412]	; (800099c <MX_GPIO_Init+0x1e0>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	f003 0304 	and.w	r3, r3, #4
 8000806:	617b      	str	r3, [r7, #20]
 8000808:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800080a:	2300      	movs	r3, #0
 800080c:	613b      	str	r3, [r7, #16]
 800080e:	4b63      	ldr	r3, [pc, #396]	; (800099c <MX_GPIO_Init+0x1e0>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	4a62      	ldr	r2, [pc, #392]	; (800099c <MX_GPIO_Init+0x1e0>)
 8000814:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000818:	6313      	str	r3, [r2, #48]	; 0x30
 800081a:	4b60      	ldr	r3, [pc, #384]	; (800099c <MX_GPIO_Init+0x1e0>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000822:	613b      	str	r3, [r7, #16]
 8000824:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000826:	2300      	movs	r3, #0
 8000828:	60fb      	str	r3, [r7, #12]
 800082a:	4b5c      	ldr	r3, [pc, #368]	; (800099c <MX_GPIO_Init+0x1e0>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	4a5b      	ldr	r2, [pc, #364]	; (800099c <MX_GPIO_Init+0x1e0>)
 8000830:	f043 0301 	orr.w	r3, r3, #1
 8000834:	6313      	str	r3, [r2, #48]	; 0x30
 8000836:	4b59      	ldr	r3, [pc, #356]	; (800099c <MX_GPIO_Init+0x1e0>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	f003 0301 	and.w	r3, r3, #1
 800083e:	60fb      	str	r3, [r7, #12]
 8000840:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000842:	2300      	movs	r3, #0
 8000844:	60bb      	str	r3, [r7, #8]
 8000846:	4b55      	ldr	r3, [pc, #340]	; (800099c <MX_GPIO_Init+0x1e0>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	4a54      	ldr	r2, [pc, #336]	; (800099c <MX_GPIO_Init+0x1e0>)
 800084c:	f043 0302 	orr.w	r3, r3, #2
 8000850:	6313      	str	r3, [r2, #48]	; 0x30
 8000852:	4b52      	ldr	r3, [pc, #328]	; (800099c <MX_GPIO_Init+0x1e0>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	f003 0302 	and.w	r3, r3, #2
 800085a:	60bb      	str	r3, [r7, #8]
 800085c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800085e:	2300      	movs	r3, #0
 8000860:	607b      	str	r3, [r7, #4]
 8000862:	4b4e      	ldr	r3, [pc, #312]	; (800099c <MX_GPIO_Init+0x1e0>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	4a4d      	ldr	r2, [pc, #308]	; (800099c <MX_GPIO_Init+0x1e0>)
 8000868:	f043 0308 	orr.w	r3, r3, #8
 800086c:	6313      	str	r3, [r2, #48]	; 0x30
 800086e:	4b4b      	ldr	r3, [pc, #300]	; (800099c <MX_GPIO_Init+0x1e0>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	f003 0308 	and.w	r3, r3, #8
 8000876:	607b      	str	r3, [r7, #4]
 8000878:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800087a:	2200      	movs	r2, #0
 800087c:	2108      	movs	r1, #8
 800087e:	4848      	ldr	r0, [pc, #288]	; (80009a0 <MX_GPIO_Init+0x1e4>)
 8000880:	f001 fa04 	bl	8001c8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000884:	2201      	movs	r2, #1
 8000886:	2101      	movs	r1, #1
 8000888:	4846      	ldr	r0, [pc, #280]	; (80009a4 <MX_GPIO_Init+0x1e8>)
 800088a:	f001 f9ff 	bl	8001c8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800088e:	2200      	movs	r2, #0
 8000890:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000894:	4844      	ldr	r0, [pc, #272]	; (80009a8 <MX_GPIO_Init+0x1ec>)
 8000896:	f001 f9f9 	bl	8001c8c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800089a:	2308      	movs	r3, #8
 800089c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800089e:	2301      	movs	r3, #1
 80008a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a2:	2300      	movs	r3, #0
 80008a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a6:	2300      	movs	r3, #0
 80008a8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80008aa:	f107 031c 	add.w	r3, r7, #28
 80008ae:	4619      	mov	r1, r3
 80008b0:	483b      	ldr	r0, [pc, #236]	; (80009a0 <MX_GPIO_Init+0x1e4>)
 80008b2:	f001 f84f 	bl	8001954 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80008b6:	2301      	movs	r3, #1
 80008b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ba:	2301      	movs	r3, #1
 80008bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008be:	2300      	movs	r3, #0
 80008c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c2:	2300      	movs	r3, #0
 80008c4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008c6:	f107 031c 	add.w	r3, r7, #28
 80008ca:	4619      	mov	r1, r3
 80008cc:	4835      	ldr	r0, [pc, #212]	; (80009a4 <MX_GPIO_Init+0x1e8>)
 80008ce:	f001 f841 	bl	8001954 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80008d2:	2308      	movs	r3, #8
 80008d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d6:	2302      	movs	r3, #2
 80008d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008da:	2300      	movs	r3, #0
 80008dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008de:	2300      	movs	r3, #0
 80008e0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008e2:	2305      	movs	r3, #5
 80008e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80008e6:	f107 031c 	add.w	r3, r7, #28
 80008ea:	4619      	mov	r1, r3
 80008ec:	482d      	ldr	r0, [pc, #180]	; (80009a4 <MX_GPIO_Init+0x1e8>)
 80008ee:	f001 f831 	bl	8001954 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80008f2:	2301      	movs	r3, #1
 80008f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008f6:	2300      	movs	r3, #0
 80008f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fa:	2300      	movs	r3, #0
 80008fc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008fe:	f107 031c 	add.w	r3, r7, #28
 8000902:	4619      	mov	r1, r3
 8000904:	4829      	ldr	r0, [pc, #164]	; (80009ac <MX_GPIO_Init+0x1f0>)
 8000906:	f001 f825 	bl	8001954 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800090a:	2304      	movs	r3, #4
 800090c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800090e:	2300      	movs	r3, #0
 8000910:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000912:	2300      	movs	r3, #0
 8000914:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000916:	f107 031c 	add.w	r3, r7, #28
 800091a:	4619      	mov	r1, r3
 800091c:	4824      	ldr	r0, [pc, #144]	; (80009b0 <MX_GPIO_Init+0x1f4>)
 800091e:	f001 f819 	bl	8001954 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000922:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000926:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000928:	2302      	movs	r3, #2
 800092a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092c:	2300      	movs	r3, #0
 800092e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000930:	2300      	movs	r3, #0
 8000932:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000934:	2305      	movs	r3, #5
 8000936:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000938:	f107 031c 	add.w	r3, r7, #28
 800093c:	4619      	mov	r1, r3
 800093e:	481c      	ldr	r0, [pc, #112]	; (80009b0 <MX_GPIO_Init+0x1f4>)
 8000940:	f001 f808 	bl	8001954 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000944:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000948:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800094a:	2301      	movs	r3, #1
 800094c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094e:	2300      	movs	r3, #0
 8000950:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000952:	2300      	movs	r3, #0
 8000954:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000956:	f107 031c 	add.w	r3, r7, #28
 800095a:	4619      	mov	r1, r3
 800095c:	4812      	ldr	r0, [pc, #72]	; (80009a8 <MX_GPIO_Init+0x1ec>)
 800095e:	f000 fff9 	bl	8001954 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000962:	2320      	movs	r3, #32
 8000964:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000966:	2300      	movs	r3, #0
 8000968:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096a:	2300      	movs	r3, #0
 800096c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800096e:	f107 031c 	add.w	r3, r7, #28
 8000972:	4619      	mov	r1, r3
 8000974:	480c      	ldr	r0, [pc, #48]	; (80009a8 <MX_GPIO_Init+0x1ec>)
 8000976:	f000 ffed 	bl	8001954 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 800097a:	2302      	movs	r3, #2
 800097c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800097e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000982:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000984:	2300      	movs	r3, #0
 8000986:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000988:	f107 031c 	add.w	r3, r7, #28
 800098c:	4619      	mov	r1, r3
 800098e:	4804      	ldr	r0, [pc, #16]	; (80009a0 <MX_GPIO_Init+0x1e4>)
 8000990:	f000 ffe0 	bl	8001954 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000994:	bf00      	nop
 8000996:	3730      	adds	r7, #48	; 0x30
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}
 800099c:	40023800 	.word	0x40023800
 80009a0:	40021000 	.word	0x40021000
 80009a4:	40020800 	.word	0x40020800
 80009a8:	40020c00 	.word	0x40020c00
 80009ac:	40020000 	.word	0x40020000
 80009b0:	40020400 	.word	0x40020400

080009b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009b8:	b672      	cpsid	i
}
 80009ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009bc:	e7fe      	b.n	80009bc <Error_Handler+0x8>
	...

080009c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009c6:	2300      	movs	r3, #0
 80009c8:	607b      	str	r3, [r7, #4]
 80009ca:	4b10      	ldr	r3, [pc, #64]	; (8000a0c <HAL_MspInit+0x4c>)
 80009cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ce:	4a0f      	ldr	r2, [pc, #60]	; (8000a0c <HAL_MspInit+0x4c>)
 80009d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009d4:	6453      	str	r3, [r2, #68]	; 0x44
 80009d6:	4b0d      	ldr	r3, [pc, #52]	; (8000a0c <HAL_MspInit+0x4c>)
 80009d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009de:	607b      	str	r3, [r7, #4]
 80009e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009e2:	2300      	movs	r3, #0
 80009e4:	603b      	str	r3, [r7, #0]
 80009e6:	4b09      	ldr	r3, [pc, #36]	; (8000a0c <HAL_MspInit+0x4c>)
 80009e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ea:	4a08      	ldr	r2, [pc, #32]	; (8000a0c <HAL_MspInit+0x4c>)
 80009ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009f0:	6413      	str	r3, [r2, #64]	; 0x40
 80009f2:	4b06      	ldr	r3, [pc, #24]	; (8000a0c <HAL_MspInit+0x4c>)
 80009f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009fa:	603b      	str	r3, [r7, #0]
 80009fc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80009fe:	2007      	movs	r0, #7
 8000a00:	f000 ff66 	bl	80018d0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a04:	bf00      	nop
 8000a06:	3708      	adds	r7, #8
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	40023800 	.word	0x40023800

08000a10 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b08a      	sub	sp, #40	; 0x28
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a18:	f107 0314 	add.w	r3, r7, #20
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	601a      	str	r2, [r3, #0]
 8000a20:	605a      	str	r2, [r3, #4]
 8000a22:	609a      	str	r2, [r3, #8]
 8000a24:	60da      	str	r2, [r3, #12]
 8000a26:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4a17      	ldr	r2, [pc, #92]	; (8000a8c <HAL_ADC_MspInit+0x7c>)
 8000a2e:	4293      	cmp	r3, r2
 8000a30:	d127      	bne.n	8000a82 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000a32:	2300      	movs	r3, #0
 8000a34:	613b      	str	r3, [r7, #16]
 8000a36:	4b16      	ldr	r3, [pc, #88]	; (8000a90 <HAL_ADC_MspInit+0x80>)
 8000a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a3a:	4a15      	ldr	r2, [pc, #84]	; (8000a90 <HAL_ADC_MspInit+0x80>)
 8000a3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a40:	6453      	str	r3, [r2, #68]	; 0x44
 8000a42:	4b13      	ldr	r3, [pc, #76]	; (8000a90 <HAL_ADC_MspInit+0x80>)
 8000a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a4a:	613b      	str	r3, [r7, #16]
 8000a4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a4e:	2300      	movs	r3, #0
 8000a50:	60fb      	str	r3, [r7, #12]
 8000a52:	4b0f      	ldr	r3, [pc, #60]	; (8000a90 <HAL_ADC_MspInit+0x80>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a56:	4a0e      	ldr	r2, [pc, #56]	; (8000a90 <HAL_ADC_MspInit+0x80>)
 8000a58:	f043 0301 	orr.w	r3, r3, #1
 8000a5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a5e:	4b0c      	ldr	r3, [pc, #48]	; (8000a90 <HAL_ADC_MspInit+0x80>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a62:	f003 0301 	and.w	r3, r3, #1
 8000a66:	60fb      	str	r3, [r7, #12]
 8000a68:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000a6a:	2302      	movs	r3, #2
 8000a6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a6e:	2303      	movs	r3, #3
 8000a70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a72:	2300      	movs	r3, #0
 8000a74:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a76:	f107 0314 	add.w	r3, r7, #20
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	4805      	ldr	r0, [pc, #20]	; (8000a94 <HAL_ADC_MspInit+0x84>)
 8000a7e:	f000 ff69 	bl	8001954 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000a82:	bf00      	nop
 8000a84:	3728      	adds	r7, #40	; 0x28
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	40012000 	.word	0x40012000
 8000a90:	40023800 	.word	0x40023800
 8000a94:	40020000 	.word	0x40020000

08000a98 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b08a      	sub	sp, #40	; 0x28
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa0:	f107 0314 	add.w	r3, r7, #20
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	601a      	str	r2, [r3, #0]
 8000aa8:	605a      	str	r2, [r3, #4]
 8000aaa:	609a      	str	r2, [r3, #8]
 8000aac:	60da      	str	r2, [r3, #12]
 8000aae:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4a19      	ldr	r2, [pc, #100]	; (8000b1c <HAL_I2C_MspInit+0x84>)
 8000ab6:	4293      	cmp	r3, r2
 8000ab8:	d12c      	bne.n	8000b14 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aba:	2300      	movs	r3, #0
 8000abc:	613b      	str	r3, [r7, #16]
 8000abe:	4b18      	ldr	r3, [pc, #96]	; (8000b20 <HAL_I2C_MspInit+0x88>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	4a17      	ldr	r2, [pc, #92]	; (8000b20 <HAL_I2C_MspInit+0x88>)
 8000ac4:	f043 0302 	orr.w	r3, r3, #2
 8000ac8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aca:	4b15      	ldr	r3, [pc, #84]	; (8000b20 <HAL_I2C_MspInit+0x88>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ace:	f003 0302 	and.w	r3, r3, #2
 8000ad2:	613b      	str	r3, [r7, #16]
 8000ad4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000ad6:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000ada:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000adc:	2312      	movs	r3, #18
 8000ade:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ae8:	2304      	movs	r3, #4
 8000aea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aec:	f107 0314 	add.w	r3, r7, #20
 8000af0:	4619      	mov	r1, r3
 8000af2:	480c      	ldr	r0, [pc, #48]	; (8000b24 <HAL_I2C_MspInit+0x8c>)
 8000af4:	f000 ff2e 	bl	8001954 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000af8:	2300      	movs	r3, #0
 8000afa:	60fb      	str	r3, [r7, #12]
 8000afc:	4b08      	ldr	r3, [pc, #32]	; (8000b20 <HAL_I2C_MspInit+0x88>)
 8000afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b00:	4a07      	ldr	r2, [pc, #28]	; (8000b20 <HAL_I2C_MspInit+0x88>)
 8000b02:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b06:	6413      	str	r3, [r2, #64]	; 0x40
 8000b08:	4b05      	ldr	r3, [pc, #20]	; (8000b20 <HAL_I2C_MspInit+0x88>)
 8000b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b10:	60fb      	str	r3, [r7, #12]
 8000b12:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000b14:	bf00      	nop
 8000b16:	3728      	adds	r7, #40	; 0x28
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	40005400 	.word	0x40005400
 8000b20:	40023800 	.word	0x40023800
 8000b24:	40020400 	.word	0x40020400

08000b28 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b08e      	sub	sp, #56	; 0x38
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b34:	2200      	movs	r2, #0
 8000b36:	601a      	str	r2, [r3, #0]
 8000b38:	605a      	str	r2, [r3, #4]
 8000b3a:	609a      	str	r2, [r3, #8]
 8000b3c:	60da      	str	r2, [r3, #12]
 8000b3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b40:	f107 0314 	add.w	r3, r7, #20
 8000b44:	2200      	movs	r2, #0
 8000b46:	601a      	str	r2, [r3, #0]
 8000b48:	605a      	str	r2, [r3, #4]
 8000b4a:	609a      	str	r2, [r3, #8]
 8000b4c:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	4a31      	ldr	r2, [pc, #196]	; (8000c18 <HAL_I2S_MspInit+0xf0>)
 8000b54:	4293      	cmp	r3, r2
 8000b56:	d15a      	bne.n	8000c0e <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000b58:	2301      	movs	r3, #1
 8000b5a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000b5c:	23c0      	movs	r3, #192	; 0xc0
 8000b5e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000b60:	2302      	movs	r3, #2
 8000b62:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b64:	f107 0314 	add.w	r3, r7, #20
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f003 feff 	bl	800496c <HAL_RCCEx_PeriphCLKConfig>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d001      	beq.n	8000b78 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000b74:	f7ff ff1e 	bl	80009b4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000b78:	2300      	movs	r3, #0
 8000b7a:	613b      	str	r3, [r7, #16]
 8000b7c:	4b27      	ldr	r3, [pc, #156]	; (8000c1c <HAL_I2S_MspInit+0xf4>)
 8000b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b80:	4a26      	ldr	r2, [pc, #152]	; (8000c1c <HAL_I2S_MspInit+0xf4>)
 8000b82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b86:	6413      	str	r3, [r2, #64]	; 0x40
 8000b88:	4b24      	ldr	r3, [pc, #144]	; (8000c1c <HAL_I2S_MspInit+0xf4>)
 8000b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b8c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b90:	613b      	str	r3, [r7, #16]
 8000b92:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b94:	2300      	movs	r3, #0
 8000b96:	60fb      	str	r3, [r7, #12]
 8000b98:	4b20      	ldr	r3, [pc, #128]	; (8000c1c <HAL_I2S_MspInit+0xf4>)
 8000b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9c:	4a1f      	ldr	r2, [pc, #124]	; (8000c1c <HAL_I2S_MspInit+0xf4>)
 8000b9e:	f043 0301 	orr.w	r3, r3, #1
 8000ba2:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba4:	4b1d      	ldr	r3, [pc, #116]	; (8000c1c <HAL_I2S_MspInit+0xf4>)
 8000ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba8:	f003 0301 	and.w	r3, r3, #1
 8000bac:	60fb      	str	r3, [r7, #12]
 8000bae:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	60bb      	str	r3, [r7, #8]
 8000bb4:	4b19      	ldr	r3, [pc, #100]	; (8000c1c <HAL_I2S_MspInit+0xf4>)
 8000bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb8:	4a18      	ldr	r2, [pc, #96]	; (8000c1c <HAL_I2S_MspInit+0xf4>)
 8000bba:	f043 0304 	orr.w	r3, r3, #4
 8000bbe:	6313      	str	r3, [r2, #48]	; 0x30
 8000bc0:	4b16      	ldr	r3, [pc, #88]	; (8000c1c <HAL_I2S_MspInit+0xf4>)
 8000bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc4:	f003 0304 	and.w	r3, r3, #4
 8000bc8:	60bb      	str	r3, [r7, #8]
 8000bca:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000bcc:	2310      	movs	r3, #16
 8000bce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd0:	2302      	movs	r3, #2
 8000bd2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000bdc:	2306      	movs	r3, #6
 8000bde:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000be0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000be4:	4619      	mov	r1, r3
 8000be6:	480e      	ldr	r0, [pc, #56]	; (8000c20 <HAL_I2S_MspInit+0xf8>)
 8000be8:	f000 feb4 	bl	8001954 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000bec:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000bf0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf2:	2302      	movs	r3, #2
 8000bf4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000bfe:	2306      	movs	r3, #6
 8000c00:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c06:	4619      	mov	r1, r3
 8000c08:	4806      	ldr	r0, [pc, #24]	; (8000c24 <HAL_I2S_MspInit+0xfc>)
 8000c0a:	f000 fea3 	bl	8001954 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000c0e:	bf00      	nop
 8000c10:	3738      	adds	r7, #56	; 0x38
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	40003c00 	.word	0x40003c00
 8000c1c:	40023800 	.word	0x40023800
 8000c20:	40020000 	.word	0x40020000
 8000c24:	40020800 	.word	0x40020800

08000c28 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b08a      	sub	sp, #40	; 0x28
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c30:	f107 0314 	add.w	r3, r7, #20
 8000c34:	2200      	movs	r2, #0
 8000c36:	601a      	str	r2, [r3, #0]
 8000c38:	605a      	str	r2, [r3, #4]
 8000c3a:	609a      	str	r2, [r3, #8]
 8000c3c:	60da      	str	r2, [r3, #12]
 8000c3e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4a19      	ldr	r2, [pc, #100]	; (8000cac <HAL_SPI_MspInit+0x84>)
 8000c46:	4293      	cmp	r3, r2
 8000c48:	d12b      	bne.n	8000ca2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	613b      	str	r3, [r7, #16]
 8000c4e:	4b18      	ldr	r3, [pc, #96]	; (8000cb0 <HAL_SPI_MspInit+0x88>)
 8000c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c52:	4a17      	ldr	r2, [pc, #92]	; (8000cb0 <HAL_SPI_MspInit+0x88>)
 8000c54:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c58:	6453      	str	r3, [r2, #68]	; 0x44
 8000c5a:	4b15      	ldr	r3, [pc, #84]	; (8000cb0 <HAL_SPI_MspInit+0x88>)
 8000c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c5e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c62:	613b      	str	r3, [r7, #16]
 8000c64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c66:	2300      	movs	r3, #0
 8000c68:	60fb      	str	r3, [r7, #12]
 8000c6a:	4b11      	ldr	r3, [pc, #68]	; (8000cb0 <HAL_SPI_MspInit+0x88>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6e:	4a10      	ldr	r2, [pc, #64]	; (8000cb0 <HAL_SPI_MspInit+0x88>)
 8000c70:	f043 0301 	orr.w	r3, r3, #1
 8000c74:	6313      	str	r3, [r2, #48]	; 0x30
 8000c76:	4b0e      	ldr	r3, [pc, #56]	; (8000cb0 <HAL_SPI_MspInit+0x88>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7a:	f003 0301 	and.w	r3, r3, #1
 8000c7e:	60fb      	str	r3, [r7, #12]
 8000c80:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000c82:	23e0      	movs	r3, #224	; 0xe0
 8000c84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c86:	2302      	movs	r3, #2
 8000c88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c92:	2305      	movs	r3, #5
 8000c94:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c96:	f107 0314 	add.w	r3, r7, #20
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	4805      	ldr	r0, [pc, #20]	; (8000cb4 <HAL_SPI_MspInit+0x8c>)
 8000c9e:	f000 fe59 	bl	8001954 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000ca2:	bf00      	nop
 8000ca4:	3728      	adds	r7, #40	; 0x28
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	40013000 	.word	0x40013000
 8000cb0:	40023800 	.word	0x40023800
 8000cb4:	40020000 	.word	0x40020000

08000cb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cbc:	e7fe      	b.n	8000cbc <NMI_Handler+0x4>

08000cbe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cbe:	b480      	push	{r7}
 8000cc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cc2:	e7fe      	b.n	8000cc2 <HardFault_Handler+0x4>

08000cc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cc8:	e7fe      	b.n	8000cc8 <MemManage_Handler+0x4>

08000cca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cca:	b480      	push	{r7}
 8000ccc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cce:	e7fe      	b.n	8000cce <BusFault_Handler+0x4>

08000cd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cd4:	e7fe      	b.n	8000cd4 <UsageFault_Handler+0x4>

08000cd6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cd6:	b480      	push	{r7}
 8000cd8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cda:	bf00      	nop
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce2:	4770      	bx	lr

08000ce4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ce8:	bf00      	nop
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr

08000cf2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cf2:	b480      	push	{r7}
 8000cf4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cf6:	bf00      	nop
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr

08000d00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d04:	f000 f8d0 	bl	8000ea8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d08:	bf00      	nop
 8000d0a:	bd80      	pop	{r7, pc}

08000d0c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000d10:	4802      	ldr	r0, [pc, #8]	; (8000d1c <OTG_FS_IRQHandler+0x10>)
 8000d12:	f001 fa3f 	bl	8002194 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000d16:	bf00      	nop
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	200005bc 	.word	0x200005bc

08000d20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b086      	sub	sp, #24
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d28:	4a14      	ldr	r2, [pc, #80]	; (8000d7c <_sbrk+0x5c>)
 8000d2a:	4b15      	ldr	r3, [pc, #84]	; (8000d80 <_sbrk+0x60>)
 8000d2c:	1ad3      	subs	r3, r2, r3
 8000d2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d30:	697b      	ldr	r3, [r7, #20]
 8000d32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d34:	4b13      	ldr	r3, [pc, #76]	; (8000d84 <_sbrk+0x64>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d102      	bne.n	8000d42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d3c:	4b11      	ldr	r3, [pc, #68]	; (8000d84 <_sbrk+0x64>)
 8000d3e:	4a12      	ldr	r2, [pc, #72]	; (8000d88 <_sbrk+0x68>)
 8000d40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d42:	4b10      	ldr	r3, [pc, #64]	; (8000d84 <_sbrk+0x64>)
 8000d44:	681a      	ldr	r2, [r3, #0]
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	4413      	add	r3, r2
 8000d4a:	693a      	ldr	r2, [r7, #16]
 8000d4c:	429a      	cmp	r2, r3
 8000d4e:	d207      	bcs.n	8000d60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d50:	f006 fb72 	bl	8007438 <__errno>
 8000d54:	4603      	mov	r3, r0
 8000d56:	220c      	movs	r2, #12
 8000d58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d5e:	e009      	b.n	8000d74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d60:	4b08      	ldr	r3, [pc, #32]	; (8000d84 <_sbrk+0x64>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d66:	4b07      	ldr	r3, [pc, #28]	; (8000d84 <_sbrk+0x64>)
 8000d68:	681a      	ldr	r2, [r3, #0]
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	4413      	add	r3, r2
 8000d6e:	4a05      	ldr	r2, [pc, #20]	; (8000d84 <_sbrk+0x64>)
 8000d70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d72:	68fb      	ldr	r3, [r7, #12]
}
 8000d74:	4618      	mov	r0, r3
 8000d76:	3718      	adds	r7, #24
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	20020000 	.word	0x20020000
 8000d80:	00000400 	.word	0x00000400
 8000d84:	200001d8 	.word	0x200001d8
 8000d88:	20000a08 	.word	0x20000a08

08000d8c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d90:	4b06      	ldr	r3, [pc, #24]	; (8000dac <SystemInit+0x20>)
 8000d92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d96:	4a05      	ldr	r2, [pc, #20]	; (8000dac <SystemInit+0x20>)
 8000d98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000da0:	bf00      	nop
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr
 8000daa:	bf00      	nop
 8000dac:	e000ed00 	.word	0xe000ed00

08000db0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000db0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000de8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000db4:	480d      	ldr	r0, [pc, #52]	; (8000dec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000db6:	490e      	ldr	r1, [pc, #56]	; (8000df0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000db8:	4a0e      	ldr	r2, [pc, #56]	; (8000df4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000dba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dbc:	e002      	b.n	8000dc4 <LoopCopyDataInit>

08000dbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dc2:	3304      	adds	r3, #4

08000dc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dc8:	d3f9      	bcc.n	8000dbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dca:	4a0b      	ldr	r2, [pc, #44]	; (8000df8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000dcc:	4c0b      	ldr	r4, [pc, #44]	; (8000dfc <LoopFillZerobss+0x26>)
  movs r3, #0
 8000dce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dd0:	e001      	b.n	8000dd6 <LoopFillZerobss>

08000dd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dd4:	3204      	adds	r2, #4

08000dd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dd8:	d3fb      	bcc.n	8000dd2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000dda:	f7ff ffd7 	bl	8000d8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dde:	f006 fb31 	bl	8007444 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000de2:	f7ff fb6f 	bl	80004c4 <main>
  bx  lr    
 8000de6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000de8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000dec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000df0:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000df4:	0800756c 	.word	0x0800756c
  ldr r2, =_sbss
 8000df8:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000dfc:	20000a08 	.word	0x20000a08

08000e00 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e00:	e7fe      	b.n	8000e00 <ADC_IRQHandler>
	...

08000e04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e08:	4b0e      	ldr	r3, [pc, #56]	; (8000e44 <HAL_Init+0x40>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4a0d      	ldr	r2, [pc, #52]	; (8000e44 <HAL_Init+0x40>)
 8000e0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e12:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e14:	4b0b      	ldr	r3, [pc, #44]	; (8000e44 <HAL_Init+0x40>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a0a      	ldr	r2, [pc, #40]	; (8000e44 <HAL_Init+0x40>)
 8000e1a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e1e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e20:	4b08      	ldr	r3, [pc, #32]	; (8000e44 <HAL_Init+0x40>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4a07      	ldr	r2, [pc, #28]	; (8000e44 <HAL_Init+0x40>)
 8000e26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e2a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e2c:	2003      	movs	r0, #3
 8000e2e:	f000 fd4f 	bl	80018d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e32:	2000      	movs	r0, #0
 8000e34:	f000 f808 	bl	8000e48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e38:	f7ff fdc2 	bl	80009c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e3c:	2300      	movs	r3, #0
}
 8000e3e:	4618      	mov	r0, r3
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	40023c00 	.word	0x40023c00

08000e48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e50:	4b12      	ldr	r3, [pc, #72]	; (8000e9c <HAL_InitTick+0x54>)
 8000e52:	681a      	ldr	r2, [r3, #0]
 8000e54:	4b12      	ldr	r3, [pc, #72]	; (8000ea0 <HAL_InitTick+0x58>)
 8000e56:	781b      	ldrb	r3, [r3, #0]
 8000e58:	4619      	mov	r1, r3
 8000e5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e62:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e66:	4618      	mov	r0, r3
 8000e68:	f000 fd67 	bl	800193a <HAL_SYSTICK_Config>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d001      	beq.n	8000e76 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e72:	2301      	movs	r3, #1
 8000e74:	e00e      	b.n	8000e94 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	2b0f      	cmp	r3, #15
 8000e7a:	d80a      	bhi.n	8000e92 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	6879      	ldr	r1, [r7, #4]
 8000e80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e84:	f000 fd2f 	bl	80018e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e88:	4a06      	ldr	r2, [pc, #24]	; (8000ea4 <HAL_InitTick+0x5c>)
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	e000      	b.n	8000e94 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e92:	2301      	movs	r3, #1
}
 8000e94:	4618      	mov	r0, r3
 8000e96:	3708      	adds	r7, #8
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	20000000 	.word	0x20000000
 8000ea0:	20000008 	.word	0x20000008
 8000ea4:	20000004 	.word	0x20000004

08000ea8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000eac:	4b06      	ldr	r3, [pc, #24]	; (8000ec8 <HAL_IncTick+0x20>)
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	461a      	mov	r2, r3
 8000eb2:	4b06      	ldr	r3, [pc, #24]	; (8000ecc <HAL_IncTick+0x24>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	4413      	add	r3, r2
 8000eb8:	4a04      	ldr	r2, [pc, #16]	; (8000ecc <HAL_IncTick+0x24>)
 8000eba:	6013      	str	r3, [r2, #0]
}
 8000ebc:	bf00      	nop
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop
 8000ec8:	20000008 	.word	0x20000008
 8000ecc:	200001dc 	.word	0x200001dc

08000ed0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ed4:	4b03      	ldr	r3, [pc, #12]	; (8000ee4 <HAL_GetTick+0x14>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
}
 8000ed8:	4618      	mov	r0, r3
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop
 8000ee4:	200001dc 	.word	0x200001dc

08000ee8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b084      	sub	sp, #16
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ef0:	f7ff ffee 	bl	8000ed0 <HAL_GetTick>
 8000ef4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000f00:	d005      	beq.n	8000f0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f02:	4b0a      	ldr	r3, [pc, #40]	; (8000f2c <HAL_Delay+0x44>)
 8000f04:	781b      	ldrb	r3, [r3, #0]
 8000f06:	461a      	mov	r2, r3
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	4413      	add	r3, r2
 8000f0c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f0e:	bf00      	nop
 8000f10:	f7ff ffde 	bl	8000ed0 <HAL_GetTick>
 8000f14:	4602      	mov	r2, r0
 8000f16:	68bb      	ldr	r3, [r7, #8]
 8000f18:	1ad3      	subs	r3, r2, r3
 8000f1a:	68fa      	ldr	r2, [r7, #12]
 8000f1c:	429a      	cmp	r2, r3
 8000f1e:	d8f7      	bhi.n	8000f10 <HAL_Delay+0x28>
  {
  }
}
 8000f20:	bf00      	nop
 8000f22:	bf00      	nop
 8000f24:	3710      	adds	r7, #16
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	20000008 	.word	0x20000008

08000f30 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b084      	sub	sp, #16
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d101      	bne.n	8000f46 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000f42:	2301      	movs	r3, #1
 8000f44:	e033      	b.n	8000fae <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d109      	bne.n	8000f62 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000f4e:	6878      	ldr	r0, [r7, #4]
 8000f50:	f7ff fd5e 	bl	8000a10 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	2200      	movs	r2, #0
 8000f58:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f66:	f003 0310 	and.w	r3, r3, #16
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d118      	bne.n	8000fa0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f72:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000f76:	f023 0302 	bic.w	r3, r3, #2
 8000f7a:	f043 0202 	orr.w	r2, r3, #2
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000f82:	6878      	ldr	r0, [r7, #4]
 8000f84:	f000 fad8 	bl	8001538 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f92:	f023 0303 	bic.w	r3, r3, #3
 8000f96:	f043 0201 	orr.w	r2, r3, #1
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	641a      	str	r2, [r3, #64]	; 0x40
 8000f9e:	e001      	b.n	8000fa4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000fac:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	3710      	adds	r7, #16
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
	...

08000fb8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b085      	sub	sp, #20
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000fca:	2b01      	cmp	r3, #1
 8000fcc:	d101      	bne.n	8000fd2 <HAL_ADC_Start+0x1a>
 8000fce:	2302      	movs	r3, #2
 8000fd0:	e0b2      	b.n	8001138 <HAL_ADC_Start+0x180>
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	689b      	ldr	r3, [r3, #8]
 8000fe0:	f003 0301 	and.w	r3, r3, #1
 8000fe4:	2b01      	cmp	r3, #1
 8000fe6:	d018      	beq.n	800101a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	689a      	ldr	r2, [r3, #8]
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f042 0201 	orr.w	r2, r2, #1
 8000ff6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000ff8:	4b52      	ldr	r3, [pc, #328]	; (8001144 <HAL_ADC_Start+0x18c>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a52      	ldr	r2, [pc, #328]	; (8001148 <HAL_ADC_Start+0x190>)
 8000ffe:	fba2 2303 	umull	r2, r3, r2, r3
 8001002:	0c9a      	lsrs	r2, r3, #18
 8001004:	4613      	mov	r3, r2
 8001006:	005b      	lsls	r3, r3, #1
 8001008:	4413      	add	r3, r2
 800100a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800100c:	e002      	b.n	8001014 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800100e:	68bb      	ldr	r3, [r7, #8]
 8001010:	3b01      	subs	r3, #1
 8001012:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001014:	68bb      	ldr	r3, [r7, #8]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d1f9      	bne.n	800100e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	689b      	ldr	r3, [r3, #8]
 8001020:	f003 0301 	and.w	r3, r3, #1
 8001024:	2b01      	cmp	r3, #1
 8001026:	d17a      	bne.n	800111e <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800102c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001030:	f023 0301 	bic.w	r3, r3, #1
 8001034:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001046:	2b00      	cmp	r3, #0
 8001048:	d007      	beq.n	800105a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800104e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001052:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800105e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001062:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001066:	d106      	bne.n	8001076 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800106c:	f023 0206 	bic.w	r2, r3, #6
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	645a      	str	r2, [r3, #68]	; 0x44
 8001074:	e002      	b.n	800107c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	2200      	movs	r2, #0
 800107a:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2200      	movs	r2, #0
 8001080:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001084:	4b31      	ldr	r3, [pc, #196]	; (800114c <HAL_ADC_Start+0x194>)
 8001086:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001090:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	f003 031f 	and.w	r3, r3, #31
 800109a:	2b00      	cmp	r3, #0
 800109c:	d12a      	bne.n	80010f4 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4a2b      	ldr	r2, [pc, #172]	; (8001150 <HAL_ADC_Start+0x198>)
 80010a4:	4293      	cmp	r3, r2
 80010a6:	d015      	beq.n	80010d4 <HAL_ADC_Start+0x11c>
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4a29      	ldr	r2, [pc, #164]	; (8001154 <HAL_ADC_Start+0x19c>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d105      	bne.n	80010be <HAL_ADC_Start+0x106>
 80010b2:	4b26      	ldr	r3, [pc, #152]	; (800114c <HAL_ADC_Start+0x194>)
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	f003 031f 	and.w	r3, r3, #31
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d00a      	beq.n	80010d4 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	4a25      	ldr	r2, [pc, #148]	; (8001158 <HAL_ADC_Start+0x1a0>)
 80010c4:	4293      	cmp	r3, r2
 80010c6:	d136      	bne.n	8001136 <HAL_ADC_Start+0x17e>
 80010c8:	4b20      	ldr	r3, [pc, #128]	; (800114c <HAL_ADC_Start+0x194>)
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	f003 0310 	and.w	r3, r3, #16
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d130      	bne.n	8001136 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	689b      	ldr	r3, [r3, #8]
 80010da:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d129      	bne.n	8001136 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	689a      	ldr	r2, [r3, #8]
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80010f0:	609a      	str	r2, [r3, #8]
 80010f2:	e020      	b.n	8001136 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a15      	ldr	r2, [pc, #84]	; (8001150 <HAL_ADC_Start+0x198>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d11b      	bne.n	8001136 <HAL_ADC_Start+0x17e>
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	689b      	ldr	r3, [r3, #8]
 8001104:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001108:	2b00      	cmp	r3, #0
 800110a:	d114      	bne.n	8001136 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	689a      	ldr	r2, [r3, #8]
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800111a:	609a      	str	r2, [r3, #8]
 800111c:	e00b      	b.n	8001136 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001122:	f043 0210 	orr.w	r2, r3, #16
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800112e:	f043 0201 	orr.w	r2, r3, #1
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001136:	2300      	movs	r3, #0
}
 8001138:	4618      	mov	r0, r3
 800113a:	3714      	adds	r7, #20
 800113c:	46bd      	mov	sp, r7
 800113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001142:	4770      	bx	lr
 8001144:	20000000 	.word	0x20000000
 8001148:	431bde83 	.word	0x431bde83
 800114c:	40012300 	.word	0x40012300
 8001150:	40012000 	.word	0x40012000
 8001154:	40012100 	.word	0x40012100
 8001158:	40012200 	.word	0x40012200

0800115c <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 800115c:	b480      	push	{r7}
 800115e:	b083      	sub	sp, #12
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800116a:	2b01      	cmp	r3, #1
 800116c:	d101      	bne.n	8001172 <HAL_ADC_Stop+0x16>
 800116e:	2302      	movs	r3, #2
 8001170:	e021      	b.n	80011b6 <HAL_ADC_Stop+0x5a>
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	2201      	movs	r2, #1
 8001176:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	689a      	ldr	r2, [r3, #8]
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f022 0201 	bic.w	r2, r2, #1
 8001188:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	689b      	ldr	r3, [r3, #8]
 8001190:	f003 0301 	and.w	r3, r3, #1
 8001194:	2b00      	cmp	r3, #0
 8001196:	d109      	bne.n	80011ac <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800119c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80011a0:	f023 0301 	bic.w	r3, r3, #1
 80011a4:	f043 0201 	orr.w	r2, r3, #1
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2200      	movs	r2, #0
 80011b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80011b4:	2300      	movs	r3, #0
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	370c      	adds	r7, #12
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr

080011c2 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80011c2:	b580      	push	{r7, lr}
 80011c4:	b084      	sub	sp, #16
 80011c6:	af00      	add	r7, sp, #0
 80011c8:	6078      	str	r0, [r7, #4]
 80011ca:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80011cc:	2300      	movs	r3, #0
 80011ce:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	689b      	ldr	r3, [r3, #8]
 80011d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011de:	d113      	bne.n	8001208 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	689b      	ldr	r3, [r3, #8]
 80011e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80011ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80011ee:	d10b      	bne.n	8001208 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f4:	f043 0220 	orr.w	r2, r3, #32
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2200      	movs	r2, #0
 8001200:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001204:	2301      	movs	r3, #1
 8001206:	e063      	b.n	80012d0 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001208:	f7ff fe62 	bl	8000ed0 <HAL_GetTick>
 800120c:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800120e:	e021      	b.n	8001254 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001216:	d01d      	beq.n	8001254 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d007      	beq.n	800122e <HAL_ADC_PollForConversion+0x6c>
 800121e:	f7ff fe57 	bl	8000ed0 <HAL_GetTick>
 8001222:	4602      	mov	r2, r0
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	1ad3      	subs	r3, r2, r3
 8001228:	683a      	ldr	r2, [r7, #0]
 800122a:	429a      	cmp	r2, r3
 800122c:	d212      	bcs.n	8001254 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f003 0302 	and.w	r3, r3, #2
 8001238:	2b02      	cmp	r3, #2
 800123a:	d00b      	beq.n	8001254 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001240:	f043 0204 	orr.w	r2, r3, #4
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	2200      	movs	r2, #0
 800124c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001250:	2303      	movs	r3, #3
 8001252:	e03d      	b.n	80012d0 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f003 0302 	and.w	r3, r3, #2
 800125e:	2b02      	cmp	r3, #2
 8001260:	d1d6      	bne.n	8001210 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f06f 0212 	mvn.w	r2, #18
 800126a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001270:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	689b      	ldr	r3, [r3, #8]
 800127e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001282:	2b00      	cmp	r3, #0
 8001284:	d123      	bne.n	80012ce <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800128a:	2b00      	cmp	r3, #0
 800128c:	d11f      	bne.n	80012ce <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001294:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001298:	2b00      	cmp	r3, #0
 800129a:	d006      	beq.n	80012aa <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	689b      	ldr	r3, [r3, #8]
 80012a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d111      	bne.n	80012ce <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d105      	bne.n	80012ce <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c6:	f043 0201 	orr.w	r2, r3, #1
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80012ce:	2300      	movs	r3, #0
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	3710      	adds	r7, #16
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}

080012d8 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80012d8:	b480      	push	{r7}
 80012da:	b083      	sub	sp, #12
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	370c      	adds	r7, #12
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr
	...

080012f4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b085      	sub	sp, #20
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
 80012fc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80012fe:	2300      	movs	r3, #0
 8001300:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001308:	2b01      	cmp	r3, #1
 800130a:	d101      	bne.n	8001310 <HAL_ADC_ConfigChannel+0x1c>
 800130c:	2302      	movs	r3, #2
 800130e:	e105      	b.n	800151c <HAL_ADC_ConfigChannel+0x228>
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	2201      	movs	r2, #1
 8001314:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	2b09      	cmp	r3, #9
 800131e:	d925      	bls.n	800136c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	68d9      	ldr	r1, [r3, #12]
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	b29b      	uxth	r3, r3
 800132c:	461a      	mov	r2, r3
 800132e:	4613      	mov	r3, r2
 8001330:	005b      	lsls	r3, r3, #1
 8001332:	4413      	add	r3, r2
 8001334:	3b1e      	subs	r3, #30
 8001336:	2207      	movs	r2, #7
 8001338:	fa02 f303 	lsl.w	r3, r2, r3
 800133c:	43da      	mvns	r2, r3
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	400a      	ands	r2, r1
 8001344:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	68d9      	ldr	r1, [r3, #12]
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	689a      	ldr	r2, [r3, #8]
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	b29b      	uxth	r3, r3
 8001356:	4618      	mov	r0, r3
 8001358:	4603      	mov	r3, r0
 800135a:	005b      	lsls	r3, r3, #1
 800135c:	4403      	add	r3, r0
 800135e:	3b1e      	subs	r3, #30
 8001360:	409a      	lsls	r2, r3
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	430a      	orrs	r2, r1
 8001368:	60da      	str	r2, [r3, #12]
 800136a:	e022      	b.n	80013b2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	6919      	ldr	r1, [r3, #16]
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	b29b      	uxth	r3, r3
 8001378:	461a      	mov	r2, r3
 800137a:	4613      	mov	r3, r2
 800137c:	005b      	lsls	r3, r3, #1
 800137e:	4413      	add	r3, r2
 8001380:	2207      	movs	r2, #7
 8001382:	fa02 f303 	lsl.w	r3, r2, r3
 8001386:	43da      	mvns	r2, r3
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	400a      	ands	r2, r1
 800138e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	6919      	ldr	r1, [r3, #16]
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	689a      	ldr	r2, [r3, #8]
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	b29b      	uxth	r3, r3
 80013a0:	4618      	mov	r0, r3
 80013a2:	4603      	mov	r3, r0
 80013a4:	005b      	lsls	r3, r3, #1
 80013a6:	4403      	add	r3, r0
 80013a8:	409a      	lsls	r2, r3
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	430a      	orrs	r2, r1
 80013b0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	2b06      	cmp	r3, #6
 80013b8:	d824      	bhi.n	8001404 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	685a      	ldr	r2, [r3, #4]
 80013c4:	4613      	mov	r3, r2
 80013c6:	009b      	lsls	r3, r3, #2
 80013c8:	4413      	add	r3, r2
 80013ca:	3b05      	subs	r3, #5
 80013cc:	221f      	movs	r2, #31
 80013ce:	fa02 f303 	lsl.w	r3, r2, r3
 80013d2:	43da      	mvns	r2, r3
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	400a      	ands	r2, r1
 80013da:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	b29b      	uxth	r3, r3
 80013e8:	4618      	mov	r0, r3
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	685a      	ldr	r2, [r3, #4]
 80013ee:	4613      	mov	r3, r2
 80013f0:	009b      	lsls	r3, r3, #2
 80013f2:	4413      	add	r3, r2
 80013f4:	3b05      	subs	r3, #5
 80013f6:	fa00 f203 	lsl.w	r2, r0, r3
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	430a      	orrs	r2, r1
 8001400:	635a      	str	r2, [r3, #52]	; 0x34
 8001402:	e04c      	b.n	800149e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	2b0c      	cmp	r3, #12
 800140a:	d824      	bhi.n	8001456 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	685a      	ldr	r2, [r3, #4]
 8001416:	4613      	mov	r3, r2
 8001418:	009b      	lsls	r3, r3, #2
 800141a:	4413      	add	r3, r2
 800141c:	3b23      	subs	r3, #35	; 0x23
 800141e:	221f      	movs	r2, #31
 8001420:	fa02 f303 	lsl.w	r3, r2, r3
 8001424:	43da      	mvns	r2, r3
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	400a      	ands	r2, r1
 800142c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	b29b      	uxth	r3, r3
 800143a:	4618      	mov	r0, r3
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	685a      	ldr	r2, [r3, #4]
 8001440:	4613      	mov	r3, r2
 8001442:	009b      	lsls	r3, r3, #2
 8001444:	4413      	add	r3, r2
 8001446:	3b23      	subs	r3, #35	; 0x23
 8001448:	fa00 f203 	lsl.w	r2, r0, r3
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	430a      	orrs	r2, r1
 8001452:	631a      	str	r2, [r3, #48]	; 0x30
 8001454:	e023      	b.n	800149e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	685a      	ldr	r2, [r3, #4]
 8001460:	4613      	mov	r3, r2
 8001462:	009b      	lsls	r3, r3, #2
 8001464:	4413      	add	r3, r2
 8001466:	3b41      	subs	r3, #65	; 0x41
 8001468:	221f      	movs	r2, #31
 800146a:	fa02 f303 	lsl.w	r3, r2, r3
 800146e:	43da      	mvns	r2, r3
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	400a      	ands	r2, r1
 8001476:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	b29b      	uxth	r3, r3
 8001484:	4618      	mov	r0, r3
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	685a      	ldr	r2, [r3, #4]
 800148a:	4613      	mov	r3, r2
 800148c:	009b      	lsls	r3, r3, #2
 800148e:	4413      	add	r3, r2
 8001490:	3b41      	subs	r3, #65	; 0x41
 8001492:	fa00 f203 	lsl.w	r2, r0, r3
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	430a      	orrs	r2, r1
 800149c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800149e:	4b22      	ldr	r3, [pc, #136]	; (8001528 <HAL_ADC_ConfigChannel+0x234>)
 80014a0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4a21      	ldr	r2, [pc, #132]	; (800152c <HAL_ADC_ConfigChannel+0x238>)
 80014a8:	4293      	cmp	r3, r2
 80014aa:	d109      	bne.n	80014c0 <HAL_ADC_ConfigChannel+0x1cc>
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	2b12      	cmp	r3, #18
 80014b2:	d105      	bne.n	80014c0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a19      	ldr	r2, [pc, #100]	; (800152c <HAL_ADC_ConfigChannel+0x238>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d123      	bne.n	8001512 <HAL_ADC_ConfigChannel+0x21e>
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	2b10      	cmp	r3, #16
 80014d0:	d003      	beq.n	80014da <HAL_ADC_ConfigChannel+0x1e6>
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	2b11      	cmp	r3, #17
 80014d8:	d11b      	bne.n	8001512 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	2b10      	cmp	r3, #16
 80014ec:	d111      	bne.n	8001512 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80014ee:	4b10      	ldr	r3, [pc, #64]	; (8001530 <HAL_ADC_ConfigChannel+0x23c>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4a10      	ldr	r2, [pc, #64]	; (8001534 <HAL_ADC_ConfigChannel+0x240>)
 80014f4:	fba2 2303 	umull	r2, r3, r2, r3
 80014f8:	0c9a      	lsrs	r2, r3, #18
 80014fa:	4613      	mov	r3, r2
 80014fc:	009b      	lsls	r3, r3, #2
 80014fe:	4413      	add	r3, r2
 8001500:	005b      	lsls	r3, r3, #1
 8001502:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001504:	e002      	b.n	800150c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001506:	68bb      	ldr	r3, [r7, #8]
 8001508:	3b01      	subs	r3, #1
 800150a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800150c:	68bb      	ldr	r3, [r7, #8]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d1f9      	bne.n	8001506 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2200      	movs	r2, #0
 8001516:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800151a:	2300      	movs	r3, #0
}
 800151c:	4618      	mov	r0, r3
 800151e:	3714      	adds	r7, #20
 8001520:	46bd      	mov	sp, r7
 8001522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001526:	4770      	bx	lr
 8001528:	40012300 	.word	0x40012300
 800152c:	40012000 	.word	0x40012000
 8001530:	20000000 	.word	0x20000000
 8001534:	431bde83 	.word	0x431bde83

08001538 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001538:	b480      	push	{r7}
 800153a:	b085      	sub	sp, #20
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001540:	4b79      	ldr	r3, [pc, #484]	; (8001728 <ADC_Init+0x1f0>)
 8001542:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	685a      	ldr	r2, [r3, #4]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	431a      	orrs	r2, r3
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	685a      	ldr	r2, [r3, #4]
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800156c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	6859      	ldr	r1, [r3, #4]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	691b      	ldr	r3, [r3, #16]
 8001578:	021a      	lsls	r2, r3, #8
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	430a      	orrs	r2, r1
 8001580:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	685a      	ldr	r2, [r3, #4]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001590:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	6859      	ldr	r1, [r3, #4]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	689a      	ldr	r2, [r3, #8]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	430a      	orrs	r2, r1
 80015a2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	689a      	ldr	r2, [r3, #8]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80015b2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	6899      	ldr	r1, [r3, #8]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	68da      	ldr	r2, [r3, #12]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	430a      	orrs	r2, r1
 80015c4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015ca:	4a58      	ldr	r2, [pc, #352]	; (800172c <ADC_Init+0x1f4>)
 80015cc:	4293      	cmp	r3, r2
 80015ce:	d022      	beq.n	8001616 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	689a      	ldr	r2, [r3, #8]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80015de:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	6899      	ldr	r1, [r3, #8]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	430a      	orrs	r2, r1
 80015f0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	689a      	ldr	r2, [r3, #8]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001600:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	6899      	ldr	r1, [r3, #8]
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	430a      	orrs	r2, r1
 8001612:	609a      	str	r2, [r3, #8]
 8001614:	e00f      	b.n	8001636 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	689a      	ldr	r2, [r3, #8]
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001624:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	689a      	ldr	r2, [r3, #8]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001634:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	689a      	ldr	r2, [r3, #8]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f022 0202 	bic.w	r2, r2, #2
 8001644:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	6899      	ldr	r1, [r3, #8]
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	7e1b      	ldrb	r3, [r3, #24]
 8001650:	005a      	lsls	r2, r3, #1
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	430a      	orrs	r2, r1
 8001658:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d01b      	beq.n	800169c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	685a      	ldr	r2, [r3, #4]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001672:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	685a      	ldr	r2, [r3, #4]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001682:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	6859      	ldr	r1, [r3, #4]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800168e:	3b01      	subs	r3, #1
 8001690:	035a      	lsls	r2, r3, #13
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	430a      	orrs	r2, r1
 8001698:	605a      	str	r2, [r3, #4]
 800169a:	e007      	b.n	80016ac <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	685a      	ldr	r2, [r3, #4]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80016aa:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80016ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	69db      	ldr	r3, [r3, #28]
 80016c6:	3b01      	subs	r3, #1
 80016c8:	051a      	lsls	r2, r3, #20
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	430a      	orrs	r2, r1
 80016d0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	689a      	ldr	r2, [r3, #8]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80016e0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	6899      	ldr	r1, [r3, #8]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80016ee:	025a      	lsls	r2, r3, #9
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	430a      	orrs	r2, r1
 80016f6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	689a      	ldr	r2, [r3, #8]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001706:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	6899      	ldr	r1, [r3, #8]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	695b      	ldr	r3, [r3, #20]
 8001712:	029a      	lsls	r2, r3, #10
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	430a      	orrs	r2, r1
 800171a:	609a      	str	r2, [r3, #8]
}
 800171c:	bf00      	nop
 800171e:	3714      	adds	r7, #20
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr
 8001728:	40012300 	.word	0x40012300
 800172c:	0f000001 	.word	0x0f000001

08001730 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001730:	b480      	push	{r7}
 8001732:	b085      	sub	sp, #20
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	f003 0307 	and.w	r3, r3, #7
 800173e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001740:	4b0c      	ldr	r3, [pc, #48]	; (8001774 <__NVIC_SetPriorityGrouping+0x44>)
 8001742:	68db      	ldr	r3, [r3, #12]
 8001744:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001746:	68ba      	ldr	r2, [r7, #8]
 8001748:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800174c:	4013      	ands	r3, r2
 800174e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001754:	68bb      	ldr	r3, [r7, #8]
 8001756:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001758:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800175c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001760:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001762:	4a04      	ldr	r2, [pc, #16]	; (8001774 <__NVIC_SetPriorityGrouping+0x44>)
 8001764:	68bb      	ldr	r3, [r7, #8]
 8001766:	60d3      	str	r3, [r2, #12]
}
 8001768:	bf00      	nop
 800176a:	3714      	adds	r7, #20
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr
 8001774:	e000ed00 	.word	0xe000ed00

08001778 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800177c:	4b04      	ldr	r3, [pc, #16]	; (8001790 <__NVIC_GetPriorityGrouping+0x18>)
 800177e:	68db      	ldr	r3, [r3, #12]
 8001780:	0a1b      	lsrs	r3, r3, #8
 8001782:	f003 0307 	and.w	r3, r3, #7
}
 8001786:	4618      	mov	r0, r3
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr
 8001790:	e000ed00 	.word	0xe000ed00

08001794 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001794:	b480      	push	{r7}
 8001796:	b083      	sub	sp, #12
 8001798:	af00      	add	r7, sp, #0
 800179a:	4603      	mov	r3, r0
 800179c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800179e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	db0b      	blt.n	80017be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017a6:	79fb      	ldrb	r3, [r7, #7]
 80017a8:	f003 021f 	and.w	r2, r3, #31
 80017ac:	4907      	ldr	r1, [pc, #28]	; (80017cc <__NVIC_EnableIRQ+0x38>)
 80017ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017b2:	095b      	lsrs	r3, r3, #5
 80017b4:	2001      	movs	r0, #1
 80017b6:	fa00 f202 	lsl.w	r2, r0, r2
 80017ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017be:	bf00      	nop
 80017c0:	370c      	adds	r7, #12
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr
 80017ca:	bf00      	nop
 80017cc:	e000e100 	.word	0xe000e100

080017d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b083      	sub	sp, #12
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	4603      	mov	r3, r0
 80017d8:	6039      	str	r1, [r7, #0]
 80017da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	db0a      	blt.n	80017fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	b2da      	uxtb	r2, r3
 80017e8:	490c      	ldr	r1, [pc, #48]	; (800181c <__NVIC_SetPriority+0x4c>)
 80017ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ee:	0112      	lsls	r2, r2, #4
 80017f0:	b2d2      	uxtb	r2, r2
 80017f2:	440b      	add	r3, r1
 80017f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017f8:	e00a      	b.n	8001810 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	b2da      	uxtb	r2, r3
 80017fe:	4908      	ldr	r1, [pc, #32]	; (8001820 <__NVIC_SetPriority+0x50>)
 8001800:	79fb      	ldrb	r3, [r7, #7]
 8001802:	f003 030f 	and.w	r3, r3, #15
 8001806:	3b04      	subs	r3, #4
 8001808:	0112      	lsls	r2, r2, #4
 800180a:	b2d2      	uxtb	r2, r2
 800180c:	440b      	add	r3, r1
 800180e:	761a      	strb	r2, [r3, #24]
}
 8001810:	bf00      	nop
 8001812:	370c      	adds	r7, #12
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr
 800181c:	e000e100 	.word	0xe000e100
 8001820:	e000ed00 	.word	0xe000ed00

08001824 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001824:	b480      	push	{r7}
 8001826:	b089      	sub	sp, #36	; 0x24
 8001828:	af00      	add	r7, sp, #0
 800182a:	60f8      	str	r0, [r7, #12]
 800182c:	60b9      	str	r1, [r7, #8]
 800182e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	f003 0307 	and.w	r3, r3, #7
 8001836:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001838:	69fb      	ldr	r3, [r7, #28]
 800183a:	f1c3 0307 	rsb	r3, r3, #7
 800183e:	2b04      	cmp	r3, #4
 8001840:	bf28      	it	cs
 8001842:	2304      	movcs	r3, #4
 8001844:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001846:	69fb      	ldr	r3, [r7, #28]
 8001848:	3304      	adds	r3, #4
 800184a:	2b06      	cmp	r3, #6
 800184c:	d902      	bls.n	8001854 <NVIC_EncodePriority+0x30>
 800184e:	69fb      	ldr	r3, [r7, #28]
 8001850:	3b03      	subs	r3, #3
 8001852:	e000      	b.n	8001856 <NVIC_EncodePriority+0x32>
 8001854:	2300      	movs	r3, #0
 8001856:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001858:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800185c:	69bb      	ldr	r3, [r7, #24]
 800185e:	fa02 f303 	lsl.w	r3, r2, r3
 8001862:	43da      	mvns	r2, r3
 8001864:	68bb      	ldr	r3, [r7, #8]
 8001866:	401a      	ands	r2, r3
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800186c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	fa01 f303 	lsl.w	r3, r1, r3
 8001876:	43d9      	mvns	r1, r3
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800187c:	4313      	orrs	r3, r2
         );
}
 800187e:	4618      	mov	r0, r3
 8001880:	3724      	adds	r7, #36	; 0x24
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr
	...

0800188c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b082      	sub	sp, #8
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	3b01      	subs	r3, #1
 8001898:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800189c:	d301      	bcc.n	80018a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800189e:	2301      	movs	r3, #1
 80018a0:	e00f      	b.n	80018c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018a2:	4a0a      	ldr	r2, [pc, #40]	; (80018cc <SysTick_Config+0x40>)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	3b01      	subs	r3, #1
 80018a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018aa:	210f      	movs	r1, #15
 80018ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80018b0:	f7ff ff8e 	bl	80017d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018b4:	4b05      	ldr	r3, [pc, #20]	; (80018cc <SysTick_Config+0x40>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018ba:	4b04      	ldr	r3, [pc, #16]	; (80018cc <SysTick_Config+0x40>)
 80018bc:	2207      	movs	r2, #7
 80018be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018c0:	2300      	movs	r3, #0
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	3708      	adds	r7, #8
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	e000e010 	.word	0xe000e010

080018d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b082      	sub	sp, #8
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018d8:	6878      	ldr	r0, [r7, #4]
 80018da:	f7ff ff29 	bl	8001730 <__NVIC_SetPriorityGrouping>
}
 80018de:	bf00      	nop
 80018e0:	3708      	adds	r7, #8
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}

080018e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018e6:	b580      	push	{r7, lr}
 80018e8:	b086      	sub	sp, #24
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	4603      	mov	r3, r0
 80018ee:	60b9      	str	r1, [r7, #8]
 80018f0:	607a      	str	r2, [r7, #4]
 80018f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018f4:	2300      	movs	r3, #0
 80018f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018f8:	f7ff ff3e 	bl	8001778 <__NVIC_GetPriorityGrouping>
 80018fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018fe:	687a      	ldr	r2, [r7, #4]
 8001900:	68b9      	ldr	r1, [r7, #8]
 8001902:	6978      	ldr	r0, [r7, #20]
 8001904:	f7ff ff8e 	bl	8001824 <NVIC_EncodePriority>
 8001908:	4602      	mov	r2, r0
 800190a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800190e:	4611      	mov	r1, r2
 8001910:	4618      	mov	r0, r3
 8001912:	f7ff ff5d 	bl	80017d0 <__NVIC_SetPriority>
}
 8001916:	bf00      	nop
 8001918:	3718      	adds	r7, #24
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}

0800191e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800191e:	b580      	push	{r7, lr}
 8001920:	b082      	sub	sp, #8
 8001922:	af00      	add	r7, sp, #0
 8001924:	4603      	mov	r3, r0
 8001926:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001928:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800192c:	4618      	mov	r0, r3
 800192e:	f7ff ff31 	bl	8001794 <__NVIC_EnableIRQ>
}
 8001932:	bf00      	nop
 8001934:	3708      	adds	r7, #8
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}

0800193a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800193a:	b580      	push	{r7, lr}
 800193c:	b082      	sub	sp, #8
 800193e:	af00      	add	r7, sp, #0
 8001940:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001942:	6878      	ldr	r0, [r7, #4]
 8001944:	f7ff ffa2 	bl	800188c <SysTick_Config>
 8001948:	4603      	mov	r3, r0
}
 800194a:	4618      	mov	r0, r3
 800194c:	3708      	adds	r7, #8
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
	...

08001954 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001954:	b480      	push	{r7}
 8001956:	b089      	sub	sp, #36	; 0x24
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
 800195c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800195e:	2300      	movs	r3, #0
 8001960:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001962:	2300      	movs	r3, #0
 8001964:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001966:	2300      	movs	r3, #0
 8001968:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800196a:	2300      	movs	r3, #0
 800196c:	61fb      	str	r3, [r7, #28]
 800196e:	e16b      	b.n	8001c48 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001970:	2201      	movs	r2, #1
 8001972:	69fb      	ldr	r3, [r7, #28]
 8001974:	fa02 f303 	lsl.w	r3, r2, r3
 8001978:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	697a      	ldr	r2, [r7, #20]
 8001980:	4013      	ands	r3, r2
 8001982:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001984:	693a      	ldr	r2, [r7, #16]
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	429a      	cmp	r2, r3
 800198a:	f040 815a 	bne.w	8001c42 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	f003 0303 	and.w	r3, r3, #3
 8001996:	2b01      	cmp	r3, #1
 8001998:	d005      	beq.n	80019a6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019a2:	2b02      	cmp	r3, #2
 80019a4:	d130      	bne.n	8001a08 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	689b      	ldr	r3, [r3, #8]
 80019aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80019ac:	69fb      	ldr	r3, [r7, #28]
 80019ae:	005b      	lsls	r3, r3, #1
 80019b0:	2203      	movs	r2, #3
 80019b2:	fa02 f303 	lsl.w	r3, r2, r3
 80019b6:	43db      	mvns	r3, r3
 80019b8:	69ba      	ldr	r2, [r7, #24]
 80019ba:	4013      	ands	r3, r2
 80019bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	68da      	ldr	r2, [r3, #12]
 80019c2:	69fb      	ldr	r3, [r7, #28]
 80019c4:	005b      	lsls	r3, r3, #1
 80019c6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ca:	69ba      	ldr	r2, [r7, #24]
 80019cc:	4313      	orrs	r3, r2
 80019ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	69ba      	ldr	r2, [r7, #24]
 80019d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019dc:	2201      	movs	r2, #1
 80019de:	69fb      	ldr	r3, [r7, #28]
 80019e0:	fa02 f303 	lsl.w	r3, r2, r3
 80019e4:	43db      	mvns	r3, r3
 80019e6:	69ba      	ldr	r2, [r7, #24]
 80019e8:	4013      	ands	r3, r2
 80019ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	091b      	lsrs	r3, r3, #4
 80019f2:	f003 0201 	and.w	r2, r3, #1
 80019f6:	69fb      	ldr	r3, [r7, #28]
 80019f8:	fa02 f303 	lsl.w	r3, r2, r3
 80019fc:	69ba      	ldr	r2, [r7, #24]
 80019fe:	4313      	orrs	r3, r2
 8001a00:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	69ba      	ldr	r2, [r7, #24]
 8001a06:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	f003 0303 	and.w	r3, r3, #3
 8001a10:	2b03      	cmp	r3, #3
 8001a12:	d017      	beq.n	8001a44 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	68db      	ldr	r3, [r3, #12]
 8001a18:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a1a:	69fb      	ldr	r3, [r7, #28]
 8001a1c:	005b      	lsls	r3, r3, #1
 8001a1e:	2203      	movs	r2, #3
 8001a20:	fa02 f303 	lsl.w	r3, r2, r3
 8001a24:	43db      	mvns	r3, r3
 8001a26:	69ba      	ldr	r2, [r7, #24]
 8001a28:	4013      	ands	r3, r2
 8001a2a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	689a      	ldr	r2, [r3, #8]
 8001a30:	69fb      	ldr	r3, [r7, #28]
 8001a32:	005b      	lsls	r3, r3, #1
 8001a34:	fa02 f303 	lsl.w	r3, r2, r3
 8001a38:	69ba      	ldr	r2, [r7, #24]
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	69ba      	ldr	r2, [r7, #24]
 8001a42:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	f003 0303 	and.w	r3, r3, #3
 8001a4c:	2b02      	cmp	r3, #2
 8001a4e:	d123      	bne.n	8001a98 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a50:	69fb      	ldr	r3, [r7, #28]
 8001a52:	08da      	lsrs	r2, r3, #3
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	3208      	adds	r2, #8
 8001a58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a5e:	69fb      	ldr	r3, [r7, #28]
 8001a60:	f003 0307 	and.w	r3, r3, #7
 8001a64:	009b      	lsls	r3, r3, #2
 8001a66:	220f      	movs	r2, #15
 8001a68:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6c:	43db      	mvns	r3, r3
 8001a6e:	69ba      	ldr	r2, [r7, #24]
 8001a70:	4013      	ands	r3, r2
 8001a72:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	691a      	ldr	r2, [r3, #16]
 8001a78:	69fb      	ldr	r3, [r7, #28]
 8001a7a:	f003 0307 	and.w	r3, r3, #7
 8001a7e:	009b      	lsls	r3, r3, #2
 8001a80:	fa02 f303 	lsl.w	r3, r2, r3
 8001a84:	69ba      	ldr	r2, [r7, #24]
 8001a86:	4313      	orrs	r3, r2
 8001a88:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a8a:	69fb      	ldr	r3, [r7, #28]
 8001a8c:	08da      	lsrs	r2, r3, #3
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	3208      	adds	r2, #8
 8001a92:	69b9      	ldr	r1, [r7, #24]
 8001a94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	005b      	lsls	r3, r3, #1
 8001aa2:	2203      	movs	r2, #3
 8001aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa8:	43db      	mvns	r3, r3
 8001aaa:	69ba      	ldr	r2, [r7, #24]
 8001aac:	4013      	ands	r3, r2
 8001aae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	f003 0203 	and.w	r2, r3, #3
 8001ab8:	69fb      	ldr	r3, [r7, #28]
 8001aba:	005b      	lsls	r3, r3, #1
 8001abc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac0:	69ba      	ldr	r2, [r7, #24]
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	69ba      	ldr	r2, [r7, #24]
 8001aca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	f000 80b4 	beq.w	8001c42 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ada:	2300      	movs	r3, #0
 8001adc:	60fb      	str	r3, [r7, #12]
 8001ade:	4b60      	ldr	r3, [pc, #384]	; (8001c60 <HAL_GPIO_Init+0x30c>)
 8001ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ae2:	4a5f      	ldr	r2, [pc, #380]	; (8001c60 <HAL_GPIO_Init+0x30c>)
 8001ae4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ae8:	6453      	str	r3, [r2, #68]	; 0x44
 8001aea:	4b5d      	ldr	r3, [pc, #372]	; (8001c60 <HAL_GPIO_Init+0x30c>)
 8001aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001af2:	60fb      	str	r3, [r7, #12]
 8001af4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001af6:	4a5b      	ldr	r2, [pc, #364]	; (8001c64 <HAL_GPIO_Init+0x310>)
 8001af8:	69fb      	ldr	r3, [r7, #28]
 8001afa:	089b      	lsrs	r3, r3, #2
 8001afc:	3302      	adds	r3, #2
 8001afe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b02:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b04:	69fb      	ldr	r3, [r7, #28]
 8001b06:	f003 0303 	and.w	r3, r3, #3
 8001b0a:	009b      	lsls	r3, r3, #2
 8001b0c:	220f      	movs	r2, #15
 8001b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b12:	43db      	mvns	r3, r3
 8001b14:	69ba      	ldr	r2, [r7, #24]
 8001b16:	4013      	ands	r3, r2
 8001b18:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	4a52      	ldr	r2, [pc, #328]	; (8001c68 <HAL_GPIO_Init+0x314>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d02b      	beq.n	8001b7a <HAL_GPIO_Init+0x226>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	4a51      	ldr	r2, [pc, #324]	; (8001c6c <HAL_GPIO_Init+0x318>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d025      	beq.n	8001b76 <HAL_GPIO_Init+0x222>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	4a50      	ldr	r2, [pc, #320]	; (8001c70 <HAL_GPIO_Init+0x31c>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d01f      	beq.n	8001b72 <HAL_GPIO_Init+0x21e>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	4a4f      	ldr	r2, [pc, #316]	; (8001c74 <HAL_GPIO_Init+0x320>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d019      	beq.n	8001b6e <HAL_GPIO_Init+0x21a>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	4a4e      	ldr	r2, [pc, #312]	; (8001c78 <HAL_GPIO_Init+0x324>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d013      	beq.n	8001b6a <HAL_GPIO_Init+0x216>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	4a4d      	ldr	r2, [pc, #308]	; (8001c7c <HAL_GPIO_Init+0x328>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d00d      	beq.n	8001b66 <HAL_GPIO_Init+0x212>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	4a4c      	ldr	r2, [pc, #304]	; (8001c80 <HAL_GPIO_Init+0x32c>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d007      	beq.n	8001b62 <HAL_GPIO_Init+0x20e>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	4a4b      	ldr	r2, [pc, #300]	; (8001c84 <HAL_GPIO_Init+0x330>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d101      	bne.n	8001b5e <HAL_GPIO_Init+0x20a>
 8001b5a:	2307      	movs	r3, #7
 8001b5c:	e00e      	b.n	8001b7c <HAL_GPIO_Init+0x228>
 8001b5e:	2308      	movs	r3, #8
 8001b60:	e00c      	b.n	8001b7c <HAL_GPIO_Init+0x228>
 8001b62:	2306      	movs	r3, #6
 8001b64:	e00a      	b.n	8001b7c <HAL_GPIO_Init+0x228>
 8001b66:	2305      	movs	r3, #5
 8001b68:	e008      	b.n	8001b7c <HAL_GPIO_Init+0x228>
 8001b6a:	2304      	movs	r3, #4
 8001b6c:	e006      	b.n	8001b7c <HAL_GPIO_Init+0x228>
 8001b6e:	2303      	movs	r3, #3
 8001b70:	e004      	b.n	8001b7c <HAL_GPIO_Init+0x228>
 8001b72:	2302      	movs	r3, #2
 8001b74:	e002      	b.n	8001b7c <HAL_GPIO_Init+0x228>
 8001b76:	2301      	movs	r3, #1
 8001b78:	e000      	b.n	8001b7c <HAL_GPIO_Init+0x228>
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	69fa      	ldr	r2, [r7, #28]
 8001b7e:	f002 0203 	and.w	r2, r2, #3
 8001b82:	0092      	lsls	r2, r2, #2
 8001b84:	4093      	lsls	r3, r2
 8001b86:	69ba      	ldr	r2, [r7, #24]
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b8c:	4935      	ldr	r1, [pc, #212]	; (8001c64 <HAL_GPIO_Init+0x310>)
 8001b8e:	69fb      	ldr	r3, [r7, #28]
 8001b90:	089b      	lsrs	r3, r3, #2
 8001b92:	3302      	adds	r3, #2
 8001b94:	69ba      	ldr	r2, [r7, #24]
 8001b96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b9a:	4b3b      	ldr	r3, [pc, #236]	; (8001c88 <HAL_GPIO_Init+0x334>)
 8001b9c:	689b      	ldr	r3, [r3, #8]
 8001b9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ba0:	693b      	ldr	r3, [r7, #16]
 8001ba2:	43db      	mvns	r3, r3
 8001ba4:	69ba      	ldr	r2, [r7, #24]
 8001ba6:	4013      	ands	r3, r2
 8001ba8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d003      	beq.n	8001bbe <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001bb6:	69ba      	ldr	r2, [r7, #24]
 8001bb8:	693b      	ldr	r3, [r7, #16]
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001bbe:	4a32      	ldr	r2, [pc, #200]	; (8001c88 <HAL_GPIO_Init+0x334>)
 8001bc0:	69bb      	ldr	r3, [r7, #24]
 8001bc2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001bc4:	4b30      	ldr	r3, [pc, #192]	; (8001c88 <HAL_GPIO_Init+0x334>)
 8001bc6:	68db      	ldr	r3, [r3, #12]
 8001bc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	43db      	mvns	r3, r3
 8001bce:	69ba      	ldr	r2, [r7, #24]
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d003      	beq.n	8001be8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001be0:	69ba      	ldr	r2, [r7, #24]
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	4313      	orrs	r3, r2
 8001be6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001be8:	4a27      	ldr	r2, [pc, #156]	; (8001c88 <HAL_GPIO_Init+0x334>)
 8001bea:	69bb      	ldr	r3, [r7, #24]
 8001bec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001bee:	4b26      	ldr	r3, [pc, #152]	; (8001c88 <HAL_GPIO_Init+0x334>)
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	43db      	mvns	r3, r3
 8001bf8:	69ba      	ldr	r2, [r7, #24]
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d003      	beq.n	8001c12 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001c0a:	69ba      	ldr	r2, [r7, #24]
 8001c0c:	693b      	ldr	r3, [r7, #16]
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c12:	4a1d      	ldr	r2, [pc, #116]	; (8001c88 <HAL_GPIO_Init+0x334>)
 8001c14:	69bb      	ldr	r3, [r7, #24]
 8001c16:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c18:	4b1b      	ldr	r3, [pc, #108]	; (8001c88 <HAL_GPIO_Init+0x334>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	43db      	mvns	r3, r3
 8001c22:	69ba      	ldr	r2, [r7, #24]
 8001c24:	4013      	ands	r3, r2
 8001c26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d003      	beq.n	8001c3c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001c34:	69ba      	ldr	r2, [r7, #24]
 8001c36:	693b      	ldr	r3, [r7, #16]
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c3c:	4a12      	ldr	r2, [pc, #72]	; (8001c88 <HAL_GPIO_Init+0x334>)
 8001c3e:	69bb      	ldr	r3, [r7, #24]
 8001c40:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c42:	69fb      	ldr	r3, [r7, #28]
 8001c44:	3301      	adds	r3, #1
 8001c46:	61fb      	str	r3, [r7, #28]
 8001c48:	69fb      	ldr	r3, [r7, #28]
 8001c4a:	2b0f      	cmp	r3, #15
 8001c4c:	f67f ae90 	bls.w	8001970 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c50:	bf00      	nop
 8001c52:	bf00      	nop
 8001c54:	3724      	adds	r7, #36	; 0x24
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr
 8001c5e:	bf00      	nop
 8001c60:	40023800 	.word	0x40023800
 8001c64:	40013800 	.word	0x40013800
 8001c68:	40020000 	.word	0x40020000
 8001c6c:	40020400 	.word	0x40020400
 8001c70:	40020800 	.word	0x40020800
 8001c74:	40020c00 	.word	0x40020c00
 8001c78:	40021000 	.word	0x40021000
 8001c7c:	40021400 	.word	0x40021400
 8001c80:	40021800 	.word	0x40021800
 8001c84:	40021c00 	.word	0x40021c00
 8001c88:	40013c00 	.word	0x40013c00

08001c8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b083      	sub	sp, #12
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
 8001c94:	460b      	mov	r3, r1
 8001c96:	807b      	strh	r3, [r7, #2]
 8001c98:	4613      	mov	r3, r2
 8001c9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c9c:	787b      	ldrb	r3, [r7, #1]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d003      	beq.n	8001caa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ca2:	887a      	ldrh	r2, [r7, #2]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ca8:	e003      	b.n	8001cb2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001caa:	887b      	ldrh	r3, [r7, #2]
 8001cac:	041a      	lsls	r2, r3, #16
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	619a      	str	r2, [r3, #24]
}
 8001cb2:	bf00      	nop
 8001cb4:	370c      	adds	r7, #12
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr

08001cbe <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001cbe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cc0:	b08f      	sub	sp, #60	; 0x3c
 8001cc2:	af0a      	add	r7, sp, #40	; 0x28
 8001cc4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d101      	bne.n	8001cd0 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	e054      	b.n	8001d7a <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001cdc:	b2db      	uxtb	r3, r3
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d106      	bne.n	8001cf0 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	f005 f874 	bl	8006dd8 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2203      	movs	r2, #3
 8001cf4:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d102      	bne.n	8001d0a <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2200      	movs	r2, #0
 8001d08:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f003 f867 	bl	8004de2 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	603b      	str	r3, [r7, #0]
 8001d1a:	687e      	ldr	r6, [r7, #4]
 8001d1c:	466d      	mov	r5, sp
 8001d1e:	f106 0410 	add.w	r4, r6, #16
 8001d22:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d24:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d26:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d28:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d2a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001d2e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001d32:	1d33      	adds	r3, r6, #4
 8001d34:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d36:	6838      	ldr	r0, [r7, #0]
 8001d38:	f002 ffe1 	bl	8004cfe <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	2101      	movs	r1, #1
 8001d42:	4618      	mov	r0, r3
 8001d44:	f003 f85e 	bl	8004e04 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	603b      	str	r3, [r7, #0]
 8001d4e:	687e      	ldr	r6, [r7, #4]
 8001d50:	466d      	mov	r5, sp
 8001d52:	f106 0410 	add.w	r4, r6, #16
 8001d56:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d58:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d5a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d5c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d5e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001d62:	e885 0003 	stmia.w	r5, {r0, r1}
 8001d66:	1d33      	adds	r3, r6, #4
 8001d68:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d6a:	6838      	ldr	r0, [r7, #0]
 8001d6c:	f003 f9e6 	bl	800513c <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2201      	movs	r2, #1
 8001d74:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8001d78:	2300      	movs	r3, #0
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	3714      	adds	r7, #20
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001d82 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001d82:	b590      	push	{r4, r7, lr}
 8001d84:	b089      	sub	sp, #36	; 0x24
 8001d86:	af04      	add	r7, sp, #16
 8001d88:	6078      	str	r0, [r7, #4]
 8001d8a:	4608      	mov	r0, r1
 8001d8c:	4611      	mov	r1, r2
 8001d8e:	461a      	mov	r2, r3
 8001d90:	4603      	mov	r3, r0
 8001d92:	70fb      	strb	r3, [r7, #3]
 8001d94:	460b      	mov	r3, r1
 8001d96:	70bb      	strb	r3, [r7, #2]
 8001d98:	4613      	mov	r3, r2
 8001d9a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001da2:	2b01      	cmp	r3, #1
 8001da4:	d101      	bne.n	8001daa <HAL_HCD_HC_Init+0x28>
 8001da6:	2302      	movs	r3, #2
 8001da8:	e076      	b.n	8001e98 <HAL_HCD_HC_Init+0x116>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2201      	movs	r2, #1
 8001dae:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8001db2:	78fb      	ldrb	r3, [r7, #3]
 8001db4:	687a      	ldr	r2, [r7, #4]
 8001db6:	212c      	movs	r1, #44	; 0x2c
 8001db8:	fb01 f303 	mul.w	r3, r1, r3
 8001dbc:	4413      	add	r3, r2
 8001dbe:	333d      	adds	r3, #61	; 0x3d
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001dc4:	78fb      	ldrb	r3, [r7, #3]
 8001dc6:	687a      	ldr	r2, [r7, #4]
 8001dc8:	212c      	movs	r1, #44	; 0x2c
 8001dca:	fb01 f303 	mul.w	r3, r1, r3
 8001dce:	4413      	add	r3, r2
 8001dd0:	3338      	adds	r3, #56	; 0x38
 8001dd2:	787a      	ldrb	r2, [r7, #1]
 8001dd4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001dd6:	78fb      	ldrb	r3, [r7, #3]
 8001dd8:	687a      	ldr	r2, [r7, #4]
 8001dda:	212c      	movs	r1, #44	; 0x2c
 8001ddc:	fb01 f303 	mul.w	r3, r1, r3
 8001de0:	4413      	add	r3, r2
 8001de2:	3340      	adds	r3, #64	; 0x40
 8001de4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001de6:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001de8:	78fb      	ldrb	r3, [r7, #3]
 8001dea:	687a      	ldr	r2, [r7, #4]
 8001dec:	212c      	movs	r1, #44	; 0x2c
 8001dee:	fb01 f303 	mul.w	r3, r1, r3
 8001df2:	4413      	add	r3, r2
 8001df4:	3339      	adds	r3, #57	; 0x39
 8001df6:	78fa      	ldrb	r2, [r7, #3]
 8001df8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001dfa:	78fb      	ldrb	r3, [r7, #3]
 8001dfc:	687a      	ldr	r2, [r7, #4]
 8001dfe:	212c      	movs	r1, #44	; 0x2c
 8001e00:	fb01 f303 	mul.w	r3, r1, r3
 8001e04:	4413      	add	r3, r2
 8001e06:	333f      	adds	r3, #63	; 0x3f
 8001e08:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001e0c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001e0e:	78fb      	ldrb	r3, [r7, #3]
 8001e10:	78ba      	ldrb	r2, [r7, #2]
 8001e12:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001e16:	b2d0      	uxtb	r0, r2
 8001e18:	687a      	ldr	r2, [r7, #4]
 8001e1a:	212c      	movs	r1, #44	; 0x2c
 8001e1c:	fb01 f303 	mul.w	r3, r1, r3
 8001e20:	4413      	add	r3, r2
 8001e22:	333a      	adds	r3, #58	; 0x3a
 8001e24:	4602      	mov	r2, r0
 8001e26:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001e28:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	da09      	bge.n	8001e44 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001e30:	78fb      	ldrb	r3, [r7, #3]
 8001e32:	687a      	ldr	r2, [r7, #4]
 8001e34:	212c      	movs	r1, #44	; 0x2c
 8001e36:	fb01 f303 	mul.w	r3, r1, r3
 8001e3a:	4413      	add	r3, r2
 8001e3c:	333b      	adds	r3, #59	; 0x3b
 8001e3e:	2201      	movs	r2, #1
 8001e40:	701a      	strb	r2, [r3, #0]
 8001e42:	e008      	b.n	8001e56 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001e44:	78fb      	ldrb	r3, [r7, #3]
 8001e46:	687a      	ldr	r2, [r7, #4]
 8001e48:	212c      	movs	r1, #44	; 0x2c
 8001e4a:	fb01 f303 	mul.w	r3, r1, r3
 8001e4e:	4413      	add	r3, r2
 8001e50:	333b      	adds	r3, #59	; 0x3b
 8001e52:	2200      	movs	r2, #0
 8001e54:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001e56:	78fb      	ldrb	r3, [r7, #3]
 8001e58:	687a      	ldr	r2, [r7, #4]
 8001e5a:	212c      	movs	r1, #44	; 0x2c
 8001e5c:	fb01 f303 	mul.w	r3, r1, r3
 8001e60:	4413      	add	r3, r2
 8001e62:	333c      	adds	r3, #60	; 0x3c
 8001e64:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001e68:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6818      	ldr	r0, [r3, #0]
 8001e6e:	787c      	ldrb	r4, [r7, #1]
 8001e70:	78ba      	ldrb	r2, [r7, #2]
 8001e72:	78f9      	ldrb	r1, [r7, #3]
 8001e74:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001e76:	9302      	str	r3, [sp, #8]
 8001e78:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001e7c:	9301      	str	r3, [sp, #4]
 8001e7e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001e82:	9300      	str	r3, [sp, #0]
 8001e84:	4623      	mov	r3, r4
 8001e86:	f003 fab5 	bl	80053f4 <USB_HC_Init>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2200      	movs	r2, #0
 8001e92:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001e96:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	3714      	adds	r7, #20
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd90      	pop	{r4, r7, pc}

08001ea0 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b084      	sub	sp, #16
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
 8001ea8:	460b      	mov	r3, r1
 8001eaa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001eac:	2300      	movs	r3, #0
 8001eae:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001eb6:	2b01      	cmp	r3, #1
 8001eb8:	d101      	bne.n	8001ebe <HAL_HCD_HC_Halt+0x1e>
 8001eba:	2302      	movs	r3, #2
 8001ebc:	e00f      	b.n	8001ede <HAL_HCD_HC_Halt+0x3e>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	78fa      	ldrb	r2, [r7, #3]
 8001ecc:	4611      	mov	r1, r2
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f003 fd05 	bl	80058de <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001edc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	3710      	adds	r7, #16
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
	...

08001ee8 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b082      	sub	sp, #8
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
 8001ef0:	4608      	mov	r0, r1
 8001ef2:	4611      	mov	r1, r2
 8001ef4:	461a      	mov	r2, r3
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	70fb      	strb	r3, [r7, #3]
 8001efa:	460b      	mov	r3, r1
 8001efc:	70bb      	strb	r3, [r7, #2]
 8001efe:	4613      	mov	r3, r2
 8001f00:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001f02:	78fb      	ldrb	r3, [r7, #3]
 8001f04:	687a      	ldr	r2, [r7, #4]
 8001f06:	212c      	movs	r1, #44	; 0x2c
 8001f08:	fb01 f303 	mul.w	r3, r1, r3
 8001f0c:	4413      	add	r3, r2
 8001f0e:	333b      	adds	r3, #59	; 0x3b
 8001f10:	78ba      	ldrb	r2, [r7, #2]
 8001f12:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001f14:	78fb      	ldrb	r3, [r7, #3]
 8001f16:	687a      	ldr	r2, [r7, #4]
 8001f18:	212c      	movs	r1, #44	; 0x2c
 8001f1a:	fb01 f303 	mul.w	r3, r1, r3
 8001f1e:	4413      	add	r3, r2
 8001f20:	333f      	adds	r3, #63	; 0x3f
 8001f22:	787a      	ldrb	r2, [r7, #1]
 8001f24:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001f26:	7c3b      	ldrb	r3, [r7, #16]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d112      	bne.n	8001f52 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001f2c:	78fb      	ldrb	r3, [r7, #3]
 8001f2e:	687a      	ldr	r2, [r7, #4]
 8001f30:	212c      	movs	r1, #44	; 0x2c
 8001f32:	fb01 f303 	mul.w	r3, r1, r3
 8001f36:	4413      	add	r3, r2
 8001f38:	3342      	adds	r3, #66	; 0x42
 8001f3a:	2203      	movs	r2, #3
 8001f3c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001f3e:	78fb      	ldrb	r3, [r7, #3]
 8001f40:	687a      	ldr	r2, [r7, #4]
 8001f42:	212c      	movs	r1, #44	; 0x2c
 8001f44:	fb01 f303 	mul.w	r3, r1, r3
 8001f48:	4413      	add	r3, r2
 8001f4a:	333d      	adds	r3, #61	; 0x3d
 8001f4c:	7f3a      	ldrb	r2, [r7, #28]
 8001f4e:	701a      	strb	r2, [r3, #0]
 8001f50:	e008      	b.n	8001f64 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001f52:	78fb      	ldrb	r3, [r7, #3]
 8001f54:	687a      	ldr	r2, [r7, #4]
 8001f56:	212c      	movs	r1, #44	; 0x2c
 8001f58:	fb01 f303 	mul.w	r3, r1, r3
 8001f5c:	4413      	add	r3, r2
 8001f5e:	3342      	adds	r3, #66	; 0x42
 8001f60:	2202      	movs	r2, #2
 8001f62:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001f64:	787b      	ldrb	r3, [r7, #1]
 8001f66:	2b03      	cmp	r3, #3
 8001f68:	f200 80c6 	bhi.w	80020f8 <HAL_HCD_HC_SubmitRequest+0x210>
 8001f6c:	a201      	add	r2, pc, #4	; (adr r2, 8001f74 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8001f6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f72:	bf00      	nop
 8001f74:	08001f85 	.word	0x08001f85
 8001f78:	080020e5 	.word	0x080020e5
 8001f7c:	08001fe9 	.word	0x08001fe9
 8001f80:	08002067 	.word	0x08002067
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001f84:	7c3b      	ldrb	r3, [r7, #16]
 8001f86:	2b01      	cmp	r3, #1
 8001f88:	f040 80b8 	bne.w	80020fc <HAL_HCD_HC_SubmitRequest+0x214>
 8001f8c:	78bb      	ldrb	r3, [r7, #2]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	f040 80b4 	bne.w	80020fc <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8001f94:	8b3b      	ldrh	r3, [r7, #24]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d108      	bne.n	8001fac <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001f9a:	78fb      	ldrb	r3, [r7, #3]
 8001f9c:	687a      	ldr	r2, [r7, #4]
 8001f9e:	212c      	movs	r1, #44	; 0x2c
 8001fa0:	fb01 f303 	mul.w	r3, r1, r3
 8001fa4:	4413      	add	r3, r2
 8001fa6:	3355      	adds	r3, #85	; 0x55
 8001fa8:	2201      	movs	r2, #1
 8001faa:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001fac:	78fb      	ldrb	r3, [r7, #3]
 8001fae:	687a      	ldr	r2, [r7, #4]
 8001fb0:	212c      	movs	r1, #44	; 0x2c
 8001fb2:	fb01 f303 	mul.w	r3, r1, r3
 8001fb6:	4413      	add	r3, r2
 8001fb8:	3355      	adds	r3, #85	; 0x55
 8001fba:	781b      	ldrb	r3, [r3, #0]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d109      	bne.n	8001fd4 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001fc0:	78fb      	ldrb	r3, [r7, #3]
 8001fc2:	687a      	ldr	r2, [r7, #4]
 8001fc4:	212c      	movs	r1, #44	; 0x2c
 8001fc6:	fb01 f303 	mul.w	r3, r1, r3
 8001fca:	4413      	add	r3, r2
 8001fcc:	3342      	adds	r3, #66	; 0x42
 8001fce:	2200      	movs	r2, #0
 8001fd0:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001fd2:	e093      	b.n	80020fc <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001fd4:	78fb      	ldrb	r3, [r7, #3]
 8001fd6:	687a      	ldr	r2, [r7, #4]
 8001fd8:	212c      	movs	r1, #44	; 0x2c
 8001fda:	fb01 f303 	mul.w	r3, r1, r3
 8001fde:	4413      	add	r3, r2
 8001fe0:	3342      	adds	r3, #66	; 0x42
 8001fe2:	2202      	movs	r2, #2
 8001fe4:	701a      	strb	r2, [r3, #0]
      break;
 8001fe6:	e089      	b.n	80020fc <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001fe8:	78bb      	ldrb	r3, [r7, #2]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d11d      	bne.n	800202a <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001fee:	78fb      	ldrb	r3, [r7, #3]
 8001ff0:	687a      	ldr	r2, [r7, #4]
 8001ff2:	212c      	movs	r1, #44	; 0x2c
 8001ff4:	fb01 f303 	mul.w	r3, r1, r3
 8001ff8:	4413      	add	r3, r2
 8001ffa:	3355      	adds	r3, #85	; 0x55
 8001ffc:	781b      	ldrb	r3, [r3, #0]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d109      	bne.n	8002016 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002002:	78fb      	ldrb	r3, [r7, #3]
 8002004:	687a      	ldr	r2, [r7, #4]
 8002006:	212c      	movs	r1, #44	; 0x2c
 8002008:	fb01 f303 	mul.w	r3, r1, r3
 800200c:	4413      	add	r3, r2
 800200e:	3342      	adds	r3, #66	; 0x42
 8002010:	2200      	movs	r2, #0
 8002012:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002014:	e073      	b.n	80020fe <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002016:	78fb      	ldrb	r3, [r7, #3]
 8002018:	687a      	ldr	r2, [r7, #4]
 800201a:	212c      	movs	r1, #44	; 0x2c
 800201c:	fb01 f303 	mul.w	r3, r1, r3
 8002020:	4413      	add	r3, r2
 8002022:	3342      	adds	r3, #66	; 0x42
 8002024:	2202      	movs	r2, #2
 8002026:	701a      	strb	r2, [r3, #0]
      break;
 8002028:	e069      	b.n	80020fe <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800202a:	78fb      	ldrb	r3, [r7, #3]
 800202c:	687a      	ldr	r2, [r7, #4]
 800202e:	212c      	movs	r1, #44	; 0x2c
 8002030:	fb01 f303 	mul.w	r3, r1, r3
 8002034:	4413      	add	r3, r2
 8002036:	3354      	adds	r3, #84	; 0x54
 8002038:	781b      	ldrb	r3, [r3, #0]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d109      	bne.n	8002052 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800203e:	78fb      	ldrb	r3, [r7, #3]
 8002040:	687a      	ldr	r2, [r7, #4]
 8002042:	212c      	movs	r1, #44	; 0x2c
 8002044:	fb01 f303 	mul.w	r3, r1, r3
 8002048:	4413      	add	r3, r2
 800204a:	3342      	adds	r3, #66	; 0x42
 800204c:	2200      	movs	r2, #0
 800204e:	701a      	strb	r2, [r3, #0]
      break;
 8002050:	e055      	b.n	80020fe <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002052:	78fb      	ldrb	r3, [r7, #3]
 8002054:	687a      	ldr	r2, [r7, #4]
 8002056:	212c      	movs	r1, #44	; 0x2c
 8002058:	fb01 f303 	mul.w	r3, r1, r3
 800205c:	4413      	add	r3, r2
 800205e:	3342      	adds	r3, #66	; 0x42
 8002060:	2202      	movs	r2, #2
 8002062:	701a      	strb	r2, [r3, #0]
      break;
 8002064:	e04b      	b.n	80020fe <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8002066:	78bb      	ldrb	r3, [r7, #2]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d11d      	bne.n	80020a8 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800206c:	78fb      	ldrb	r3, [r7, #3]
 800206e:	687a      	ldr	r2, [r7, #4]
 8002070:	212c      	movs	r1, #44	; 0x2c
 8002072:	fb01 f303 	mul.w	r3, r1, r3
 8002076:	4413      	add	r3, r2
 8002078:	3355      	adds	r3, #85	; 0x55
 800207a:	781b      	ldrb	r3, [r3, #0]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d109      	bne.n	8002094 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002080:	78fb      	ldrb	r3, [r7, #3]
 8002082:	687a      	ldr	r2, [r7, #4]
 8002084:	212c      	movs	r1, #44	; 0x2c
 8002086:	fb01 f303 	mul.w	r3, r1, r3
 800208a:	4413      	add	r3, r2
 800208c:	3342      	adds	r3, #66	; 0x42
 800208e:	2200      	movs	r2, #0
 8002090:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002092:	e034      	b.n	80020fe <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002094:	78fb      	ldrb	r3, [r7, #3]
 8002096:	687a      	ldr	r2, [r7, #4]
 8002098:	212c      	movs	r1, #44	; 0x2c
 800209a:	fb01 f303 	mul.w	r3, r1, r3
 800209e:	4413      	add	r3, r2
 80020a0:	3342      	adds	r3, #66	; 0x42
 80020a2:	2202      	movs	r2, #2
 80020a4:	701a      	strb	r2, [r3, #0]
      break;
 80020a6:	e02a      	b.n	80020fe <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80020a8:	78fb      	ldrb	r3, [r7, #3]
 80020aa:	687a      	ldr	r2, [r7, #4]
 80020ac:	212c      	movs	r1, #44	; 0x2c
 80020ae:	fb01 f303 	mul.w	r3, r1, r3
 80020b2:	4413      	add	r3, r2
 80020b4:	3354      	adds	r3, #84	; 0x54
 80020b6:	781b      	ldrb	r3, [r3, #0]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d109      	bne.n	80020d0 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80020bc:	78fb      	ldrb	r3, [r7, #3]
 80020be:	687a      	ldr	r2, [r7, #4]
 80020c0:	212c      	movs	r1, #44	; 0x2c
 80020c2:	fb01 f303 	mul.w	r3, r1, r3
 80020c6:	4413      	add	r3, r2
 80020c8:	3342      	adds	r3, #66	; 0x42
 80020ca:	2200      	movs	r2, #0
 80020cc:	701a      	strb	r2, [r3, #0]
      break;
 80020ce:	e016      	b.n	80020fe <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80020d0:	78fb      	ldrb	r3, [r7, #3]
 80020d2:	687a      	ldr	r2, [r7, #4]
 80020d4:	212c      	movs	r1, #44	; 0x2c
 80020d6:	fb01 f303 	mul.w	r3, r1, r3
 80020da:	4413      	add	r3, r2
 80020dc:	3342      	adds	r3, #66	; 0x42
 80020de:	2202      	movs	r2, #2
 80020e0:	701a      	strb	r2, [r3, #0]
      break;
 80020e2:	e00c      	b.n	80020fe <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80020e4:	78fb      	ldrb	r3, [r7, #3]
 80020e6:	687a      	ldr	r2, [r7, #4]
 80020e8:	212c      	movs	r1, #44	; 0x2c
 80020ea:	fb01 f303 	mul.w	r3, r1, r3
 80020ee:	4413      	add	r3, r2
 80020f0:	3342      	adds	r3, #66	; 0x42
 80020f2:	2200      	movs	r2, #0
 80020f4:	701a      	strb	r2, [r3, #0]
      break;
 80020f6:	e002      	b.n	80020fe <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 80020f8:	bf00      	nop
 80020fa:	e000      	b.n	80020fe <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 80020fc:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80020fe:	78fb      	ldrb	r3, [r7, #3]
 8002100:	687a      	ldr	r2, [r7, #4]
 8002102:	212c      	movs	r1, #44	; 0x2c
 8002104:	fb01 f303 	mul.w	r3, r1, r3
 8002108:	4413      	add	r3, r2
 800210a:	3344      	adds	r3, #68	; 0x44
 800210c:	697a      	ldr	r2, [r7, #20]
 800210e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002110:	78fb      	ldrb	r3, [r7, #3]
 8002112:	8b3a      	ldrh	r2, [r7, #24]
 8002114:	6879      	ldr	r1, [r7, #4]
 8002116:	202c      	movs	r0, #44	; 0x2c
 8002118:	fb00 f303 	mul.w	r3, r0, r3
 800211c:	440b      	add	r3, r1
 800211e:	334c      	adds	r3, #76	; 0x4c
 8002120:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002122:	78fb      	ldrb	r3, [r7, #3]
 8002124:	687a      	ldr	r2, [r7, #4]
 8002126:	212c      	movs	r1, #44	; 0x2c
 8002128:	fb01 f303 	mul.w	r3, r1, r3
 800212c:	4413      	add	r3, r2
 800212e:	3360      	adds	r3, #96	; 0x60
 8002130:	2200      	movs	r2, #0
 8002132:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002134:	78fb      	ldrb	r3, [r7, #3]
 8002136:	687a      	ldr	r2, [r7, #4]
 8002138:	212c      	movs	r1, #44	; 0x2c
 800213a:	fb01 f303 	mul.w	r3, r1, r3
 800213e:	4413      	add	r3, r2
 8002140:	3350      	adds	r3, #80	; 0x50
 8002142:	2200      	movs	r2, #0
 8002144:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002146:	78fb      	ldrb	r3, [r7, #3]
 8002148:	687a      	ldr	r2, [r7, #4]
 800214a:	212c      	movs	r1, #44	; 0x2c
 800214c:	fb01 f303 	mul.w	r3, r1, r3
 8002150:	4413      	add	r3, r2
 8002152:	3339      	adds	r3, #57	; 0x39
 8002154:	78fa      	ldrb	r2, [r7, #3]
 8002156:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002158:	78fb      	ldrb	r3, [r7, #3]
 800215a:	687a      	ldr	r2, [r7, #4]
 800215c:	212c      	movs	r1, #44	; 0x2c
 800215e:	fb01 f303 	mul.w	r3, r1, r3
 8002162:	4413      	add	r3, r2
 8002164:	3361      	adds	r3, #97	; 0x61
 8002166:	2200      	movs	r2, #0
 8002168:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6818      	ldr	r0, [r3, #0]
 800216e:	78fb      	ldrb	r3, [r7, #3]
 8002170:	222c      	movs	r2, #44	; 0x2c
 8002172:	fb02 f303 	mul.w	r3, r2, r3
 8002176:	3338      	adds	r3, #56	; 0x38
 8002178:	687a      	ldr	r2, [r7, #4]
 800217a:	18d1      	adds	r1, r2, r3
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	691b      	ldr	r3, [r3, #16]
 8002180:	b2db      	uxtb	r3, r3
 8002182:	461a      	mov	r2, r3
 8002184:	f003 fa58 	bl	8005638 <USB_HC_StartXfer>
 8002188:	4603      	mov	r3, r0
}
 800218a:	4618      	mov	r0, r3
 800218c:	3708      	adds	r7, #8
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop

08002194 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b086      	sub	sp, #24
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4618      	mov	r0, r3
 80021ac:	f002 ff83 	bl	80050b6 <USB_GetMode>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b01      	cmp	r3, #1
 80021b4:	f040 80f6 	bne.w	80023a4 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4618      	mov	r0, r3
 80021be:	f002 ff67 	bl	8005090 <USB_ReadInterrupts>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	f000 80ec 	beq.w	80023a2 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4618      	mov	r0, r3
 80021d0:	f002 ff5e 	bl	8005090 <USB_ReadInterrupts>
 80021d4:	4603      	mov	r3, r0
 80021d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021da:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80021de:	d104      	bne.n	80021ea <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80021e8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4618      	mov	r0, r3
 80021f0:	f002 ff4e 	bl	8005090 <USB_ReadInterrupts>
 80021f4:	4603      	mov	r3, r0
 80021f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80021fe:	d104      	bne.n	800220a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002208:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4618      	mov	r0, r3
 8002210:	f002 ff3e 	bl	8005090 <USB_ReadInterrupts>
 8002214:	4603      	mov	r3, r0
 8002216:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800221a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800221e:	d104      	bne.n	800222a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002228:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4618      	mov	r0, r3
 8002230:	f002 ff2e 	bl	8005090 <USB_ReadInterrupts>
 8002234:	4603      	mov	r3, r0
 8002236:	f003 0302 	and.w	r3, r3, #2
 800223a:	2b02      	cmp	r3, #2
 800223c:	d103      	bne.n	8002246 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	2202      	movs	r2, #2
 8002244:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4618      	mov	r0, r3
 800224c:	f002 ff20 	bl	8005090 <USB_ReadInterrupts>
 8002250:	4603      	mov	r3, r0
 8002252:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002256:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800225a:	d11c      	bne.n	8002296 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002264:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 0301 	and.w	r3, r3, #1
 8002272:	2b00      	cmp	r3, #0
 8002274:	d10f      	bne.n	8002296 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002276:	2110      	movs	r1, #16
 8002278:	6938      	ldr	r0, [r7, #16]
 800227a:	f002 fe0f 	bl	8004e9c <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800227e:	6938      	ldr	r0, [r7, #16]
 8002280:	f002 fe40 	bl	8004f04 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	2101      	movs	r1, #1
 800228a:	4618      	mov	r0, r3
 800228c:	f003 f816 	bl	80052bc <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002290:	6878      	ldr	r0, [r7, #4]
 8002292:	f004 fe1f 	bl	8006ed4 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4618      	mov	r0, r3
 800229c:	f002 fef8 	bl	8005090 <USB_ReadInterrupts>
 80022a0:	4603      	mov	r3, r0
 80022a2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80022a6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022aa:	d102      	bne.n	80022b2 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 80022ac:	6878      	ldr	r0, [r7, #4]
 80022ae:	f001 f882 	bl	80033b6 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4618      	mov	r0, r3
 80022b8:	f002 feea 	bl	8005090 <USB_ReadInterrupts>
 80022bc:	4603      	mov	r3, r0
 80022be:	f003 0308 	and.w	r3, r3, #8
 80022c2:	2b08      	cmp	r3, #8
 80022c4:	d106      	bne.n	80022d4 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80022c6:	6878      	ldr	r0, [r7, #4]
 80022c8:	f004 fde8 	bl	8006e9c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	2208      	movs	r2, #8
 80022d2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4618      	mov	r0, r3
 80022da:	f002 fed9 	bl	8005090 <USB_ReadInterrupts>
 80022de:	4603      	mov	r3, r0
 80022e0:	f003 0310 	and.w	r3, r3, #16
 80022e4:	2b10      	cmp	r3, #16
 80022e6:	d101      	bne.n	80022ec <HAL_HCD_IRQHandler+0x158>
 80022e8:	2301      	movs	r3, #1
 80022ea:	e000      	b.n	80022ee <HAL_HCD_IRQHandler+0x15a>
 80022ec:	2300      	movs	r3, #0
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d012      	beq.n	8002318 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	699a      	ldr	r2, [r3, #24]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f022 0210 	bic.w	r2, r2, #16
 8002300:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002302:	6878      	ldr	r0, [r7, #4]
 8002304:	f000 ff85 	bl	8003212 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	699a      	ldr	r2, [r3, #24]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f042 0210 	orr.w	r2, r2, #16
 8002316:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4618      	mov	r0, r3
 800231e:	f002 feb7 	bl	8005090 <USB_ReadInterrupts>
 8002322:	4603      	mov	r3, r0
 8002324:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002328:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800232c:	d13a      	bne.n	80023a4 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4618      	mov	r0, r3
 8002334:	f003 fac2 	bl	80058bc <USB_HC_ReadInterrupt>
 8002338:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800233a:	2300      	movs	r3, #0
 800233c:	617b      	str	r3, [r7, #20]
 800233e:	e025      	b.n	800238c <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	f003 030f 	and.w	r3, r3, #15
 8002346:	68ba      	ldr	r2, [r7, #8]
 8002348:	fa22 f303 	lsr.w	r3, r2, r3
 800234c:	f003 0301 	and.w	r3, r3, #1
 8002350:	2b00      	cmp	r3, #0
 8002352:	d018      	beq.n	8002386 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	015a      	lsls	r2, r3, #5
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	4413      	add	r3, r2
 800235c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002366:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800236a:	d106      	bne.n	800237a <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800236c:	697b      	ldr	r3, [r7, #20]
 800236e:	b2db      	uxtb	r3, r3
 8002370:	4619      	mov	r1, r3
 8002372:	6878      	ldr	r0, [r7, #4]
 8002374:	f000 f88f 	bl	8002496 <HCD_HC_IN_IRQHandler>
 8002378:	e005      	b.n	8002386 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	b2db      	uxtb	r3, r3
 800237e:	4619      	mov	r1, r3
 8002380:	6878      	ldr	r0, [r7, #4]
 8002382:	f000 fbdd 	bl	8002b40 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	3301      	adds	r3, #1
 800238a:	617b      	str	r3, [r7, #20]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	697a      	ldr	r2, [r7, #20]
 8002392:	429a      	cmp	r2, r3
 8002394:	d3d4      	bcc.n	8002340 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800239e:	615a      	str	r2, [r3, #20]
 80023a0:	e000      	b.n	80023a4 <HAL_HCD_IRQHandler+0x210>
      return;
 80023a2:	bf00      	nop
    }
  }
}
 80023a4:	3718      	adds	r7, #24
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}

080023aa <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80023aa:	b580      	push	{r7, lr}
 80023ac:	b082      	sub	sp, #8
 80023ae:	af00      	add	r7, sp, #0
 80023b0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80023b8:	2b01      	cmp	r3, #1
 80023ba:	d101      	bne.n	80023c0 <HAL_HCD_Start+0x16>
 80023bc:	2302      	movs	r3, #2
 80023be:	e013      	b.n	80023e8 <HAL_HCD_Start+0x3e>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2201      	movs	r2, #1
 80023c4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	2101      	movs	r1, #1
 80023ce:	4618      	mov	r0, r3
 80023d0:	f002 ffae 	bl	8005330 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4618      	mov	r0, r3
 80023da:	f002 fcf1 	bl	8004dc0 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2200      	movs	r2, #0
 80023e2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80023e6:	2300      	movs	r3, #0
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	3708      	adds	r7, #8
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}

080023f0 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b082      	sub	sp, #8
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80023fe:	2b01      	cmp	r3, #1
 8002400:	d101      	bne.n	8002406 <HAL_HCD_Stop+0x16>
 8002402:	2302      	movs	r3, #2
 8002404:	e00d      	b.n	8002422 <HAL_HCD_Stop+0x32>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2201      	movs	r2, #1
 800240a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4618      	mov	r0, r3
 8002414:	f003 fb9c 	bl	8005b50 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2200      	movs	r2, #0
 800241c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002420:	2300      	movs	r3, #0
}
 8002422:	4618      	mov	r0, r3
 8002424:	3708      	adds	r7, #8
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}

0800242a <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800242a:	b480      	push	{r7}
 800242c:	b083      	sub	sp, #12
 800242e:	af00      	add	r7, sp, #0
 8002430:	6078      	str	r0, [r7, #4]
 8002432:	460b      	mov	r3, r1
 8002434:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002436:	78fb      	ldrb	r3, [r7, #3]
 8002438:	687a      	ldr	r2, [r7, #4]
 800243a:	212c      	movs	r1, #44	; 0x2c
 800243c:	fb01 f303 	mul.w	r3, r1, r3
 8002440:	4413      	add	r3, r2
 8002442:	3360      	adds	r3, #96	; 0x60
 8002444:	781b      	ldrb	r3, [r3, #0]
}
 8002446:	4618      	mov	r0, r3
 8002448:	370c      	adds	r7, #12
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr

08002452 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002452:	b480      	push	{r7}
 8002454:	b083      	sub	sp, #12
 8002456:	af00      	add	r7, sp, #0
 8002458:	6078      	str	r0, [r7, #4]
 800245a:	460b      	mov	r3, r1
 800245c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800245e:	78fb      	ldrb	r3, [r7, #3]
 8002460:	687a      	ldr	r2, [r7, #4]
 8002462:	212c      	movs	r1, #44	; 0x2c
 8002464:	fb01 f303 	mul.w	r3, r1, r3
 8002468:	4413      	add	r3, r2
 800246a:	3350      	adds	r3, #80	; 0x50
 800246c:	681b      	ldr	r3, [r3, #0]
}
 800246e:	4618      	mov	r0, r3
 8002470:	370c      	adds	r7, #12
 8002472:	46bd      	mov	sp, r7
 8002474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002478:	4770      	bx	lr

0800247a <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800247a:	b580      	push	{r7, lr}
 800247c:	b082      	sub	sp, #8
 800247e:	af00      	add	r7, sp, #0
 8002480:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4618      	mov	r0, r3
 8002488:	f002 ffa2 	bl	80053d0 <USB_GetCurrentFrame>
 800248c:	4603      	mov	r3, r0
}
 800248e:	4618      	mov	r0, r3
 8002490:	3708      	adds	r7, #8
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}

08002496 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002496:	b580      	push	{r7, lr}
 8002498:	b086      	sub	sp, #24
 800249a:	af00      	add	r7, sp, #0
 800249c:	6078      	str	r0, [r7, #4]
 800249e:	460b      	mov	r3, r1
 80024a0:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80024ac:	78fb      	ldrb	r3, [r7, #3]
 80024ae:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	015a      	lsls	r2, r3, #5
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	4413      	add	r3, r2
 80024b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	f003 0304 	and.w	r3, r3, #4
 80024c2:	2b04      	cmp	r3, #4
 80024c4:	d11a      	bne.n	80024fc <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	015a      	lsls	r2, r3, #5
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	4413      	add	r3, r2
 80024ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024d2:	461a      	mov	r2, r3
 80024d4:	2304      	movs	r3, #4
 80024d6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80024d8:	687a      	ldr	r2, [r7, #4]
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	212c      	movs	r1, #44	; 0x2c
 80024de:	fb01 f303 	mul.w	r3, r1, r3
 80024e2:	4413      	add	r3, r2
 80024e4:	3361      	adds	r3, #97	; 0x61
 80024e6:	2206      	movs	r2, #6
 80024e8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	68fa      	ldr	r2, [r7, #12]
 80024f0:	b2d2      	uxtb	r2, r2
 80024f2:	4611      	mov	r1, r2
 80024f4:	4618      	mov	r0, r3
 80024f6:	f003 f9f2 	bl	80058de <USB_HC_Halt>
 80024fa:	e0af      	b.n	800265c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	015a      	lsls	r2, r3, #5
 8002500:	693b      	ldr	r3, [r7, #16]
 8002502:	4413      	add	r3, r2
 8002504:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800250e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002512:	d11b      	bne.n	800254c <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	015a      	lsls	r2, r3, #5
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	4413      	add	r3, r2
 800251c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002520:	461a      	mov	r2, r3
 8002522:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002526:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002528:	687a      	ldr	r2, [r7, #4]
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	212c      	movs	r1, #44	; 0x2c
 800252e:	fb01 f303 	mul.w	r3, r1, r3
 8002532:	4413      	add	r3, r2
 8002534:	3361      	adds	r3, #97	; 0x61
 8002536:	2207      	movs	r2, #7
 8002538:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	68fa      	ldr	r2, [r7, #12]
 8002540:	b2d2      	uxtb	r2, r2
 8002542:	4611      	mov	r1, r2
 8002544:	4618      	mov	r0, r3
 8002546:	f003 f9ca 	bl	80058de <USB_HC_Halt>
 800254a:	e087      	b.n	800265c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	015a      	lsls	r2, r3, #5
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	4413      	add	r3, r2
 8002554:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	f003 0320 	and.w	r3, r3, #32
 800255e:	2b20      	cmp	r3, #32
 8002560:	d109      	bne.n	8002576 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	015a      	lsls	r2, r3, #5
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	4413      	add	r3, r2
 800256a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800256e:	461a      	mov	r2, r3
 8002570:	2320      	movs	r3, #32
 8002572:	6093      	str	r3, [r2, #8]
 8002574:	e072      	b.n	800265c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	015a      	lsls	r2, r3, #5
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	4413      	add	r3, r2
 800257e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	f003 0308 	and.w	r3, r3, #8
 8002588:	2b08      	cmp	r3, #8
 800258a:	d11a      	bne.n	80025c2 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	015a      	lsls	r2, r3, #5
 8002590:	693b      	ldr	r3, [r7, #16]
 8002592:	4413      	add	r3, r2
 8002594:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002598:	461a      	mov	r2, r3
 800259a:	2308      	movs	r3, #8
 800259c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 800259e:	687a      	ldr	r2, [r7, #4]
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	212c      	movs	r1, #44	; 0x2c
 80025a4:	fb01 f303 	mul.w	r3, r1, r3
 80025a8:	4413      	add	r3, r2
 80025aa:	3361      	adds	r3, #97	; 0x61
 80025ac:	2205      	movs	r2, #5
 80025ae:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	68fa      	ldr	r2, [r7, #12]
 80025b6:	b2d2      	uxtb	r2, r2
 80025b8:	4611      	mov	r1, r2
 80025ba:	4618      	mov	r0, r3
 80025bc:	f003 f98f 	bl	80058de <USB_HC_Halt>
 80025c0:	e04c      	b.n	800265c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	015a      	lsls	r2, r3, #5
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	4413      	add	r3, r2
 80025ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025d8:	d11b      	bne.n	8002612 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	015a      	lsls	r2, r3, #5
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	4413      	add	r3, r2
 80025e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025e6:	461a      	mov	r2, r3
 80025e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80025ec:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80025ee:	687a      	ldr	r2, [r7, #4]
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	212c      	movs	r1, #44	; 0x2c
 80025f4:	fb01 f303 	mul.w	r3, r1, r3
 80025f8:	4413      	add	r3, r2
 80025fa:	3361      	adds	r3, #97	; 0x61
 80025fc:	2208      	movs	r2, #8
 80025fe:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	68fa      	ldr	r2, [r7, #12]
 8002606:	b2d2      	uxtb	r2, r2
 8002608:	4611      	mov	r1, r2
 800260a:	4618      	mov	r0, r3
 800260c:	f003 f967 	bl	80058de <USB_HC_Halt>
 8002610:	e024      	b.n	800265c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	015a      	lsls	r2, r3, #5
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	4413      	add	r3, r2
 800261a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002624:	2b80      	cmp	r3, #128	; 0x80
 8002626:	d119      	bne.n	800265c <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	015a      	lsls	r2, r3, #5
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	4413      	add	r3, r2
 8002630:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002634:	461a      	mov	r2, r3
 8002636:	2380      	movs	r3, #128	; 0x80
 8002638:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800263a:	687a      	ldr	r2, [r7, #4]
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	212c      	movs	r1, #44	; 0x2c
 8002640:	fb01 f303 	mul.w	r3, r1, r3
 8002644:	4413      	add	r3, r2
 8002646:	3361      	adds	r3, #97	; 0x61
 8002648:	2206      	movs	r2, #6
 800264a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	68fa      	ldr	r2, [r7, #12]
 8002652:	b2d2      	uxtb	r2, r2
 8002654:	4611      	mov	r1, r2
 8002656:	4618      	mov	r0, r3
 8002658:	f003 f941 	bl	80058de <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	015a      	lsls	r2, r3, #5
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	4413      	add	r3, r2
 8002664:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002668:	689b      	ldr	r3, [r3, #8]
 800266a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800266e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002672:	d112      	bne.n	800269a <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	68fa      	ldr	r2, [r7, #12]
 800267a:	b2d2      	uxtb	r2, r2
 800267c:	4611      	mov	r1, r2
 800267e:	4618      	mov	r0, r3
 8002680:	f003 f92d 	bl	80058de <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	015a      	lsls	r2, r3, #5
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	4413      	add	r3, r2
 800268c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002690:	461a      	mov	r2, r3
 8002692:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002696:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002698:	e24e      	b.n	8002b38 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	015a      	lsls	r2, r3, #5
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	4413      	add	r3, r2
 80026a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	f003 0301 	and.w	r3, r3, #1
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	f040 80df 	bne.w	8002870 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	691b      	ldr	r3, [r3, #16]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d019      	beq.n	80026ee <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80026ba:	687a      	ldr	r2, [r7, #4]
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	212c      	movs	r1, #44	; 0x2c
 80026c0:	fb01 f303 	mul.w	r3, r1, r3
 80026c4:	4413      	add	r3, r2
 80026c6:	3348      	adds	r3, #72	; 0x48
 80026c8:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	0159      	lsls	r1, r3, #5
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	440b      	add	r3, r1
 80026d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026d6:	691b      	ldr	r3, [r3, #16]
 80026d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80026dc:	1ad2      	subs	r2, r2, r3
 80026de:	6879      	ldr	r1, [r7, #4]
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	202c      	movs	r0, #44	; 0x2c
 80026e4:	fb00 f303 	mul.w	r3, r0, r3
 80026e8:	440b      	add	r3, r1
 80026ea:	3350      	adds	r3, #80	; 0x50
 80026ec:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80026ee:	687a      	ldr	r2, [r7, #4]
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	212c      	movs	r1, #44	; 0x2c
 80026f4:	fb01 f303 	mul.w	r3, r1, r3
 80026f8:	4413      	add	r3, r2
 80026fa:	3361      	adds	r3, #97	; 0x61
 80026fc:	2201      	movs	r2, #1
 80026fe:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002700:	687a      	ldr	r2, [r7, #4]
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	212c      	movs	r1, #44	; 0x2c
 8002706:	fb01 f303 	mul.w	r3, r1, r3
 800270a:	4413      	add	r3, r2
 800270c:	335c      	adds	r3, #92	; 0x5c
 800270e:	2200      	movs	r2, #0
 8002710:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	015a      	lsls	r2, r3, #5
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	4413      	add	r3, r2
 800271a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800271e:	461a      	mov	r2, r3
 8002720:	2301      	movs	r3, #1
 8002722:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002724:	687a      	ldr	r2, [r7, #4]
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	212c      	movs	r1, #44	; 0x2c
 800272a:	fb01 f303 	mul.w	r3, r1, r3
 800272e:	4413      	add	r3, r2
 8002730:	333f      	adds	r3, #63	; 0x3f
 8002732:	781b      	ldrb	r3, [r3, #0]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d009      	beq.n	800274c <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002738:	687a      	ldr	r2, [r7, #4]
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	212c      	movs	r1, #44	; 0x2c
 800273e:	fb01 f303 	mul.w	r3, r1, r3
 8002742:	4413      	add	r3, r2
 8002744:	333f      	adds	r3, #63	; 0x3f
 8002746:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002748:	2b02      	cmp	r3, #2
 800274a:	d111      	bne.n	8002770 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	68fa      	ldr	r2, [r7, #12]
 8002752:	b2d2      	uxtb	r2, r2
 8002754:	4611      	mov	r1, r2
 8002756:	4618      	mov	r0, r3
 8002758:	f003 f8c1 	bl	80058de <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	015a      	lsls	r2, r3, #5
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	4413      	add	r3, r2
 8002764:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002768:	461a      	mov	r2, r3
 800276a:	2310      	movs	r3, #16
 800276c:	6093      	str	r3, [r2, #8]
 800276e:	e03a      	b.n	80027e6 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002770:	687a      	ldr	r2, [r7, #4]
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	212c      	movs	r1, #44	; 0x2c
 8002776:	fb01 f303 	mul.w	r3, r1, r3
 800277a:	4413      	add	r3, r2
 800277c:	333f      	adds	r3, #63	; 0x3f
 800277e:	781b      	ldrb	r3, [r3, #0]
 8002780:	2b03      	cmp	r3, #3
 8002782:	d009      	beq.n	8002798 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8002784:	687a      	ldr	r2, [r7, #4]
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	212c      	movs	r1, #44	; 0x2c
 800278a:	fb01 f303 	mul.w	r3, r1, r3
 800278e:	4413      	add	r3, r2
 8002790:	333f      	adds	r3, #63	; 0x3f
 8002792:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002794:	2b01      	cmp	r3, #1
 8002796:	d126      	bne.n	80027e6 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	015a      	lsls	r2, r3, #5
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	4413      	add	r3, r2
 80027a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	68fa      	ldr	r2, [r7, #12]
 80027a8:	0151      	lsls	r1, r2, #5
 80027aa:	693a      	ldr	r2, [r7, #16]
 80027ac:	440a      	add	r2, r1
 80027ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80027b2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80027b6:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80027b8:	687a      	ldr	r2, [r7, #4]
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	212c      	movs	r1, #44	; 0x2c
 80027be:	fb01 f303 	mul.w	r3, r1, r3
 80027c2:	4413      	add	r3, r2
 80027c4:	3360      	adds	r3, #96	; 0x60
 80027c6:	2201      	movs	r2, #1
 80027c8:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	b2d9      	uxtb	r1, r3
 80027ce:	687a      	ldr	r2, [r7, #4]
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	202c      	movs	r0, #44	; 0x2c
 80027d4:	fb00 f303 	mul.w	r3, r0, r3
 80027d8:	4413      	add	r3, r2
 80027da:	3360      	adds	r3, #96	; 0x60
 80027dc:	781b      	ldrb	r3, [r3, #0]
 80027de:	461a      	mov	r2, r3
 80027e0:	6878      	ldr	r0, [r7, #4]
 80027e2:	f004 fb85 	bl	8006ef0 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	691b      	ldr	r3, [r3, #16]
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	d12b      	bne.n	8002846 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80027ee:	687a      	ldr	r2, [r7, #4]
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	212c      	movs	r1, #44	; 0x2c
 80027f4:	fb01 f303 	mul.w	r3, r1, r3
 80027f8:	4413      	add	r3, r2
 80027fa:	3348      	adds	r3, #72	; 0x48
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	6879      	ldr	r1, [r7, #4]
 8002800:	68fa      	ldr	r2, [r7, #12]
 8002802:	202c      	movs	r0, #44	; 0x2c
 8002804:	fb00 f202 	mul.w	r2, r0, r2
 8002808:	440a      	add	r2, r1
 800280a:	3240      	adds	r2, #64	; 0x40
 800280c:	8812      	ldrh	r2, [r2, #0]
 800280e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002812:	f003 0301 	and.w	r3, r3, #1
 8002816:	2b00      	cmp	r3, #0
 8002818:	f000 818e 	beq.w	8002b38 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 800281c:	687a      	ldr	r2, [r7, #4]
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	212c      	movs	r1, #44	; 0x2c
 8002822:	fb01 f303 	mul.w	r3, r1, r3
 8002826:	4413      	add	r3, r2
 8002828:	3354      	adds	r3, #84	; 0x54
 800282a:	781b      	ldrb	r3, [r3, #0]
 800282c:	f083 0301 	eor.w	r3, r3, #1
 8002830:	b2d8      	uxtb	r0, r3
 8002832:	687a      	ldr	r2, [r7, #4]
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	212c      	movs	r1, #44	; 0x2c
 8002838:	fb01 f303 	mul.w	r3, r1, r3
 800283c:	4413      	add	r3, r2
 800283e:	3354      	adds	r3, #84	; 0x54
 8002840:	4602      	mov	r2, r0
 8002842:	701a      	strb	r2, [r3, #0]
}
 8002844:	e178      	b.n	8002b38 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002846:	687a      	ldr	r2, [r7, #4]
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	212c      	movs	r1, #44	; 0x2c
 800284c:	fb01 f303 	mul.w	r3, r1, r3
 8002850:	4413      	add	r3, r2
 8002852:	3354      	adds	r3, #84	; 0x54
 8002854:	781b      	ldrb	r3, [r3, #0]
 8002856:	f083 0301 	eor.w	r3, r3, #1
 800285a:	b2d8      	uxtb	r0, r3
 800285c:	687a      	ldr	r2, [r7, #4]
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	212c      	movs	r1, #44	; 0x2c
 8002862:	fb01 f303 	mul.w	r3, r1, r3
 8002866:	4413      	add	r3, r2
 8002868:	3354      	adds	r3, #84	; 0x54
 800286a:	4602      	mov	r2, r0
 800286c:	701a      	strb	r2, [r3, #0]
}
 800286e:	e163      	b.n	8002b38 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	015a      	lsls	r2, r3, #5
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	4413      	add	r3, r2
 8002878:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	f003 0302 	and.w	r3, r3, #2
 8002882:	2b02      	cmp	r3, #2
 8002884:	f040 80f6 	bne.w	8002a74 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002888:	687a      	ldr	r2, [r7, #4]
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	212c      	movs	r1, #44	; 0x2c
 800288e:	fb01 f303 	mul.w	r3, r1, r3
 8002892:	4413      	add	r3, r2
 8002894:	3361      	adds	r3, #97	; 0x61
 8002896:	781b      	ldrb	r3, [r3, #0]
 8002898:	2b01      	cmp	r3, #1
 800289a:	d109      	bne.n	80028b0 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800289c:	687a      	ldr	r2, [r7, #4]
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	212c      	movs	r1, #44	; 0x2c
 80028a2:	fb01 f303 	mul.w	r3, r1, r3
 80028a6:	4413      	add	r3, r2
 80028a8:	3360      	adds	r3, #96	; 0x60
 80028aa:	2201      	movs	r2, #1
 80028ac:	701a      	strb	r2, [r3, #0]
 80028ae:	e0c9      	b.n	8002a44 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80028b0:	687a      	ldr	r2, [r7, #4]
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	212c      	movs	r1, #44	; 0x2c
 80028b6:	fb01 f303 	mul.w	r3, r1, r3
 80028ba:	4413      	add	r3, r2
 80028bc:	3361      	adds	r3, #97	; 0x61
 80028be:	781b      	ldrb	r3, [r3, #0]
 80028c0:	2b05      	cmp	r3, #5
 80028c2:	d109      	bne.n	80028d8 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80028c4:	687a      	ldr	r2, [r7, #4]
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	212c      	movs	r1, #44	; 0x2c
 80028ca:	fb01 f303 	mul.w	r3, r1, r3
 80028ce:	4413      	add	r3, r2
 80028d0:	3360      	adds	r3, #96	; 0x60
 80028d2:	2205      	movs	r2, #5
 80028d4:	701a      	strb	r2, [r3, #0]
 80028d6:	e0b5      	b.n	8002a44 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80028d8:	687a      	ldr	r2, [r7, #4]
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	212c      	movs	r1, #44	; 0x2c
 80028de:	fb01 f303 	mul.w	r3, r1, r3
 80028e2:	4413      	add	r3, r2
 80028e4:	3361      	adds	r3, #97	; 0x61
 80028e6:	781b      	ldrb	r3, [r3, #0]
 80028e8:	2b06      	cmp	r3, #6
 80028ea:	d009      	beq.n	8002900 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80028ec:	687a      	ldr	r2, [r7, #4]
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	212c      	movs	r1, #44	; 0x2c
 80028f2:	fb01 f303 	mul.w	r3, r1, r3
 80028f6:	4413      	add	r3, r2
 80028f8:	3361      	adds	r3, #97	; 0x61
 80028fa:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80028fc:	2b08      	cmp	r3, #8
 80028fe:	d150      	bne.n	80029a2 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8002900:	687a      	ldr	r2, [r7, #4]
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	212c      	movs	r1, #44	; 0x2c
 8002906:	fb01 f303 	mul.w	r3, r1, r3
 800290a:	4413      	add	r3, r2
 800290c:	335c      	adds	r3, #92	; 0x5c
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	1c5a      	adds	r2, r3, #1
 8002912:	6879      	ldr	r1, [r7, #4]
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	202c      	movs	r0, #44	; 0x2c
 8002918:	fb00 f303 	mul.w	r3, r0, r3
 800291c:	440b      	add	r3, r1
 800291e:	335c      	adds	r3, #92	; 0x5c
 8002920:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002922:	687a      	ldr	r2, [r7, #4]
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	212c      	movs	r1, #44	; 0x2c
 8002928:	fb01 f303 	mul.w	r3, r1, r3
 800292c:	4413      	add	r3, r2
 800292e:	335c      	adds	r3, #92	; 0x5c
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	2b02      	cmp	r3, #2
 8002934:	d912      	bls.n	800295c <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002936:	687a      	ldr	r2, [r7, #4]
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	212c      	movs	r1, #44	; 0x2c
 800293c:	fb01 f303 	mul.w	r3, r1, r3
 8002940:	4413      	add	r3, r2
 8002942:	335c      	adds	r3, #92	; 0x5c
 8002944:	2200      	movs	r2, #0
 8002946:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002948:	687a      	ldr	r2, [r7, #4]
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	212c      	movs	r1, #44	; 0x2c
 800294e:	fb01 f303 	mul.w	r3, r1, r3
 8002952:	4413      	add	r3, r2
 8002954:	3360      	adds	r3, #96	; 0x60
 8002956:	2204      	movs	r2, #4
 8002958:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800295a:	e073      	b.n	8002a44 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800295c:	687a      	ldr	r2, [r7, #4]
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	212c      	movs	r1, #44	; 0x2c
 8002962:	fb01 f303 	mul.w	r3, r1, r3
 8002966:	4413      	add	r3, r2
 8002968:	3360      	adds	r3, #96	; 0x60
 800296a:	2202      	movs	r2, #2
 800296c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	015a      	lsls	r2, r3, #5
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	4413      	add	r3, r2
 8002976:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002984:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800298c:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	015a      	lsls	r2, r3, #5
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	4413      	add	r3, r2
 8002996:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800299a:	461a      	mov	r2, r3
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80029a0:	e050      	b.n	8002a44 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80029a2:	687a      	ldr	r2, [r7, #4]
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	212c      	movs	r1, #44	; 0x2c
 80029a8:	fb01 f303 	mul.w	r3, r1, r3
 80029ac:	4413      	add	r3, r2
 80029ae:	3361      	adds	r3, #97	; 0x61
 80029b0:	781b      	ldrb	r3, [r3, #0]
 80029b2:	2b03      	cmp	r3, #3
 80029b4:	d122      	bne.n	80029fc <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80029b6:	687a      	ldr	r2, [r7, #4]
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	212c      	movs	r1, #44	; 0x2c
 80029bc:	fb01 f303 	mul.w	r3, r1, r3
 80029c0:	4413      	add	r3, r2
 80029c2:	3360      	adds	r3, #96	; 0x60
 80029c4:	2202      	movs	r2, #2
 80029c6:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	015a      	lsls	r2, r3, #5
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	4413      	add	r3, r2
 80029d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80029de:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80029e6:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	015a      	lsls	r2, r3, #5
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	4413      	add	r3, r2
 80029f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029f4:	461a      	mov	r2, r3
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	6013      	str	r3, [r2, #0]
 80029fa:	e023      	b.n	8002a44 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80029fc:	687a      	ldr	r2, [r7, #4]
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	212c      	movs	r1, #44	; 0x2c
 8002a02:	fb01 f303 	mul.w	r3, r1, r3
 8002a06:	4413      	add	r3, r2
 8002a08:	3361      	adds	r3, #97	; 0x61
 8002a0a:	781b      	ldrb	r3, [r3, #0]
 8002a0c:	2b07      	cmp	r3, #7
 8002a0e:	d119      	bne.n	8002a44 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002a10:	687a      	ldr	r2, [r7, #4]
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	212c      	movs	r1, #44	; 0x2c
 8002a16:	fb01 f303 	mul.w	r3, r1, r3
 8002a1a:	4413      	add	r3, r2
 8002a1c:	335c      	adds	r3, #92	; 0x5c
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	1c5a      	adds	r2, r3, #1
 8002a22:	6879      	ldr	r1, [r7, #4]
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	202c      	movs	r0, #44	; 0x2c
 8002a28:	fb00 f303 	mul.w	r3, r0, r3
 8002a2c:	440b      	add	r3, r1
 8002a2e:	335c      	adds	r3, #92	; 0x5c
 8002a30:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002a32:	687a      	ldr	r2, [r7, #4]
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	212c      	movs	r1, #44	; 0x2c
 8002a38:	fb01 f303 	mul.w	r3, r1, r3
 8002a3c:	4413      	add	r3, r2
 8002a3e:	3360      	adds	r3, #96	; 0x60
 8002a40:	2204      	movs	r2, #4
 8002a42:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	015a      	lsls	r2, r3, #5
 8002a48:	693b      	ldr	r3, [r7, #16]
 8002a4a:	4413      	add	r3, r2
 8002a4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a50:	461a      	mov	r2, r3
 8002a52:	2302      	movs	r3, #2
 8002a54:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	b2d9      	uxtb	r1, r3
 8002a5a:	687a      	ldr	r2, [r7, #4]
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	202c      	movs	r0, #44	; 0x2c
 8002a60:	fb00 f303 	mul.w	r3, r0, r3
 8002a64:	4413      	add	r3, r2
 8002a66:	3360      	adds	r3, #96	; 0x60
 8002a68:	781b      	ldrb	r3, [r3, #0]
 8002a6a:	461a      	mov	r2, r3
 8002a6c:	6878      	ldr	r0, [r7, #4]
 8002a6e:	f004 fa3f 	bl	8006ef0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002a72:	e061      	b.n	8002b38 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	015a      	lsls	r2, r3, #5
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	4413      	add	r3, r2
 8002a7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	f003 0310 	and.w	r3, r3, #16
 8002a86:	2b10      	cmp	r3, #16
 8002a88:	d156      	bne.n	8002b38 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002a8a:	687a      	ldr	r2, [r7, #4]
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	212c      	movs	r1, #44	; 0x2c
 8002a90:	fb01 f303 	mul.w	r3, r1, r3
 8002a94:	4413      	add	r3, r2
 8002a96:	333f      	adds	r3, #63	; 0x3f
 8002a98:	781b      	ldrb	r3, [r3, #0]
 8002a9a:	2b03      	cmp	r3, #3
 8002a9c:	d111      	bne.n	8002ac2 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002a9e:	687a      	ldr	r2, [r7, #4]
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	212c      	movs	r1, #44	; 0x2c
 8002aa4:	fb01 f303 	mul.w	r3, r1, r3
 8002aa8:	4413      	add	r3, r2
 8002aaa:	335c      	adds	r3, #92	; 0x5c
 8002aac:	2200      	movs	r2, #0
 8002aae:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	68fa      	ldr	r2, [r7, #12]
 8002ab6:	b2d2      	uxtb	r2, r2
 8002ab8:	4611      	mov	r1, r2
 8002aba:	4618      	mov	r0, r3
 8002abc:	f002 ff0f 	bl	80058de <USB_HC_Halt>
 8002ac0:	e031      	b.n	8002b26 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002ac2:	687a      	ldr	r2, [r7, #4]
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	212c      	movs	r1, #44	; 0x2c
 8002ac8:	fb01 f303 	mul.w	r3, r1, r3
 8002acc:	4413      	add	r3, r2
 8002ace:	333f      	adds	r3, #63	; 0x3f
 8002ad0:	781b      	ldrb	r3, [r3, #0]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d009      	beq.n	8002aea <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002ad6:	687a      	ldr	r2, [r7, #4]
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	212c      	movs	r1, #44	; 0x2c
 8002adc:	fb01 f303 	mul.w	r3, r1, r3
 8002ae0:	4413      	add	r3, r2
 8002ae2:	333f      	adds	r3, #63	; 0x3f
 8002ae4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002ae6:	2b02      	cmp	r3, #2
 8002ae8:	d11d      	bne.n	8002b26 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002aea:	687a      	ldr	r2, [r7, #4]
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	212c      	movs	r1, #44	; 0x2c
 8002af0:	fb01 f303 	mul.w	r3, r1, r3
 8002af4:	4413      	add	r3, r2
 8002af6:	335c      	adds	r3, #92	; 0x5c
 8002af8:	2200      	movs	r2, #0
 8002afa:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	691b      	ldr	r3, [r3, #16]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d110      	bne.n	8002b26 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8002b04:	687a      	ldr	r2, [r7, #4]
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	212c      	movs	r1, #44	; 0x2c
 8002b0a:	fb01 f303 	mul.w	r3, r1, r3
 8002b0e:	4413      	add	r3, r2
 8002b10:	3361      	adds	r3, #97	; 0x61
 8002b12:	2203      	movs	r2, #3
 8002b14:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	68fa      	ldr	r2, [r7, #12]
 8002b1c:	b2d2      	uxtb	r2, r2
 8002b1e:	4611      	mov	r1, r2
 8002b20:	4618      	mov	r0, r3
 8002b22:	f002 fedc 	bl	80058de <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	015a      	lsls	r2, r3, #5
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	4413      	add	r3, r2
 8002b2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b32:	461a      	mov	r2, r3
 8002b34:	2310      	movs	r3, #16
 8002b36:	6093      	str	r3, [r2, #8]
}
 8002b38:	bf00      	nop
 8002b3a:	3718      	adds	r7, #24
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}

08002b40 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b088      	sub	sp, #32
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
 8002b48:	460b      	mov	r3, r1
 8002b4a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b52:	69fb      	ldr	r3, [r7, #28]
 8002b54:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8002b56:	78fb      	ldrb	r3, [r7, #3]
 8002b58:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	015a      	lsls	r2, r3, #5
 8002b5e:	69bb      	ldr	r3, [r7, #24]
 8002b60:	4413      	add	r3, r2
 8002b62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	f003 0304 	and.w	r3, r3, #4
 8002b6c:	2b04      	cmp	r3, #4
 8002b6e:	d11a      	bne.n	8002ba6 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	015a      	lsls	r2, r3, #5
 8002b74:	69bb      	ldr	r3, [r7, #24]
 8002b76:	4413      	add	r3, r2
 8002b78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b7c:	461a      	mov	r2, r3
 8002b7e:	2304      	movs	r3, #4
 8002b80:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002b82:	687a      	ldr	r2, [r7, #4]
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	212c      	movs	r1, #44	; 0x2c
 8002b88:	fb01 f303 	mul.w	r3, r1, r3
 8002b8c:	4413      	add	r3, r2
 8002b8e:	3361      	adds	r3, #97	; 0x61
 8002b90:	2206      	movs	r2, #6
 8002b92:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	697a      	ldr	r2, [r7, #20]
 8002b9a:	b2d2      	uxtb	r2, r2
 8002b9c:	4611      	mov	r1, r2
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f002 fe9d 	bl	80058de <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8002ba4:	e331      	b.n	800320a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	015a      	lsls	r2, r3, #5
 8002baa:	69bb      	ldr	r3, [r7, #24]
 8002bac:	4413      	add	r3, r2
 8002bae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	f003 0320 	and.w	r3, r3, #32
 8002bb8:	2b20      	cmp	r3, #32
 8002bba:	d12e      	bne.n	8002c1a <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	015a      	lsls	r2, r3, #5
 8002bc0:	69bb      	ldr	r3, [r7, #24]
 8002bc2:	4413      	add	r3, r2
 8002bc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bc8:	461a      	mov	r2, r3
 8002bca:	2320      	movs	r3, #32
 8002bcc:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002bce:	687a      	ldr	r2, [r7, #4]
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	212c      	movs	r1, #44	; 0x2c
 8002bd4:	fb01 f303 	mul.w	r3, r1, r3
 8002bd8:	4413      	add	r3, r2
 8002bda:	333d      	adds	r3, #61	; 0x3d
 8002bdc:	781b      	ldrb	r3, [r3, #0]
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	f040 8313 	bne.w	800320a <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8002be4:	687a      	ldr	r2, [r7, #4]
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	212c      	movs	r1, #44	; 0x2c
 8002bea:	fb01 f303 	mul.w	r3, r1, r3
 8002bee:	4413      	add	r3, r2
 8002bf0:	333d      	adds	r3, #61	; 0x3d
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002bf6:	687a      	ldr	r2, [r7, #4]
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	212c      	movs	r1, #44	; 0x2c
 8002bfc:	fb01 f303 	mul.w	r3, r1, r3
 8002c00:	4413      	add	r3, r2
 8002c02:	3360      	adds	r3, #96	; 0x60
 8002c04:	2202      	movs	r2, #2
 8002c06:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	697a      	ldr	r2, [r7, #20]
 8002c0e:	b2d2      	uxtb	r2, r2
 8002c10:	4611      	mov	r1, r2
 8002c12:	4618      	mov	r0, r3
 8002c14:	f002 fe63 	bl	80058de <USB_HC_Halt>
}
 8002c18:	e2f7      	b.n	800320a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	015a      	lsls	r2, r3, #5
 8002c1e:	69bb      	ldr	r3, [r7, #24]
 8002c20:	4413      	add	r3, r2
 8002c22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c30:	d112      	bne.n	8002c58 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	015a      	lsls	r2, r3, #5
 8002c36:	69bb      	ldr	r3, [r7, #24]
 8002c38:	4413      	add	r3, r2
 8002c3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c3e:	461a      	mov	r2, r3
 8002c40:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c44:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	697a      	ldr	r2, [r7, #20]
 8002c4c:	b2d2      	uxtb	r2, r2
 8002c4e:	4611      	mov	r1, r2
 8002c50:	4618      	mov	r0, r3
 8002c52:	f002 fe44 	bl	80058de <USB_HC_Halt>
}
 8002c56:	e2d8      	b.n	800320a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	015a      	lsls	r2, r3, #5
 8002c5c:	69bb      	ldr	r3, [r7, #24]
 8002c5e:	4413      	add	r3, r2
 8002c60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	f003 0301 	and.w	r3, r3, #1
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	d140      	bne.n	8002cf0 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002c6e:	687a      	ldr	r2, [r7, #4]
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	212c      	movs	r1, #44	; 0x2c
 8002c74:	fb01 f303 	mul.w	r3, r1, r3
 8002c78:	4413      	add	r3, r2
 8002c7a:	335c      	adds	r3, #92	; 0x5c
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	015a      	lsls	r2, r3, #5
 8002c84:	69bb      	ldr	r3, [r7, #24]
 8002c86:	4413      	add	r3, r2
 8002c88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c8c:	689b      	ldr	r3, [r3, #8]
 8002c8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c92:	2b40      	cmp	r3, #64	; 0x40
 8002c94:	d111      	bne.n	8002cba <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8002c96:	687a      	ldr	r2, [r7, #4]
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	212c      	movs	r1, #44	; 0x2c
 8002c9c:	fb01 f303 	mul.w	r3, r1, r3
 8002ca0:	4413      	add	r3, r2
 8002ca2:	333d      	adds	r3, #61	; 0x3d
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	015a      	lsls	r2, r3, #5
 8002cac:	69bb      	ldr	r3, [r7, #24]
 8002cae:	4413      	add	r3, r2
 8002cb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cb4:	461a      	mov	r2, r3
 8002cb6:	2340      	movs	r3, #64	; 0x40
 8002cb8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	015a      	lsls	r2, r3, #5
 8002cbe:	69bb      	ldr	r3, [r7, #24]
 8002cc0:	4413      	add	r3, r2
 8002cc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cc6:	461a      	mov	r2, r3
 8002cc8:	2301      	movs	r3, #1
 8002cca:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002ccc:	687a      	ldr	r2, [r7, #4]
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	212c      	movs	r1, #44	; 0x2c
 8002cd2:	fb01 f303 	mul.w	r3, r1, r3
 8002cd6:	4413      	add	r3, r2
 8002cd8:	3361      	adds	r3, #97	; 0x61
 8002cda:	2201      	movs	r2, #1
 8002cdc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	697a      	ldr	r2, [r7, #20]
 8002ce4:	b2d2      	uxtb	r2, r2
 8002ce6:	4611      	mov	r1, r2
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f002 fdf8 	bl	80058de <USB_HC_Halt>
}
 8002cee:	e28c      	b.n	800320a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	015a      	lsls	r2, r3, #5
 8002cf4:	69bb      	ldr	r3, [r7, #24]
 8002cf6:	4413      	add	r3, r2
 8002cf8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cfc:	689b      	ldr	r3, [r3, #8]
 8002cfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d02:	2b40      	cmp	r3, #64	; 0x40
 8002d04:	d12c      	bne.n	8002d60 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8002d06:	687a      	ldr	r2, [r7, #4]
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	212c      	movs	r1, #44	; 0x2c
 8002d0c:	fb01 f303 	mul.w	r3, r1, r3
 8002d10:	4413      	add	r3, r2
 8002d12:	3361      	adds	r3, #97	; 0x61
 8002d14:	2204      	movs	r2, #4
 8002d16:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002d18:	687a      	ldr	r2, [r7, #4]
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	212c      	movs	r1, #44	; 0x2c
 8002d1e:	fb01 f303 	mul.w	r3, r1, r3
 8002d22:	4413      	add	r3, r2
 8002d24:	333d      	adds	r3, #61	; 0x3d
 8002d26:	2201      	movs	r2, #1
 8002d28:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002d2a:	687a      	ldr	r2, [r7, #4]
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	212c      	movs	r1, #44	; 0x2c
 8002d30:	fb01 f303 	mul.w	r3, r1, r3
 8002d34:	4413      	add	r3, r2
 8002d36:	335c      	adds	r3, #92	; 0x5c
 8002d38:	2200      	movs	r2, #0
 8002d3a:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	697a      	ldr	r2, [r7, #20]
 8002d42:	b2d2      	uxtb	r2, r2
 8002d44:	4611      	mov	r1, r2
 8002d46:	4618      	mov	r0, r3
 8002d48:	f002 fdc9 	bl	80058de <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	015a      	lsls	r2, r3, #5
 8002d50:	69bb      	ldr	r3, [r7, #24]
 8002d52:	4413      	add	r3, r2
 8002d54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d58:	461a      	mov	r2, r3
 8002d5a:	2340      	movs	r3, #64	; 0x40
 8002d5c:	6093      	str	r3, [r2, #8]
}
 8002d5e:	e254      	b.n	800320a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	015a      	lsls	r2, r3, #5
 8002d64:	69bb      	ldr	r3, [r7, #24]
 8002d66:	4413      	add	r3, r2
 8002d68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	f003 0308 	and.w	r3, r3, #8
 8002d72:	2b08      	cmp	r3, #8
 8002d74:	d11a      	bne.n	8002dac <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	015a      	lsls	r2, r3, #5
 8002d7a:	69bb      	ldr	r3, [r7, #24]
 8002d7c:	4413      	add	r3, r2
 8002d7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d82:	461a      	mov	r2, r3
 8002d84:	2308      	movs	r3, #8
 8002d86:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002d88:	687a      	ldr	r2, [r7, #4]
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	212c      	movs	r1, #44	; 0x2c
 8002d8e:	fb01 f303 	mul.w	r3, r1, r3
 8002d92:	4413      	add	r3, r2
 8002d94:	3361      	adds	r3, #97	; 0x61
 8002d96:	2205      	movs	r2, #5
 8002d98:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	697a      	ldr	r2, [r7, #20]
 8002da0:	b2d2      	uxtb	r2, r2
 8002da2:	4611      	mov	r1, r2
 8002da4:	4618      	mov	r0, r3
 8002da6:	f002 fd9a 	bl	80058de <USB_HC_Halt>
}
 8002daa:	e22e      	b.n	800320a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	015a      	lsls	r2, r3, #5
 8002db0:	69bb      	ldr	r3, [r7, #24]
 8002db2:	4413      	add	r3, r2
 8002db4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	f003 0310 	and.w	r3, r3, #16
 8002dbe:	2b10      	cmp	r3, #16
 8002dc0:	d140      	bne.n	8002e44 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002dc2:	687a      	ldr	r2, [r7, #4]
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	212c      	movs	r1, #44	; 0x2c
 8002dc8:	fb01 f303 	mul.w	r3, r1, r3
 8002dcc:	4413      	add	r3, r2
 8002dce:	335c      	adds	r3, #92	; 0x5c
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002dd4:	687a      	ldr	r2, [r7, #4]
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	212c      	movs	r1, #44	; 0x2c
 8002dda:	fb01 f303 	mul.w	r3, r1, r3
 8002dde:	4413      	add	r3, r2
 8002de0:	3361      	adds	r3, #97	; 0x61
 8002de2:	2203      	movs	r2, #3
 8002de4:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002de6:	687a      	ldr	r2, [r7, #4]
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	212c      	movs	r1, #44	; 0x2c
 8002dec:	fb01 f303 	mul.w	r3, r1, r3
 8002df0:	4413      	add	r3, r2
 8002df2:	333d      	adds	r3, #61	; 0x3d
 8002df4:	781b      	ldrb	r3, [r3, #0]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d112      	bne.n	8002e20 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8002dfa:	687a      	ldr	r2, [r7, #4]
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	212c      	movs	r1, #44	; 0x2c
 8002e00:	fb01 f303 	mul.w	r3, r1, r3
 8002e04:	4413      	add	r3, r2
 8002e06:	333c      	adds	r3, #60	; 0x3c
 8002e08:	781b      	ldrb	r3, [r3, #0]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d108      	bne.n	8002e20 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8002e0e:	687a      	ldr	r2, [r7, #4]
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	212c      	movs	r1, #44	; 0x2c
 8002e14:	fb01 f303 	mul.w	r3, r1, r3
 8002e18:	4413      	add	r3, r2
 8002e1a:	333d      	adds	r3, #61	; 0x3d
 8002e1c:	2201      	movs	r2, #1
 8002e1e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	697a      	ldr	r2, [r7, #20]
 8002e26:	b2d2      	uxtb	r2, r2
 8002e28:	4611      	mov	r1, r2
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f002 fd57 	bl	80058de <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	015a      	lsls	r2, r3, #5
 8002e34:	69bb      	ldr	r3, [r7, #24]
 8002e36:	4413      	add	r3, r2
 8002e38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e3c:	461a      	mov	r2, r3
 8002e3e:	2310      	movs	r3, #16
 8002e40:	6093      	str	r3, [r2, #8]
}
 8002e42:	e1e2      	b.n	800320a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	015a      	lsls	r2, r3, #5
 8002e48:	69bb      	ldr	r3, [r7, #24]
 8002e4a:	4413      	add	r3, r2
 8002e4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e56:	2b80      	cmp	r3, #128	; 0x80
 8002e58:	d164      	bne.n	8002f24 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	691b      	ldr	r3, [r3, #16]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d111      	bne.n	8002e86 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8002e62:	687a      	ldr	r2, [r7, #4]
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	212c      	movs	r1, #44	; 0x2c
 8002e68:	fb01 f303 	mul.w	r3, r1, r3
 8002e6c:	4413      	add	r3, r2
 8002e6e:	3361      	adds	r3, #97	; 0x61
 8002e70:	2206      	movs	r2, #6
 8002e72:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	697a      	ldr	r2, [r7, #20]
 8002e7a:	b2d2      	uxtb	r2, r2
 8002e7c:	4611      	mov	r1, r2
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f002 fd2d 	bl	80058de <USB_HC_Halt>
 8002e84:	e044      	b.n	8002f10 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8002e86:	687a      	ldr	r2, [r7, #4]
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	212c      	movs	r1, #44	; 0x2c
 8002e8c:	fb01 f303 	mul.w	r3, r1, r3
 8002e90:	4413      	add	r3, r2
 8002e92:	335c      	adds	r3, #92	; 0x5c
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	1c5a      	adds	r2, r3, #1
 8002e98:	6879      	ldr	r1, [r7, #4]
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	202c      	movs	r0, #44	; 0x2c
 8002e9e:	fb00 f303 	mul.w	r3, r0, r3
 8002ea2:	440b      	add	r3, r1
 8002ea4:	335c      	adds	r3, #92	; 0x5c
 8002ea6:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002ea8:	687a      	ldr	r2, [r7, #4]
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	212c      	movs	r1, #44	; 0x2c
 8002eae:	fb01 f303 	mul.w	r3, r1, r3
 8002eb2:	4413      	add	r3, r2
 8002eb4:	335c      	adds	r3, #92	; 0x5c
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	2b02      	cmp	r3, #2
 8002eba:	d920      	bls.n	8002efe <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002ebc:	687a      	ldr	r2, [r7, #4]
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	212c      	movs	r1, #44	; 0x2c
 8002ec2:	fb01 f303 	mul.w	r3, r1, r3
 8002ec6:	4413      	add	r3, r2
 8002ec8:	335c      	adds	r3, #92	; 0x5c
 8002eca:	2200      	movs	r2, #0
 8002ecc:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002ece:	687a      	ldr	r2, [r7, #4]
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	212c      	movs	r1, #44	; 0x2c
 8002ed4:	fb01 f303 	mul.w	r3, r1, r3
 8002ed8:	4413      	add	r3, r2
 8002eda:	3360      	adds	r3, #96	; 0x60
 8002edc:	2204      	movs	r2, #4
 8002ede:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	b2d9      	uxtb	r1, r3
 8002ee4:	687a      	ldr	r2, [r7, #4]
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	202c      	movs	r0, #44	; 0x2c
 8002eea:	fb00 f303 	mul.w	r3, r0, r3
 8002eee:	4413      	add	r3, r2
 8002ef0:	3360      	adds	r3, #96	; 0x60
 8002ef2:	781b      	ldrb	r3, [r3, #0]
 8002ef4:	461a      	mov	r2, r3
 8002ef6:	6878      	ldr	r0, [r7, #4]
 8002ef8:	f003 fffa 	bl	8006ef0 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002efc:	e008      	b.n	8002f10 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002efe:	687a      	ldr	r2, [r7, #4]
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	212c      	movs	r1, #44	; 0x2c
 8002f04:	fb01 f303 	mul.w	r3, r1, r3
 8002f08:	4413      	add	r3, r2
 8002f0a:	3360      	adds	r3, #96	; 0x60
 8002f0c:	2202      	movs	r2, #2
 8002f0e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	015a      	lsls	r2, r3, #5
 8002f14:	69bb      	ldr	r3, [r7, #24]
 8002f16:	4413      	add	r3, r2
 8002f18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f1c:	461a      	mov	r2, r3
 8002f1e:	2380      	movs	r3, #128	; 0x80
 8002f20:	6093      	str	r3, [r2, #8]
}
 8002f22:	e172      	b.n	800320a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	015a      	lsls	r2, r3, #5
 8002f28:	69bb      	ldr	r3, [r7, #24]
 8002f2a:	4413      	add	r3, r2
 8002f2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f3a:	d11b      	bne.n	8002f74 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002f3c:	687a      	ldr	r2, [r7, #4]
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	212c      	movs	r1, #44	; 0x2c
 8002f42:	fb01 f303 	mul.w	r3, r1, r3
 8002f46:	4413      	add	r3, r2
 8002f48:	3361      	adds	r3, #97	; 0x61
 8002f4a:	2208      	movs	r2, #8
 8002f4c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	697a      	ldr	r2, [r7, #20]
 8002f54:	b2d2      	uxtb	r2, r2
 8002f56:	4611      	mov	r1, r2
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f002 fcc0 	bl	80058de <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	015a      	lsls	r2, r3, #5
 8002f62:	69bb      	ldr	r3, [r7, #24]
 8002f64:	4413      	add	r3, r2
 8002f66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f6a:	461a      	mov	r2, r3
 8002f6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f70:	6093      	str	r3, [r2, #8]
}
 8002f72:	e14a      	b.n	800320a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002f74:	697b      	ldr	r3, [r7, #20]
 8002f76:	015a      	lsls	r2, r3, #5
 8002f78:	69bb      	ldr	r3, [r7, #24]
 8002f7a:	4413      	add	r3, r2
 8002f7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	f003 0302 	and.w	r3, r3, #2
 8002f86:	2b02      	cmp	r3, #2
 8002f88:	f040 813f 	bne.w	800320a <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002f8c:	687a      	ldr	r2, [r7, #4]
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	212c      	movs	r1, #44	; 0x2c
 8002f92:	fb01 f303 	mul.w	r3, r1, r3
 8002f96:	4413      	add	r3, r2
 8002f98:	3361      	adds	r3, #97	; 0x61
 8002f9a:	781b      	ldrb	r3, [r3, #0]
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d17d      	bne.n	800309c <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002fa0:	687a      	ldr	r2, [r7, #4]
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	212c      	movs	r1, #44	; 0x2c
 8002fa6:	fb01 f303 	mul.w	r3, r1, r3
 8002faa:	4413      	add	r3, r2
 8002fac:	3360      	adds	r3, #96	; 0x60
 8002fae:	2201      	movs	r2, #1
 8002fb0:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002fb2:	687a      	ldr	r2, [r7, #4]
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	212c      	movs	r1, #44	; 0x2c
 8002fb8:	fb01 f303 	mul.w	r3, r1, r3
 8002fbc:	4413      	add	r3, r2
 8002fbe:	333f      	adds	r3, #63	; 0x3f
 8002fc0:	781b      	ldrb	r3, [r3, #0]
 8002fc2:	2b02      	cmp	r3, #2
 8002fc4:	d00a      	beq.n	8002fdc <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002fc6:	687a      	ldr	r2, [r7, #4]
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	212c      	movs	r1, #44	; 0x2c
 8002fcc:	fb01 f303 	mul.w	r3, r1, r3
 8002fd0:	4413      	add	r3, r2
 8002fd2:	333f      	adds	r3, #63	; 0x3f
 8002fd4:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002fd6:	2b03      	cmp	r3, #3
 8002fd8:	f040 8100 	bne.w	80031dc <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	691b      	ldr	r3, [r3, #16]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d113      	bne.n	800300c <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002fe4:	687a      	ldr	r2, [r7, #4]
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	212c      	movs	r1, #44	; 0x2c
 8002fea:	fb01 f303 	mul.w	r3, r1, r3
 8002fee:	4413      	add	r3, r2
 8002ff0:	3355      	adds	r3, #85	; 0x55
 8002ff2:	781b      	ldrb	r3, [r3, #0]
 8002ff4:	f083 0301 	eor.w	r3, r3, #1
 8002ff8:	b2d8      	uxtb	r0, r3
 8002ffa:	687a      	ldr	r2, [r7, #4]
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	212c      	movs	r1, #44	; 0x2c
 8003000:	fb01 f303 	mul.w	r3, r1, r3
 8003004:	4413      	add	r3, r2
 8003006:	3355      	adds	r3, #85	; 0x55
 8003008:	4602      	mov	r2, r0
 800300a:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	691b      	ldr	r3, [r3, #16]
 8003010:	2b01      	cmp	r3, #1
 8003012:	f040 80e3 	bne.w	80031dc <HCD_HC_OUT_IRQHandler+0x69c>
 8003016:	687a      	ldr	r2, [r7, #4]
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	212c      	movs	r1, #44	; 0x2c
 800301c:	fb01 f303 	mul.w	r3, r1, r3
 8003020:	4413      	add	r3, r2
 8003022:	334c      	adds	r3, #76	; 0x4c
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	2b00      	cmp	r3, #0
 8003028:	f000 80d8 	beq.w	80031dc <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 800302c:	687a      	ldr	r2, [r7, #4]
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	212c      	movs	r1, #44	; 0x2c
 8003032:	fb01 f303 	mul.w	r3, r1, r3
 8003036:	4413      	add	r3, r2
 8003038:	334c      	adds	r3, #76	; 0x4c
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	6879      	ldr	r1, [r7, #4]
 800303e:	697a      	ldr	r2, [r7, #20]
 8003040:	202c      	movs	r0, #44	; 0x2c
 8003042:	fb00 f202 	mul.w	r2, r0, r2
 8003046:	440a      	add	r2, r1
 8003048:	3240      	adds	r2, #64	; 0x40
 800304a:	8812      	ldrh	r2, [r2, #0]
 800304c:	4413      	add	r3, r2
 800304e:	3b01      	subs	r3, #1
 8003050:	6879      	ldr	r1, [r7, #4]
 8003052:	697a      	ldr	r2, [r7, #20]
 8003054:	202c      	movs	r0, #44	; 0x2c
 8003056:	fb00 f202 	mul.w	r2, r0, r2
 800305a:	440a      	add	r2, r1
 800305c:	3240      	adds	r2, #64	; 0x40
 800305e:	8812      	ldrh	r2, [r2, #0]
 8003060:	fbb3 f3f2 	udiv	r3, r3, r2
 8003064:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	f003 0301 	and.w	r3, r3, #1
 800306c:	2b00      	cmp	r3, #0
 800306e:	f000 80b5 	beq.w	80031dc <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8003072:	687a      	ldr	r2, [r7, #4]
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	212c      	movs	r1, #44	; 0x2c
 8003078:	fb01 f303 	mul.w	r3, r1, r3
 800307c:	4413      	add	r3, r2
 800307e:	3355      	adds	r3, #85	; 0x55
 8003080:	781b      	ldrb	r3, [r3, #0]
 8003082:	f083 0301 	eor.w	r3, r3, #1
 8003086:	b2d8      	uxtb	r0, r3
 8003088:	687a      	ldr	r2, [r7, #4]
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	212c      	movs	r1, #44	; 0x2c
 800308e:	fb01 f303 	mul.w	r3, r1, r3
 8003092:	4413      	add	r3, r2
 8003094:	3355      	adds	r3, #85	; 0x55
 8003096:	4602      	mov	r2, r0
 8003098:	701a      	strb	r2, [r3, #0]
 800309a:	e09f      	b.n	80031dc <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800309c:	687a      	ldr	r2, [r7, #4]
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	212c      	movs	r1, #44	; 0x2c
 80030a2:	fb01 f303 	mul.w	r3, r1, r3
 80030a6:	4413      	add	r3, r2
 80030a8:	3361      	adds	r3, #97	; 0x61
 80030aa:	781b      	ldrb	r3, [r3, #0]
 80030ac:	2b03      	cmp	r3, #3
 80030ae:	d109      	bne.n	80030c4 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80030b0:	687a      	ldr	r2, [r7, #4]
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	212c      	movs	r1, #44	; 0x2c
 80030b6:	fb01 f303 	mul.w	r3, r1, r3
 80030ba:	4413      	add	r3, r2
 80030bc:	3360      	adds	r3, #96	; 0x60
 80030be:	2202      	movs	r2, #2
 80030c0:	701a      	strb	r2, [r3, #0]
 80030c2:	e08b      	b.n	80031dc <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80030c4:	687a      	ldr	r2, [r7, #4]
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	212c      	movs	r1, #44	; 0x2c
 80030ca:	fb01 f303 	mul.w	r3, r1, r3
 80030ce:	4413      	add	r3, r2
 80030d0:	3361      	adds	r3, #97	; 0x61
 80030d2:	781b      	ldrb	r3, [r3, #0]
 80030d4:	2b04      	cmp	r3, #4
 80030d6:	d109      	bne.n	80030ec <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80030d8:	687a      	ldr	r2, [r7, #4]
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	212c      	movs	r1, #44	; 0x2c
 80030de:	fb01 f303 	mul.w	r3, r1, r3
 80030e2:	4413      	add	r3, r2
 80030e4:	3360      	adds	r3, #96	; 0x60
 80030e6:	2202      	movs	r2, #2
 80030e8:	701a      	strb	r2, [r3, #0]
 80030ea:	e077      	b.n	80031dc <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80030ec:	687a      	ldr	r2, [r7, #4]
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	212c      	movs	r1, #44	; 0x2c
 80030f2:	fb01 f303 	mul.w	r3, r1, r3
 80030f6:	4413      	add	r3, r2
 80030f8:	3361      	adds	r3, #97	; 0x61
 80030fa:	781b      	ldrb	r3, [r3, #0]
 80030fc:	2b05      	cmp	r3, #5
 80030fe:	d109      	bne.n	8003114 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003100:	687a      	ldr	r2, [r7, #4]
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	212c      	movs	r1, #44	; 0x2c
 8003106:	fb01 f303 	mul.w	r3, r1, r3
 800310a:	4413      	add	r3, r2
 800310c:	3360      	adds	r3, #96	; 0x60
 800310e:	2205      	movs	r2, #5
 8003110:	701a      	strb	r2, [r3, #0]
 8003112:	e063      	b.n	80031dc <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003114:	687a      	ldr	r2, [r7, #4]
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	212c      	movs	r1, #44	; 0x2c
 800311a:	fb01 f303 	mul.w	r3, r1, r3
 800311e:	4413      	add	r3, r2
 8003120:	3361      	adds	r3, #97	; 0x61
 8003122:	781b      	ldrb	r3, [r3, #0]
 8003124:	2b06      	cmp	r3, #6
 8003126:	d009      	beq.n	800313c <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003128:	687a      	ldr	r2, [r7, #4]
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	212c      	movs	r1, #44	; 0x2c
 800312e:	fb01 f303 	mul.w	r3, r1, r3
 8003132:	4413      	add	r3, r2
 8003134:	3361      	adds	r3, #97	; 0x61
 8003136:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003138:	2b08      	cmp	r3, #8
 800313a:	d14f      	bne.n	80031dc <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 800313c:	687a      	ldr	r2, [r7, #4]
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	212c      	movs	r1, #44	; 0x2c
 8003142:	fb01 f303 	mul.w	r3, r1, r3
 8003146:	4413      	add	r3, r2
 8003148:	335c      	adds	r3, #92	; 0x5c
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	1c5a      	adds	r2, r3, #1
 800314e:	6879      	ldr	r1, [r7, #4]
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	202c      	movs	r0, #44	; 0x2c
 8003154:	fb00 f303 	mul.w	r3, r0, r3
 8003158:	440b      	add	r3, r1
 800315a:	335c      	adds	r3, #92	; 0x5c
 800315c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800315e:	687a      	ldr	r2, [r7, #4]
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	212c      	movs	r1, #44	; 0x2c
 8003164:	fb01 f303 	mul.w	r3, r1, r3
 8003168:	4413      	add	r3, r2
 800316a:	335c      	adds	r3, #92	; 0x5c
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	2b02      	cmp	r3, #2
 8003170:	d912      	bls.n	8003198 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003172:	687a      	ldr	r2, [r7, #4]
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	212c      	movs	r1, #44	; 0x2c
 8003178:	fb01 f303 	mul.w	r3, r1, r3
 800317c:	4413      	add	r3, r2
 800317e:	335c      	adds	r3, #92	; 0x5c
 8003180:	2200      	movs	r2, #0
 8003182:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003184:	687a      	ldr	r2, [r7, #4]
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	212c      	movs	r1, #44	; 0x2c
 800318a:	fb01 f303 	mul.w	r3, r1, r3
 800318e:	4413      	add	r3, r2
 8003190:	3360      	adds	r3, #96	; 0x60
 8003192:	2204      	movs	r2, #4
 8003194:	701a      	strb	r2, [r3, #0]
 8003196:	e021      	b.n	80031dc <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003198:	687a      	ldr	r2, [r7, #4]
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	212c      	movs	r1, #44	; 0x2c
 800319e:	fb01 f303 	mul.w	r3, r1, r3
 80031a2:	4413      	add	r3, r2
 80031a4:	3360      	adds	r3, #96	; 0x60
 80031a6:	2202      	movs	r2, #2
 80031a8:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	015a      	lsls	r2, r3, #5
 80031ae:	69bb      	ldr	r3, [r7, #24]
 80031b0:	4413      	add	r3, r2
 80031b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80031c0:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80031c8:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	015a      	lsls	r2, r3, #5
 80031ce:	69bb      	ldr	r3, [r7, #24]
 80031d0:	4413      	add	r3, r2
 80031d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031d6:	461a      	mov	r2, r3
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	015a      	lsls	r2, r3, #5
 80031e0:	69bb      	ldr	r3, [r7, #24]
 80031e2:	4413      	add	r3, r2
 80031e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031e8:	461a      	mov	r2, r3
 80031ea:	2302      	movs	r3, #2
 80031ec:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	b2d9      	uxtb	r1, r3
 80031f2:	687a      	ldr	r2, [r7, #4]
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	202c      	movs	r0, #44	; 0x2c
 80031f8:	fb00 f303 	mul.w	r3, r0, r3
 80031fc:	4413      	add	r3, r2
 80031fe:	3360      	adds	r3, #96	; 0x60
 8003200:	781b      	ldrb	r3, [r3, #0]
 8003202:	461a      	mov	r2, r3
 8003204:	6878      	ldr	r0, [r7, #4]
 8003206:	f003 fe73 	bl	8006ef0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800320a:	bf00      	nop
 800320c:	3720      	adds	r7, #32
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}

08003212 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003212:	b580      	push	{r7, lr}
 8003214:	b08a      	sub	sp, #40	; 0x28
 8003216:	af00      	add	r7, sp, #0
 8003218:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003222:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	6a1b      	ldr	r3, [r3, #32]
 800322a:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 800322c:	69fb      	ldr	r3, [r7, #28]
 800322e:	f003 030f 	and.w	r3, r3, #15
 8003232:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003234:	69fb      	ldr	r3, [r7, #28]
 8003236:	0c5b      	lsrs	r3, r3, #17
 8003238:	f003 030f 	and.w	r3, r3, #15
 800323c:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800323e:	69fb      	ldr	r3, [r7, #28]
 8003240:	091b      	lsrs	r3, r3, #4
 8003242:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003246:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	2b02      	cmp	r3, #2
 800324c:	d004      	beq.n	8003258 <HCD_RXQLVL_IRQHandler+0x46>
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	2b05      	cmp	r3, #5
 8003252:	f000 80a9 	beq.w	80033a8 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003256:	e0aa      	b.n	80033ae <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	2b00      	cmp	r3, #0
 800325c:	f000 80a6 	beq.w	80033ac <HCD_RXQLVL_IRQHandler+0x19a>
 8003260:	687a      	ldr	r2, [r7, #4]
 8003262:	69bb      	ldr	r3, [r7, #24]
 8003264:	212c      	movs	r1, #44	; 0x2c
 8003266:	fb01 f303 	mul.w	r3, r1, r3
 800326a:	4413      	add	r3, r2
 800326c:	3344      	adds	r3, #68	; 0x44
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	2b00      	cmp	r3, #0
 8003272:	f000 809b 	beq.w	80033ac <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8003276:	687a      	ldr	r2, [r7, #4]
 8003278:	69bb      	ldr	r3, [r7, #24]
 800327a:	212c      	movs	r1, #44	; 0x2c
 800327c:	fb01 f303 	mul.w	r3, r1, r3
 8003280:	4413      	add	r3, r2
 8003282:	3350      	adds	r3, #80	; 0x50
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	441a      	add	r2, r3
 800328a:	6879      	ldr	r1, [r7, #4]
 800328c:	69bb      	ldr	r3, [r7, #24]
 800328e:	202c      	movs	r0, #44	; 0x2c
 8003290:	fb00 f303 	mul.w	r3, r0, r3
 8003294:	440b      	add	r3, r1
 8003296:	334c      	adds	r3, #76	; 0x4c
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	429a      	cmp	r2, r3
 800329c:	d87a      	bhi.n	8003394 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6818      	ldr	r0, [r3, #0]
 80032a2:	687a      	ldr	r2, [r7, #4]
 80032a4:	69bb      	ldr	r3, [r7, #24]
 80032a6:	212c      	movs	r1, #44	; 0x2c
 80032a8:	fb01 f303 	mul.w	r3, r1, r3
 80032ac:	4413      	add	r3, r2
 80032ae:	3344      	adds	r3, #68	; 0x44
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	693a      	ldr	r2, [r7, #16]
 80032b4:	b292      	uxth	r2, r2
 80032b6:	4619      	mov	r1, r3
 80032b8:	f001 fe92 	bl	8004fe0 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80032bc:	687a      	ldr	r2, [r7, #4]
 80032be:	69bb      	ldr	r3, [r7, #24]
 80032c0:	212c      	movs	r1, #44	; 0x2c
 80032c2:	fb01 f303 	mul.w	r3, r1, r3
 80032c6:	4413      	add	r3, r2
 80032c8:	3344      	adds	r3, #68	; 0x44
 80032ca:	681a      	ldr	r2, [r3, #0]
 80032cc:	693b      	ldr	r3, [r7, #16]
 80032ce:	441a      	add	r2, r3
 80032d0:	6879      	ldr	r1, [r7, #4]
 80032d2:	69bb      	ldr	r3, [r7, #24]
 80032d4:	202c      	movs	r0, #44	; 0x2c
 80032d6:	fb00 f303 	mul.w	r3, r0, r3
 80032da:	440b      	add	r3, r1
 80032dc:	3344      	adds	r3, #68	; 0x44
 80032de:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80032e0:	687a      	ldr	r2, [r7, #4]
 80032e2:	69bb      	ldr	r3, [r7, #24]
 80032e4:	212c      	movs	r1, #44	; 0x2c
 80032e6:	fb01 f303 	mul.w	r3, r1, r3
 80032ea:	4413      	add	r3, r2
 80032ec:	3350      	adds	r3, #80	; 0x50
 80032ee:	681a      	ldr	r2, [r3, #0]
 80032f0:	693b      	ldr	r3, [r7, #16]
 80032f2:	441a      	add	r2, r3
 80032f4:	6879      	ldr	r1, [r7, #4]
 80032f6:	69bb      	ldr	r3, [r7, #24]
 80032f8:	202c      	movs	r0, #44	; 0x2c
 80032fa:	fb00 f303 	mul.w	r3, r0, r3
 80032fe:	440b      	add	r3, r1
 8003300:	3350      	adds	r3, #80	; 0x50
 8003302:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003304:	69bb      	ldr	r3, [r7, #24]
 8003306:	015a      	lsls	r2, r3, #5
 8003308:	6a3b      	ldr	r3, [r7, #32]
 800330a:	4413      	add	r3, r2
 800330c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003310:	691b      	ldr	r3, [r3, #16]
 8003312:	0cdb      	lsrs	r3, r3, #19
 8003314:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003318:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800331a:	687a      	ldr	r2, [r7, #4]
 800331c:	69bb      	ldr	r3, [r7, #24]
 800331e:	212c      	movs	r1, #44	; 0x2c
 8003320:	fb01 f303 	mul.w	r3, r1, r3
 8003324:	4413      	add	r3, r2
 8003326:	3340      	adds	r3, #64	; 0x40
 8003328:	881b      	ldrh	r3, [r3, #0]
 800332a:	461a      	mov	r2, r3
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	4293      	cmp	r3, r2
 8003330:	d13c      	bne.n	80033ac <HCD_RXQLVL_IRQHandler+0x19a>
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d039      	beq.n	80033ac <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003338:	69bb      	ldr	r3, [r7, #24]
 800333a:	015a      	lsls	r2, r3, #5
 800333c:	6a3b      	ldr	r3, [r7, #32]
 800333e:	4413      	add	r3, r2
 8003340:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800334e:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003356:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003358:	69bb      	ldr	r3, [r7, #24]
 800335a:	015a      	lsls	r2, r3, #5
 800335c:	6a3b      	ldr	r3, [r7, #32]
 800335e:	4413      	add	r3, r2
 8003360:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003364:	461a      	mov	r2, r3
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 800336a:	687a      	ldr	r2, [r7, #4]
 800336c:	69bb      	ldr	r3, [r7, #24]
 800336e:	212c      	movs	r1, #44	; 0x2c
 8003370:	fb01 f303 	mul.w	r3, r1, r3
 8003374:	4413      	add	r3, r2
 8003376:	3354      	adds	r3, #84	; 0x54
 8003378:	781b      	ldrb	r3, [r3, #0]
 800337a:	f083 0301 	eor.w	r3, r3, #1
 800337e:	b2d8      	uxtb	r0, r3
 8003380:	687a      	ldr	r2, [r7, #4]
 8003382:	69bb      	ldr	r3, [r7, #24]
 8003384:	212c      	movs	r1, #44	; 0x2c
 8003386:	fb01 f303 	mul.w	r3, r1, r3
 800338a:	4413      	add	r3, r2
 800338c:	3354      	adds	r3, #84	; 0x54
 800338e:	4602      	mov	r2, r0
 8003390:	701a      	strb	r2, [r3, #0]
      break;
 8003392:	e00b      	b.n	80033ac <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003394:	687a      	ldr	r2, [r7, #4]
 8003396:	69bb      	ldr	r3, [r7, #24]
 8003398:	212c      	movs	r1, #44	; 0x2c
 800339a:	fb01 f303 	mul.w	r3, r1, r3
 800339e:	4413      	add	r3, r2
 80033a0:	3360      	adds	r3, #96	; 0x60
 80033a2:	2204      	movs	r2, #4
 80033a4:	701a      	strb	r2, [r3, #0]
      break;
 80033a6:	e001      	b.n	80033ac <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 80033a8:	bf00      	nop
 80033aa:	e000      	b.n	80033ae <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 80033ac:	bf00      	nop
  }
}
 80033ae:	bf00      	nop
 80033b0:	3728      	adds	r7, #40	; 0x28
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}

080033b6 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80033b6:	b580      	push	{r7, lr}
 80033b8:	b086      	sub	sp, #24
 80033ba:	af00      	add	r7, sp, #0
 80033bc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80033e2:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	f003 0302 	and.w	r3, r3, #2
 80033ea:	2b02      	cmp	r3, #2
 80033ec:	d10b      	bne.n	8003406 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	f003 0301 	and.w	r3, r3, #1
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	d102      	bne.n	80033fe <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80033f8:	6878      	ldr	r0, [r7, #4]
 80033fa:	f003 fd5d 	bl	8006eb8 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	f043 0302 	orr.w	r3, r3, #2
 8003404:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	f003 0308 	and.w	r3, r3, #8
 800340c:	2b08      	cmp	r3, #8
 800340e:	d132      	bne.n	8003476 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	f043 0308 	orr.w	r3, r3, #8
 8003416:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	f003 0304 	and.w	r3, r3, #4
 800341e:	2b04      	cmp	r3, #4
 8003420:	d126      	bne.n	8003470 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	699b      	ldr	r3, [r3, #24]
 8003426:	2b02      	cmp	r3, #2
 8003428:	d113      	bne.n	8003452 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003430:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003434:	d106      	bne.n	8003444 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	2102      	movs	r1, #2
 800343c:	4618      	mov	r0, r3
 800343e:	f001 ff3d 	bl	80052bc <USB_InitFSLSPClkSel>
 8003442:	e011      	b.n	8003468 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	2101      	movs	r1, #1
 800344a:	4618      	mov	r0, r3
 800344c:	f001 ff36 	bl	80052bc <USB_InitFSLSPClkSel>
 8003450:	e00a      	b.n	8003468 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	68db      	ldr	r3, [r3, #12]
 8003456:	2b01      	cmp	r3, #1
 8003458:	d106      	bne.n	8003468 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 800345a:	693b      	ldr	r3, [r7, #16]
 800345c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003460:	461a      	mov	r2, r3
 8003462:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003466:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003468:	6878      	ldr	r0, [r7, #4]
 800346a:	f003 fd4f 	bl	8006f0c <HAL_HCD_PortEnabled_Callback>
 800346e:	e002      	b.n	8003476 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003470:	6878      	ldr	r0, [r7, #4]
 8003472:	f003 fd59 	bl	8006f28 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	f003 0320 	and.w	r3, r3, #32
 800347c:	2b20      	cmp	r3, #32
 800347e:	d103      	bne.n	8003488 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	f043 0320 	orr.w	r3, r3, #32
 8003486:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800348e:	461a      	mov	r2, r3
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	6013      	str	r3, [r2, #0]
}
 8003494:	bf00      	nop
 8003496:	3718      	adds	r7, #24
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}

0800349c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b084      	sub	sp, #16
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d101      	bne.n	80034ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	e12b      	b.n	8003706 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034b4:	b2db      	uxtb	r3, r3
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d106      	bne.n	80034c8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2200      	movs	r2, #0
 80034be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	f7fd fae8 	bl	8000a98 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2224      	movs	r2, #36	; 0x24
 80034cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f022 0201 	bic.w	r2, r2, #1
 80034de:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	681a      	ldr	r2, [r3, #0]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80034ee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80034fe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003500:	f001 fa20 	bl	8004944 <HAL_RCC_GetPCLK1Freq>
 8003504:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	4a81      	ldr	r2, [pc, #516]	; (8003710 <HAL_I2C_Init+0x274>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d807      	bhi.n	8003520 <HAL_I2C_Init+0x84>
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	4a80      	ldr	r2, [pc, #512]	; (8003714 <HAL_I2C_Init+0x278>)
 8003514:	4293      	cmp	r3, r2
 8003516:	bf94      	ite	ls
 8003518:	2301      	movls	r3, #1
 800351a:	2300      	movhi	r3, #0
 800351c:	b2db      	uxtb	r3, r3
 800351e:	e006      	b.n	800352e <HAL_I2C_Init+0x92>
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	4a7d      	ldr	r2, [pc, #500]	; (8003718 <HAL_I2C_Init+0x27c>)
 8003524:	4293      	cmp	r3, r2
 8003526:	bf94      	ite	ls
 8003528:	2301      	movls	r3, #1
 800352a:	2300      	movhi	r3, #0
 800352c:	b2db      	uxtb	r3, r3
 800352e:	2b00      	cmp	r3, #0
 8003530:	d001      	beq.n	8003536 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	e0e7      	b.n	8003706 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	4a78      	ldr	r2, [pc, #480]	; (800371c <HAL_I2C_Init+0x280>)
 800353a:	fba2 2303 	umull	r2, r3, r2, r3
 800353e:	0c9b      	lsrs	r3, r3, #18
 8003540:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	68ba      	ldr	r2, [r7, #8]
 8003552:	430a      	orrs	r2, r1
 8003554:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	6a1b      	ldr	r3, [r3, #32]
 800355c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	4a6a      	ldr	r2, [pc, #424]	; (8003710 <HAL_I2C_Init+0x274>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d802      	bhi.n	8003570 <HAL_I2C_Init+0xd4>
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	3301      	adds	r3, #1
 800356e:	e009      	b.n	8003584 <HAL_I2C_Init+0xe8>
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003576:	fb02 f303 	mul.w	r3, r2, r3
 800357a:	4a69      	ldr	r2, [pc, #420]	; (8003720 <HAL_I2C_Init+0x284>)
 800357c:	fba2 2303 	umull	r2, r3, r2, r3
 8003580:	099b      	lsrs	r3, r3, #6
 8003582:	3301      	adds	r3, #1
 8003584:	687a      	ldr	r2, [r7, #4]
 8003586:	6812      	ldr	r2, [r2, #0]
 8003588:	430b      	orrs	r3, r1
 800358a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	69db      	ldr	r3, [r3, #28]
 8003592:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003596:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	495c      	ldr	r1, [pc, #368]	; (8003710 <HAL_I2C_Init+0x274>)
 80035a0:	428b      	cmp	r3, r1
 80035a2:	d819      	bhi.n	80035d8 <HAL_I2C_Init+0x13c>
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	1e59      	subs	r1, r3, #1
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	005b      	lsls	r3, r3, #1
 80035ae:	fbb1 f3f3 	udiv	r3, r1, r3
 80035b2:	1c59      	adds	r1, r3, #1
 80035b4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80035b8:	400b      	ands	r3, r1
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d00a      	beq.n	80035d4 <HAL_I2C_Init+0x138>
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	1e59      	subs	r1, r3, #1
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	005b      	lsls	r3, r3, #1
 80035c8:	fbb1 f3f3 	udiv	r3, r1, r3
 80035cc:	3301      	adds	r3, #1
 80035ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035d2:	e051      	b.n	8003678 <HAL_I2C_Init+0x1dc>
 80035d4:	2304      	movs	r3, #4
 80035d6:	e04f      	b.n	8003678 <HAL_I2C_Init+0x1dc>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d111      	bne.n	8003604 <HAL_I2C_Init+0x168>
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	1e58      	subs	r0, r3, #1
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6859      	ldr	r1, [r3, #4]
 80035e8:	460b      	mov	r3, r1
 80035ea:	005b      	lsls	r3, r3, #1
 80035ec:	440b      	add	r3, r1
 80035ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80035f2:	3301      	adds	r3, #1
 80035f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	bf0c      	ite	eq
 80035fc:	2301      	moveq	r3, #1
 80035fe:	2300      	movne	r3, #0
 8003600:	b2db      	uxtb	r3, r3
 8003602:	e012      	b.n	800362a <HAL_I2C_Init+0x18e>
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	1e58      	subs	r0, r3, #1
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6859      	ldr	r1, [r3, #4]
 800360c:	460b      	mov	r3, r1
 800360e:	009b      	lsls	r3, r3, #2
 8003610:	440b      	add	r3, r1
 8003612:	0099      	lsls	r1, r3, #2
 8003614:	440b      	add	r3, r1
 8003616:	fbb0 f3f3 	udiv	r3, r0, r3
 800361a:	3301      	adds	r3, #1
 800361c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003620:	2b00      	cmp	r3, #0
 8003622:	bf0c      	ite	eq
 8003624:	2301      	moveq	r3, #1
 8003626:	2300      	movne	r3, #0
 8003628:	b2db      	uxtb	r3, r3
 800362a:	2b00      	cmp	r3, #0
 800362c:	d001      	beq.n	8003632 <HAL_I2C_Init+0x196>
 800362e:	2301      	movs	r3, #1
 8003630:	e022      	b.n	8003678 <HAL_I2C_Init+0x1dc>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	689b      	ldr	r3, [r3, #8]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d10e      	bne.n	8003658 <HAL_I2C_Init+0x1bc>
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	1e58      	subs	r0, r3, #1
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6859      	ldr	r1, [r3, #4]
 8003642:	460b      	mov	r3, r1
 8003644:	005b      	lsls	r3, r3, #1
 8003646:	440b      	add	r3, r1
 8003648:	fbb0 f3f3 	udiv	r3, r0, r3
 800364c:	3301      	adds	r3, #1
 800364e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003652:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003656:	e00f      	b.n	8003678 <HAL_I2C_Init+0x1dc>
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	1e58      	subs	r0, r3, #1
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6859      	ldr	r1, [r3, #4]
 8003660:	460b      	mov	r3, r1
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	440b      	add	r3, r1
 8003666:	0099      	lsls	r1, r3, #2
 8003668:	440b      	add	r3, r1
 800366a:	fbb0 f3f3 	udiv	r3, r0, r3
 800366e:	3301      	adds	r3, #1
 8003670:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003674:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003678:	6879      	ldr	r1, [r7, #4]
 800367a:	6809      	ldr	r1, [r1, #0]
 800367c:	4313      	orrs	r3, r2
 800367e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	69da      	ldr	r2, [r3, #28]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6a1b      	ldr	r3, [r3, #32]
 8003692:	431a      	orrs	r2, r3
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	430a      	orrs	r2, r1
 800369a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	689b      	ldr	r3, [r3, #8]
 80036a2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80036a6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80036aa:	687a      	ldr	r2, [r7, #4]
 80036ac:	6911      	ldr	r1, [r2, #16]
 80036ae:	687a      	ldr	r2, [r7, #4]
 80036b0:	68d2      	ldr	r2, [r2, #12]
 80036b2:	4311      	orrs	r1, r2
 80036b4:	687a      	ldr	r2, [r7, #4]
 80036b6:	6812      	ldr	r2, [r2, #0]
 80036b8:	430b      	orrs	r3, r1
 80036ba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	68db      	ldr	r3, [r3, #12]
 80036c2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	695a      	ldr	r2, [r3, #20]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	699b      	ldr	r3, [r3, #24]
 80036ce:	431a      	orrs	r2, r3
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	430a      	orrs	r2, r1
 80036d6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f042 0201 	orr.w	r2, r2, #1
 80036e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2200      	movs	r2, #0
 80036ec:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2220      	movs	r2, #32
 80036f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2200      	movs	r2, #0
 80036fa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2200      	movs	r2, #0
 8003700:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003704:	2300      	movs	r3, #0
}
 8003706:	4618      	mov	r0, r3
 8003708:	3710      	adds	r7, #16
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}
 800370e:	bf00      	nop
 8003710:	000186a0 	.word	0x000186a0
 8003714:	001e847f 	.word	0x001e847f
 8003718:	003d08ff 	.word	0x003d08ff
 800371c:	431bde83 	.word	0x431bde83
 8003720:	10624dd3 	.word	0x10624dd3

08003724 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b088      	sub	sp, #32
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d101      	bne.n	8003736 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	e128      	b.n	8003988 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800373c:	b2db      	uxtb	r3, r3
 800373e:	2b00      	cmp	r3, #0
 8003740:	d109      	bne.n	8003756 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2200      	movs	r2, #0
 8003746:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	4a90      	ldr	r2, [pc, #576]	; (8003990 <HAL_I2S_Init+0x26c>)
 800374e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003750:	6878      	ldr	r0, [r7, #4]
 8003752:	f7fd f9e9 	bl	8000b28 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2202      	movs	r2, #2
 800375a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	69db      	ldr	r3, [r3, #28]
 8003764:	687a      	ldr	r2, [r7, #4]
 8003766:	6812      	ldr	r2, [r2, #0]
 8003768:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800376c:	f023 030f 	bic.w	r3, r3, #15
 8003770:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	2202      	movs	r2, #2
 8003778:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	695b      	ldr	r3, [r3, #20]
 800377e:	2b02      	cmp	r3, #2
 8003780:	d060      	beq.n	8003844 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	68db      	ldr	r3, [r3, #12]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d102      	bne.n	8003790 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800378a:	2310      	movs	r3, #16
 800378c:	617b      	str	r3, [r7, #20]
 800378e:	e001      	b.n	8003794 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003790:	2320      	movs	r3, #32
 8003792:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	689b      	ldr	r3, [r3, #8]
 8003798:	2b20      	cmp	r3, #32
 800379a:	d802      	bhi.n	80037a2 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	005b      	lsls	r3, r3, #1
 80037a0:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80037a2:	2001      	movs	r0, #1
 80037a4:	f001 f9c4 	bl	8004b30 <HAL_RCCEx_GetPeriphCLKFreq>
 80037a8:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	691b      	ldr	r3, [r3, #16]
 80037ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037b2:	d125      	bne.n	8003800 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	68db      	ldr	r3, [r3, #12]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d010      	beq.n	80037de <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	009b      	lsls	r3, r3, #2
 80037c0:	68fa      	ldr	r2, [r7, #12]
 80037c2:	fbb2 f2f3 	udiv	r2, r2, r3
 80037c6:	4613      	mov	r3, r2
 80037c8:	009b      	lsls	r3, r3, #2
 80037ca:	4413      	add	r3, r2
 80037cc:	005b      	lsls	r3, r3, #1
 80037ce:	461a      	mov	r2, r3
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	695b      	ldr	r3, [r3, #20]
 80037d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80037d8:	3305      	adds	r3, #5
 80037da:	613b      	str	r3, [r7, #16]
 80037dc:	e01f      	b.n	800381e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	00db      	lsls	r3, r3, #3
 80037e2:	68fa      	ldr	r2, [r7, #12]
 80037e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80037e8:	4613      	mov	r3, r2
 80037ea:	009b      	lsls	r3, r3, #2
 80037ec:	4413      	add	r3, r2
 80037ee:	005b      	lsls	r3, r3, #1
 80037f0:	461a      	mov	r2, r3
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	695b      	ldr	r3, [r3, #20]
 80037f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80037fa:	3305      	adds	r3, #5
 80037fc:	613b      	str	r3, [r7, #16]
 80037fe:	e00e      	b.n	800381e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003800:	68fa      	ldr	r2, [r7, #12]
 8003802:	697b      	ldr	r3, [r7, #20]
 8003804:	fbb2 f2f3 	udiv	r2, r2, r3
 8003808:	4613      	mov	r3, r2
 800380a:	009b      	lsls	r3, r3, #2
 800380c:	4413      	add	r3, r2
 800380e:	005b      	lsls	r3, r3, #1
 8003810:	461a      	mov	r2, r3
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	695b      	ldr	r3, [r3, #20]
 8003816:	fbb2 f3f3 	udiv	r3, r2, r3
 800381a:	3305      	adds	r3, #5
 800381c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800381e:	693b      	ldr	r3, [r7, #16]
 8003820:	4a5c      	ldr	r2, [pc, #368]	; (8003994 <HAL_I2S_Init+0x270>)
 8003822:	fba2 2303 	umull	r2, r3, r2, r3
 8003826:	08db      	lsrs	r3, r3, #3
 8003828:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	f003 0301 	and.w	r3, r3, #1
 8003830:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003832:	693a      	ldr	r2, [r7, #16]
 8003834:	69bb      	ldr	r3, [r7, #24]
 8003836:	1ad3      	subs	r3, r2, r3
 8003838:	085b      	lsrs	r3, r3, #1
 800383a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800383c:	69bb      	ldr	r3, [r7, #24]
 800383e:	021b      	lsls	r3, r3, #8
 8003840:	61bb      	str	r3, [r7, #24]
 8003842:	e003      	b.n	800384c <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003844:	2302      	movs	r3, #2
 8003846:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003848:	2300      	movs	r3, #0
 800384a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800384c:	69fb      	ldr	r3, [r7, #28]
 800384e:	2b01      	cmp	r3, #1
 8003850:	d902      	bls.n	8003858 <HAL_I2S_Init+0x134>
 8003852:	69fb      	ldr	r3, [r7, #28]
 8003854:	2bff      	cmp	r3, #255	; 0xff
 8003856:	d907      	bls.n	8003868 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800385c:	f043 0210 	orr.w	r2, r3, #16
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003864:	2301      	movs	r3, #1
 8003866:	e08f      	b.n	8003988 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	691a      	ldr	r2, [r3, #16]
 800386c:	69bb      	ldr	r3, [r7, #24]
 800386e:	ea42 0103 	orr.w	r1, r2, r3
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	69fa      	ldr	r2, [r7, #28]
 8003878:	430a      	orrs	r2, r1
 800387a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	69db      	ldr	r3, [r3, #28]
 8003882:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003886:	f023 030f 	bic.w	r3, r3, #15
 800388a:	687a      	ldr	r2, [r7, #4]
 800388c:	6851      	ldr	r1, [r2, #4]
 800388e:	687a      	ldr	r2, [r7, #4]
 8003890:	6892      	ldr	r2, [r2, #8]
 8003892:	4311      	orrs	r1, r2
 8003894:	687a      	ldr	r2, [r7, #4]
 8003896:	68d2      	ldr	r2, [r2, #12]
 8003898:	4311      	orrs	r1, r2
 800389a:	687a      	ldr	r2, [r7, #4]
 800389c:	6992      	ldr	r2, [r2, #24]
 800389e:	430a      	orrs	r2, r1
 80038a0:	431a      	orrs	r2, r3
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80038aa:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6a1b      	ldr	r3, [r3, #32]
 80038b0:	2b01      	cmp	r3, #1
 80038b2:	d161      	bne.n	8003978 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	4a38      	ldr	r2, [pc, #224]	; (8003998 <HAL_I2S_Init+0x274>)
 80038b8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a37      	ldr	r2, [pc, #220]	; (800399c <HAL_I2S_Init+0x278>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d101      	bne.n	80038c8 <HAL_I2S_Init+0x1a4>
 80038c4:	4b36      	ldr	r3, [pc, #216]	; (80039a0 <HAL_I2S_Init+0x27c>)
 80038c6:	e001      	b.n	80038cc <HAL_I2S_Init+0x1a8>
 80038c8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038cc:	69db      	ldr	r3, [r3, #28]
 80038ce:	687a      	ldr	r2, [r7, #4]
 80038d0:	6812      	ldr	r2, [r2, #0]
 80038d2:	4932      	ldr	r1, [pc, #200]	; (800399c <HAL_I2S_Init+0x278>)
 80038d4:	428a      	cmp	r2, r1
 80038d6:	d101      	bne.n	80038dc <HAL_I2S_Init+0x1b8>
 80038d8:	4a31      	ldr	r2, [pc, #196]	; (80039a0 <HAL_I2S_Init+0x27c>)
 80038da:	e001      	b.n	80038e0 <HAL_I2S_Init+0x1bc>
 80038dc:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80038e0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80038e4:	f023 030f 	bic.w	r3, r3, #15
 80038e8:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a2b      	ldr	r2, [pc, #172]	; (800399c <HAL_I2S_Init+0x278>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d101      	bne.n	80038f8 <HAL_I2S_Init+0x1d4>
 80038f4:	4b2a      	ldr	r3, [pc, #168]	; (80039a0 <HAL_I2S_Init+0x27c>)
 80038f6:	e001      	b.n	80038fc <HAL_I2S_Init+0x1d8>
 80038f8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038fc:	2202      	movs	r2, #2
 80038fe:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a25      	ldr	r2, [pc, #148]	; (800399c <HAL_I2S_Init+0x278>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d101      	bne.n	800390e <HAL_I2S_Init+0x1ea>
 800390a:	4b25      	ldr	r3, [pc, #148]	; (80039a0 <HAL_I2S_Init+0x27c>)
 800390c:	e001      	b.n	8003912 <HAL_I2S_Init+0x1ee>
 800390e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003912:	69db      	ldr	r3, [r3, #28]
 8003914:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800391e:	d003      	beq.n	8003928 <HAL_I2S_Init+0x204>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d103      	bne.n	8003930 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003928:	f44f 7380 	mov.w	r3, #256	; 0x100
 800392c:	613b      	str	r3, [r7, #16]
 800392e:	e001      	b.n	8003934 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003930:	2300      	movs	r3, #0
 8003932:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	689b      	ldr	r3, [r3, #8]
 800393c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800393e:	4313      	orrs	r3, r2
 8003940:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	68db      	ldr	r3, [r3, #12]
 8003946:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003948:	4313      	orrs	r3, r2
 800394a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	699b      	ldr	r3, [r3, #24]
 8003950:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003952:	4313      	orrs	r3, r2
 8003954:	b29a      	uxth	r2, r3
 8003956:	897b      	ldrh	r3, [r7, #10]
 8003958:	4313      	orrs	r3, r2
 800395a:	b29b      	uxth	r3, r3
 800395c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003960:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a0d      	ldr	r2, [pc, #52]	; (800399c <HAL_I2S_Init+0x278>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d101      	bne.n	8003970 <HAL_I2S_Init+0x24c>
 800396c:	4b0c      	ldr	r3, [pc, #48]	; (80039a0 <HAL_I2S_Init+0x27c>)
 800396e:	e001      	b.n	8003974 <HAL_I2S_Init+0x250>
 8003970:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003974:	897a      	ldrh	r2, [r7, #10]
 8003976:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2200      	movs	r2, #0
 800397c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2201      	movs	r2, #1
 8003982:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003986:	2300      	movs	r3, #0
}
 8003988:	4618      	mov	r0, r3
 800398a:	3720      	adds	r7, #32
 800398c:	46bd      	mov	sp, r7
 800398e:	bd80      	pop	{r7, pc}
 8003990:	08003a9b 	.word	0x08003a9b
 8003994:	cccccccd 	.word	0xcccccccd
 8003998:	08003bb1 	.word	0x08003bb1
 800399c:	40003800 	.word	0x40003800
 80039a0:	40003400 	.word	0x40003400

080039a4 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b083      	sub	sp, #12
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80039ac:	bf00      	nop
 80039ae:	370c      	adds	r7, #12
 80039b0:	46bd      	mov	sp, r7
 80039b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b6:	4770      	bx	lr

080039b8 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b083      	sub	sp, #12
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80039c0:	bf00      	nop
 80039c2:	370c      	adds	r7, #12
 80039c4:	46bd      	mov	sp, r7
 80039c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ca:	4770      	bx	lr

080039cc <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b083      	sub	sp, #12
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80039d4:	bf00      	nop
 80039d6:	370c      	adds	r7, #12
 80039d8:	46bd      	mov	sp, r7
 80039da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039de:	4770      	bx	lr

080039e0 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b082      	sub	sp, #8
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ec:	881a      	ldrh	r2, [r3, #0]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f8:	1c9a      	adds	r2, r3, #2
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a02:	b29b      	uxth	r3, r3
 8003a04:	3b01      	subs	r3, #1
 8003a06:	b29a      	uxth	r2, r3
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a10:	b29b      	uxth	r3, r3
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d10e      	bne.n	8003a34 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	685a      	ldr	r2, [r3, #4]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003a24:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2201      	movs	r2, #1
 8003a2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003a2e:	6878      	ldr	r0, [r7, #4]
 8003a30:	f7ff ffb8 	bl	80039a4 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003a34:	bf00      	nop
 8003a36:	3708      	adds	r7, #8
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bd80      	pop	{r7, pc}

08003a3c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b082      	sub	sp, #8
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	68da      	ldr	r2, [r3, #12]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a4e:	b292      	uxth	r2, r2
 8003a50:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a56:	1c9a      	adds	r2, r3, #2
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003a60:	b29b      	uxth	r3, r3
 8003a62:	3b01      	subs	r3, #1
 8003a64:	b29a      	uxth	r2, r3
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003a6e:	b29b      	uxth	r3, r3
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d10e      	bne.n	8003a92 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	685a      	ldr	r2, [r3, #4]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003a82:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2201      	movs	r2, #1
 8003a88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003a8c:	6878      	ldr	r0, [r7, #4]
 8003a8e:	f7ff ff93 	bl	80039b8 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003a92:	bf00      	nop
 8003a94:	3708      	adds	r7, #8
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}

08003a9a <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003a9a:	b580      	push	{r7, lr}
 8003a9c:	b086      	sub	sp, #24
 8003a9e:	af00      	add	r7, sp, #0
 8003aa0:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	689b      	ldr	r3, [r3, #8]
 8003aa8:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ab0:	b2db      	uxtb	r3, r3
 8003ab2:	2b04      	cmp	r3, #4
 8003ab4:	d13a      	bne.n	8003b2c <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	f003 0301 	and.w	r3, r3, #1
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	d109      	bne.n	8003ad4 <I2S_IRQHandler+0x3a>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aca:	2b40      	cmp	r3, #64	; 0x40
 8003acc:	d102      	bne.n	8003ad4 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f7ff ffb4 	bl	8003a3c <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ada:	2b40      	cmp	r3, #64	; 0x40
 8003adc:	d126      	bne.n	8003b2c <I2S_IRQHandler+0x92>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	f003 0320 	and.w	r3, r3, #32
 8003ae8:	2b20      	cmp	r3, #32
 8003aea:	d11f      	bne.n	8003b2c <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	685a      	ldr	r2, [r3, #4]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003afa:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003afc:	2300      	movs	r3, #0
 8003afe:	613b      	str	r3, [r7, #16]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	68db      	ldr	r3, [r3, #12]
 8003b06:	613b      	str	r3, [r7, #16]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	689b      	ldr	r3, [r3, #8]
 8003b0e:	613b      	str	r3, [r7, #16]
 8003b10:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2201      	movs	r2, #1
 8003b16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b1e:	f043 0202 	orr.w	r2, r3, #2
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003b26:	6878      	ldr	r0, [r7, #4]
 8003b28:	f7ff ff50 	bl	80039cc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b32:	b2db      	uxtb	r3, r3
 8003b34:	2b03      	cmp	r3, #3
 8003b36:	d136      	bne.n	8003ba6 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	f003 0302 	and.w	r3, r3, #2
 8003b3e:	2b02      	cmp	r3, #2
 8003b40:	d109      	bne.n	8003b56 <I2S_IRQHandler+0xbc>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b4c:	2b80      	cmp	r3, #128	; 0x80
 8003b4e:	d102      	bne.n	8003b56 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003b50:	6878      	ldr	r0, [r7, #4]
 8003b52:	f7ff ff45 	bl	80039e0 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	f003 0308 	and.w	r3, r3, #8
 8003b5c:	2b08      	cmp	r3, #8
 8003b5e:	d122      	bne.n	8003ba6 <I2S_IRQHandler+0x10c>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	f003 0320 	and.w	r3, r3, #32
 8003b6a:	2b20      	cmp	r3, #32
 8003b6c:	d11b      	bne.n	8003ba6 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	685a      	ldr	r2, [r3, #4]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003b7c:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003b7e:	2300      	movs	r3, #0
 8003b80:	60fb      	str	r3, [r7, #12]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	689b      	ldr	r3, [r3, #8]
 8003b88:	60fb      	str	r3, [r7, #12]
 8003b8a:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2201      	movs	r2, #1
 8003b90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b98:	f043 0204 	orr.w	r2, r3, #4
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003ba0:	6878      	ldr	r0, [r7, #4]
 8003ba2:	f7ff ff13 	bl	80039cc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003ba6:	bf00      	nop
 8003ba8:	3718      	adds	r7, #24
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}
	...

08003bb0 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b088      	sub	sp, #32
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	689b      	ldr	r3, [r3, #8]
 8003bbe:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a92      	ldr	r2, [pc, #584]	; (8003e10 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d101      	bne.n	8003bce <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003bca:	4b92      	ldr	r3, [pc, #584]	; (8003e14 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003bcc:	e001      	b.n	8003bd2 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003bce:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003bd2:	689b      	ldr	r3, [r3, #8]
 8003bd4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a8b      	ldr	r2, [pc, #556]	; (8003e10 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d101      	bne.n	8003bec <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003be8:	4b8a      	ldr	r3, [pc, #552]	; (8003e14 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003bea:	e001      	b.n	8003bf0 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003bec:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003bfc:	d004      	beq.n	8003c08 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	f040 8099 	bne.w	8003d3a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003c08:	69fb      	ldr	r3, [r7, #28]
 8003c0a:	f003 0302 	and.w	r3, r3, #2
 8003c0e:	2b02      	cmp	r3, #2
 8003c10:	d107      	bne.n	8003c22 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003c12:	697b      	ldr	r3, [r7, #20]
 8003c14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d002      	beq.n	8003c22 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003c1c:	6878      	ldr	r0, [r7, #4]
 8003c1e:	f000 f925 	bl	8003e6c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003c22:	69bb      	ldr	r3, [r7, #24]
 8003c24:	f003 0301 	and.w	r3, r3, #1
 8003c28:	2b01      	cmp	r3, #1
 8003c2a:	d107      	bne.n	8003c3c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d002      	beq.n	8003c3c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	f000 f9c8 	bl	8003fcc <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003c3c:	69bb      	ldr	r3, [r7, #24]
 8003c3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c42:	2b40      	cmp	r3, #64	; 0x40
 8003c44:	d13a      	bne.n	8003cbc <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	f003 0320 	and.w	r3, r3, #32
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d035      	beq.n	8003cbc <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a6e      	ldr	r2, [pc, #440]	; (8003e10 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d101      	bne.n	8003c5e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003c5a:	4b6e      	ldr	r3, [pc, #440]	; (8003e14 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003c5c:	e001      	b.n	8003c62 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003c5e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c62:	685a      	ldr	r2, [r3, #4]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4969      	ldr	r1, [pc, #420]	; (8003e10 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003c6a:	428b      	cmp	r3, r1
 8003c6c:	d101      	bne.n	8003c72 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003c6e:	4b69      	ldr	r3, [pc, #420]	; (8003e14 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003c70:	e001      	b.n	8003c76 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003c72:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c76:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003c7a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	685a      	ldr	r2, [r3, #4]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003c8a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	60fb      	str	r3, [r7, #12]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	68db      	ldr	r3, [r3, #12]
 8003c96:	60fb      	str	r3, [r7, #12]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	60fb      	str	r3, [r7, #12]
 8003ca0:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2201      	movs	r2, #1
 8003ca6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cae:	f043 0202 	orr.w	r2, r3, #2
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003cb6:	6878      	ldr	r0, [r7, #4]
 8003cb8:	f7ff fe88 	bl	80039cc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003cbc:	69fb      	ldr	r3, [r7, #28]
 8003cbe:	f003 0308 	and.w	r3, r3, #8
 8003cc2:	2b08      	cmp	r3, #8
 8003cc4:	f040 80c3 	bne.w	8003e4e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003cc8:	697b      	ldr	r3, [r7, #20]
 8003cca:	f003 0320 	and.w	r3, r3, #32
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	f000 80bd 	beq.w	8003e4e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	685a      	ldr	r2, [r3, #4]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003ce2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a49      	ldr	r2, [pc, #292]	; (8003e10 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d101      	bne.n	8003cf2 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003cee:	4b49      	ldr	r3, [pc, #292]	; (8003e14 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003cf0:	e001      	b.n	8003cf6 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003cf2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003cf6:	685a      	ldr	r2, [r3, #4]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4944      	ldr	r1, [pc, #272]	; (8003e10 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003cfe:	428b      	cmp	r3, r1
 8003d00:	d101      	bne.n	8003d06 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003d02:	4b44      	ldr	r3, [pc, #272]	; (8003e14 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003d04:	e001      	b.n	8003d0a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003d06:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d0a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003d0e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003d10:	2300      	movs	r3, #0
 8003d12:	60bb      	str	r3, [r7, #8]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	60bb      	str	r3, [r7, #8]
 8003d1c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2201      	movs	r2, #1
 8003d22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d2a:	f043 0204 	orr.w	r2, r3, #4
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003d32:	6878      	ldr	r0, [r7, #4]
 8003d34:	f7ff fe4a 	bl	80039cc <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003d38:	e089      	b.n	8003e4e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003d3a:	69bb      	ldr	r3, [r7, #24]
 8003d3c:	f003 0302 	and.w	r3, r3, #2
 8003d40:	2b02      	cmp	r3, #2
 8003d42:	d107      	bne.n	8003d54 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d002      	beq.n	8003d54 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003d4e:	6878      	ldr	r0, [r7, #4]
 8003d50:	f000 f8be 	bl	8003ed0 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003d54:	69fb      	ldr	r3, [r7, #28]
 8003d56:	f003 0301 	and.w	r3, r3, #1
 8003d5a:	2b01      	cmp	r3, #1
 8003d5c:	d107      	bne.n	8003d6e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d002      	beq.n	8003d6e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003d68:	6878      	ldr	r0, [r7, #4]
 8003d6a:	f000 f8fd 	bl	8003f68 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003d6e:	69fb      	ldr	r3, [r7, #28]
 8003d70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d74:	2b40      	cmp	r3, #64	; 0x40
 8003d76:	d12f      	bne.n	8003dd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	f003 0320 	and.w	r3, r3, #32
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d02a      	beq.n	8003dd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	685a      	ldr	r2, [r3, #4]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003d90:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a1e      	ldr	r2, [pc, #120]	; (8003e10 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d101      	bne.n	8003da0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003d9c:	4b1d      	ldr	r3, [pc, #116]	; (8003e14 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003d9e:	e001      	b.n	8003da4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003da0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003da4:	685a      	ldr	r2, [r3, #4]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4919      	ldr	r1, [pc, #100]	; (8003e10 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003dac:	428b      	cmp	r3, r1
 8003dae:	d101      	bne.n	8003db4 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003db0:	4b18      	ldr	r3, [pc, #96]	; (8003e14 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003db2:	e001      	b.n	8003db8 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003db4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003db8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003dbc:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2201      	movs	r2, #1
 8003dc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dca:	f043 0202 	orr.w	r2, r3, #2
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003dd2:	6878      	ldr	r0, [r7, #4]
 8003dd4:	f7ff fdfa 	bl	80039cc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003dd8:	69bb      	ldr	r3, [r7, #24]
 8003dda:	f003 0308 	and.w	r3, r3, #8
 8003dde:	2b08      	cmp	r3, #8
 8003de0:	d136      	bne.n	8003e50 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	f003 0320 	and.w	r3, r3, #32
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d031      	beq.n	8003e50 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a07      	ldr	r2, [pc, #28]	; (8003e10 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d101      	bne.n	8003dfa <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003df6:	4b07      	ldr	r3, [pc, #28]	; (8003e14 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003df8:	e001      	b.n	8003dfe <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003dfa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003dfe:	685a      	ldr	r2, [r3, #4]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4902      	ldr	r1, [pc, #8]	; (8003e10 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003e06:	428b      	cmp	r3, r1
 8003e08:	d106      	bne.n	8003e18 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8003e0a:	4b02      	ldr	r3, [pc, #8]	; (8003e14 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003e0c:	e006      	b.n	8003e1c <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8003e0e:	bf00      	nop
 8003e10:	40003800 	.word	0x40003800
 8003e14:	40003400 	.word	0x40003400
 8003e18:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e1c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003e20:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	685a      	ldr	r2, [r3, #4]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003e30:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2201      	movs	r2, #1
 8003e36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e3e:	f043 0204 	orr.w	r2, r3, #4
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003e46:	6878      	ldr	r0, [r7, #4]
 8003e48:	f7ff fdc0 	bl	80039cc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003e4c:	e000      	b.n	8003e50 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003e4e:	bf00      	nop
}
 8003e50:	bf00      	nop
 8003e52:	3720      	adds	r7, #32
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bd80      	pop	{r7, pc}

08003e58 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b083      	sub	sp, #12
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003e60:	bf00      	nop
 8003e62:	370c      	adds	r7, #12
 8003e64:	46bd      	mov	sp, r7
 8003e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6a:	4770      	bx	lr

08003e6c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b082      	sub	sp, #8
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e78:	1c99      	adds	r1, r3, #2
 8003e7a:	687a      	ldr	r2, [r7, #4]
 8003e7c:	6251      	str	r1, [r2, #36]	; 0x24
 8003e7e:	881a      	ldrh	r2, [r3, #0]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e8a:	b29b      	uxth	r3, r3
 8003e8c:	3b01      	subs	r3, #1
 8003e8e:	b29a      	uxth	r2, r3
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e98:	b29b      	uxth	r3, r3
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d113      	bne.n	8003ec6 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	685a      	ldr	r2, [r3, #4]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003eac:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003eb2:	b29b      	uxth	r3, r3
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d106      	bne.n	8003ec6 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2201      	movs	r2, #1
 8003ebc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003ec0:	6878      	ldr	r0, [r7, #4]
 8003ec2:	f7ff ffc9 	bl	8003e58 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003ec6:	bf00      	nop
 8003ec8:	3708      	adds	r7, #8
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}
	...

08003ed0 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b082      	sub	sp, #8
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003edc:	1c99      	adds	r1, r3, #2
 8003ede:	687a      	ldr	r2, [r7, #4]
 8003ee0:	6251      	str	r1, [r2, #36]	; 0x24
 8003ee2:	8819      	ldrh	r1, [r3, #0]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a1d      	ldr	r2, [pc, #116]	; (8003f60 <I2SEx_TxISR_I2SExt+0x90>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d101      	bne.n	8003ef2 <I2SEx_TxISR_I2SExt+0x22>
 8003eee:	4b1d      	ldr	r3, [pc, #116]	; (8003f64 <I2SEx_TxISR_I2SExt+0x94>)
 8003ef0:	e001      	b.n	8003ef6 <I2SEx_TxISR_I2SExt+0x26>
 8003ef2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ef6:	460a      	mov	r2, r1
 8003ef8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003efe:	b29b      	uxth	r3, r3
 8003f00:	3b01      	subs	r3, #1
 8003f02:	b29a      	uxth	r2, r3
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f0c:	b29b      	uxth	r3, r3
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d121      	bne.n	8003f56 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a12      	ldr	r2, [pc, #72]	; (8003f60 <I2SEx_TxISR_I2SExt+0x90>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d101      	bne.n	8003f20 <I2SEx_TxISR_I2SExt+0x50>
 8003f1c:	4b11      	ldr	r3, [pc, #68]	; (8003f64 <I2SEx_TxISR_I2SExt+0x94>)
 8003f1e:	e001      	b.n	8003f24 <I2SEx_TxISR_I2SExt+0x54>
 8003f20:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f24:	685a      	ldr	r2, [r3, #4]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	490d      	ldr	r1, [pc, #52]	; (8003f60 <I2SEx_TxISR_I2SExt+0x90>)
 8003f2c:	428b      	cmp	r3, r1
 8003f2e:	d101      	bne.n	8003f34 <I2SEx_TxISR_I2SExt+0x64>
 8003f30:	4b0c      	ldr	r3, [pc, #48]	; (8003f64 <I2SEx_TxISR_I2SExt+0x94>)
 8003f32:	e001      	b.n	8003f38 <I2SEx_TxISR_I2SExt+0x68>
 8003f34:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f38:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003f3c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003f42:	b29b      	uxth	r3, r3
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d106      	bne.n	8003f56 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003f50:	6878      	ldr	r0, [r7, #4]
 8003f52:	f7ff ff81 	bl	8003e58 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003f56:	bf00      	nop
 8003f58:	3708      	adds	r7, #8
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd80      	pop	{r7, pc}
 8003f5e:	bf00      	nop
 8003f60:	40003800 	.word	0x40003800
 8003f64:	40003400 	.word	0x40003400

08003f68 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b082      	sub	sp, #8
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	68d8      	ldr	r0, [r3, #12]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f7a:	1c99      	adds	r1, r3, #2
 8003f7c:	687a      	ldr	r2, [r7, #4]
 8003f7e:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003f80:	b282      	uxth	r2, r0
 8003f82:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003f88:	b29b      	uxth	r3, r3
 8003f8a:	3b01      	subs	r3, #1
 8003f8c:	b29a      	uxth	r2, r3
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003f96:	b29b      	uxth	r3, r3
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d113      	bne.n	8003fc4 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	685a      	ldr	r2, [r3, #4]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003faa:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fb0:	b29b      	uxth	r3, r3
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d106      	bne.n	8003fc4 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2201      	movs	r2, #1
 8003fba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	f7ff ff4a 	bl	8003e58 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003fc4:	bf00      	nop
 8003fc6:	3708      	adds	r7, #8
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bd80      	pop	{r7, pc}

08003fcc <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b082      	sub	sp, #8
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a20      	ldr	r2, [pc, #128]	; (800405c <I2SEx_RxISR_I2SExt+0x90>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d101      	bne.n	8003fe2 <I2SEx_RxISR_I2SExt+0x16>
 8003fde:	4b20      	ldr	r3, [pc, #128]	; (8004060 <I2SEx_RxISR_I2SExt+0x94>)
 8003fe0:	e001      	b.n	8003fe6 <I2SEx_RxISR_I2SExt+0x1a>
 8003fe2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003fe6:	68d8      	ldr	r0, [r3, #12]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fec:	1c99      	adds	r1, r3, #2
 8003fee:	687a      	ldr	r2, [r7, #4]
 8003ff0:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003ff2:	b282      	uxth	r2, r0
 8003ff4:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003ffa:	b29b      	uxth	r3, r3
 8003ffc:	3b01      	subs	r3, #1
 8003ffe:	b29a      	uxth	r2, r3
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004008:	b29b      	uxth	r3, r3
 800400a:	2b00      	cmp	r3, #0
 800400c:	d121      	bne.n	8004052 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a12      	ldr	r2, [pc, #72]	; (800405c <I2SEx_RxISR_I2SExt+0x90>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d101      	bne.n	800401c <I2SEx_RxISR_I2SExt+0x50>
 8004018:	4b11      	ldr	r3, [pc, #68]	; (8004060 <I2SEx_RxISR_I2SExt+0x94>)
 800401a:	e001      	b.n	8004020 <I2SEx_RxISR_I2SExt+0x54>
 800401c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004020:	685a      	ldr	r2, [r3, #4]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	490d      	ldr	r1, [pc, #52]	; (800405c <I2SEx_RxISR_I2SExt+0x90>)
 8004028:	428b      	cmp	r3, r1
 800402a:	d101      	bne.n	8004030 <I2SEx_RxISR_I2SExt+0x64>
 800402c:	4b0c      	ldr	r3, [pc, #48]	; (8004060 <I2SEx_RxISR_I2SExt+0x94>)
 800402e:	e001      	b.n	8004034 <I2SEx_RxISR_I2SExt+0x68>
 8004030:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004034:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004038:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800403e:	b29b      	uxth	r3, r3
 8004040:	2b00      	cmp	r3, #0
 8004042:	d106      	bne.n	8004052 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2201      	movs	r2, #1
 8004048:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800404c:	6878      	ldr	r0, [r7, #4]
 800404e:	f7ff ff03 	bl	8003e58 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004052:	bf00      	nop
 8004054:	3708      	adds	r7, #8
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}
 800405a:	bf00      	nop
 800405c:	40003800 	.word	0x40003800
 8004060:	40003400 	.word	0x40003400

08004064 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b086      	sub	sp, #24
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d101      	bne.n	8004076 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004072:	2301      	movs	r3, #1
 8004074:	e267      	b.n	8004546 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f003 0301 	and.w	r3, r3, #1
 800407e:	2b00      	cmp	r3, #0
 8004080:	d075      	beq.n	800416e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004082:	4b88      	ldr	r3, [pc, #544]	; (80042a4 <HAL_RCC_OscConfig+0x240>)
 8004084:	689b      	ldr	r3, [r3, #8]
 8004086:	f003 030c 	and.w	r3, r3, #12
 800408a:	2b04      	cmp	r3, #4
 800408c:	d00c      	beq.n	80040a8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800408e:	4b85      	ldr	r3, [pc, #532]	; (80042a4 <HAL_RCC_OscConfig+0x240>)
 8004090:	689b      	ldr	r3, [r3, #8]
 8004092:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004096:	2b08      	cmp	r3, #8
 8004098:	d112      	bne.n	80040c0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800409a:	4b82      	ldr	r3, [pc, #520]	; (80042a4 <HAL_RCC_OscConfig+0x240>)
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80040a6:	d10b      	bne.n	80040c0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040a8:	4b7e      	ldr	r3, [pc, #504]	; (80042a4 <HAL_RCC_OscConfig+0x240>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d05b      	beq.n	800416c <HAL_RCC_OscConfig+0x108>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d157      	bne.n	800416c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80040bc:	2301      	movs	r3, #1
 80040be:	e242      	b.n	8004546 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040c8:	d106      	bne.n	80040d8 <HAL_RCC_OscConfig+0x74>
 80040ca:	4b76      	ldr	r3, [pc, #472]	; (80042a4 <HAL_RCC_OscConfig+0x240>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a75      	ldr	r2, [pc, #468]	; (80042a4 <HAL_RCC_OscConfig+0x240>)
 80040d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040d4:	6013      	str	r3, [r2, #0]
 80040d6:	e01d      	b.n	8004114 <HAL_RCC_OscConfig+0xb0>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80040e0:	d10c      	bne.n	80040fc <HAL_RCC_OscConfig+0x98>
 80040e2:	4b70      	ldr	r3, [pc, #448]	; (80042a4 <HAL_RCC_OscConfig+0x240>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a6f      	ldr	r2, [pc, #444]	; (80042a4 <HAL_RCC_OscConfig+0x240>)
 80040e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80040ec:	6013      	str	r3, [r2, #0]
 80040ee:	4b6d      	ldr	r3, [pc, #436]	; (80042a4 <HAL_RCC_OscConfig+0x240>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a6c      	ldr	r2, [pc, #432]	; (80042a4 <HAL_RCC_OscConfig+0x240>)
 80040f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040f8:	6013      	str	r3, [r2, #0]
 80040fa:	e00b      	b.n	8004114 <HAL_RCC_OscConfig+0xb0>
 80040fc:	4b69      	ldr	r3, [pc, #420]	; (80042a4 <HAL_RCC_OscConfig+0x240>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a68      	ldr	r2, [pc, #416]	; (80042a4 <HAL_RCC_OscConfig+0x240>)
 8004102:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004106:	6013      	str	r3, [r2, #0]
 8004108:	4b66      	ldr	r3, [pc, #408]	; (80042a4 <HAL_RCC_OscConfig+0x240>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a65      	ldr	r2, [pc, #404]	; (80042a4 <HAL_RCC_OscConfig+0x240>)
 800410e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004112:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d013      	beq.n	8004144 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800411c:	f7fc fed8 	bl	8000ed0 <HAL_GetTick>
 8004120:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004122:	e008      	b.n	8004136 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004124:	f7fc fed4 	bl	8000ed0 <HAL_GetTick>
 8004128:	4602      	mov	r2, r0
 800412a:	693b      	ldr	r3, [r7, #16]
 800412c:	1ad3      	subs	r3, r2, r3
 800412e:	2b64      	cmp	r3, #100	; 0x64
 8004130:	d901      	bls.n	8004136 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004132:	2303      	movs	r3, #3
 8004134:	e207      	b.n	8004546 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004136:	4b5b      	ldr	r3, [pc, #364]	; (80042a4 <HAL_RCC_OscConfig+0x240>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800413e:	2b00      	cmp	r3, #0
 8004140:	d0f0      	beq.n	8004124 <HAL_RCC_OscConfig+0xc0>
 8004142:	e014      	b.n	800416e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004144:	f7fc fec4 	bl	8000ed0 <HAL_GetTick>
 8004148:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800414a:	e008      	b.n	800415e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800414c:	f7fc fec0 	bl	8000ed0 <HAL_GetTick>
 8004150:	4602      	mov	r2, r0
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	1ad3      	subs	r3, r2, r3
 8004156:	2b64      	cmp	r3, #100	; 0x64
 8004158:	d901      	bls.n	800415e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800415a:	2303      	movs	r3, #3
 800415c:	e1f3      	b.n	8004546 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800415e:	4b51      	ldr	r3, [pc, #324]	; (80042a4 <HAL_RCC_OscConfig+0x240>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004166:	2b00      	cmp	r3, #0
 8004168:	d1f0      	bne.n	800414c <HAL_RCC_OscConfig+0xe8>
 800416a:	e000      	b.n	800416e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800416c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f003 0302 	and.w	r3, r3, #2
 8004176:	2b00      	cmp	r3, #0
 8004178:	d063      	beq.n	8004242 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800417a:	4b4a      	ldr	r3, [pc, #296]	; (80042a4 <HAL_RCC_OscConfig+0x240>)
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	f003 030c 	and.w	r3, r3, #12
 8004182:	2b00      	cmp	r3, #0
 8004184:	d00b      	beq.n	800419e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004186:	4b47      	ldr	r3, [pc, #284]	; (80042a4 <HAL_RCC_OscConfig+0x240>)
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800418e:	2b08      	cmp	r3, #8
 8004190:	d11c      	bne.n	80041cc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004192:	4b44      	ldr	r3, [pc, #272]	; (80042a4 <HAL_RCC_OscConfig+0x240>)
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800419a:	2b00      	cmp	r3, #0
 800419c:	d116      	bne.n	80041cc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800419e:	4b41      	ldr	r3, [pc, #260]	; (80042a4 <HAL_RCC_OscConfig+0x240>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f003 0302 	and.w	r3, r3, #2
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d005      	beq.n	80041b6 <HAL_RCC_OscConfig+0x152>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	68db      	ldr	r3, [r3, #12]
 80041ae:	2b01      	cmp	r3, #1
 80041b0:	d001      	beq.n	80041b6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	e1c7      	b.n	8004546 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041b6:	4b3b      	ldr	r3, [pc, #236]	; (80042a4 <HAL_RCC_OscConfig+0x240>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	691b      	ldr	r3, [r3, #16]
 80041c2:	00db      	lsls	r3, r3, #3
 80041c4:	4937      	ldr	r1, [pc, #220]	; (80042a4 <HAL_RCC_OscConfig+0x240>)
 80041c6:	4313      	orrs	r3, r2
 80041c8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041ca:	e03a      	b.n	8004242 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	68db      	ldr	r3, [r3, #12]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d020      	beq.n	8004216 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80041d4:	4b34      	ldr	r3, [pc, #208]	; (80042a8 <HAL_RCC_OscConfig+0x244>)
 80041d6:	2201      	movs	r2, #1
 80041d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041da:	f7fc fe79 	bl	8000ed0 <HAL_GetTick>
 80041de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041e0:	e008      	b.n	80041f4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80041e2:	f7fc fe75 	bl	8000ed0 <HAL_GetTick>
 80041e6:	4602      	mov	r2, r0
 80041e8:	693b      	ldr	r3, [r7, #16]
 80041ea:	1ad3      	subs	r3, r2, r3
 80041ec:	2b02      	cmp	r3, #2
 80041ee:	d901      	bls.n	80041f4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80041f0:	2303      	movs	r3, #3
 80041f2:	e1a8      	b.n	8004546 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041f4:	4b2b      	ldr	r3, [pc, #172]	; (80042a4 <HAL_RCC_OscConfig+0x240>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f003 0302 	and.w	r3, r3, #2
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d0f0      	beq.n	80041e2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004200:	4b28      	ldr	r3, [pc, #160]	; (80042a4 <HAL_RCC_OscConfig+0x240>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	691b      	ldr	r3, [r3, #16]
 800420c:	00db      	lsls	r3, r3, #3
 800420e:	4925      	ldr	r1, [pc, #148]	; (80042a4 <HAL_RCC_OscConfig+0x240>)
 8004210:	4313      	orrs	r3, r2
 8004212:	600b      	str	r3, [r1, #0]
 8004214:	e015      	b.n	8004242 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004216:	4b24      	ldr	r3, [pc, #144]	; (80042a8 <HAL_RCC_OscConfig+0x244>)
 8004218:	2200      	movs	r2, #0
 800421a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800421c:	f7fc fe58 	bl	8000ed0 <HAL_GetTick>
 8004220:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004222:	e008      	b.n	8004236 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004224:	f7fc fe54 	bl	8000ed0 <HAL_GetTick>
 8004228:	4602      	mov	r2, r0
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	1ad3      	subs	r3, r2, r3
 800422e:	2b02      	cmp	r3, #2
 8004230:	d901      	bls.n	8004236 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004232:	2303      	movs	r3, #3
 8004234:	e187      	b.n	8004546 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004236:	4b1b      	ldr	r3, [pc, #108]	; (80042a4 <HAL_RCC_OscConfig+0x240>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f003 0302 	and.w	r3, r3, #2
 800423e:	2b00      	cmp	r3, #0
 8004240:	d1f0      	bne.n	8004224 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f003 0308 	and.w	r3, r3, #8
 800424a:	2b00      	cmp	r3, #0
 800424c:	d036      	beq.n	80042bc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	695b      	ldr	r3, [r3, #20]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d016      	beq.n	8004284 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004256:	4b15      	ldr	r3, [pc, #84]	; (80042ac <HAL_RCC_OscConfig+0x248>)
 8004258:	2201      	movs	r2, #1
 800425a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800425c:	f7fc fe38 	bl	8000ed0 <HAL_GetTick>
 8004260:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004262:	e008      	b.n	8004276 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004264:	f7fc fe34 	bl	8000ed0 <HAL_GetTick>
 8004268:	4602      	mov	r2, r0
 800426a:	693b      	ldr	r3, [r7, #16]
 800426c:	1ad3      	subs	r3, r2, r3
 800426e:	2b02      	cmp	r3, #2
 8004270:	d901      	bls.n	8004276 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004272:	2303      	movs	r3, #3
 8004274:	e167      	b.n	8004546 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004276:	4b0b      	ldr	r3, [pc, #44]	; (80042a4 <HAL_RCC_OscConfig+0x240>)
 8004278:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800427a:	f003 0302 	and.w	r3, r3, #2
 800427e:	2b00      	cmp	r3, #0
 8004280:	d0f0      	beq.n	8004264 <HAL_RCC_OscConfig+0x200>
 8004282:	e01b      	b.n	80042bc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004284:	4b09      	ldr	r3, [pc, #36]	; (80042ac <HAL_RCC_OscConfig+0x248>)
 8004286:	2200      	movs	r2, #0
 8004288:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800428a:	f7fc fe21 	bl	8000ed0 <HAL_GetTick>
 800428e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004290:	e00e      	b.n	80042b0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004292:	f7fc fe1d 	bl	8000ed0 <HAL_GetTick>
 8004296:	4602      	mov	r2, r0
 8004298:	693b      	ldr	r3, [r7, #16]
 800429a:	1ad3      	subs	r3, r2, r3
 800429c:	2b02      	cmp	r3, #2
 800429e:	d907      	bls.n	80042b0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80042a0:	2303      	movs	r3, #3
 80042a2:	e150      	b.n	8004546 <HAL_RCC_OscConfig+0x4e2>
 80042a4:	40023800 	.word	0x40023800
 80042a8:	42470000 	.word	0x42470000
 80042ac:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042b0:	4b88      	ldr	r3, [pc, #544]	; (80044d4 <HAL_RCC_OscConfig+0x470>)
 80042b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042b4:	f003 0302 	and.w	r3, r3, #2
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d1ea      	bne.n	8004292 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f003 0304 	and.w	r3, r3, #4
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	f000 8097 	beq.w	80043f8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042ca:	2300      	movs	r3, #0
 80042cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042ce:	4b81      	ldr	r3, [pc, #516]	; (80044d4 <HAL_RCC_OscConfig+0x470>)
 80042d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d10f      	bne.n	80042fa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042da:	2300      	movs	r3, #0
 80042dc:	60bb      	str	r3, [r7, #8]
 80042de:	4b7d      	ldr	r3, [pc, #500]	; (80044d4 <HAL_RCC_OscConfig+0x470>)
 80042e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e2:	4a7c      	ldr	r2, [pc, #496]	; (80044d4 <HAL_RCC_OscConfig+0x470>)
 80042e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042e8:	6413      	str	r3, [r2, #64]	; 0x40
 80042ea:	4b7a      	ldr	r3, [pc, #488]	; (80044d4 <HAL_RCC_OscConfig+0x470>)
 80042ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042f2:	60bb      	str	r3, [r7, #8]
 80042f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042f6:	2301      	movs	r3, #1
 80042f8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042fa:	4b77      	ldr	r3, [pc, #476]	; (80044d8 <HAL_RCC_OscConfig+0x474>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004302:	2b00      	cmp	r3, #0
 8004304:	d118      	bne.n	8004338 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004306:	4b74      	ldr	r3, [pc, #464]	; (80044d8 <HAL_RCC_OscConfig+0x474>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a73      	ldr	r2, [pc, #460]	; (80044d8 <HAL_RCC_OscConfig+0x474>)
 800430c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004310:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004312:	f7fc fddd 	bl	8000ed0 <HAL_GetTick>
 8004316:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004318:	e008      	b.n	800432c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800431a:	f7fc fdd9 	bl	8000ed0 <HAL_GetTick>
 800431e:	4602      	mov	r2, r0
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	1ad3      	subs	r3, r2, r3
 8004324:	2b02      	cmp	r3, #2
 8004326:	d901      	bls.n	800432c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004328:	2303      	movs	r3, #3
 800432a:	e10c      	b.n	8004546 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800432c:	4b6a      	ldr	r3, [pc, #424]	; (80044d8 <HAL_RCC_OscConfig+0x474>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004334:	2b00      	cmp	r3, #0
 8004336:	d0f0      	beq.n	800431a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	2b01      	cmp	r3, #1
 800433e:	d106      	bne.n	800434e <HAL_RCC_OscConfig+0x2ea>
 8004340:	4b64      	ldr	r3, [pc, #400]	; (80044d4 <HAL_RCC_OscConfig+0x470>)
 8004342:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004344:	4a63      	ldr	r2, [pc, #396]	; (80044d4 <HAL_RCC_OscConfig+0x470>)
 8004346:	f043 0301 	orr.w	r3, r3, #1
 800434a:	6713      	str	r3, [r2, #112]	; 0x70
 800434c:	e01c      	b.n	8004388 <HAL_RCC_OscConfig+0x324>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	689b      	ldr	r3, [r3, #8]
 8004352:	2b05      	cmp	r3, #5
 8004354:	d10c      	bne.n	8004370 <HAL_RCC_OscConfig+0x30c>
 8004356:	4b5f      	ldr	r3, [pc, #380]	; (80044d4 <HAL_RCC_OscConfig+0x470>)
 8004358:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800435a:	4a5e      	ldr	r2, [pc, #376]	; (80044d4 <HAL_RCC_OscConfig+0x470>)
 800435c:	f043 0304 	orr.w	r3, r3, #4
 8004360:	6713      	str	r3, [r2, #112]	; 0x70
 8004362:	4b5c      	ldr	r3, [pc, #368]	; (80044d4 <HAL_RCC_OscConfig+0x470>)
 8004364:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004366:	4a5b      	ldr	r2, [pc, #364]	; (80044d4 <HAL_RCC_OscConfig+0x470>)
 8004368:	f043 0301 	orr.w	r3, r3, #1
 800436c:	6713      	str	r3, [r2, #112]	; 0x70
 800436e:	e00b      	b.n	8004388 <HAL_RCC_OscConfig+0x324>
 8004370:	4b58      	ldr	r3, [pc, #352]	; (80044d4 <HAL_RCC_OscConfig+0x470>)
 8004372:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004374:	4a57      	ldr	r2, [pc, #348]	; (80044d4 <HAL_RCC_OscConfig+0x470>)
 8004376:	f023 0301 	bic.w	r3, r3, #1
 800437a:	6713      	str	r3, [r2, #112]	; 0x70
 800437c:	4b55      	ldr	r3, [pc, #340]	; (80044d4 <HAL_RCC_OscConfig+0x470>)
 800437e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004380:	4a54      	ldr	r2, [pc, #336]	; (80044d4 <HAL_RCC_OscConfig+0x470>)
 8004382:	f023 0304 	bic.w	r3, r3, #4
 8004386:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	689b      	ldr	r3, [r3, #8]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d015      	beq.n	80043bc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004390:	f7fc fd9e 	bl	8000ed0 <HAL_GetTick>
 8004394:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004396:	e00a      	b.n	80043ae <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004398:	f7fc fd9a 	bl	8000ed0 <HAL_GetTick>
 800439c:	4602      	mov	r2, r0
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	1ad3      	subs	r3, r2, r3
 80043a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d901      	bls.n	80043ae <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80043aa:	2303      	movs	r3, #3
 80043ac:	e0cb      	b.n	8004546 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043ae:	4b49      	ldr	r3, [pc, #292]	; (80044d4 <HAL_RCC_OscConfig+0x470>)
 80043b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043b2:	f003 0302 	and.w	r3, r3, #2
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d0ee      	beq.n	8004398 <HAL_RCC_OscConfig+0x334>
 80043ba:	e014      	b.n	80043e6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043bc:	f7fc fd88 	bl	8000ed0 <HAL_GetTick>
 80043c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043c2:	e00a      	b.n	80043da <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043c4:	f7fc fd84 	bl	8000ed0 <HAL_GetTick>
 80043c8:	4602      	mov	r2, r0
 80043ca:	693b      	ldr	r3, [r7, #16]
 80043cc:	1ad3      	subs	r3, r2, r3
 80043ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d901      	bls.n	80043da <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80043d6:	2303      	movs	r3, #3
 80043d8:	e0b5      	b.n	8004546 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043da:	4b3e      	ldr	r3, [pc, #248]	; (80044d4 <HAL_RCC_OscConfig+0x470>)
 80043dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043de:	f003 0302 	and.w	r3, r3, #2
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d1ee      	bne.n	80043c4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80043e6:	7dfb      	ldrb	r3, [r7, #23]
 80043e8:	2b01      	cmp	r3, #1
 80043ea:	d105      	bne.n	80043f8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043ec:	4b39      	ldr	r3, [pc, #228]	; (80044d4 <HAL_RCC_OscConfig+0x470>)
 80043ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f0:	4a38      	ldr	r2, [pc, #224]	; (80044d4 <HAL_RCC_OscConfig+0x470>)
 80043f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043f6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	699b      	ldr	r3, [r3, #24]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	f000 80a1 	beq.w	8004544 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004402:	4b34      	ldr	r3, [pc, #208]	; (80044d4 <HAL_RCC_OscConfig+0x470>)
 8004404:	689b      	ldr	r3, [r3, #8]
 8004406:	f003 030c 	and.w	r3, r3, #12
 800440a:	2b08      	cmp	r3, #8
 800440c:	d05c      	beq.n	80044c8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	699b      	ldr	r3, [r3, #24]
 8004412:	2b02      	cmp	r3, #2
 8004414:	d141      	bne.n	800449a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004416:	4b31      	ldr	r3, [pc, #196]	; (80044dc <HAL_RCC_OscConfig+0x478>)
 8004418:	2200      	movs	r2, #0
 800441a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800441c:	f7fc fd58 	bl	8000ed0 <HAL_GetTick>
 8004420:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004422:	e008      	b.n	8004436 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004424:	f7fc fd54 	bl	8000ed0 <HAL_GetTick>
 8004428:	4602      	mov	r2, r0
 800442a:	693b      	ldr	r3, [r7, #16]
 800442c:	1ad3      	subs	r3, r2, r3
 800442e:	2b02      	cmp	r3, #2
 8004430:	d901      	bls.n	8004436 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004432:	2303      	movs	r3, #3
 8004434:	e087      	b.n	8004546 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004436:	4b27      	ldr	r3, [pc, #156]	; (80044d4 <HAL_RCC_OscConfig+0x470>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800443e:	2b00      	cmp	r3, #0
 8004440:	d1f0      	bne.n	8004424 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	69da      	ldr	r2, [r3, #28]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6a1b      	ldr	r3, [r3, #32]
 800444a:	431a      	orrs	r2, r3
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004450:	019b      	lsls	r3, r3, #6
 8004452:	431a      	orrs	r2, r3
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004458:	085b      	lsrs	r3, r3, #1
 800445a:	3b01      	subs	r3, #1
 800445c:	041b      	lsls	r3, r3, #16
 800445e:	431a      	orrs	r2, r3
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004464:	061b      	lsls	r3, r3, #24
 8004466:	491b      	ldr	r1, [pc, #108]	; (80044d4 <HAL_RCC_OscConfig+0x470>)
 8004468:	4313      	orrs	r3, r2
 800446a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800446c:	4b1b      	ldr	r3, [pc, #108]	; (80044dc <HAL_RCC_OscConfig+0x478>)
 800446e:	2201      	movs	r2, #1
 8004470:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004472:	f7fc fd2d 	bl	8000ed0 <HAL_GetTick>
 8004476:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004478:	e008      	b.n	800448c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800447a:	f7fc fd29 	bl	8000ed0 <HAL_GetTick>
 800447e:	4602      	mov	r2, r0
 8004480:	693b      	ldr	r3, [r7, #16]
 8004482:	1ad3      	subs	r3, r2, r3
 8004484:	2b02      	cmp	r3, #2
 8004486:	d901      	bls.n	800448c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004488:	2303      	movs	r3, #3
 800448a:	e05c      	b.n	8004546 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800448c:	4b11      	ldr	r3, [pc, #68]	; (80044d4 <HAL_RCC_OscConfig+0x470>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004494:	2b00      	cmp	r3, #0
 8004496:	d0f0      	beq.n	800447a <HAL_RCC_OscConfig+0x416>
 8004498:	e054      	b.n	8004544 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800449a:	4b10      	ldr	r3, [pc, #64]	; (80044dc <HAL_RCC_OscConfig+0x478>)
 800449c:	2200      	movs	r2, #0
 800449e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044a0:	f7fc fd16 	bl	8000ed0 <HAL_GetTick>
 80044a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044a6:	e008      	b.n	80044ba <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044a8:	f7fc fd12 	bl	8000ed0 <HAL_GetTick>
 80044ac:	4602      	mov	r2, r0
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	1ad3      	subs	r3, r2, r3
 80044b2:	2b02      	cmp	r3, #2
 80044b4:	d901      	bls.n	80044ba <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80044b6:	2303      	movs	r3, #3
 80044b8:	e045      	b.n	8004546 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044ba:	4b06      	ldr	r3, [pc, #24]	; (80044d4 <HAL_RCC_OscConfig+0x470>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d1f0      	bne.n	80044a8 <HAL_RCC_OscConfig+0x444>
 80044c6:	e03d      	b.n	8004544 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	699b      	ldr	r3, [r3, #24]
 80044cc:	2b01      	cmp	r3, #1
 80044ce:	d107      	bne.n	80044e0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80044d0:	2301      	movs	r3, #1
 80044d2:	e038      	b.n	8004546 <HAL_RCC_OscConfig+0x4e2>
 80044d4:	40023800 	.word	0x40023800
 80044d8:	40007000 	.word	0x40007000
 80044dc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80044e0:	4b1b      	ldr	r3, [pc, #108]	; (8004550 <HAL_RCC_OscConfig+0x4ec>)
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	699b      	ldr	r3, [r3, #24]
 80044ea:	2b01      	cmp	r3, #1
 80044ec:	d028      	beq.n	8004540 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044f8:	429a      	cmp	r2, r3
 80044fa:	d121      	bne.n	8004540 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004506:	429a      	cmp	r2, r3
 8004508:	d11a      	bne.n	8004540 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800450a:	68fa      	ldr	r2, [r7, #12]
 800450c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004510:	4013      	ands	r3, r2
 8004512:	687a      	ldr	r2, [r7, #4]
 8004514:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004516:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004518:	4293      	cmp	r3, r2
 800451a:	d111      	bne.n	8004540 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004526:	085b      	lsrs	r3, r3, #1
 8004528:	3b01      	subs	r3, #1
 800452a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800452c:	429a      	cmp	r2, r3
 800452e:	d107      	bne.n	8004540 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800453a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800453c:	429a      	cmp	r2, r3
 800453e:	d001      	beq.n	8004544 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004540:	2301      	movs	r3, #1
 8004542:	e000      	b.n	8004546 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004544:	2300      	movs	r3, #0
}
 8004546:	4618      	mov	r0, r3
 8004548:	3718      	adds	r7, #24
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}
 800454e:	bf00      	nop
 8004550:	40023800 	.word	0x40023800

08004554 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b084      	sub	sp, #16
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
 800455c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d101      	bne.n	8004568 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004564:	2301      	movs	r3, #1
 8004566:	e0cc      	b.n	8004702 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004568:	4b68      	ldr	r3, [pc, #416]	; (800470c <HAL_RCC_ClockConfig+0x1b8>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f003 0307 	and.w	r3, r3, #7
 8004570:	683a      	ldr	r2, [r7, #0]
 8004572:	429a      	cmp	r2, r3
 8004574:	d90c      	bls.n	8004590 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004576:	4b65      	ldr	r3, [pc, #404]	; (800470c <HAL_RCC_ClockConfig+0x1b8>)
 8004578:	683a      	ldr	r2, [r7, #0]
 800457a:	b2d2      	uxtb	r2, r2
 800457c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800457e:	4b63      	ldr	r3, [pc, #396]	; (800470c <HAL_RCC_ClockConfig+0x1b8>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f003 0307 	and.w	r3, r3, #7
 8004586:	683a      	ldr	r2, [r7, #0]
 8004588:	429a      	cmp	r2, r3
 800458a:	d001      	beq.n	8004590 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800458c:	2301      	movs	r3, #1
 800458e:	e0b8      	b.n	8004702 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f003 0302 	and.w	r3, r3, #2
 8004598:	2b00      	cmp	r3, #0
 800459a:	d020      	beq.n	80045de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f003 0304 	and.w	r3, r3, #4
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d005      	beq.n	80045b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80045a8:	4b59      	ldr	r3, [pc, #356]	; (8004710 <HAL_RCC_ClockConfig+0x1bc>)
 80045aa:	689b      	ldr	r3, [r3, #8]
 80045ac:	4a58      	ldr	r2, [pc, #352]	; (8004710 <HAL_RCC_ClockConfig+0x1bc>)
 80045ae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80045b2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f003 0308 	and.w	r3, r3, #8
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d005      	beq.n	80045cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80045c0:	4b53      	ldr	r3, [pc, #332]	; (8004710 <HAL_RCC_ClockConfig+0x1bc>)
 80045c2:	689b      	ldr	r3, [r3, #8]
 80045c4:	4a52      	ldr	r2, [pc, #328]	; (8004710 <HAL_RCC_ClockConfig+0x1bc>)
 80045c6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80045ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045cc:	4b50      	ldr	r3, [pc, #320]	; (8004710 <HAL_RCC_ClockConfig+0x1bc>)
 80045ce:	689b      	ldr	r3, [r3, #8]
 80045d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	494d      	ldr	r1, [pc, #308]	; (8004710 <HAL_RCC_ClockConfig+0x1bc>)
 80045da:	4313      	orrs	r3, r2
 80045dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f003 0301 	and.w	r3, r3, #1
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d044      	beq.n	8004674 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	2b01      	cmp	r3, #1
 80045f0:	d107      	bne.n	8004602 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045f2:	4b47      	ldr	r3, [pc, #284]	; (8004710 <HAL_RCC_ClockConfig+0x1bc>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d119      	bne.n	8004632 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045fe:	2301      	movs	r3, #1
 8004600:	e07f      	b.n	8004702 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	2b02      	cmp	r3, #2
 8004608:	d003      	beq.n	8004612 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800460e:	2b03      	cmp	r3, #3
 8004610:	d107      	bne.n	8004622 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004612:	4b3f      	ldr	r3, [pc, #252]	; (8004710 <HAL_RCC_ClockConfig+0x1bc>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800461a:	2b00      	cmp	r3, #0
 800461c:	d109      	bne.n	8004632 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	e06f      	b.n	8004702 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004622:	4b3b      	ldr	r3, [pc, #236]	; (8004710 <HAL_RCC_ClockConfig+0x1bc>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f003 0302 	and.w	r3, r3, #2
 800462a:	2b00      	cmp	r3, #0
 800462c:	d101      	bne.n	8004632 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800462e:	2301      	movs	r3, #1
 8004630:	e067      	b.n	8004702 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004632:	4b37      	ldr	r3, [pc, #220]	; (8004710 <HAL_RCC_ClockConfig+0x1bc>)
 8004634:	689b      	ldr	r3, [r3, #8]
 8004636:	f023 0203 	bic.w	r2, r3, #3
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	4934      	ldr	r1, [pc, #208]	; (8004710 <HAL_RCC_ClockConfig+0x1bc>)
 8004640:	4313      	orrs	r3, r2
 8004642:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004644:	f7fc fc44 	bl	8000ed0 <HAL_GetTick>
 8004648:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800464a:	e00a      	b.n	8004662 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800464c:	f7fc fc40 	bl	8000ed0 <HAL_GetTick>
 8004650:	4602      	mov	r2, r0
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	1ad3      	subs	r3, r2, r3
 8004656:	f241 3288 	movw	r2, #5000	; 0x1388
 800465a:	4293      	cmp	r3, r2
 800465c:	d901      	bls.n	8004662 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800465e:	2303      	movs	r3, #3
 8004660:	e04f      	b.n	8004702 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004662:	4b2b      	ldr	r3, [pc, #172]	; (8004710 <HAL_RCC_ClockConfig+0x1bc>)
 8004664:	689b      	ldr	r3, [r3, #8]
 8004666:	f003 020c 	and.w	r2, r3, #12
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	009b      	lsls	r3, r3, #2
 8004670:	429a      	cmp	r2, r3
 8004672:	d1eb      	bne.n	800464c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004674:	4b25      	ldr	r3, [pc, #148]	; (800470c <HAL_RCC_ClockConfig+0x1b8>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f003 0307 	and.w	r3, r3, #7
 800467c:	683a      	ldr	r2, [r7, #0]
 800467e:	429a      	cmp	r2, r3
 8004680:	d20c      	bcs.n	800469c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004682:	4b22      	ldr	r3, [pc, #136]	; (800470c <HAL_RCC_ClockConfig+0x1b8>)
 8004684:	683a      	ldr	r2, [r7, #0]
 8004686:	b2d2      	uxtb	r2, r2
 8004688:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800468a:	4b20      	ldr	r3, [pc, #128]	; (800470c <HAL_RCC_ClockConfig+0x1b8>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f003 0307 	and.w	r3, r3, #7
 8004692:	683a      	ldr	r2, [r7, #0]
 8004694:	429a      	cmp	r2, r3
 8004696:	d001      	beq.n	800469c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004698:	2301      	movs	r3, #1
 800469a:	e032      	b.n	8004702 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f003 0304 	and.w	r3, r3, #4
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d008      	beq.n	80046ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80046a8:	4b19      	ldr	r3, [pc, #100]	; (8004710 <HAL_RCC_ClockConfig+0x1bc>)
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	68db      	ldr	r3, [r3, #12]
 80046b4:	4916      	ldr	r1, [pc, #88]	; (8004710 <HAL_RCC_ClockConfig+0x1bc>)
 80046b6:	4313      	orrs	r3, r2
 80046b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f003 0308 	and.w	r3, r3, #8
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d009      	beq.n	80046da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80046c6:	4b12      	ldr	r3, [pc, #72]	; (8004710 <HAL_RCC_ClockConfig+0x1bc>)
 80046c8:	689b      	ldr	r3, [r3, #8]
 80046ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	691b      	ldr	r3, [r3, #16]
 80046d2:	00db      	lsls	r3, r3, #3
 80046d4:	490e      	ldr	r1, [pc, #56]	; (8004710 <HAL_RCC_ClockConfig+0x1bc>)
 80046d6:	4313      	orrs	r3, r2
 80046d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80046da:	f000 f821 	bl	8004720 <HAL_RCC_GetSysClockFreq>
 80046de:	4602      	mov	r2, r0
 80046e0:	4b0b      	ldr	r3, [pc, #44]	; (8004710 <HAL_RCC_ClockConfig+0x1bc>)
 80046e2:	689b      	ldr	r3, [r3, #8]
 80046e4:	091b      	lsrs	r3, r3, #4
 80046e6:	f003 030f 	and.w	r3, r3, #15
 80046ea:	490a      	ldr	r1, [pc, #40]	; (8004714 <HAL_RCC_ClockConfig+0x1c0>)
 80046ec:	5ccb      	ldrb	r3, [r1, r3]
 80046ee:	fa22 f303 	lsr.w	r3, r2, r3
 80046f2:	4a09      	ldr	r2, [pc, #36]	; (8004718 <HAL_RCC_ClockConfig+0x1c4>)
 80046f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80046f6:	4b09      	ldr	r3, [pc, #36]	; (800471c <HAL_RCC_ClockConfig+0x1c8>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4618      	mov	r0, r3
 80046fc:	f7fc fba4 	bl	8000e48 <HAL_InitTick>

  return HAL_OK;
 8004700:	2300      	movs	r3, #0
}
 8004702:	4618      	mov	r0, r3
 8004704:	3710      	adds	r7, #16
 8004706:	46bd      	mov	sp, r7
 8004708:	bd80      	pop	{r7, pc}
 800470a:	bf00      	nop
 800470c:	40023c00 	.word	0x40023c00
 8004710:	40023800 	.word	0x40023800
 8004714:	08007544 	.word	0x08007544
 8004718:	20000000 	.word	0x20000000
 800471c:	20000004 	.word	0x20000004

08004720 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004720:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004724:	b094      	sub	sp, #80	; 0x50
 8004726:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004728:	2300      	movs	r3, #0
 800472a:	647b      	str	r3, [r7, #68]	; 0x44
 800472c:	2300      	movs	r3, #0
 800472e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004730:	2300      	movs	r3, #0
 8004732:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004734:	2300      	movs	r3, #0
 8004736:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004738:	4b79      	ldr	r3, [pc, #484]	; (8004920 <HAL_RCC_GetSysClockFreq+0x200>)
 800473a:	689b      	ldr	r3, [r3, #8]
 800473c:	f003 030c 	and.w	r3, r3, #12
 8004740:	2b08      	cmp	r3, #8
 8004742:	d00d      	beq.n	8004760 <HAL_RCC_GetSysClockFreq+0x40>
 8004744:	2b08      	cmp	r3, #8
 8004746:	f200 80e1 	bhi.w	800490c <HAL_RCC_GetSysClockFreq+0x1ec>
 800474a:	2b00      	cmp	r3, #0
 800474c:	d002      	beq.n	8004754 <HAL_RCC_GetSysClockFreq+0x34>
 800474e:	2b04      	cmp	r3, #4
 8004750:	d003      	beq.n	800475a <HAL_RCC_GetSysClockFreq+0x3a>
 8004752:	e0db      	b.n	800490c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004754:	4b73      	ldr	r3, [pc, #460]	; (8004924 <HAL_RCC_GetSysClockFreq+0x204>)
 8004756:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004758:	e0db      	b.n	8004912 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800475a:	4b73      	ldr	r3, [pc, #460]	; (8004928 <HAL_RCC_GetSysClockFreq+0x208>)
 800475c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800475e:	e0d8      	b.n	8004912 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004760:	4b6f      	ldr	r3, [pc, #444]	; (8004920 <HAL_RCC_GetSysClockFreq+0x200>)
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004768:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800476a:	4b6d      	ldr	r3, [pc, #436]	; (8004920 <HAL_RCC_GetSysClockFreq+0x200>)
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004772:	2b00      	cmp	r3, #0
 8004774:	d063      	beq.n	800483e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004776:	4b6a      	ldr	r3, [pc, #424]	; (8004920 <HAL_RCC_GetSysClockFreq+0x200>)
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	099b      	lsrs	r3, r3, #6
 800477c:	2200      	movs	r2, #0
 800477e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004780:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004784:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004788:	633b      	str	r3, [r7, #48]	; 0x30
 800478a:	2300      	movs	r3, #0
 800478c:	637b      	str	r3, [r7, #52]	; 0x34
 800478e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004792:	4622      	mov	r2, r4
 8004794:	462b      	mov	r3, r5
 8004796:	f04f 0000 	mov.w	r0, #0
 800479a:	f04f 0100 	mov.w	r1, #0
 800479e:	0159      	lsls	r1, r3, #5
 80047a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80047a4:	0150      	lsls	r0, r2, #5
 80047a6:	4602      	mov	r2, r0
 80047a8:	460b      	mov	r3, r1
 80047aa:	4621      	mov	r1, r4
 80047ac:	1a51      	subs	r1, r2, r1
 80047ae:	6139      	str	r1, [r7, #16]
 80047b0:	4629      	mov	r1, r5
 80047b2:	eb63 0301 	sbc.w	r3, r3, r1
 80047b6:	617b      	str	r3, [r7, #20]
 80047b8:	f04f 0200 	mov.w	r2, #0
 80047bc:	f04f 0300 	mov.w	r3, #0
 80047c0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80047c4:	4659      	mov	r1, fp
 80047c6:	018b      	lsls	r3, r1, #6
 80047c8:	4651      	mov	r1, sl
 80047ca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80047ce:	4651      	mov	r1, sl
 80047d0:	018a      	lsls	r2, r1, #6
 80047d2:	4651      	mov	r1, sl
 80047d4:	ebb2 0801 	subs.w	r8, r2, r1
 80047d8:	4659      	mov	r1, fp
 80047da:	eb63 0901 	sbc.w	r9, r3, r1
 80047de:	f04f 0200 	mov.w	r2, #0
 80047e2:	f04f 0300 	mov.w	r3, #0
 80047e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80047ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80047ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80047f2:	4690      	mov	r8, r2
 80047f4:	4699      	mov	r9, r3
 80047f6:	4623      	mov	r3, r4
 80047f8:	eb18 0303 	adds.w	r3, r8, r3
 80047fc:	60bb      	str	r3, [r7, #8]
 80047fe:	462b      	mov	r3, r5
 8004800:	eb49 0303 	adc.w	r3, r9, r3
 8004804:	60fb      	str	r3, [r7, #12]
 8004806:	f04f 0200 	mov.w	r2, #0
 800480a:	f04f 0300 	mov.w	r3, #0
 800480e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004812:	4629      	mov	r1, r5
 8004814:	024b      	lsls	r3, r1, #9
 8004816:	4621      	mov	r1, r4
 8004818:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800481c:	4621      	mov	r1, r4
 800481e:	024a      	lsls	r2, r1, #9
 8004820:	4610      	mov	r0, r2
 8004822:	4619      	mov	r1, r3
 8004824:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004826:	2200      	movs	r2, #0
 8004828:	62bb      	str	r3, [r7, #40]	; 0x28
 800482a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800482c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004830:	f7fb fcca 	bl	80001c8 <__aeabi_uldivmod>
 8004834:	4602      	mov	r2, r0
 8004836:	460b      	mov	r3, r1
 8004838:	4613      	mov	r3, r2
 800483a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800483c:	e058      	b.n	80048f0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800483e:	4b38      	ldr	r3, [pc, #224]	; (8004920 <HAL_RCC_GetSysClockFreq+0x200>)
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	099b      	lsrs	r3, r3, #6
 8004844:	2200      	movs	r2, #0
 8004846:	4618      	mov	r0, r3
 8004848:	4611      	mov	r1, r2
 800484a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800484e:	623b      	str	r3, [r7, #32]
 8004850:	2300      	movs	r3, #0
 8004852:	627b      	str	r3, [r7, #36]	; 0x24
 8004854:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004858:	4642      	mov	r2, r8
 800485a:	464b      	mov	r3, r9
 800485c:	f04f 0000 	mov.w	r0, #0
 8004860:	f04f 0100 	mov.w	r1, #0
 8004864:	0159      	lsls	r1, r3, #5
 8004866:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800486a:	0150      	lsls	r0, r2, #5
 800486c:	4602      	mov	r2, r0
 800486e:	460b      	mov	r3, r1
 8004870:	4641      	mov	r1, r8
 8004872:	ebb2 0a01 	subs.w	sl, r2, r1
 8004876:	4649      	mov	r1, r9
 8004878:	eb63 0b01 	sbc.w	fp, r3, r1
 800487c:	f04f 0200 	mov.w	r2, #0
 8004880:	f04f 0300 	mov.w	r3, #0
 8004884:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004888:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800488c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004890:	ebb2 040a 	subs.w	r4, r2, sl
 8004894:	eb63 050b 	sbc.w	r5, r3, fp
 8004898:	f04f 0200 	mov.w	r2, #0
 800489c:	f04f 0300 	mov.w	r3, #0
 80048a0:	00eb      	lsls	r3, r5, #3
 80048a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80048a6:	00e2      	lsls	r2, r4, #3
 80048a8:	4614      	mov	r4, r2
 80048aa:	461d      	mov	r5, r3
 80048ac:	4643      	mov	r3, r8
 80048ae:	18e3      	adds	r3, r4, r3
 80048b0:	603b      	str	r3, [r7, #0]
 80048b2:	464b      	mov	r3, r9
 80048b4:	eb45 0303 	adc.w	r3, r5, r3
 80048b8:	607b      	str	r3, [r7, #4]
 80048ba:	f04f 0200 	mov.w	r2, #0
 80048be:	f04f 0300 	mov.w	r3, #0
 80048c2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80048c6:	4629      	mov	r1, r5
 80048c8:	028b      	lsls	r3, r1, #10
 80048ca:	4621      	mov	r1, r4
 80048cc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80048d0:	4621      	mov	r1, r4
 80048d2:	028a      	lsls	r2, r1, #10
 80048d4:	4610      	mov	r0, r2
 80048d6:	4619      	mov	r1, r3
 80048d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048da:	2200      	movs	r2, #0
 80048dc:	61bb      	str	r3, [r7, #24]
 80048de:	61fa      	str	r2, [r7, #28]
 80048e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80048e4:	f7fb fc70 	bl	80001c8 <__aeabi_uldivmod>
 80048e8:	4602      	mov	r2, r0
 80048ea:	460b      	mov	r3, r1
 80048ec:	4613      	mov	r3, r2
 80048ee:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80048f0:	4b0b      	ldr	r3, [pc, #44]	; (8004920 <HAL_RCC_GetSysClockFreq+0x200>)
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	0c1b      	lsrs	r3, r3, #16
 80048f6:	f003 0303 	and.w	r3, r3, #3
 80048fa:	3301      	adds	r3, #1
 80048fc:	005b      	lsls	r3, r3, #1
 80048fe:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004900:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004902:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004904:	fbb2 f3f3 	udiv	r3, r2, r3
 8004908:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800490a:	e002      	b.n	8004912 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800490c:	4b05      	ldr	r3, [pc, #20]	; (8004924 <HAL_RCC_GetSysClockFreq+0x204>)
 800490e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004910:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004912:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004914:	4618      	mov	r0, r3
 8004916:	3750      	adds	r7, #80	; 0x50
 8004918:	46bd      	mov	sp, r7
 800491a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800491e:	bf00      	nop
 8004920:	40023800 	.word	0x40023800
 8004924:	00f42400 	.word	0x00f42400
 8004928:	007a1200 	.word	0x007a1200

0800492c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800492c:	b480      	push	{r7}
 800492e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004930:	4b03      	ldr	r3, [pc, #12]	; (8004940 <HAL_RCC_GetHCLKFreq+0x14>)
 8004932:	681b      	ldr	r3, [r3, #0]
}
 8004934:	4618      	mov	r0, r3
 8004936:	46bd      	mov	sp, r7
 8004938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493c:	4770      	bx	lr
 800493e:	bf00      	nop
 8004940:	20000000 	.word	0x20000000

08004944 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004948:	f7ff fff0 	bl	800492c <HAL_RCC_GetHCLKFreq>
 800494c:	4602      	mov	r2, r0
 800494e:	4b05      	ldr	r3, [pc, #20]	; (8004964 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004950:	689b      	ldr	r3, [r3, #8]
 8004952:	0a9b      	lsrs	r3, r3, #10
 8004954:	f003 0307 	and.w	r3, r3, #7
 8004958:	4903      	ldr	r1, [pc, #12]	; (8004968 <HAL_RCC_GetPCLK1Freq+0x24>)
 800495a:	5ccb      	ldrb	r3, [r1, r3]
 800495c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004960:	4618      	mov	r0, r3
 8004962:	bd80      	pop	{r7, pc}
 8004964:	40023800 	.word	0x40023800
 8004968:	08007554 	.word	0x08007554

0800496c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b086      	sub	sp, #24
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004974:	2300      	movs	r3, #0
 8004976:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004978:	2300      	movs	r3, #0
 800497a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f003 0301 	and.w	r3, r3, #1
 8004984:	2b00      	cmp	r3, #0
 8004986:	d105      	bne.n	8004994 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004990:	2b00      	cmp	r3, #0
 8004992:	d035      	beq.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004994:	4b62      	ldr	r3, [pc, #392]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004996:	2200      	movs	r2, #0
 8004998:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800499a:	f7fc fa99 	bl	8000ed0 <HAL_GetTick>
 800499e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80049a0:	e008      	b.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80049a2:	f7fc fa95 	bl	8000ed0 <HAL_GetTick>
 80049a6:	4602      	mov	r2, r0
 80049a8:	697b      	ldr	r3, [r7, #20]
 80049aa:	1ad3      	subs	r3, r2, r3
 80049ac:	2b02      	cmp	r3, #2
 80049ae:	d901      	bls.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80049b0:	2303      	movs	r3, #3
 80049b2:	e0b0      	b.n	8004b16 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80049b4:	4b5b      	ldr	r3, [pc, #364]	; (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d1f0      	bne.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	019a      	lsls	r2, r3, #6
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	689b      	ldr	r3, [r3, #8]
 80049ca:	071b      	lsls	r3, r3, #28
 80049cc:	4955      	ldr	r1, [pc, #340]	; (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80049ce:	4313      	orrs	r3, r2
 80049d0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80049d4:	4b52      	ldr	r3, [pc, #328]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80049d6:	2201      	movs	r2, #1
 80049d8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80049da:	f7fc fa79 	bl	8000ed0 <HAL_GetTick>
 80049de:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80049e0:	e008      	b.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80049e2:	f7fc fa75 	bl	8000ed0 <HAL_GetTick>
 80049e6:	4602      	mov	r2, r0
 80049e8:	697b      	ldr	r3, [r7, #20]
 80049ea:	1ad3      	subs	r3, r2, r3
 80049ec:	2b02      	cmp	r3, #2
 80049ee:	d901      	bls.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80049f0:	2303      	movs	r3, #3
 80049f2:	e090      	b.n	8004b16 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80049f4:	4b4b      	ldr	r3, [pc, #300]	; (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d0f0      	beq.n	80049e2 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f003 0302 	and.w	r3, r3, #2
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	f000 8083 	beq.w	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004a0e:	2300      	movs	r3, #0
 8004a10:	60fb      	str	r3, [r7, #12]
 8004a12:	4b44      	ldr	r3, [pc, #272]	; (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a16:	4a43      	ldr	r2, [pc, #268]	; (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a1c:	6413      	str	r3, [r2, #64]	; 0x40
 8004a1e:	4b41      	ldr	r3, [pc, #260]	; (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a26:	60fb      	str	r3, [r7, #12]
 8004a28:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004a2a:	4b3f      	ldr	r3, [pc, #252]	; (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4a3e      	ldr	r2, [pc, #248]	; (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004a30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a34:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004a36:	f7fc fa4b 	bl	8000ed0 <HAL_GetTick>
 8004a3a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004a3c:	e008      	b.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004a3e:	f7fc fa47 	bl	8000ed0 <HAL_GetTick>
 8004a42:	4602      	mov	r2, r0
 8004a44:	697b      	ldr	r3, [r7, #20]
 8004a46:	1ad3      	subs	r3, r2, r3
 8004a48:	2b02      	cmp	r3, #2
 8004a4a:	d901      	bls.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004a4c:	2303      	movs	r3, #3
 8004a4e:	e062      	b.n	8004b16 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004a50:	4b35      	ldr	r3, [pc, #212]	; (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d0f0      	beq.n	8004a3e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004a5c:	4b31      	ldr	r3, [pc, #196]	; (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a60:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a64:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004a66:	693b      	ldr	r3, [r7, #16]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d02f      	beq.n	8004acc <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	68db      	ldr	r3, [r3, #12]
 8004a70:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a74:	693a      	ldr	r2, [r7, #16]
 8004a76:	429a      	cmp	r2, r3
 8004a78:	d028      	beq.n	8004acc <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004a7a:	4b2a      	ldr	r3, [pc, #168]	; (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a82:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004a84:	4b29      	ldr	r3, [pc, #164]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004a86:	2201      	movs	r2, #1
 8004a88:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004a8a:	4b28      	ldr	r3, [pc, #160]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004a90:	4a24      	ldr	r2, [pc, #144]	; (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a92:	693b      	ldr	r3, [r7, #16]
 8004a94:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004a96:	4b23      	ldr	r3, [pc, #140]	; (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a9a:	f003 0301 	and.w	r3, r3, #1
 8004a9e:	2b01      	cmp	r3, #1
 8004aa0:	d114      	bne.n	8004acc <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004aa2:	f7fc fa15 	bl	8000ed0 <HAL_GetTick>
 8004aa6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004aa8:	e00a      	b.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004aaa:	f7fc fa11 	bl	8000ed0 <HAL_GetTick>
 8004aae:	4602      	mov	r2, r0
 8004ab0:	697b      	ldr	r3, [r7, #20]
 8004ab2:	1ad3      	subs	r3, r2, r3
 8004ab4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d901      	bls.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004abc:	2303      	movs	r3, #3
 8004abe:	e02a      	b.n	8004b16 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ac0:	4b18      	ldr	r3, [pc, #96]	; (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ac2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ac4:	f003 0302 	and.w	r3, r3, #2
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d0ee      	beq.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	68db      	ldr	r3, [r3, #12]
 8004ad0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ad4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ad8:	d10d      	bne.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004ada:	4b12      	ldr	r3, [pc, #72]	; (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004adc:	689b      	ldr	r3, [r3, #8]
 8004ade:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	68db      	ldr	r3, [r3, #12]
 8004ae6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004aea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004aee:	490d      	ldr	r1, [pc, #52]	; (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004af0:	4313      	orrs	r3, r2
 8004af2:	608b      	str	r3, [r1, #8]
 8004af4:	e005      	b.n	8004b02 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004af6:	4b0b      	ldr	r3, [pc, #44]	; (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004af8:	689b      	ldr	r3, [r3, #8]
 8004afa:	4a0a      	ldr	r2, [pc, #40]	; (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004afc:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004b00:	6093      	str	r3, [r2, #8]
 8004b02:	4b08      	ldr	r3, [pc, #32]	; (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b04:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	68db      	ldr	r3, [r3, #12]
 8004b0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b0e:	4905      	ldr	r1, [pc, #20]	; (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b10:	4313      	orrs	r3, r2
 8004b12:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004b14:	2300      	movs	r3, #0
}
 8004b16:	4618      	mov	r0, r3
 8004b18:	3718      	adds	r7, #24
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bd80      	pop	{r7, pc}
 8004b1e:	bf00      	nop
 8004b20:	42470068 	.word	0x42470068
 8004b24:	40023800 	.word	0x40023800
 8004b28:	40007000 	.word	0x40007000
 8004b2c:	42470e40 	.word	0x42470e40

08004b30 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004b30:	b480      	push	{r7}
 8004b32:	b087      	sub	sp, #28
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004b38:	2300      	movs	r3, #0
 8004b3a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004b40:	2300      	movs	r3, #0
 8004b42:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004b44:	2300      	movs	r3, #0
 8004b46:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2b01      	cmp	r3, #1
 8004b4c:	d13e      	bne.n	8004bcc <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004b4e:	4b23      	ldr	r3, [pc, #140]	; (8004bdc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004b50:	689b      	ldr	r3, [r3, #8]
 8004b52:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004b56:	60fb      	str	r3, [r7, #12]
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d005      	beq.n	8004b6a <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	2b01      	cmp	r3, #1
 8004b62:	d12f      	bne.n	8004bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004b64:	4b1e      	ldr	r3, [pc, #120]	; (8004be0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004b66:	617b      	str	r3, [r7, #20]
          break;
 8004b68:	e02f      	b.n	8004bca <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004b6a:	4b1c      	ldr	r3, [pc, #112]	; (8004bdc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004b6c:	685b      	ldr	r3, [r3, #4]
 8004b6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b72:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b76:	d108      	bne.n	8004b8a <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004b78:	4b18      	ldr	r3, [pc, #96]	; (8004bdc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b80:	4a18      	ldr	r2, [pc, #96]	; (8004be4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004b82:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b86:	613b      	str	r3, [r7, #16]
 8004b88:	e007      	b.n	8004b9a <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004b8a:	4b14      	ldr	r3, [pc, #80]	; (8004bdc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004b8c:	685b      	ldr	r3, [r3, #4]
 8004b8e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b92:	4a15      	ldr	r2, [pc, #84]	; (8004be8 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004b94:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b98:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004b9a:	4b10      	ldr	r3, [pc, #64]	; (8004bdc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004b9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ba0:	099b      	lsrs	r3, r3, #6
 8004ba2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004ba6:	693b      	ldr	r3, [r7, #16]
 8004ba8:	fb02 f303 	mul.w	r3, r2, r3
 8004bac:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004bae:	4b0b      	ldr	r3, [pc, #44]	; (8004bdc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004bb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004bb4:	0f1b      	lsrs	r3, r3, #28
 8004bb6:	f003 0307 	and.w	r3, r3, #7
 8004bba:	68ba      	ldr	r2, [r7, #8]
 8004bbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bc0:	617b      	str	r3, [r7, #20]
          break;
 8004bc2:	e002      	b.n	8004bca <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	617b      	str	r3, [r7, #20]
          break;
 8004bc8:	bf00      	nop
        }
      }
      break;
 8004bca:	bf00      	nop
    }
  }
  return frequency;
 8004bcc:	697b      	ldr	r3, [r7, #20]
}
 8004bce:	4618      	mov	r0, r3
 8004bd0:	371c      	adds	r7, #28
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd8:	4770      	bx	lr
 8004bda:	bf00      	nop
 8004bdc:	40023800 	.word	0x40023800
 8004be0:	00bb8000 	.word	0x00bb8000
 8004be4:	007a1200 	.word	0x007a1200
 8004be8:	00f42400 	.word	0x00f42400

08004bec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b082      	sub	sp, #8
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d101      	bne.n	8004bfe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	e07b      	b.n	8004cf6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d108      	bne.n	8004c18 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c0e:	d009      	beq.n	8004c24 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2200      	movs	r2, #0
 8004c14:	61da      	str	r2, [r3, #28]
 8004c16:	e005      	b.n	8004c24 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2200      	movs	r2, #0
 8004c22:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2200      	movs	r2, #0
 8004c28:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c30:	b2db      	uxtb	r3, r3
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d106      	bne.n	8004c44 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004c3e:	6878      	ldr	r0, [r7, #4]
 8004c40:	f7fb fff2 	bl	8000c28 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2202      	movs	r2, #2
 8004c48:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	681a      	ldr	r2, [r3, #0]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c5a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	689b      	ldr	r3, [r3, #8]
 8004c68:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004c6c:	431a      	orrs	r2, r3
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	68db      	ldr	r3, [r3, #12]
 8004c72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c76:	431a      	orrs	r2, r3
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	691b      	ldr	r3, [r3, #16]
 8004c7c:	f003 0302 	and.w	r3, r3, #2
 8004c80:	431a      	orrs	r2, r3
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	695b      	ldr	r3, [r3, #20]
 8004c86:	f003 0301 	and.w	r3, r3, #1
 8004c8a:	431a      	orrs	r2, r3
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	699b      	ldr	r3, [r3, #24]
 8004c90:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c94:	431a      	orrs	r2, r3
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	69db      	ldr	r3, [r3, #28]
 8004c9a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004c9e:	431a      	orrs	r2, r3
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6a1b      	ldr	r3, [r3, #32]
 8004ca4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ca8:	ea42 0103 	orr.w	r1, r2, r3
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cb0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	430a      	orrs	r2, r1
 8004cba:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	699b      	ldr	r3, [r3, #24]
 8004cc0:	0c1b      	lsrs	r3, r3, #16
 8004cc2:	f003 0104 	and.w	r1, r3, #4
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cca:	f003 0210 	and.w	r2, r3, #16
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	430a      	orrs	r2, r1
 8004cd4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	69da      	ldr	r2, [r3, #28]
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ce4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2201      	movs	r2, #1
 8004cf0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004cf4:	2300      	movs	r3, #0
}
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	3708      	adds	r7, #8
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bd80      	pop	{r7, pc}

08004cfe <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004cfe:	b084      	sub	sp, #16
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b084      	sub	sp, #16
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
 8004d08:	f107 001c 	add.w	r0, r7, #28
 8004d0c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004d10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d12:	2b01      	cmp	r3, #1
 8004d14:	d122      	bne.n	8004d5c <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d1a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	68db      	ldr	r3, [r3, #12]
 8004d26:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004d2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d2e:	687a      	ldr	r2, [r7, #4]
 8004d30:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	68db      	ldr	r3, [r3, #12]
 8004d36:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004d3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d40:	2b01      	cmp	r3, #1
 8004d42:	d105      	bne.n	8004d50 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	68db      	ldr	r3, [r3, #12]
 8004d48:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004d50:	6878      	ldr	r0, [r7, #4]
 8004d52:	f000 f9bf 	bl	80050d4 <USB_CoreReset>
 8004d56:	4603      	mov	r3, r0
 8004d58:	73fb      	strb	r3, [r7, #15]
 8004d5a:	e01a      	b.n	8004d92 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	68db      	ldr	r3, [r3, #12]
 8004d60:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004d68:	6878      	ldr	r0, [r7, #4]
 8004d6a:	f000 f9b3 	bl	80050d4 <USB_CoreReset>
 8004d6e:	4603      	mov	r3, r0
 8004d70:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004d72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d106      	bne.n	8004d86 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d7c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	639a      	str	r2, [r3, #56]	; 0x38
 8004d84:	e005      	b.n	8004d92 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d8a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d94:	2b01      	cmp	r3, #1
 8004d96:	d10b      	bne.n	8004db0 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	689b      	ldr	r3, [r3, #8]
 8004d9c:	f043 0206 	orr.w	r2, r3, #6
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	689b      	ldr	r3, [r3, #8]
 8004da8:	f043 0220 	orr.w	r2, r3, #32
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004db0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004db2:	4618      	mov	r0, r3
 8004db4:	3710      	adds	r7, #16
 8004db6:	46bd      	mov	sp, r7
 8004db8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004dbc:	b004      	add	sp, #16
 8004dbe:	4770      	bx	lr

08004dc0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	b083      	sub	sp, #12
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	689b      	ldr	r3, [r3, #8]
 8004dcc:	f043 0201 	orr.w	r2, r3, #1
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004dd4:	2300      	movs	r3, #0
}
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	370c      	adds	r7, #12
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de0:	4770      	bx	lr

08004de2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004de2:	b480      	push	{r7}
 8004de4:	b083      	sub	sp, #12
 8004de6:	af00      	add	r7, sp, #0
 8004de8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	689b      	ldr	r3, [r3, #8]
 8004dee:	f023 0201 	bic.w	r2, r3, #1
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004df6:	2300      	movs	r3, #0
}
 8004df8:	4618      	mov	r0, r3
 8004dfa:	370c      	adds	r7, #12
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e02:	4770      	bx	lr

08004e04 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b084      	sub	sp, #16
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
 8004e0c:	460b      	mov	r3, r1
 8004e0e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004e10:	2300      	movs	r3, #0
 8004e12:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	68db      	ldr	r3, [r3, #12]
 8004e18:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004e20:	78fb      	ldrb	r3, [r7, #3]
 8004e22:	2b01      	cmp	r3, #1
 8004e24:	d115      	bne.n	8004e52 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	68db      	ldr	r3, [r3, #12]
 8004e2a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004e32:	2001      	movs	r0, #1
 8004e34:	f7fc f858 	bl	8000ee8 <HAL_Delay>
      ms++;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	3301      	adds	r3, #1
 8004e3c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004e3e:	6878      	ldr	r0, [r7, #4]
 8004e40:	f000 f939 	bl	80050b6 <USB_GetMode>
 8004e44:	4603      	mov	r3, r0
 8004e46:	2b01      	cmp	r3, #1
 8004e48:	d01e      	beq.n	8004e88 <USB_SetCurrentMode+0x84>
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	2b31      	cmp	r3, #49	; 0x31
 8004e4e:	d9f0      	bls.n	8004e32 <USB_SetCurrentMode+0x2e>
 8004e50:	e01a      	b.n	8004e88 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004e52:	78fb      	ldrb	r3, [r7, #3]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d115      	bne.n	8004e84 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	68db      	ldr	r3, [r3, #12]
 8004e5c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004e64:	2001      	movs	r0, #1
 8004e66:	f7fc f83f 	bl	8000ee8 <HAL_Delay>
      ms++;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	3301      	adds	r3, #1
 8004e6e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004e70:	6878      	ldr	r0, [r7, #4]
 8004e72:	f000 f920 	bl	80050b6 <USB_GetMode>
 8004e76:	4603      	mov	r3, r0
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d005      	beq.n	8004e88 <USB_SetCurrentMode+0x84>
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	2b31      	cmp	r3, #49	; 0x31
 8004e80:	d9f0      	bls.n	8004e64 <USB_SetCurrentMode+0x60>
 8004e82:	e001      	b.n	8004e88 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004e84:	2301      	movs	r3, #1
 8004e86:	e005      	b.n	8004e94 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	2b32      	cmp	r3, #50	; 0x32
 8004e8c:	d101      	bne.n	8004e92 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004e8e:	2301      	movs	r3, #1
 8004e90:	e000      	b.n	8004e94 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004e92:	2300      	movs	r3, #0
}
 8004e94:	4618      	mov	r0, r3
 8004e96:	3710      	adds	r7, #16
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	bd80      	pop	{r7, pc}

08004e9c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	b085      	sub	sp, #20
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
 8004ea4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	3301      	adds	r3, #1
 8004eae:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	4a13      	ldr	r2, [pc, #76]	; (8004f00 <USB_FlushTxFifo+0x64>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d901      	bls.n	8004ebc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004eb8:	2303      	movs	r3, #3
 8004eba:	e01b      	b.n	8004ef4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	691b      	ldr	r3, [r3, #16]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	daf2      	bge.n	8004eaa <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	019b      	lsls	r3, r3, #6
 8004ecc:	f043 0220 	orr.w	r2, r3, #32
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	3301      	adds	r3, #1
 8004ed8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	4a08      	ldr	r2, [pc, #32]	; (8004f00 <USB_FlushTxFifo+0x64>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d901      	bls.n	8004ee6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004ee2:	2303      	movs	r3, #3
 8004ee4:	e006      	b.n	8004ef4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	691b      	ldr	r3, [r3, #16]
 8004eea:	f003 0320 	and.w	r3, r3, #32
 8004eee:	2b20      	cmp	r3, #32
 8004ef0:	d0f0      	beq.n	8004ed4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004ef2:	2300      	movs	r3, #0
}
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	3714      	adds	r7, #20
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efe:	4770      	bx	lr
 8004f00:	00030d40 	.word	0x00030d40

08004f04 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004f04:	b480      	push	{r7}
 8004f06:	b085      	sub	sp, #20
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	3301      	adds	r3, #1
 8004f14:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	4a11      	ldr	r2, [pc, #68]	; (8004f60 <USB_FlushRxFifo+0x5c>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d901      	bls.n	8004f22 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004f1e:	2303      	movs	r3, #3
 8004f20:	e018      	b.n	8004f54 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	691b      	ldr	r3, [r3, #16]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	daf2      	bge.n	8004f10 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2210      	movs	r2, #16
 8004f32:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	3301      	adds	r3, #1
 8004f38:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	4a08      	ldr	r2, [pc, #32]	; (8004f60 <USB_FlushRxFifo+0x5c>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d901      	bls.n	8004f46 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004f42:	2303      	movs	r3, #3
 8004f44:	e006      	b.n	8004f54 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	691b      	ldr	r3, [r3, #16]
 8004f4a:	f003 0310 	and.w	r3, r3, #16
 8004f4e:	2b10      	cmp	r3, #16
 8004f50:	d0f0      	beq.n	8004f34 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004f52:	2300      	movs	r3, #0
}
 8004f54:	4618      	mov	r0, r3
 8004f56:	3714      	adds	r7, #20
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5e:	4770      	bx	lr
 8004f60:	00030d40 	.word	0x00030d40

08004f64 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004f64:	b480      	push	{r7}
 8004f66:	b089      	sub	sp, #36	; 0x24
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	60f8      	str	r0, [r7, #12]
 8004f6c:	60b9      	str	r1, [r7, #8]
 8004f6e:	4611      	mov	r1, r2
 8004f70:	461a      	mov	r2, r3
 8004f72:	460b      	mov	r3, r1
 8004f74:	71fb      	strb	r3, [r7, #7]
 8004f76:	4613      	mov	r3, r2
 8004f78:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004f7e:	68bb      	ldr	r3, [r7, #8]
 8004f80:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004f82:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d123      	bne.n	8004fd2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004f8a:	88bb      	ldrh	r3, [r7, #4]
 8004f8c:	3303      	adds	r3, #3
 8004f8e:	089b      	lsrs	r3, r3, #2
 8004f90:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004f92:	2300      	movs	r3, #0
 8004f94:	61bb      	str	r3, [r7, #24]
 8004f96:	e018      	b.n	8004fca <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004f98:	79fb      	ldrb	r3, [r7, #7]
 8004f9a:	031a      	lsls	r2, r3, #12
 8004f9c:	697b      	ldr	r3, [r7, #20]
 8004f9e:	4413      	add	r3, r2
 8004fa0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004fa4:	461a      	mov	r2, r3
 8004fa6:	69fb      	ldr	r3, [r7, #28]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004fac:	69fb      	ldr	r3, [r7, #28]
 8004fae:	3301      	adds	r3, #1
 8004fb0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004fb2:	69fb      	ldr	r3, [r7, #28]
 8004fb4:	3301      	adds	r3, #1
 8004fb6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004fb8:	69fb      	ldr	r3, [r7, #28]
 8004fba:	3301      	adds	r3, #1
 8004fbc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004fbe:	69fb      	ldr	r3, [r7, #28]
 8004fc0:	3301      	adds	r3, #1
 8004fc2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004fc4:	69bb      	ldr	r3, [r7, #24]
 8004fc6:	3301      	adds	r3, #1
 8004fc8:	61bb      	str	r3, [r7, #24]
 8004fca:	69ba      	ldr	r2, [r7, #24]
 8004fcc:	693b      	ldr	r3, [r7, #16]
 8004fce:	429a      	cmp	r2, r3
 8004fd0:	d3e2      	bcc.n	8004f98 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004fd2:	2300      	movs	r3, #0
}
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	3724      	adds	r7, #36	; 0x24
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fde:	4770      	bx	lr

08004fe0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004fe0:	b480      	push	{r7}
 8004fe2:	b08b      	sub	sp, #44	; 0x2c
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	60f8      	str	r0, [r7, #12]
 8004fe8:	60b9      	str	r1, [r7, #8]
 8004fea:	4613      	mov	r3, r2
 8004fec:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004ff6:	88fb      	ldrh	r3, [r7, #6]
 8004ff8:	089b      	lsrs	r3, r3, #2
 8004ffa:	b29b      	uxth	r3, r3
 8004ffc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004ffe:	88fb      	ldrh	r3, [r7, #6]
 8005000:	f003 0303 	and.w	r3, r3, #3
 8005004:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005006:	2300      	movs	r3, #0
 8005008:	623b      	str	r3, [r7, #32]
 800500a:	e014      	b.n	8005036 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800500c:	69bb      	ldr	r3, [r7, #24]
 800500e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005012:	681a      	ldr	r2, [r3, #0]
 8005014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005016:	601a      	str	r2, [r3, #0]
    pDest++;
 8005018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800501a:	3301      	adds	r3, #1
 800501c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800501e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005020:	3301      	adds	r3, #1
 8005022:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005026:	3301      	adds	r3, #1
 8005028:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800502a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800502c:	3301      	adds	r3, #1
 800502e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005030:	6a3b      	ldr	r3, [r7, #32]
 8005032:	3301      	adds	r3, #1
 8005034:	623b      	str	r3, [r7, #32]
 8005036:	6a3a      	ldr	r2, [r7, #32]
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	429a      	cmp	r2, r3
 800503c:	d3e6      	bcc.n	800500c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800503e:	8bfb      	ldrh	r3, [r7, #30]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d01e      	beq.n	8005082 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005044:	2300      	movs	r3, #0
 8005046:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005048:	69bb      	ldr	r3, [r7, #24]
 800504a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800504e:	461a      	mov	r2, r3
 8005050:	f107 0310 	add.w	r3, r7, #16
 8005054:	6812      	ldr	r2, [r2, #0]
 8005056:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005058:	693a      	ldr	r2, [r7, #16]
 800505a:	6a3b      	ldr	r3, [r7, #32]
 800505c:	b2db      	uxtb	r3, r3
 800505e:	00db      	lsls	r3, r3, #3
 8005060:	fa22 f303 	lsr.w	r3, r2, r3
 8005064:	b2da      	uxtb	r2, r3
 8005066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005068:	701a      	strb	r2, [r3, #0]
      i++;
 800506a:	6a3b      	ldr	r3, [r7, #32]
 800506c:	3301      	adds	r3, #1
 800506e:	623b      	str	r3, [r7, #32]
      pDest++;
 8005070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005072:	3301      	adds	r3, #1
 8005074:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005076:	8bfb      	ldrh	r3, [r7, #30]
 8005078:	3b01      	subs	r3, #1
 800507a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800507c:	8bfb      	ldrh	r3, [r7, #30]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d1ea      	bne.n	8005058 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005084:	4618      	mov	r0, r3
 8005086:	372c      	adds	r7, #44	; 0x2c
 8005088:	46bd      	mov	sp, r7
 800508a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508e:	4770      	bx	lr

08005090 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005090:	b480      	push	{r7}
 8005092:	b085      	sub	sp, #20
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	695b      	ldr	r3, [r3, #20]
 800509c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	699b      	ldr	r3, [r3, #24]
 80050a2:	68fa      	ldr	r2, [r7, #12]
 80050a4:	4013      	ands	r3, r2
 80050a6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80050a8:	68fb      	ldr	r3, [r7, #12]
}
 80050aa:	4618      	mov	r0, r3
 80050ac:	3714      	adds	r7, #20
 80050ae:	46bd      	mov	sp, r7
 80050b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b4:	4770      	bx	lr

080050b6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80050b6:	b480      	push	{r7}
 80050b8:	b083      	sub	sp, #12
 80050ba:	af00      	add	r7, sp, #0
 80050bc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	695b      	ldr	r3, [r3, #20]
 80050c2:	f003 0301 	and.w	r3, r3, #1
}
 80050c6:	4618      	mov	r0, r3
 80050c8:	370c      	adds	r7, #12
 80050ca:	46bd      	mov	sp, r7
 80050cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d0:	4770      	bx	lr
	...

080050d4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80050d4:	b480      	push	{r7}
 80050d6:	b085      	sub	sp, #20
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80050dc:	2300      	movs	r3, #0
 80050de:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	3301      	adds	r3, #1
 80050e4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	4a13      	ldr	r2, [pc, #76]	; (8005138 <USB_CoreReset+0x64>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d901      	bls.n	80050f2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80050ee:	2303      	movs	r3, #3
 80050f0:	e01b      	b.n	800512a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	691b      	ldr	r3, [r3, #16]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	daf2      	bge.n	80050e0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80050fa:	2300      	movs	r3, #0
 80050fc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	691b      	ldr	r3, [r3, #16]
 8005102:	f043 0201 	orr.w	r2, r3, #1
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	3301      	adds	r3, #1
 800510e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	4a09      	ldr	r2, [pc, #36]	; (8005138 <USB_CoreReset+0x64>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d901      	bls.n	800511c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005118:	2303      	movs	r3, #3
 800511a:	e006      	b.n	800512a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	691b      	ldr	r3, [r3, #16]
 8005120:	f003 0301 	and.w	r3, r3, #1
 8005124:	2b01      	cmp	r3, #1
 8005126:	d0f0      	beq.n	800510a <USB_CoreReset+0x36>

  return HAL_OK;
 8005128:	2300      	movs	r3, #0
}
 800512a:	4618      	mov	r0, r3
 800512c:	3714      	adds	r7, #20
 800512e:	46bd      	mov	sp, r7
 8005130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005134:	4770      	bx	lr
 8005136:	bf00      	nop
 8005138:	00030d40 	.word	0x00030d40

0800513c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800513c:	b084      	sub	sp, #16
 800513e:	b580      	push	{r7, lr}
 8005140:	b086      	sub	sp, #24
 8005142:	af00      	add	r7, sp, #0
 8005144:	6078      	str	r0, [r7, #4]
 8005146:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800514a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800514e:	2300      	movs	r3, #0
 8005150:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800515c:	461a      	mov	r2, r3
 800515e:	2300      	movs	r3, #0
 8005160:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005166:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005172:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800517e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800518a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800518e:	2b00      	cmp	r3, #0
 8005190:	d018      	beq.n	80051c4 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005194:	2b01      	cmp	r3, #1
 8005196:	d10a      	bne.n	80051ae <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	68fa      	ldr	r2, [r7, #12]
 80051a2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80051a6:	f043 0304 	orr.w	r3, r3, #4
 80051aa:	6013      	str	r3, [r2, #0]
 80051ac:	e014      	b.n	80051d8 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	68fa      	ldr	r2, [r7, #12]
 80051b8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80051bc:	f023 0304 	bic.w	r3, r3, #4
 80051c0:	6013      	str	r3, [r2, #0]
 80051c2:	e009      	b.n	80051d8 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	68fa      	ldr	r2, [r7, #12]
 80051ce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80051d2:	f023 0304 	bic.w	r3, r3, #4
 80051d6:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80051d8:	2110      	movs	r1, #16
 80051da:	6878      	ldr	r0, [r7, #4]
 80051dc:	f7ff fe5e 	bl	8004e9c <USB_FlushTxFifo>
 80051e0:	4603      	mov	r3, r0
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d001      	beq.n	80051ea <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 80051e6:	2301      	movs	r3, #1
 80051e8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80051ea:	6878      	ldr	r0, [r7, #4]
 80051ec:	f7ff fe8a 	bl	8004f04 <USB_FlushRxFifo>
 80051f0:	4603      	mov	r3, r0
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d001      	beq.n	80051fa <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 80051f6:	2301      	movs	r3, #1
 80051f8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80051fa:	2300      	movs	r3, #0
 80051fc:	613b      	str	r3, [r7, #16]
 80051fe:	e015      	b.n	800522c <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8005200:	693b      	ldr	r3, [r7, #16]
 8005202:	015a      	lsls	r2, r3, #5
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	4413      	add	r3, r2
 8005208:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800520c:	461a      	mov	r2, r3
 800520e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005212:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005214:	693b      	ldr	r3, [r7, #16]
 8005216:	015a      	lsls	r2, r3, #5
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	4413      	add	r3, r2
 800521c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005220:	461a      	mov	r2, r3
 8005222:	2300      	movs	r3, #0
 8005224:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005226:	693b      	ldr	r3, [r7, #16]
 8005228:	3301      	adds	r3, #1
 800522a:	613b      	str	r3, [r7, #16]
 800522c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800522e:	693a      	ldr	r2, [r7, #16]
 8005230:	429a      	cmp	r2, r3
 8005232:	d3e5      	bcc.n	8005200 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2200      	movs	r2, #0
 8005238:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005240:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005246:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800524a:	2b00      	cmp	r3, #0
 800524c:	d00b      	beq.n	8005266 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005254:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	4a13      	ldr	r2, [pc, #76]	; (80052a8 <USB_HostInit+0x16c>)
 800525a:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	4a13      	ldr	r2, [pc, #76]	; (80052ac <USB_HostInit+0x170>)
 8005260:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005264:	e009      	b.n	800527a <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2280      	movs	r2, #128	; 0x80
 800526a:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	4a10      	ldr	r2, [pc, #64]	; (80052b0 <USB_HostInit+0x174>)
 8005270:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	4a0f      	ldr	r2, [pc, #60]	; (80052b4 <USB_HostInit+0x178>)
 8005276:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800527a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800527c:	2b00      	cmp	r3, #0
 800527e:	d105      	bne.n	800528c <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	699b      	ldr	r3, [r3, #24]
 8005284:	f043 0210 	orr.w	r2, r3, #16
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	699a      	ldr	r2, [r3, #24]
 8005290:	4b09      	ldr	r3, [pc, #36]	; (80052b8 <USB_HostInit+0x17c>)
 8005292:	4313      	orrs	r3, r2
 8005294:	687a      	ldr	r2, [r7, #4]
 8005296:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8005298:	7dfb      	ldrb	r3, [r7, #23]
}
 800529a:	4618      	mov	r0, r3
 800529c:	3718      	adds	r7, #24
 800529e:	46bd      	mov	sp, r7
 80052a0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80052a4:	b004      	add	sp, #16
 80052a6:	4770      	bx	lr
 80052a8:	01000200 	.word	0x01000200
 80052ac:	00e00300 	.word	0x00e00300
 80052b0:	00600080 	.word	0x00600080
 80052b4:	004000e0 	.word	0x004000e0
 80052b8:	a3200008 	.word	0xa3200008

080052bc <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80052bc:	b480      	push	{r7}
 80052be:	b085      	sub	sp, #20
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
 80052c4:	460b      	mov	r3, r1
 80052c6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	68fa      	ldr	r2, [r7, #12]
 80052d6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80052da:	f023 0303 	bic.w	r3, r3, #3
 80052de:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80052e6:	681a      	ldr	r2, [r3, #0]
 80052e8:	78fb      	ldrb	r3, [r7, #3]
 80052ea:	f003 0303 	and.w	r3, r3, #3
 80052ee:	68f9      	ldr	r1, [r7, #12]
 80052f0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80052f4:	4313      	orrs	r3, r2
 80052f6:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80052f8:	78fb      	ldrb	r3, [r7, #3]
 80052fa:	2b01      	cmp	r3, #1
 80052fc:	d107      	bne.n	800530e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005304:	461a      	mov	r2, r3
 8005306:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800530a:	6053      	str	r3, [r2, #4]
 800530c:	e009      	b.n	8005322 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800530e:	78fb      	ldrb	r3, [r7, #3]
 8005310:	2b02      	cmp	r3, #2
 8005312:	d106      	bne.n	8005322 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800531a:	461a      	mov	r2, r3
 800531c:	f241 7370 	movw	r3, #6000	; 0x1770
 8005320:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8005322:	2300      	movs	r3, #0
}
 8005324:	4618      	mov	r0, r3
 8005326:	3714      	adds	r7, #20
 8005328:	46bd      	mov	sp, r7
 800532a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532e:	4770      	bx	lr

08005330 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005330:	b480      	push	{r7}
 8005332:	b085      	sub	sp, #20
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
 8005338:	460b      	mov	r3, r1
 800533a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005340:	2300      	movs	r3, #0
 8005342:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005354:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800535c:	2b00      	cmp	r3, #0
 800535e:	d109      	bne.n	8005374 <USB_DriveVbus+0x44>
 8005360:	78fb      	ldrb	r3, [r7, #3]
 8005362:	2b01      	cmp	r3, #1
 8005364:	d106      	bne.n	8005374 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005366:	68bb      	ldr	r3, [r7, #8]
 8005368:	68fa      	ldr	r2, [r7, #12]
 800536a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800536e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005372:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800537a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800537e:	d109      	bne.n	8005394 <USB_DriveVbus+0x64>
 8005380:	78fb      	ldrb	r3, [r7, #3]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d106      	bne.n	8005394 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	68fa      	ldr	r2, [r7, #12]
 800538a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800538e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005392:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005394:	2300      	movs	r3, #0
}
 8005396:	4618      	mov	r0, r3
 8005398:	3714      	adds	r7, #20
 800539a:	46bd      	mov	sp, r7
 800539c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a0:	4770      	bx	lr

080053a2 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80053a2:	b480      	push	{r7}
 80053a4:	b085      	sub	sp, #20
 80053a6:	af00      	add	r7, sp, #0
 80053a8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80053ae:	2300      	movs	r3, #0
 80053b0:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	0c5b      	lsrs	r3, r3, #17
 80053c0:	f003 0303 	and.w	r3, r3, #3
}
 80053c4:	4618      	mov	r0, r3
 80053c6:	3714      	adds	r7, #20
 80053c8:	46bd      	mov	sp, r7
 80053ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ce:	4770      	bx	lr

080053d0 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80053d0:	b480      	push	{r7}
 80053d2:	b085      	sub	sp, #20
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80053e2:	689b      	ldr	r3, [r3, #8]
 80053e4:	b29b      	uxth	r3, r3
}
 80053e6:	4618      	mov	r0, r3
 80053e8:	3714      	adds	r7, #20
 80053ea:	46bd      	mov	sp, r7
 80053ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f0:	4770      	bx	lr
	...

080053f4 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b088      	sub	sp, #32
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
 80053fc:	4608      	mov	r0, r1
 80053fe:	4611      	mov	r1, r2
 8005400:	461a      	mov	r2, r3
 8005402:	4603      	mov	r3, r0
 8005404:	70fb      	strb	r3, [r7, #3]
 8005406:	460b      	mov	r3, r1
 8005408:	70bb      	strb	r3, [r7, #2]
 800540a:	4613      	mov	r3, r2
 800540c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800540e:	2300      	movs	r3, #0
 8005410:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8005416:	78fb      	ldrb	r3, [r7, #3]
 8005418:	015a      	lsls	r2, r3, #5
 800541a:	693b      	ldr	r3, [r7, #16]
 800541c:	4413      	add	r3, r2
 800541e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005422:	461a      	mov	r2, r3
 8005424:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005428:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800542a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800542e:	2b03      	cmp	r3, #3
 8005430:	d87e      	bhi.n	8005530 <USB_HC_Init+0x13c>
 8005432:	a201      	add	r2, pc, #4	; (adr r2, 8005438 <USB_HC_Init+0x44>)
 8005434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005438:	08005449 	.word	0x08005449
 800543c:	080054f3 	.word	0x080054f3
 8005440:	08005449 	.word	0x08005449
 8005444:	080054b5 	.word	0x080054b5
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005448:	78fb      	ldrb	r3, [r7, #3]
 800544a:	015a      	lsls	r2, r3, #5
 800544c:	693b      	ldr	r3, [r7, #16]
 800544e:	4413      	add	r3, r2
 8005450:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005454:	461a      	mov	r2, r3
 8005456:	f240 439d 	movw	r3, #1181	; 0x49d
 800545a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800545c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005460:	2b00      	cmp	r3, #0
 8005462:	da10      	bge.n	8005486 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005464:	78fb      	ldrb	r3, [r7, #3]
 8005466:	015a      	lsls	r2, r3, #5
 8005468:	693b      	ldr	r3, [r7, #16]
 800546a:	4413      	add	r3, r2
 800546c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005470:	68db      	ldr	r3, [r3, #12]
 8005472:	78fa      	ldrb	r2, [r7, #3]
 8005474:	0151      	lsls	r1, r2, #5
 8005476:	693a      	ldr	r2, [r7, #16]
 8005478:	440a      	add	r2, r1
 800547a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800547e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005482:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8005484:	e057      	b.n	8005536 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800548a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800548e:	2b00      	cmp	r3, #0
 8005490:	d051      	beq.n	8005536 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8005492:	78fb      	ldrb	r3, [r7, #3]
 8005494:	015a      	lsls	r2, r3, #5
 8005496:	693b      	ldr	r3, [r7, #16]
 8005498:	4413      	add	r3, r2
 800549a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800549e:	68db      	ldr	r3, [r3, #12]
 80054a0:	78fa      	ldrb	r2, [r7, #3]
 80054a2:	0151      	lsls	r1, r2, #5
 80054a4:	693a      	ldr	r2, [r7, #16]
 80054a6:	440a      	add	r2, r1
 80054a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80054ac:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80054b0:	60d3      	str	r3, [r2, #12]
      break;
 80054b2:	e040      	b.n	8005536 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80054b4:	78fb      	ldrb	r3, [r7, #3]
 80054b6:	015a      	lsls	r2, r3, #5
 80054b8:	693b      	ldr	r3, [r7, #16]
 80054ba:	4413      	add	r3, r2
 80054bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054c0:	461a      	mov	r2, r3
 80054c2:	f240 639d 	movw	r3, #1693	; 0x69d
 80054c6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80054c8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	da34      	bge.n	800553a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80054d0:	78fb      	ldrb	r3, [r7, #3]
 80054d2:	015a      	lsls	r2, r3, #5
 80054d4:	693b      	ldr	r3, [r7, #16]
 80054d6:	4413      	add	r3, r2
 80054d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054dc:	68db      	ldr	r3, [r3, #12]
 80054de:	78fa      	ldrb	r2, [r7, #3]
 80054e0:	0151      	lsls	r1, r2, #5
 80054e2:	693a      	ldr	r2, [r7, #16]
 80054e4:	440a      	add	r2, r1
 80054e6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80054ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054ee:	60d3      	str	r3, [r2, #12]
      }

      break;
 80054f0:	e023      	b.n	800553a <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80054f2:	78fb      	ldrb	r3, [r7, #3]
 80054f4:	015a      	lsls	r2, r3, #5
 80054f6:	693b      	ldr	r3, [r7, #16]
 80054f8:	4413      	add	r3, r2
 80054fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054fe:	461a      	mov	r2, r3
 8005500:	f240 2325 	movw	r3, #549	; 0x225
 8005504:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005506:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800550a:	2b00      	cmp	r3, #0
 800550c:	da17      	bge.n	800553e <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800550e:	78fb      	ldrb	r3, [r7, #3]
 8005510:	015a      	lsls	r2, r3, #5
 8005512:	693b      	ldr	r3, [r7, #16]
 8005514:	4413      	add	r3, r2
 8005516:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800551a:	68db      	ldr	r3, [r3, #12]
 800551c:	78fa      	ldrb	r2, [r7, #3]
 800551e:	0151      	lsls	r1, r2, #5
 8005520:	693a      	ldr	r2, [r7, #16]
 8005522:	440a      	add	r2, r1
 8005524:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005528:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800552c:	60d3      	str	r3, [r2, #12]
      }
      break;
 800552e:	e006      	b.n	800553e <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8005530:	2301      	movs	r3, #1
 8005532:	77fb      	strb	r3, [r7, #31]
      break;
 8005534:	e004      	b.n	8005540 <USB_HC_Init+0x14c>
      break;
 8005536:	bf00      	nop
 8005538:	e002      	b.n	8005540 <USB_HC_Init+0x14c>
      break;
 800553a:	bf00      	nop
 800553c:	e000      	b.n	8005540 <USB_HC_Init+0x14c>
      break;
 800553e:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8005540:	78fb      	ldrb	r3, [r7, #3]
 8005542:	015a      	lsls	r2, r3, #5
 8005544:	693b      	ldr	r3, [r7, #16]
 8005546:	4413      	add	r3, r2
 8005548:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800554c:	68db      	ldr	r3, [r3, #12]
 800554e:	78fa      	ldrb	r2, [r7, #3]
 8005550:	0151      	lsls	r1, r2, #5
 8005552:	693a      	ldr	r2, [r7, #16]
 8005554:	440a      	add	r2, r1
 8005556:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800555a:	f043 0302 	orr.w	r3, r3, #2
 800555e:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005560:	693b      	ldr	r3, [r7, #16]
 8005562:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005566:	699a      	ldr	r2, [r3, #24]
 8005568:	78fb      	ldrb	r3, [r7, #3]
 800556a:	f003 030f 	and.w	r3, r3, #15
 800556e:	2101      	movs	r1, #1
 8005570:	fa01 f303 	lsl.w	r3, r1, r3
 8005574:	6939      	ldr	r1, [r7, #16]
 8005576:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800557a:	4313      	orrs	r3, r2
 800557c:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	699b      	ldr	r3, [r3, #24]
 8005582:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800558a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800558e:	2b00      	cmp	r3, #0
 8005590:	da03      	bge.n	800559a <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8005592:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005596:	61bb      	str	r3, [r7, #24]
 8005598:	e001      	b.n	800559e <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 800559a:	2300      	movs	r3, #0
 800559c:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800559e:	6878      	ldr	r0, [r7, #4]
 80055a0:	f7ff feff 	bl	80053a2 <USB_GetHostSpeed>
 80055a4:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80055a6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80055aa:	2b02      	cmp	r3, #2
 80055ac:	d106      	bne.n	80055bc <USB_HC_Init+0x1c8>
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	2b02      	cmp	r3, #2
 80055b2:	d003      	beq.n	80055bc <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80055b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80055b8:	617b      	str	r3, [r7, #20]
 80055ba:	e001      	b.n	80055c0 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80055bc:	2300      	movs	r3, #0
 80055be:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80055c0:	787b      	ldrb	r3, [r7, #1]
 80055c2:	059b      	lsls	r3, r3, #22
 80055c4:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80055c8:	78bb      	ldrb	r3, [r7, #2]
 80055ca:	02db      	lsls	r3, r3, #11
 80055cc:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80055d0:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80055d2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80055d6:	049b      	lsls	r3, r3, #18
 80055d8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80055dc:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80055de:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80055e0:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80055e4:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80055e6:	69bb      	ldr	r3, [r7, #24]
 80055e8:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80055ea:	78fb      	ldrb	r3, [r7, #3]
 80055ec:	0159      	lsls	r1, r3, #5
 80055ee:	693b      	ldr	r3, [r7, #16]
 80055f0:	440b      	add	r3, r1
 80055f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055f6:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80055f8:	697b      	ldr	r3, [r7, #20]
 80055fa:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80055fc:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80055fe:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005602:	2b03      	cmp	r3, #3
 8005604:	d003      	beq.n	800560e <USB_HC_Init+0x21a>
 8005606:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800560a:	2b01      	cmp	r3, #1
 800560c:	d10f      	bne.n	800562e <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800560e:	78fb      	ldrb	r3, [r7, #3]
 8005610:	015a      	lsls	r2, r3, #5
 8005612:	693b      	ldr	r3, [r7, #16]
 8005614:	4413      	add	r3, r2
 8005616:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	78fa      	ldrb	r2, [r7, #3]
 800561e:	0151      	lsls	r1, r2, #5
 8005620:	693a      	ldr	r2, [r7, #16]
 8005622:	440a      	add	r2, r1
 8005624:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005628:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800562c:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800562e:	7ffb      	ldrb	r3, [r7, #31]
}
 8005630:	4618      	mov	r0, r3
 8005632:	3720      	adds	r7, #32
 8005634:	46bd      	mov	sp, r7
 8005636:	bd80      	pop	{r7, pc}

08005638 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b08c      	sub	sp, #48	; 0x30
 800563c:	af02      	add	r7, sp, #8
 800563e:	60f8      	str	r0, [r7, #12]
 8005640:	60b9      	str	r1, [r7, #8]
 8005642:	4613      	mov	r3, r2
 8005644:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	785b      	ldrb	r3, [r3, #1]
 800564e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8005650:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005654:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800565a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800565e:	2b00      	cmp	r3, #0
 8005660:	d02d      	beq.n	80056be <USB_HC_StartXfer+0x86>
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	791b      	ldrb	r3, [r3, #4]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d129      	bne.n	80056be <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800566a:	79fb      	ldrb	r3, [r7, #7]
 800566c:	2b01      	cmp	r3, #1
 800566e:	d117      	bne.n	80056a0 <USB_HC_StartXfer+0x68>
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	79db      	ldrb	r3, [r3, #7]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d003      	beq.n	8005680 <USB_HC_StartXfer+0x48>
 8005678:	68bb      	ldr	r3, [r7, #8]
 800567a:	79db      	ldrb	r3, [r3, #7]
 800567c:	2b02      	cmp	r3, #2
 800567e:	d10f      	bne.n	80056a0 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8005680:	69fb      	ldr	r3, [r7, #28]
 8005682:	015a      	lsls	r2, r3, #5
 8005684:	6a3b      	ldr	r3, [r7, #32]
 8005686:	4413      	add	r3, r2
 8005688:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800568c:	68db      	ldr	r3, [r3, #12]
 800568e:	69fa      	ldr	r2, [r7, #28]
 8005690:	0151      	lsls	r1, r2, #5
 8005692:	6a3a      	ldr	r2, [r7, #32]
 8005694:	440a      	add	r2, r1
 8005696:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800569a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800569e:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 80056a0:	79fb      	ldrb	r3, [r7, #7]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d10b      	bne.n	80056be <USB_HC_StartXfer+0x86>
 80056a6:	68bb      	ldr	r3, [r7, #8]
 80056a8:	795b      	ldrb	r3, [r3, #5]
 80056aa:	2b01      	cmp	r3, #1
 80056ac:	d107      	bne.n	80056be <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80056ae:	68bb      	ldr	r3, [r7, #8]
 80056b0:	785b      	ldrb	r3, [r3, #1]
 80056b2:	4619      	mov	r1, r3
 80056b4:	68f8      	ldr	r0, [r7, #12]
 80056b6:	f000 fa0f 	bl	8005ad8 <USB_DoPing>
      return HAL_OK;
 80056ba:	2300      	movs	r3, #0
 80056bc:	e0f8      	b.n	80058b0 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80056be:	68bb      	ldr	r3, [r7, #8]
 80056c0:	695b      	ldr	r3, [r3, #20]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d018      	beq.n	80056f8 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80056c6:	68bb      	ldr	r3, [r7, #8]
 80056c8:	695b      	ldr	r3, [r3, #20]
 80056ca:	68ba      	ldr	r2, [r7, #8]
 80056cc:	8912      	ldrh	r2, [r2, #8]
 80056ce:	4413      	add	r3, r2
 80056d0:	3b01      	subs	r3, #1
 80056d2:	68ba      	ldr	r2, [r7, #8]
 80056d4:	8912      	ldrh	r2, [r2, #8]
 80056d6:	fbb3 f3f2 	udiv	r3, r3, r2
 80056da:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80056dc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80056de:	8b7b      	ldrh	r3, [r7, #26]
 80056e0:	429a      	cmp	r2, r3
 80056e2:	d90b      	bls.n	80056fc <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 80056e4:	8b7b      	ldrh	r3, [r7, #26]
 80056e6:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80056e8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80056ea:	68ba      	ldr	r2, [r7, #8]
 80056ec:	8912      	ldrh	r2, [r2, #8]
 80056ee:	fb03 f202 	mul.w	r2, r3, r2
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	611a      	str	r2, [r3, #16]
 80056f6:	e001      	b.n	80056fc <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 80056f8:	2301      	movs	r3, #1
 80056fa:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	78db      	ldrb	r3, [r3, #3]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d007      	beq.n	8005714 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005704:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005706:	68ba      	ldr	r2, [r7, #8]
 8005708:	8912      	ldrh	r2, [r2, #8]
 800570a:	fb03 f202 	mul.w	r2, r3, r2
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	611a      	str	r2, [r3, #16]
 8005712:	e003      	b.n	800571c <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	695a      	ldr	r2, [r3, #20]
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	691b      	ldr	r3, [r3, #16]
 8005720:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005724:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005726:	04d9      	lsls	r1, r3, #19
 8005728:	4b63      	ldr	r3, [pc, #396]	; (80058b8 <USB_HC_StartXfer+0x280>)
 800572a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800572c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800572e:	68bb      	ldr	r3, [r7, #8]
 8005730:	7a9b      	ldrb	r3, [r3, #10]
 8005732:	075b      	lsls	r3, r3, #29
 8005734:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005738:	69f9      	ldr	r1, [r7, #28]
 800573a:	0148      	lsls	r0, r1, #5
 800573c:	6a39      	ldr	r1, [r7, #32]
 800573e:	4401      	add	r1, r0
 8005740:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005744:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005746:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8005748:	79fb      	ldrb	r3, [r7, #7]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d009      	beq.n	8005762 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800574e:	68bb      	ldr	r3, [r7, #8]
 8005750:	68d9      	ldr	r1, [r3, #12]
 8005752:	69fb      	ldr	r3, [r7, #28]
 8005754:	015a      	lsls	r2, r3, #5
 8005756:	6a3b      	ldr	r3, [r7, #32]
 8005758:	4413      	add	r3, r2
 800575a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800575e:	460a      	mov	r2, r1
 8005760:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005762:	6a3b      	ldr	r3, [r7, #32]
 8005764:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005768:	689b      	ldr	r3, [r3, #8]
 800576a:	f003 0301 	and.w	r3, r3, #1
 800576e:	2b00      	cmp	r3, #0
 8005770:	bf0c      	ite	eq
 8005772:	2301      	moveq	r3, #1
 8005774:	2300      	movne	r3, #0
 8005776:	b2db      	uxtb	r3, r3
 8005778:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800577a:	69fb      	ldr	r3, [r7, #28]
 800577c:	015a      	lsls	r2, r3, #5
 800577e:	6a3b      	ldr	r3, [r7, #32]
 8005780:	4413      	add	r3, r2
 8005782:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	69fa      	ldr	r2, [r7, #28]
 800578a:	0151      	lsls	r1, r2, #5
 800578c:	6a3a      	ldr	r2, [r7, #32]
 800578e:	440a      	add	r2, r1
 8005790:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005794:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005798:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800579a:	69fb      	ldr	r3, [r7, #28]
 800579c:	015a      	lsls	r2, r3, #5
 800579e:	6a3b      	ldr	r3, [r7, #32]
 80057a0:	4413      	add	r3, r2
 80057a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057a6:	681a      	ldr	r2, [r3, #0]
 80057a8:	7e7b      	ldrb	r3, [r7, #25]
 80057aa:	075b      	lsls	r3, r3, #29
 80057ac:	69f9      	ldr	r1, [r7, #28]
 80057ae:	0148      	lsls	r0, r1, #5
 80057b0:	6a39      	ldr	r1, [r7, #32]
 80057b2:	4401      	add	r1, r0
 80057b4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80057b8:	4313      	orrs	r3, r2
 80057ba:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80057bc:	69fb      	ldr	r3, [r7, #28]
 80057be:	015a      	lsls	r2, r3, #5
 80057c0:	6a3b      	ldr	r3, [r7, #32]
 80057c2:	4413      	add	r3, r2
 80057c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80057cc:	693b      	ldr	r3, [r7, #16]
 80057ce:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80057d2:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	78db      	ldrb	r3, [r3, #3]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d004      	beq.n	80057e6 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80057dc:	693b      	ldr	r3, [r7, #16]
 80057de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057e2:	613b      	str	r3, [r7, #16]
 80057e4:	e003      	b.n	80057ee <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80057e6:	693b      	ldr	r3, [r7, #16]
 80057e8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80057ec:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80057ee:	693b      	ldr	r3, [r7, #16]
 80057f0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80057f4:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80057f6:	69fb      	ldr	r3, [r7, #28]
 80057f8:	015a      	lsls	r2, r3, #5
 80057fa:	6a3b      	ldr	r3, [r7, #32]
 80057fc:	4413      	add	r3, r2
 80057fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005802:	461a      	mov	r2, r3
 8005804:	693b      	ldr	r3, [r7, #16]
 8005806:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8005808:	79fb      	ldrb	r3, [r7, #7]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d001      	beq.n	8005812 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800580e:	2300      	movs	r3, #0
 8005810:	e04e      	b.n	80058b0 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	78db      	ldrb	r3, [r3, #3]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d149      	bne.n	80058ae <USB_HC_StartXfer+0x276>
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	695b      	ldr	r3, [r3, #20]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d045      	beq.n	80058ae <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	79db      	ldrb	r3, [r3, #7]
 8005826:	2b03      	cmp	r3, #3
 8005828:	d830      	bhi.n	800588c <USB_HC_StartXfer+0x254>
 800582a:	a201      	add	r2, pc, #4	; (adr r2, 8005830 <USB_HC_StartXfer+0x1f8>)
 800582c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005830:	08005841 	.word	0x08005841
 8005834:	08005865 	.word	0x08005865
 8005838:	08005841 	.word	0x08005841
 800583c:	08005865 	.word	0x08005865
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	695b      	ldr	r3, [r3, #20]
 8005844:	3303      	adds	r3, #3
 8005846:	089b      	lsrs	r3, r3, #2
 8005848:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800584a:	8afa      	ldrh	r2, [r7, #22]
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005850:	b29b      	uxth	r3, r3
 8005852:	429a      	cmp	r2, r3
 8005854:	d91c      	bls.n	8005890 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	699b      	ldr	r3, [r3, #24]
 800585a:	f043 0220 	orr.w	r2, r3, #32
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	619a      	str	r2, [r3, #24]
        }
        break;
 8005862:	e015      	b.n	8005890 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	695b      	ldr	r3, [r3, #20]
 8005868:	3303      	adds	r3, #3
 800586a:	089b      	lsrs	r3, r3, #2
 800586c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800586e:	8afa      	ldrh	r2, [r7, #22]
 8005870:	6a3b      	ldr	r3, [r7, #32]
 8005872:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005876:	691b      	ldr	r3, [r3, #16]
 8005878:	b29b      	uxth	r3, r3
 800587a:	429a      	cmp	r2, r3
 800587c:	d90a      	bls.n	8005894 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	699b      	ldr	r3, [r3, #24]
 8005882:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	619a      	str	r2, [r3, #24]
        }
        break;
 800588a:	e003      	b.n	8005894 <USB_HC_StartXfer+0x25c>

      default:
        break;
 800588c:	bf00      	nop
 800588e:	e002      	b.n	8005896 <USB_HC_StartXfer+0x25e>
        break;
 8005890:	bf00      	nop
 8005892:	e000      	b.n	8005896 <USB_HC_StartXfer+0x25e>
        break;
 8005894:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8005896:	68bb      	ldr	r3, [r7, #8]
 8005898:	68d9      	ldr	r1, [r3, #12]
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	785a      	ldrb	r2, [r3, #1]
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	695b      	ldr	r3, [r3, #20]
 80058a2:	b29b      	uxth	r3, r3
 80058a4:	2000      	movs	r0, #0
 80058a6:	9000      	str	r0, [sp, #0]
 80058a8:	68f8      	ldr	r0, [r7, #12]
 80058aa:	f7ff fb5b 	bl	8004f64 <USB_WritePacket>
  }

  return HAL_OK;
 80058ae:	2300      	movs	r3, #0
}
 80058b0:	4618      	mov	r0, r3
 80058b2:	3728      	adds	r7, #40	; 0x28
 80058b4:	46bd      	mov	sp, r7
 80058b6:	bd80      	pop	{r7, pc}
 80058b8:	1ff80000 	.word	0x1ff80000

080058bc <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80058bc:	b480      	push	{r7}
 80058be:	b085      	sub	sp, #20
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80058ce:	695b      	ldr	r3, [r3, #20]
 80058d0:	b29b      	uxth	r3, r3
}
 80058d2:	4618      	mov	r0, r3
 80058d4:	3714      	adds	r7, #20
 80058d6:	46bd      	mov	sp, r7
 80058d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058dc:	4770      	bx	lr

080058de <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80058de:	b480      	push	{r7}
 80058e0:	b089      	sub	sp, #36	; 0x24
 80058e2:	af00      	add	r7, sp, #0
 80058e4:	6078      	str	r0, [r7, #4]
 80058e6:	460b      	mov	r3, r1
 80058e8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80058ee:	78fb      	ldrb	r3, [r7, #3]
 80058f0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80058f2:	2300      	movs	r3, #0
 80058f4:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80058f6:	69bb      	ldr	r3, [r7, #24]
 80058f8:	015a      	lsls	r2, r3, #5
 80058fa:	69fb      	ldr	r3, [r7, #28]
 80058fc:	4413      	add	r3, r2
 80058fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	0c9b      	lsrs	r3, r3, #18
 8005906:	f003 0303 	and.w	r3, r3, #3
 800590a:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800590c:	69bb      	ldr	r3, [r7, #24]
 800590e:	015a      	lsls	r2, r3, #5
 8005910:	69fb      	ldr	r3, [r7, #28]
 8005912:	4413      	add	r3, r2
 8005914:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	0fdb      	lsrs	r3, r3, #31
 800591c:	f003 0301 	and.w	r3, r3, #1
 8005920:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	689b      	ldr	r3, [r3, #8]
 8005926:	f003 0320 	and.w	r3, r3, #32
 800592a:	2b20      	cmp	r3, #32
 800592c:	d104      	bne.n	8005938 <USB_HC_Halt+0x5a>
 800592e:	693b      	ldr	r3, [r7, #16]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d101      	bne.n	8005938 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8005934:	2300      	movs	r3, #0
 8005936:	e0c8      	b.n	8005aca <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005938:	697b      	ldr	r3, [r7, #20]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d002      	beq.n	8005944 <USB_HC_Halt+0x66>
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	2b02      	cmp	r3, #2
 8005942:	d163      	bne.n	8005a0c <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005944:	69bb      	ldr	r3, [r7, #24]
 8005946:	015a      	lsls	r2, r3, #5
 8005948:	69fb      	ldr	r3, [r7, #28]
 800594a:	4413      	add	r3, r2
 800594c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	69ba      	ldr	r2, [r7, #24]
 8005954:	0151      	lsls	r1, r2, #5
 8005956:	69fa      	ldr	r2, [r7, #28]
 8005958:	440a      	add	r2, r1
 800595a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800595e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005962:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	689b      	ldr	r3, [r3, #8]
 8005968:	f003 0320 	and.w	r3, r3, #32
 800596c:	2b00      	cmp	r3, #0
 800596e:	f040 80ab 	bne.w	8005ac8 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005976:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800597a:	2b00      	cmp	r3, #0
 800597c:	d133      	bne.n	80059e6 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800597e:	69bb      	ldr	r3, [r7, #24]
 8005980:	015a      	lsls	r2, r3, #5
 8005982:	69fb      	ldr	r3, [r7, #28]
 8005984:	4413      	add	r3, r2
 8005986:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	69ba      	ldr	r2, [r7, #24]
 800598e:	0151      	lsls	r1, r2, #5
 8005990:	69fa      	ldr	r2, [r7, #28]
 8005992:	440a      	add	r2, r1
 8005994:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005998:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800599c:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800599e:	69bb      	ldr	r3, [r7, #24]
 80059a0:	015a      	lsls	r2, r3, #5
 80059a2:	69fb      	ldr	r3, [r7, #28]
 80059a4:	4413      	add	r3, r2
 80059a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	69ba      	ldr	r2, [r7, #24]
 80059ae:	0151      	lsls	r1, r2, #5
 80059b0:	69fa      	ldr	r2, [r7, #28]
 80059b2:	440a      	add	r2, r1
 80059b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80059b8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80059bc:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	3301      	adds	r3, #1
 80059c2:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80059ca:	d81d      	bhi.n	8005a08 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80059cc:	69bb      	ldr	r3, [r7, #24]
 80059ce:	015a      	lsls	r2, r3, #5
 80059d0:	69fb      	ldr	r3, [r7, #28]
 80059d2:	4413      	add	r3, r2
 80059d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80059de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80059e2:	d0ec      	beq.n	80059be <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80059e4:	e070      	b.n	8005ac8 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80059e6:	69bb      	ldr	r3, [r7, #24]
 80059e8:	015a      	lsls	r2, r3, #5
 80059ea:	69fb      	ldr	r3, [r7, #28]
 80059ec:	4413      	add	r3, r2
 80059ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	69ba      	ldr	r2, [r7, #24]
 80059f6:	0151      	lsls	r1, r2, #5
 80059f8:	69fa      	ldr	r2, [r7, #28]
 80059fa:	440a      	add	r2, r1
 80059fc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a00:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005a04:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005a06:	e05f      	b.n	8005ac8 <USB_HC_Halt+0x1ea>
            break;
 8005a08:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005a0a:	e05d      	b.n	8005ac8 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005a0c:	69bb      	ldr	r3, [r7, #24]
 8005a0e:	015a      	lsls	r2, r3, #5
 8005a10:	69fb      	ldr	r3, [r7, #28]
 8005a12:	4413      	add	r3, r2
 8005a14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	69ba      	ldr	r2, [r7, #24]
 8005a1c:	0151      	lsls	r1, r2, #5
 8005a1e:	69fa      	ldr	r2, [r7, #28]
 8005a20:	440a      	add	r2, r1
 8005a22:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a26:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005a2a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005a2c:	69fb      	ldr	r3, [r7, #28]
 8005a2e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a32:	691b      	ldr	r3, [r3, #16]
 8005a34:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d133      	bne.n	8005aa4 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005a3c:	69bb      	ldr	r3, [r7, #24]
 8005a3e:	015a      	lsls	r2, r3, #5
 8005a40:	69fb      	ldr	r3, [r7, #28]
 8005a42:	4413      	add	r3, r2
 8005a44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	69ba      	ldr	r2, [r7, #24]
 8005a4c:	0151      	lsls	r1, r2, #5
 8005a4e:	69fa      	ldr	r2, [r7, #28]
 8005a50:	440a      	add	r2, r1
 8005a52:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a56:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005a5a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005a5c:	69bb      	ldr	r3, [r7, #24]
 8005a5e:	015a      	lsls	r2, r3, #5
 8005a60:	69fb      	ldr	r3, [r7, #28]
 8005a62:	4413      	add	r3, r2
 8005a64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	69ba      	ldr	r2, [r7, #24]
 8005a6c:	0151      	lsls	r1, r2, #5
 8005a6e:	69fa      	ldr	r2, [r7, #28]
 8005a70:	440a      	add	r2, r1
 8005a72:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005a7a:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	3301      	adds	r3, #1
 8005a80:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005a88:	d81d      	bhi.n	8005ac6 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005a8a:	69bb      	ldr	r3, [r7, #24]
 8005a8c:	015a      	lsls	r2, r3, #5
 8005a8e:	69fb      	ldr	r3, [r7, #28]
 8005a90:	4413      	add	r3, r2
 8005a92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005a9c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005aa0:	d0ec      	beq.n	8005a7c <USB_HC_Halt+0x19e>
 8005aa2:	e011      	b.n	8005ac8 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005aa4:	69bb      	ldr	r3, [r7, #24]
 8005aa6:	015a      	lsls	r2, r3, #5
 8005aa8:	69fb      	ldr	r3, [r7, #28]
 8005aaa:	4413      	add	r3, r2
 8005aac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	69ba      	ldr	r2, [r7, #24]
 8005ab4:	0151      	lsls	r1, r2, #5
 8005ab6:	69fa      	ldr	r2, [r7, #28]
 8005ab8:	440a      	add	r2, r1
 8005aba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005abe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005ac2:	6013      	str	r3, [r2, #0]
 8005ac4:	e000      	b.n	8005ac8 <USB_HC_Halt+0x1ea>
          break;
 8005ac6:	bf00      	nop
    }
  }

  return HAL_OK;
 8005ac8:	2300      	movs	r3, #0
}
 8005aca:	4618      	mov	r0, r3
 8005acc:	3724      	adds	r7, #36	; 0x24
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad4:	4770      	bx	lr
	...

08005ad8 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8005ad8:	b480      	push	{r7}
 8005ada:	b087      	sub	sp, #28
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
 8005ae0:	460b      	mov	r3, r1
 8005ae2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8005ae8:	78fb      	ldrb	r3, [r7, #3]
 8005aea:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8005aec:	2301      	movs	r3, #1
 8005aee:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	04da      	lsls	r2, r3, #19
 8005af4:	4b15      	ldr	r3, [pc, #84]	; (8005b4c <USB_DoPing+0x74>)
 8005af6:	4013      	ands	r3, r2
 8005af8:	693a      	ldr	r2, [r7, #16]
 8005afa:	0151      	lsls	r1, r2, #5
 8005afc:	697a      	ldr	r2, [r7, #20]
 8005afe:	440a      	add	r2, r1
 8005b00:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b04:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005b08:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8005b0a:	693b      	ldr	r3, [r7, #16]
 8005b0c:	015a      	lsls	r2, r3, #5
 8005b0e:	697b      	ldr	r3, [r7, #20]
 8005b10:	4413      	add	r3, r2
 8005b12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005b20:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005b28:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8005b2a:	693b      	ldr	r3, [r7, #16]
 8005b2c:	015a      	lsls	r2, r3, #5
 8005b2e:	697b      	ldr	r3, [r7, #20]
 8005b30:	4413      	add	r3, r2
 8005b32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b36:	461a      	mov	r2, r3
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8005b3c:	2300      	movs	r3, #0
}
 8005b3e:	4618      	mov	r0, r3
 8005b40:	371c      	adds	r7, #28
 8005b42:	46bd      	mov	sp, r7
 8005b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b48:	4770      	bx	lr
 8005b4a:	bf00      	nop
 8005b4c:	1ff80000 	.word	0x1ff80000

08005b50 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b088      	sub	sp, #32
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8005b58:	2300      	movs	r3, #0
 8005b5a:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8005b60:	2300      	movs	r3, #0
 8005b62:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8005b64:	6878      	ldr	r0, [r7, #4]
 8005b66:	f7ff f93c 	bl	8004de2 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005b6a:	2110      	movs	r1, #16
 8005b6c:	6878      	ldr	r0, [r7, #4]
 8005b6e:	f7ff f995 	bl	8004e9c <USB_FlushTxFifo>
 8005b72:	4603      	mov	r3, r0
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d001      	beq.n	8005b7c <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8005b78:	2301      	movs	r3, #1
 8005b7a:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005b7c:	6878      	ldr	r0, [r7, #4]
 8005b7e:	f7ff f9c1 	bl	8004f04 <USB_FlushRxFifo>
 8005b82:	4603      	mov	r3, r0
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d001      	beq.n	8005b8c <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8005b88:	2301      	movs	r3, #1
 8005b8a:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	61bb      	str	r3, [r7, #24]
 8005b90:	e01f      	b.n	8005bd2 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8005b92:	69bb      	ldr	r3, [r7, #24]
 8005b94:	015a      	lsls	r2, r3, #5
 8005b96:	697b      	ldr	r3, [r7, #20]
 8005b98:	4413      	add	r3, r2
 8005b9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8005ba2:	693b      	ldr	r3, [r7, #16]
 8005ba4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005ba8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8005baa:	693b      	ldr	r3, [r7, #16]
 8005bac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005bb0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005bb2:	693b      	ldr	r3, [r7, #16]
 8005bb4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005bb8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8005bba:	69bb      	ldr	r3, [r7, #24]
 8005bbc:	015a      	lsls	r2, r3, #5
 8005bbe:	697b      	ldr	r3, [r7, #20]
 8005bc0:	4413      	add	r3, r2
 8005bc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bc6:	461a      	mov	r2, r3
 8005bc8:	693b      	ldr	r3, [r7, #16]
 8005bca:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8005bcc:	69bb      	ldr	r3, [r7, #24]
 8005bce:	3301      	adds	r3, #1
 8005bd0:	61bb      	str	r3, [r7, #24]
 8005bd2:	69bb      	ldr	r3, [r7, #24]
 8005bd4:	2b0f      	cmp	r3, #15
 8005bd6:	d9dc      	bls.n	8005b92 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8005bd8:	2300      	movs	r3, #0
 8005bda:	61bb      	str	r3, [r7, #24]
 8005bdc:	e034      	b.n	8005c48 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8005bde:	69bb      	ldr	r3, [r7, #24]
 8005be0:	015a      	lsls	r2, r3, #5
 8005be2:	697b      	ldr	r3, [r7, #20]
 8005be4:	4413      	add	r3, r2
 8005be6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8005bee:	693b      	ldr	r3, [r7, #16]
 8005bf0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005bf4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8005bf6:	693b      	ldr	r3, [r7, #16]
 8005bf8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005bfc:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005bfe:	693b      	ldr	r3, [r7, #16]
 8005c00:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005c04:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8005c06:	69bb      	ldr	r3, [r7, #24]
 8005c08:	015a      	lsls	r2, r3, #5
 8005c0a:	697b      	ldr	r3, [r7, #20]
 8005c0c:	4413      	add	r3, r2
 8005c0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c12:	461a      	mov	r2, r3
 8005c14:	693b      	ldr	r3, [r7, #16]
 8005c16:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	3301      	adds	r3, #1
 8005c1c:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005c24:	d80c      	bhi.n	8005c40 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005c26:	69bb      	ldr	r3, [r7, #24]
 8005c28:	015a      	lsls	r2, r3, #5
 8005c2a:	697b      	ldr	r3, [r7, #20]
 8005c2c:	4413      	add	r3, r2
 8005c2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005c38:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c3c:	d0ec      	beq.n	8005c18 <USB_StopHost+0xc8>
 8005c3e:	e000      	b.n	8005c42 <USB_StopHost+0xf2>
        break;
 8005c40:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8005c42:	69bb      	ldr	r3, [r7, #24]
 8005c44:	3301      	adds	r3, #1
 8005c46:	61bb      	str	r3, [r7, #24]
 8005c48:	69bb      	ldr	r3, [r7, #24]
 8005c4a:	2b0f      	cmp	r3, #15
 8005c4c:	d9c7      	bls.n	8005bde <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8005c4e:	697b      	ldr	r3, [r7, #20]
 8005c50:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c54:	461a      	mov	r2, r3
 8005c56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005c5a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005c62:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8005c64:	6878      	ldr	r0, [r7, #4]
 8005c66:	f7ff f8ab 	bl	8004dc0 <USB_EnableGlobalInt>

  return ret;
 8005c6a:	7ffb      	ldrb	r3, [r7, #31]
}
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	3720      	adds	r7, #32
 8005c70:	46bd      	mov	sp, r7
 8005c72:	bd80      	pop	{r7, pc}

08005c74 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8005c74:	b590      	push	{r4, r7, lr}
 8005c76:	b089      	sub	sp, #36	; 0x24
 8005c78:	af04      	add	r7, sp, #16
 8005c7a:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	2202      	movs	r2, #2
 8005c80:	2102      	movs	r1, #2
 8005c82:	6878      	ldr	r0, [r7, #4]
 8005c84:	f000 fc66 	bl	8006554 <USBH_FindInterface>
 8005c88:	4603      	mov	r3, r0
 8005c8a:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8005c8c:	7bfb      	ldrb	r3, [r7, #15]
 8005c8e:	2bff      	cmp	r3, #255	; 0xff
 8005c90:	d002      	beq.n	8005c98 <USBH_CDC_InterfaceInit+0x24>
 8005c92:	7bfb      	ldrb	r3, [r7, #15]
 8005c94:	2b01      	cmp	r3, #1
 8005c96:	d901      	bls.n	8005c9c <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005c98:	2302      	movs	r3, #2
 8005c9a:	e13d      	b.n	8005f18 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8005c9c:	7bfb      	ldrb	r3, [r7, #15]
 8005c9e:	4619      	mov	r1, r3
 8005ca0:	6878      	ldr	r0, [r7, #4]
 8005ca2:	f000 fc3b 	bl	800651c <USBH_SelectInterface>
 8005ca6:	4603      	mov	r3, r0
 8005ca8:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8005caa:	7bbb      	ldrb	r3, [r7, #14]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d001      	beq.n	8005cb4 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8005cb0:	2302      	movs	r3, #2
 8005cb2:	e131      	b.n	8005f18 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8005cba:	2050      	movs	r0, #80	; 0x50
 8005cbc:	f001 fae8 	bl	8007290 <malloc>
 8005cc0:	4603      	mov	r3, r0
 8005cc2:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005cca:	69db      	ldr	r3, [r3, #28]
 8005ccc:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8005cce:	68bb      	ldr	r3, [r7, #8]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d101      	bne.n	8005cd8 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8005cd4:	2302      	movs	r3, #2
 8005cd6:	e11f      	b.n	8005f18 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8005cd8:	2250      	movs	r2, #80	; 0x50
 8005cda:	2100      	movs	r1, #0
 8005cdc:	68b8      	ldr	r0, [r7, #8]
 8005cde:	f001 fb93 	bl	8007408 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8005ce2:	7bfb      	ldrb	r3, [r7, #15]
 8005ce4:	687a      	ldr	r2, [r7, #4]
 8005ce6:	211a      	movs	r1, #26
 8005ce8:	fb01 f303 	mul.w	r3, r1, r3
 8005cec:	4413      	add	r3, r2
 8005cee:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005cf2:	781b      	ldrb	r3, [r3, #0]
 8005cf4:	b25b      	sxtb	r3, r3
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	da15      	bge.n	8005d26 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005cfa:	7bfb      	ldrb	r3, [r7, #15]
 8005cfc:	687a      	ldr	r2, [r7, #4]
 8005cfe:	211a      	movs	r1, #26
 8005d00:	fb01 f303 	mul.w	r3, r1, r3
 8005d04:	4413      	add	r3, r2
 8005d06:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005d0a:	781a      	ldrb	r2, [r3, #0]
 8005d0c:	68bb      	ldr	r3, [r7, #8]
 8005d0e:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005d10:	7bfb      	ldrb	r3, [r7, #15]
 8005d12:	687a      	ldr	r2, [r7, #4]
 8005d14:	211a      	movs	r1, #26
 8005d16:	fb01 f303 	mul.w	r3, r1, r3
 8005d1a:	4413      	add	r3, r2
 8005d1c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005d20:	881a      	ldrh	r2, [r3, #0]
 8005d22:	68bb      	ldr	r3, [r7, #8]
 8005d24:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8005d26:	68bb      	ldr	r3, [r7, #8]
 8005d28:	785b      	ldrb	r3, [r3, #1]
 8005d2a:	4619      	mov	r1, r3
 8005d2c:	6878      	ldr	r0, [r7, #4]
 8005d2e:	f000 ff9c 	bl	8006c6a <USBH_AllocPipe>
 8005d32:	4603      	mov	r3, r0
 8005d34:	461a      	mov	r2, r3
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8005d3a:	68bb      	ldr	r3, [r7, #8]
 8005d3c:	7819      	ldrb	r1, [r3, #0]
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	7858      	ldrb	r0, [r3, #1]
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005d4e:	68ba      	ldr	r2, [r7, #8]
 8005d50:	8952      	ldrh	r2, [r2, #10]
 8005d52:	9202      	str	r2, [sp, #8]
 8005d54:	2203      	movs	r2, #3
 8005d56:	9201      	str	r2, [sp, #4]
 8005d58:	9300      	str	r3, [sp, #0]
 8005d5a:	4623      	mov	r3, r4
 8005d5c:	4602      	mov	r2, r0
 8005d5e:	6878      	ldr	r0, [r7, #4]
 8005d60:	f000 ff54 	bl	8006c0c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	781b      	ldrb	r3, [r3, #0]
 8005d68:	2200      	movs	r2, #0
 8005d6a:	4619      	mov	r1, r3
 8005d6c:	6878      	ldr	r0, [r7, #4]
 8005d6e:	f001 fa17 	bl	80071a0 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8005d72:	2300      	movs	r3, #0
 8005d74:	2200      	movs	r2, #0
 8005d76:	210a      	movs	r1, #10
 8005d78:	6878      	ldr	r0, [r7, #4]
 8005d7a:	f000 fbeb 	bl	8006554 <USBH_FindInterface>
 8005d7e:	4603      	mov	r3, r0
 8005d80:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8005d82:	7bfb      	ldrb	r3, [r7, #15]
 8005d84:	2bff      	cmp	r3, #255	; 0xff
 8005d86:	d002      	beq.n	8005d8e <USBH_CDC_InterfaceInit+0x11a>
 8005d88:	7bfb      	ldrb	r3, [r7, #15]
 8005d8a:	2b01      	cmp	r3, #1
 8005d8c:	d901      	bls.n	8005d92 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005d8e:	2302      	movs	r3, #2
 8005d90:	e0c2      	b.n	8005f18 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8005d92:	7bfb      	ldrb	r3, [r7, #15]
 8005d94:	687a      	ldr	r2, [r7, #4]
 8005d96:	211a      	movs	r1, #26
 8005d98:	fb01 f303 	mul.w	r3, r1, r3
 8005d9c:	4413      	add	r3, r2
 8005d9e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005da2:	781b      	ldrb	r3, [r3, #0]
 8005da4:	b25b      	sxtb	r3, r3
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	da16      	bge.n	8005dd8 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005daa:	7bfb      	ldrb	r3, [r7, #15]
 8005dac:	687a      	ldr	r2, [r7, #4]
 8005dae:	211a      	movs	r1, #26
 8005db0:	fb01 f303 	mul.w	r3, r1, r3
 8005db4:	4413      	add	r3, r2
 8005db6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005dba:	781a      	ldrb	r2, [r3, #0]
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005dc0:	7bfb      	ldrb	r3, [r7, #15]
 8005dc2:	687a      	ldr	r2, [r7, #4]
 8005dc4:	211a      	movs	r1, #26
 8005dc6:	fb01 f303 	mul.w	r3, r1, r3
 8005dca:	4413      	add	r3, r2
 8005dcc:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005dd0:	881a      	ldrh	r2, [r3, #0]
 8005dd2:	68bb      	ldr	r3, [r7, #8]
 8005dd4:	835a      	strh	r2, [r3, #26]
 8005dd6:	e015      	b.n	8005e04 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005dd8:	7bfb      	ldrb	r3, [r7, #15]
 8005dda:	687a      	ldr	r2, [r7, #4]
 8005ddc:	211a      	movs	r1, #26
 8005dde:	fb01 f303 	mul.w	r3, r1, r3
 8005de2:	4413      	add	r3, r2
 8005de4:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005de8:	781a      	ldrb	r2, [r3, #0]
 8005dea:	68bb      	ldr	r3, [r7, #8]
 8005dec:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005dee:	7bfb      	ldrb	r3, [r7, #15]
 8005df0:	687a      	ldr	r2, [r7, #4]
 8005df2:	211a      	movs	r1, #26
 8005df4:	fb01 f303 	mul.w	r3, r1, r3
 8005df8:	4413      	add	r3, r2
 8005dfa:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005dfe:	881a      	ldrh	r2, [r3, #0]
 8005e00:	68bb      	ldr	r3, [r7, #8]
 8005e02:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8005e04:	7bfb      	ldrb	r3, [r7, #15]
 8005e06:	687a      	ldr	r2, [r7, #4]
 8005e08:	211a      	movs	r1, #26
 8005e0a:	fb01 f303 	mul.w	r3, r1, r3
 8005e0e:	4413      	add	r3, r2
 8005e10:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005e14:	781b      	ldrb	r3, [r3, #0]
 8005e16:	b25b      	sxtb	r3, r3
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	da16      	bge.n	8005e4a <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005e1c:	7bfb      	ldrb	r3, [r7, #15]
 8005e1e:	687a      	ldr	r2, [r7, #4]
 8005e20:	211a      	movs	r1, #26
 8005e22:	fb01 f303 	mul.w	r3, r1, r3
 8005e26:	4413      	add	r3, r2
 8005e28:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005e2c:	781a      	ldrb	r2, [r3, #0]
 8005e2e:	68bb      	ldr	r3, [r7, #8]
 8005e30:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005e32:	7bfb      	ldrb	r3, [r7, #15]
 8005e34:	687a      	ldr	r2, [r7, #4]
 8005e36:	211a      	movs	r1, #26
 8005e38:	fb01 f303 	mul.w	r3, r1, r3
 8005e3c:	4413      	add	r3, r2
 8005e3e:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8005e42:	881a      	ldrh	r2, [r3, #0]
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	835a      	strh	r2, [r3, #26]
 8005e48:	e015      	b.n	8005e76 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005e4a:	7bfb      	ldrb	r3, [r7, #15]
 8005e4c:	687a      	ldr	r2, [r7, #4]
 8005e4e:	211a      	movs	r1, #26
 8005e50:	fb01 f303 	mul.w	r3, r1, r3
 8005e54:	4413      	add	r3, r2
 8005e56:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005e5a:	781a      	ldrb	r2, [r3, #0]
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005e60:	7bfb      	ldrb	r3, [r7, #15]
 8005e62:	687a      	ldr	r2, [r7, #4]
 8005e64:	211a      	movs	r1, #26
 8005e66:	fb01 f303 	mul.w	r3, r1, r3
 8005e6a:	4413      	add	r3, r2
 8005e6c:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8005e70:	881a      	ldrh	r2, [r3, #0]
 8005e72:	68bb      	ldr	r3, [r7, #8]
 8005e74:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	7b9b      	ldrb	r3, [r3, #14]
 8005e7a:	4619      	mov	r1, r3
 8005e7c:	6878      	ldr	r0, [r7, #4]
 8005e7e:	f000 fef4 	bl	8006c6a <USBH_AllocPipe>
 8005e82:	4603      	mov	r3, r0
 8005e84:	461a      	mov	r2, r3
 8005e86:	68bb      	ldr	r3, [r7, #8]
 8005e88:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8005e8a:	68bb      	ldr	r3, [r7, #8]
 8005e8c:	7bdb      	ldrb	r3, [r3, #15]
 8005e8e:	4619      	mov	r1, r3
 8005e90:	6878      	ldr	r0, [r7, #4]
 8005e92:	f000 feea 	bl	8006c6a <USBH_AllocPipe>
 8005e96:	4603      	mov	r3, r0
 8005e98:	461a      	mov	r2, r3
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8005e9e:	68bb      	ldr	r3, [r7, #8]
 8005ea0:	7b59      	ldrb	r1, [r3, #13]
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	7b98      	ldrb	r0, [r3, #14]
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005eb2:	68ba      	ldr	r2, [r7, #8]
 8005eb4:	8b12      	ldrh	r2, [r2, #24]
 8005eb6:	9202      	str	r2, [sp, #8]
 8005eb8:	2202      	movs	r2, #2
 8005eba:	9201      	str	r2, [sp, #4]
 8005ebc:	9300      	str	r3, [sp, #0]
 8005ebe:	4623      	mov	r3, r4
 8005ec0:	4602      	mov	r2, r0
 8005ec2:	6878      	ldr	r0, [r7, #4]
 8005ec4:	f000 fea2 	bl	8006c0c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	7b19      	ldrb	r1, [r3, #12]
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	7bd8      	ldrb	r0, [r3, #15]
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005edc:	68ba      	ldr	r2, [r7, #8]
 8005ede:	8b52      	ldrh	r2, [r2, #26]
 8005ee0:	9202      	str	r2, [sp, #8]
 8005ee2:	2202      	movs	r2, #2
 8005ee4:	9201      	str	r2, [sp, #4]
 8005ee6:	9300      	str	r3, [sp, #0]
 8005ee8:	4623      	mov	r3, r4
 8005eea:	4602      	mov	r2, r0
 8005eec:	6878      	ldr	r0, [r7, #4]
 8005eee:	f000 fe8d 	bl	8006c0c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8005ef2:	68bb      	ldr	r3, [r7, #8]
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8005efa:	68bb      	ldr	r3, [r7, #8]
 8005efc:	7b5b      	ldrb	r3, [r3, #13]
 8005efe:	2200      	movs	r2, #0
 8005f00:	4619      	mov	r1, r3
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	f001 f94c 	bl	80071a0 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	7b1b      	ldrb	r3, [r3, #12]
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	4619      	mov	r1, r3
 8005f10:	6878      	ldr	r0, [r7, #4]
 8005f12:	f001 f945 	bl	80071a0 <USBH_LL_SetToggle>

  return USBH_OK;
 8005f16:	2300      	movs	r3, #0
}
 8005f18:	4618      	mov	r0, r3
 8005f1a:	3714      	adds	r7, #20
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	bd90      	pop	{r4, r7, pc}

08005f20 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b084      	sub	sp, #16
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005f2e:	69db      	ldr	r3, [r3, #28]
 8005f30:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	781b      	ldrb	r3, [r3, #0]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d00e      	beq.n	8005f58 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	781b      	ldrb	r3, [r3, #0]
 8005f3e:	4619      	mov	r1, r3
 8005f40:	6878      	ldr	r0, [r7, #4]
 8005f42:	f000 fe82 	bl	8006c4a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	781b      	ldrb	r3, [r3, #0]
 8005f4a:	4619      	mov	r1, r3
 8005f4c:	6878      	ldr	r0, [r7, #4]
 8005f4e:	f000 fead 	bl	8006cac <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	2200      	movs	r2, #0
 8005f56:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	7b1b      	ldrb	r3, [r3, #12]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d00e      	beq.n	8005f7e <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	7b1b      	ldrb	r3, [r3, #12]
 8005f64:	4619      	mov	r1, r3
 8005f66:	6878      	ldr	r0, [r7, #4]
 8005f68:	f000 fe6f 	bl	8006c4a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	7b1b      	ldrb	r3, [r3, #12]
 8005f70:	4619      	mov	r1, r3
 8005f72:	6878      	ldr	r0, [r7, #4]
 8005f74:	f000 fe9a 	bl	8006cac <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	7b5b      	ldrb	r3, [r3, #13]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d00e      	beq.n	8005fa4 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	7b5b      	ldrb	r3, [r3, #13]
 8005f8a:	4619      	mov	r1, r3
 8005f8c:	6878      	ldr	r0, [r7, #4]
 8005f8e:	f000 fe5c 	bl	8006c4a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	7b5b      	ldrb	r3, [r3, #13]
 8005f96:	4619      	mov	r1, r3
 8005f98:	6878      	ldr	r0, [r7, #4]
 8005f9a:	f000 fe87 	bl	8006cac <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005faa:	69db      	ldr	r3, [r3, #28]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d00b      	beq.n	8005fc8 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005fb6:	69db      	ldr	r3, [r3, #28]
 8005fb8:	4618      	mov	r0, r3
 8005fba:	f001 f971 	bl	80072a0 <free>
    phost->pActiveClass->pData = 0U;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8005fc8:	2300      	movs	r3, #0
}
 8005fca:	4618      	mov	r0, r3
 8005fcc:	3710      	adds	r7, #16
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	bd80      	pop	{r7, pc}

08005fd2 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8005fd2:	b580      	push	{r7, lr}
 8005fd4:	b084      	sub	sp, #16
 8005fd6:	af00      	add	r7, sp, #0
 8005fd8:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005fe0:	69db      	ldr	r3, [r3, #28]
 8005fe2:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	3340      	adds	r3, #64	; 0x40
 8005fe8:	4619      	mov	r1, r3
 8005fea:	6878      	ldr	r0, [r7, #4]
 8005fec:	f000 f8b1 	bl	8006152 <GetLineCoding>
 8005ff0:	4603      	mov	r3, r0
 8005ff2:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8005ff4:	7afb      	ldrb	r3, [r7, #11]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d105      	bne.n	8006006 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006000:	2102      	movs	r1, #2
 8006002:	6878      	ldr	r0, [r7, #4]
 8006004:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8006006:	7afb      	ldrb	r3, [r7, #11]
}
 8006008:	4618      	mov	r0, r3
 800600a:	3710      	adds	r7, #16
 800600c:	46bd      	mov	sp, r7
 800600e:	bd80      	pop	{r7, pc}

08006010 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b084      	sub	sp, #16
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006018:	2301      	movs	r3, #1
 800601a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800601c:	2300      	movs	r3, #0
 800601e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006026:	69db      	ldr	r3, [r3, #28]
 8006028:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006030:	2b04      	cmp	r3, #4
 8006032:	d877      	bhi.n	8006124 <USBH_CDC_Process+0x114>
 8006034:	a201      	add	r2, pc, #4	; (adr r2, 800603c <USBH_CDC_Process+0x2c>)
 8006036:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800603a:	bf00      	nop
 800603c:	08006051 	.word	0x08006051
 8006040:	08006057 	.word	0x08006057
 8006044:	08006087 	.word	0x08006087
 8006048:	080060fb 	.word	0x080060fb
 800604c:	08006109 	.word	0x08006109
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006050:	2300      	movs	r3, #0
 8006052:	73fb      	strb	r3, [r7, #15]
      break;
 8006054:	e06d      	b.n	8006132 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8006056:	68bb      	ldr	r3, [r7, #8]
 8006058:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800605a:	4619      	mov	r1, r3
 800605c:	6878      	ldr	r0, [r7, #4]
 800605e:	f000 f897 	bl	8006190 <SetLineCoding>
 8006062:	4603      	mov	r3, r0
 8006064:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006066:	7bbb      	ldrb	r3, [r7, #14]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d104      	bne.n	8006076 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	2202      	movs	r2, #2
 8006070:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006074:	e058      	b.n	8006128 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8006076:	7bbb      	ldrb	r3, [r7, #14]
 8006078:	2b01      	cmp	r3, #1
 800607a:	d055      	beq.n	8006128 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	2204      	movs	r2, #4
 8006080:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006084:	e050      	b.n	8006128 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	3340      	adds	r3, #64	; 0x40
 800608a:	4619      	mov	r1, r3
 800608c:	6878      	ldr	r0, [r7, #4]
 800608e:	f000 f860 	bl	8006152 <GetLineCoding>
 8006092:	4603      	mov	r3, r0
 8006094:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006096:	7bbb      	ldrb	r3, [r7, #14]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d126      	bne.n	80060ea <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	2200      	movs	r2, #0
 80060a0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80060a4:	68bb      	ldr	r3, [r7, #8]
 80060a6:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80060aa:	68bb      	ldr	r3, [r7, #8]
 80060ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80060ae:	791b      	ldrb	r3, [r3, #4]
 80060b0:	429a      	cmp	r2, r3
 80060b2:	d13b      	bne.n	800612c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80060b4:	68bb      	ldr	r3, [r7, #8]
 80060b6:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 80060ba:	68bb      	ldr	r3, [r7, #8]
 80060bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80060be:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80060c0:	429a      	cmp	r2, r3
 80060c2:	d133      	bne.n	800612c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80060c4:	68bb      	ldr	r3, [r7, #8]
 80060c6:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80060ca:	68bb      	ldr	r3, [r7, #8]
 80060cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80060ce:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80060d0:	429a      	cmp	r2, r3
 80060d2:	d12b      	bne.n	800612c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80060d4:	68bb      	ldr	r3, [r7, #8]
 80060d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80060d8:	68bb      	ldr	r3, [r7, #8]
 80060da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80060dc:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80060de:	429a      	cmp	r2, r3
 80060e0:	d124      	bne.n	800612c <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80060e2:	6878      	ldr	r0, [r7, #4]
 80060e4:	f000 f958 	bl	8006398 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80060e8:	e020      	b.n	800612c <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80060ea:	7bbb      	ldrb	r3, [r7, #14]
 80060ec:	2b01      	cmp	r3, #1
 80060ee:	d01d      	beq.n	800612c <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80060f0:	68bb      	ldr	r3, [r7, #8]
 80060f2:	2204      	movs	r2, #4
 80060f4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80060f8:	e018      	b.n	800612c <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80060fa:	6878      	ldr	r0, [r7, #4]
 80060fc:	f000 f867 	bl	80061ce <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006100:	6878      	ldr	r0, [r7, #4]
 8006102:	f000 f8da 	bl	80062ba <CDC_ProcessReception>
      break;
 8006106:	e014      	b.n	8006132 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8006108:	2100      	movs	r1, #0
 800610a:	6878      	ldr	r0, [r7, #4]
 800610c:	f000 fb08 	bl	8006720 <USBH_ClrFeature>
 8006110:	4603      	mov	r3, r0
 8006112:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006114:	7bbb      	ldrb	r3, [r7, #14]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d10a      	bne.n	8006130 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800611a:	68bb      	ldr	r3, [r7, #8]
 800611c:	2200      	movs	r2, #0
 800611e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8006122:	e005      	b.n	8006130 <USBH_CDC_Process+0x120>

    default:
      break;
 8006124:	bf00      	nop
 8006126:	e004      	b.n	8006132 <USBH_CDC_Process+0x122>
      break;
 8006128:	bf00      	nop
 800612a:	e002      	b.n	8006132 <USBH_CDC_Process+0x122>
      break;
 800612c:	bf00      	nop
 800612e:	e000      	b.n	8006132 <USBH_CDC_Process+0x122>
      break;
 8006130:	bf00      	nop

  }

  return status;
 8006132:	7bfb      	ldrb	r3, [r7, #15]
}
 8006134:	4618      	mov	r0, r3
 8006136:	3710      	adds	r7, #16
 8006138:	46bd      	mov	sp, r7
 800613a:	bd80      	pop	{r7, pc}

0800613c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800613c:	b480      	push	{r7}
 800613e:	b083      	sub	sp, #12
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006144:	2300      	movs	r3, #0
}
 8006146:	4618      	mov	r0, r3
 8006148:	370c      	adds	r7, #12
 800614a:	46bd      	mov	sp, r7
 800614c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006150:	4770      	bx	lr

08006152 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006152:	b580      	push	{r7, lr}
 8006154:	b082      	sub	sp, #8
 8006156:	af00      	add	r7, sp, #0
 8006158:	6078      	str	r0, [r7, #4]
 800615a:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	22a1      	movs	r2, #161	; 0xa1
 8006160:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2221      	movs	r2, #33	; 0x21
 8006166:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2200      	movs	r2, #0
 800616c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2200      	movs	r2, #0
 8006172:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2207      	movs	r2, #7
 8006178:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	2207      	movs	r2, #7
 800617e:	4619      	mov	r1, r3
 8006180:	6878      	ldr	r0, [r7, #4]
 8006182:	f000 faf1 	bl	8006768 <USBH_CtlReq>
 8006186:	4603      	mov	r3, r0
}
 8006188:	4618      	mov	r0, r3
 800618a:	3708      	adds	r7, #8
 800618c:	46bd      	mov	sp, r7
 800618e:	bd80      	pop	{r7, pc}

08006190 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b082      	sub	sp, #8
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
 8006198:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2221      	movs	r2, #33	; 0x21
 800619e:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2220      	movs	r2, #32
 80061a4:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2200      	movs	r2, #0
 80061aa:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2200      	movs	r2, #0
 80061b0:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2207      	movs	r2, #7
 80061b6:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	2207      	movs	r2, #7
 80061bc:	4619      	mov	r1, r3
 80061be:	6878      	ldr	r0, [r7, #4]
 80061c0:	f000 fad2 	bl	8006768 <USBH_CtlReq>
 80061c4:	4603      	mov	r3, r0
}
 80061c6:	4618      	mov	r0, r3
 80061c8:	3708      	adds	r7, #8
 80061ca:	46bd      	mov	sp, r7
 80061cc:	bd80      	pop	{r7, pc}

080061ce <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80061ce:	b580      	push	{r7, lr}
 80061d0:	b086      	sub	sp, #24
 80061d2:	af02      	add	r7, sp, #8
 80061d4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80061dc:	69db      	ldr	r3, [r3, #28]
 80061de:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80061e0:	2300      	movs	r3, #0
 80061e2:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80061ea:	2b01      	cmp	r3, #1
 80061ec:	d002      	beq.n	80061f4 <CDC_ProcessTransmission+0x26>
 80061ee:	2b02      	cmp	r3, #2
 80061f0:	d023      	beq.n	800623a <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80061f2:	e05e      	b.n	80062b2 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061f8:	68fa      	ldr	r2, [r7, #12]
 80061fa:	8b12      	ldrh	r2, [r2, #24]
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d90b      	bls.n	8006218 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	69d9      	ldr	r1, [r3, #28]
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	8b1a      	ldrh	r2, [r3, #24]
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	7b5b      	ldrb	r3, [r3, #13]
 800620c:	2001      	movs	r0, #1
 800620e:	9000      	str	r0, [sp, #0]
 8006210:	6878      	ldr	r0, [r7, #4]
 8006212:	f000 fcb8 	bl	8006b86 <USBH_BulkSendData>
 8006216:	e00b      	b.n	8006230 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8006220:	b29a      	uxth	r2, r3
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	7b5b      	ldrb	r3, [r3, #13]
 8006226:	2001      	movs	r0, #1
 8006228:	9000      	str	r0, [sp, #0]
 800622a:	6878      	ldr	r0, [r7, #4]
 800622c:	f000 fcab 	bl	8006b86 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	2202      	movs	r2, #2
 8006234:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006238:	e03b      	b.n	80062b2 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	7b5b      	ldrb	r3, [r3, #13]
 800623e:	4619      	mov	r1, r3
 8006240:	6878      	ldr	r0, [r7, #4]
 8006242:	f000 ff83 	bl	800714c <USBH_LL_GetURBState>
 8006246:	4603      	mov	r3, r0
 8006248:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800624a:	7afb      	ldrb	r3, [r7, #11]
 800624c:	2b01      	cmp	r3, #1
 800624e:	d128      	bne.n	80062a2 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006254:	68fa      	ldr	r2, [r7, #12]
 8006256:	8b12      	ldrh	r2, [r2, #24]
 8006258:	4293      	cmp	r3, r2
 800625a:	d90e      	bls.n	800627a <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006260:	68fa      	ldr	r2, [r7, #12]
 8006262:	8b12      	ldrh	r2, [r2, #24]
 8006264:	1a9a      	subs	r2, r3, r2
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	69db      	ldr	r3, [r3, #28]
 800626e:	68fa      	ldr	r2, [r7, #12]
 8006270:	8b12      	ldrh	r2, [r2, #24]
 8006272:	441a      	add	r2, r3
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	61da      	str	r2, [r3, #28]
 8006278:	e002      	b.n	8006280 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	2200      	movs	r2, #0
 800627e:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006284:	2b00      	cmp	r3, #0
 8006286:	d004      	beq.n	8006292 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	2201      	movs	r2, #1
 800628c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006290:	e00e      	b.n	80062b0 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	2200      	movs	r2, #0
 8006296:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800629a:	6878      	ldr	r0, [r7, #4]
 800629c:	f000 f868 	bl	8006370 <USBH_CDC_TransmitCallback>
      break;
 80062a0:	e006      	b.n	80062b0 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 80062a2:	7afb      	ldrb	r3, [r7, #11]
 80062a4:	2b02      	cmp	r3, #2
 80062a6:	d103      	bne.n	80062b0 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	2201      	movs	r2, #1
 80062ac:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80062b0:	bf00      	nop
  }
}
 80062b2:	bf00      	nop
 80062b4:	3710      	adds	r7, #16
 80062b6:	46bd      	mov	sp, r7
 80062b8:	bd80      	pop	{r7, pc}

080062ba <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80062ba:	b580      	push	{r7, lr}
 80062bc:	b086      	sub	sp, #24
 80062be:	af00      	add	r7, sp, #0
 80062c0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80062c8:	69db      	ldr	r3, [r3, #28]
 80062ca:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80062cc:	2300      	movs	r3, #0
 80062ce:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80062d0:	697b      	ldr	r3, [r7, #20]
 80062d2:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80062d6:	2b03      	cmp	r3, #3
 80062d8:	d002      	beq.n	80062e0 <CDC_ProcessReception+0x26>
 80062da:	2b04      	cmp	r3, #4
 80062dc:	d00e      	beq.n	80062fc <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 80062de:	e043      	b.n	8006368 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 80062e0:	697b      	ldr	r3, [r7, #20]
 80062e2:	6a19      	ldr	r1, [r3, #32]
 80062e4:	697b      	ldr	r3, [r7, #20]
 80062e6:	8b5a      	ldrh	r2, [r3, #26]
 80062e8:	697b      	ldr	r3, [r7, #20]
 80062ea:	7b1b      	ldrb	r3, [r3, #12]
 80062ec:	6878      	ldr	r0, [r7, #4]
 80062ee:	f000 fc6f 	bl	8006bd0 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80062f2:	697b      	ldr	r3, [r7, #20]
 80062f4:	2204      	movs	r2, #4
 80062f6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80062fa:	e035      	b.n	8006368 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80062fc:	697b      	ldr	r3, [r7, #20]
 80062fe:	7b1b      	ldrb	r3, [r3, #12]
 8006300:	4619      	mov	r1, r3
 8006302:	6878      	ldr	r0, [r7, #4]
 8006304:	f000 ff22 	bl	800714c <USBH_LL_GetURBState>
 8006308:	4603      	mov	r3, r0
 800630a:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800630c:	7cfb      	ldrb	r3, [r7, #19]
 800630e:	2b01      	cmp	r3, #1
 8006310:	d129      	bne.n	8006366 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8006312:	697b      	ldr	r3, [r7, #20]
 8006314:	7b1b      	ldrb	r3, [r3, #12]
 8006316:	4619      	mov	r1, r3
 8006318:	6878      	ldr	r0, [r7, #4]
 800631a:	f000 fe85 	bl	8007028 <USBH_LL_GetLastXferSize>
 800631e:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8006320:	697b      	ldr	r3, [r7, #20]
 8006322:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006324:	68fa      	ldr	r2, [r7, #12]
 8006326:	429a      	cmp	r2, r3
 8006328:	d016      	beq.n	8006358 <CDC_ProcessReception+0x9e>
 800632a:	697b      	ldr	r3, [r7, #20]
 800632c:	8b5b      	ldrh	r3, [r3, #26]
 800632e:	461a      	mov	r2, r3
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	4293      	cmp	r3, r2
 8006334:	d910      	bls.n	8006358 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8006336:	697b      	ldr	r3, [r7, #20]
 8006338:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	1ad2      	subs	r2, r2, r3
 800633e:	697b      	ldr	r3, [r7, #20]
 8006340:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8006342:	697b      	ldr	r3, [r7, #20]
 8006344:	6a1a      	ldr	r2, [r3, #32]
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	441a      	add	r2, r3
 800634a:	697b      	ldr	r3, [r7, #20]
 800634c:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800634e:	697b      	ldr	r3, [r7, #20]
 8006350:	2203      	movs	r2, #3
 8006352:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006356:	e006      	b.n	8006366 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8006358:	697b      	ldr	r3, [r7, #20]
 800635a:	2200      	movs	r2, #0
 800635c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8006360:	6878      	ldr	r0, [r7, #4]
 8006362:	f000 f80f 	bl	8006384 <USBH_CDC_ReceiveCallback>
      break;
 8006366:	bf00      	nop
  }
}
 8006368:	bf00      	nop
 800636a:	3718      	adds	r7, #24
 800636c:	46bd      	mov	sp, r7
 800636e:	bd80      	pop	{r7, pc}

08006370 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006370:	b480      	push	{r7}
 8006372:	b083      	sub	sp, #12
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006378:	bf00      	nop
 800637a:	370c      	adds	r7, #12
 800637c:	46bd      	mov	sp, r7
 800637e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006382:	4770      	bx	lr

08006384 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006384:	b480      	push	{r7}
 8006386:	b083      	sub	sp, #12
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800638c:	bf00      	nop
 800638e:	370c      	adds	r7, #12
 8006390:	46bd      	mov	sp, r7
 8006392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006396:	4770      	bx	lr

08006398 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006398:	b480      	push	{r7}
 800639a:	b083      	sub	sp, #12
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80063a0:	bf00      	nop
 80063a2:	370c      	adds	r7, #12
 80063a4:	46bd      	mov	sp, r7
 80063a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063aa:	4770      	bx	lr

080063ac <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b084      	sub	sp, #16
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	60f8      	str	r0, [r7, #12]
 80063b4:	60b9      	str	r1, [r7, #8]
 80063b6:	4613      	mov	r3, r2
 80063b8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d101      	bne.n	80063c4 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80063c0:	2302      	movs	r3, #2
 80063c2:	e029      	b.n	8006418 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	79fa      	ldrb	r2, [r7, #7]
 80063c8:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	2200      	movs	r2, #0
 80063d0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	2200      	movs	r2, #0
 80063d8:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 80063dc:	68f8      	ldr	r0, [r7, #12]
 80063de:	f000 f81f 	bl	8006420 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	2200      	movs	r2, #0
 80063e6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	2200      	movs	r2, #0
 80063ee:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	2200      	movs	r2, #0
 80063f6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	2200      	movs	r2, #0
 80063fe:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8006402:	68bb      	ldr	r3, [r7, #8]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d003      	beq.n	8006410 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	68ba      	ldr	r2, [r7, #8]
 800640c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8006410:	68f8      	ldr	r0, [r7, #12]
 8006412:	f000 fd97 	bl	8006f44 <USBH_LL_Init>

  return USBH_OK;
 8006416:	2300      	movs	r3, #0
}
 8006418:	4618      	mov	r0, r3
 800641a:	3710      	adds	r7, #16
 800641c:	46bd      	mov	sp, r7
 800641e:	bd80      	pop	{r7, pc}

08006420 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006420:	b480      	push	{r7}
 8006422:	b085      	sub	sp, #20
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006428:	2300      	movs	r3, #0
 800642a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800642c:	2300      	movs	r3, #0
 800642e:	60fb      	str	r3, [r7, #12]
 8006430:	e009      	b.n	8006446 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8006432:	687a      	ldr	r2, [r7, #4]
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	33e0      	adds	r3, #224	; 0xe0
 8006438:	009b      	lsls	r3, r3, #2
 800643a:	4413      	add	r3, r2
 800643c:	2200      	movs	r2, #0
 800643e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	3301      	adds	r3, #1
 8006444:	60fb      	str	r3, [r7, #12]
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	2b0f      	cmp	r3, #15
 800644a:	d9f2      	bls.n	8006432 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800644c:	2300      	movs	r3, #0
 800644e:	60fb      	str	r3, [r7, #12]
 8006450:	e009      	b.n	8006466 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8006452:	687a      	ldr	r2, [r7, #4]
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	4413      	add	r3, r2
 8006458:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800645c:	2200      	movs	r2, #0
 800645e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	3301      	adds	r3, #1
 8006464:	60fb      	str	r3, [r7, #12]
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800646c:	d3f1      	bcc.n	8006452 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2200      	movs	r2, #0
 8006472:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2200      	movs	r2, #0
 8006478:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2201      	movs	r2, #1
 800647e:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2200      	movs	r2, #0
 8006484:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2201      	movs	r2, #1
 800648c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2240      	movs	r2, #64	; 0x40
 8006492:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2200      	movs	r2, #0
 8006498:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2200      	movs	r2, #0
 800649e:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	2201      	movs	r2, #1
 80064a6:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2200      	movs	r2, #0
 80064ae:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2200      	movs	r2, #0
 80064b6:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 80064ba:	2300      	movs	r3, #0
}
 80064bc:	4618      	mov	r0, r3
 80064be:	3714      	adds	r7, #20
 80064c0:	46bd      	mov	sp, r7
 80064c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c6:	4770      	bx	lr

080064c8 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80064c8:	b480      	push	{r7}
 80064ca:	b085      	sub	sp, #20
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
 80064d0:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80064d2:	2300      	movs	r3, #0
 80064d4:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d016      	beq.n	800650a <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d10e      	bne.n	8006504 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80064ec:	1c59      	adds	r1, r3, #1
 80064ee:	687a      	ldr	r2, [r7, #4]
 80064f0:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 80064f4:	687a      	ldr	r2, [r7, #4]
 80064f6:	33de      	adds	r3, #222	; 0xde
 80064f8:	6839      	ldr	r1, [r7, #0]
 80064fa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80064fe:	2300      	movs	r3, #0
 8006500:	73fb      	strb	r3, [r7, #15]
 8006502:	e004      	b.n	800650e <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8006504:	2302      	movs	r3, #2
 8006506:	73fb      	strb	r3, [r7, #15]
 8006508:	e001      	b.n	800650e <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800650a:	2302      	movs	r3, #2
 800650c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800650e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006510:	4618      	mov	r0, r3
 8006512:	3714      	adds	r7, #20
 8006514:	46bd      	mov	sp, r7
 8006516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651a:	4770      	bx	lr

0800651c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800651c:	b480      	push	{r7}
 800651e:	b085      	sub	sp, #20
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
 8006524:	460b      	mov	r3, r1
 8006526:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8006528:	2300      	movs	r3, #0
 800652a:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8006532:	78fa      	ldrb	r2, [r7, #3]
 8006534:	429a      	cmp	r2, r3
 8006536:	d204      	bcs.n	8006542 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	78fa      	ldrb	r2, [r7, #3]
 800653c:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8006540:	e001      	b.n	8006546 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8006542:	2302      	movs	r3, #2
 8006544:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006546:	7bfb      	ldrb	r3, [r7, #15]
}
 8006548:	4618      	mov	r0, r3
 800654a:	3714      	adds	r7, #20
 800654c:	46bd      	mov	sp, r7
 800654e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006552:	4770      	bx	lr

08006554 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006554:	b480      	push	{r7}
 8006556:	b087      	sub	sp, #28
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
 800655c:	4608      	mov	r0, r1
 800655e:	4611      	mov	r1, r2
 8006560:	461a      	mov	r2, r3
 8006562:	4603      	mov	r3, r0
 8006564:	70fb      	strb	r3, [r7, #3]
 8006566:	460b      	mov	r3, r1
 8006568:	70bb      	strb	r3, [r7, #2]
 800656a:	4613      	mov	r3, r2
 800656c:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800656e:	2300      	movs	r3, #0
 8006570:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8006572:	2300      	movs	r3, #0
 8006574:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800657c:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800657e:	e025      	b.n	80065cc <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006580:	7dfb      	ldrb	r3, [r7, #23]
 8006582:	221a      	movs	r2, #26
 8006584:	fb02 f303 	mul.w	r3, r2, r3
 8006588:	3308      	adds	r3, #8
 800658a:	68fa      	ldr	r2, [r7, #12]
 800658c:	4413      	add	r3, r2
 800658e:	3302      	adds	r3, #2
 8006590:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006592:	693b      	ldr	r3, [r7, #16]
 8006594:	795b      	ldrb	r3, [r3, #5]
 8006596:	78fa      	ldrb	r2, [r7, #3]
 8006598:	429a      	cmp	r2, r3
 800659a:	d002      	beq.n	80065a2 <USBH_FindInterface+0x4e>
 800659c:	78fb      	ldrb	r3, [r7, #3]
 800659e:	2bff      	cmp	r3, #255	; 0xff
 80065a0:	d111      	bne.n	80065c6 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80065a2:	693b      	ldr	r3, [r7, #16]
 80065a4:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80065a6:	78ba      	ldrb	r2, [r7, #2]
 80065a8:	429a      	cmp	r2, r3
 80065aa:	d002      	beq.n	80065b2 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80065ac:	78bb      	ldrb	r3, [r7, #2]
 80065ae:	2bff      	cmp	r3, #255	; 0xff
 80065b0:	d109      	bne.n	80065c6 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80065b2:	693b      	ldr	r3, [r7, #16]
 80065b4:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80065b6:	787a      	ldrb	r2, [r7, #1]
 80065b8:	429a      	cmp	r2, r3
 80065ba:	d002      	beq.n	80065c2 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80065bc:	787b      	ldrb	r3, [r7, #1]
 80065be:	2bff      	cmp	r3, #255	; 0xff
 80065c0:	d101      	bne.n	80065c6 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80065c2:	7dfb      	ldrb	r3, [r7, #23]
 80065c4:	e006      	b.n	80065d4 <USBH_FindInterface+0x80>
    }
    if_ix++;
 80065c6:	7dfb      	ldrb	r3, [r7, #23]
 80065c8:	3301      	adds	r3, #1
 80065ca:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80065cc:	7dfb      	ldrb	r3, [r7, #23]
 80065ce:	2b01      	cmp	r3, #1
 80065d0:	d9d6      	bls.n	8006580 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80065d2:	23ff      	movs	r3, #255	; 0xff
}
 80065d4:	4618      	mov	r0, r3
 80065d6:	371c      	adds	r7, #28
 80065d8:	46bd      	mov	sp, r7
 80065da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065de:	4770      	bx	lr

080065e0 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b082      	sub	sp, #8
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 80065e8:	6878      	ldr	r0, [r7, #4]
 80065ea:	f000 fce7 	bl	8006fbc <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 80065ee:	2101      	movs	r1, #1
 80065f0:	6878      	ldr	r0, [r7, #4]
 80065f2:	f000 fdbe 	bl	8007172 <USBH_LL_DriverVBUS>

  return USBH_OK;
 80065f6:	2300      	movs	r3, #0
}
 80065f8:	4618      	mov	r0, r3
 80065fa:	3708      	adds	r7, #8
 80065fc:	46bd      	mov	sp, r7
 80065fe:	bd80      	pop	{r7, pc}

08006600 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8006600:	b480      	push	{r7}
 8006602:	b083      	sub	sp, #12
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
 8006608:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	683a      	ldr	r2, [r7, #0]
 800660e:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8006612:	bf00      	nop
 8006614:	370c      	adds	r7, #12
 8006616:	46bd      	mov	sp, r7
 8006618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661c:	4770      	bx	lr

0800661e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800661e:	b580      	push	{r7, lr}
 8006620:	b082      	sub	sp, #8
 8006622:	af00      	add	r7, sp, #0
 8006624:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800662c:	1c5a      	adds	r2, r3, #1
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8006634:	6878      	ldr	r0, [r7, #4]
 8006636:	f000 f804 	bl	8006642 <USBH_HandleSof>
}
 800663a:	bf00      	nop
 800663c:	3708      	adds	r7, #8
 800663e:	46bd      	mov	sp, r7
 8006640:	bd80      	pop	{r7, pc}

08006642 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8006642:	b580      	push	{r7, lr}
 8006644:	b082      	sub	sp, #8
 8006646:	af00      	add	r7, sp, #0
 8006648:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	781b      	ldrb	r3, [r3, #0]
 800664e:	b2db      	uxtb	r3, r3
 8006650:	2b0b      	cmp	r3, #11
 8006652:	d10a      	bne.n	800666a <USBH_HandleSof+0x28>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800665a:	2b00      	cmp	r3, #0
 800665c:	d005      	beq.n	800666a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006664:	699b      	ldr	r3, [r3, #24]
 8006666:	6878      	ldr	r0, [r7, #4]
 8006668:	4798      	blx	r3
  }
}
 800666a:	bf00      	nop
 800666c:	3708      	adds	r7, #8
 800666e:	46bd      	mov	sp, r7
 8006670:	bd80      	pop	{r7, pc}

08006672 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8006672:	b480      	push	{r7}
 8006674:	b083      	sub	sp, #12
 8006676:	af00      	add	r7, sp, #0
 8006678:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2201      	movs	r2, #1
 800667e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8006682:	bf00      	nop
}
 8006684:	370c      	adds	r7, #12
 8006686:	46bd      	mov	sp, r7
 8006688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668c:	4770      	bx	lr

0800668e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800668e:	b480      	push	{r7}
 8006690:	b083      	sub	sp, #12
 8006692:	af00      	add	r7, sp, #0
 8006694:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	2200      	movs	r2, #0
 800669a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800669e:	bf00      	nop
}
 80066a0:	370c      	adds	r7, #12
 80066a2:	46bd      	mov	sp, r7
 80066a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a8:	4770      	bx	lr

080066aa <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80066aa:	b480      	push	{r7}
 80066ac:	b083      	sub	sp, #12
 80066ae:	af00      	add	r7, sp, #0
 80066b0:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2201      	movs	r2, #1
 80066b6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2200      	movs	r2, #0
 80066be:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2200      	movs	r2, #0
 80066c6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80066ca:	2300      	movs	r3, #0
}
 80066cc:	4618      	mov	r0, r3
 80066ce:	370c      	adds	r7, #12
 80066d0:	46bd      	mov	sp, r7
 80066d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d6:	4770      	bx	lr

080066d8 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b082      	sub	sp, #8
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2201      	movs	r2, #1
 80066e4:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2200      	movs	r2, #0
 80066ec:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2200      	movs	r2, #0
 80066f4:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 80066f8:	6878      	ldr	r0, [r7, #4]
 80066fa:	f000 fc7a 	bl	8006ff2 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	791b      	ldrb	r3, [r3, #4]
 8006702:	4619      	mov	r1, r3
 8006704:	6878      	ldr	r0, [r7, #4]
 8006706:	f000 fad1 	bl	8006cac <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	795b      	ldrb	r3, [r3, #5]
 800670e:	4619      	mov	r1, r3
 8006710:	6878      	ldr	r0, [r7, #4]
 8006712:	f000 facb 	bl	8006cac <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8006716:	2300      	movs	r3, #0
}
 8006718:	4618      	mov	r0, r3
 800671a:	3708      	adds	r7, #8
 800671c:	46bd      	mov	sp, r7
 800671e:	bd80      	pop	{r7, pc}

08006720 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8006720:	b580      	push	{r7, lr}
 8006722:	b082      	sub	sp, #8
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
 8006728:	460b      	mov	r3, r1
 800672a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	789b      	ldrb	r3, [r3, #2]
 8006730:	2b01      	cmp	r3, #1
 8006732:	d10f      	bne.n	8006754 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2202      	movs	r2, #2
 8006738:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2201      	movs	r2, #1
 800673e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2200      	movs	r2, #0
 8006744:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8006746:	78fb      	ldrb	r3, [r7, #3]
 8006748:	b29a      	uxth	r2, r3
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2200      	movs	r2, #0
 8006752:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8006754:	2200      	movs	r2, #0
 8006756:	2100      	movs	r1, #0
 8006758:	6878      	ldr	r0, [r7, #4]
 800675a:	f000 f805 	bl	8006768 <USBH_CtlReq>
 800675e:	4603      	mov	r3, r0
}
 8006760:	4618      	mov	r0, r3
 8006762:	3708      	adds	r7, #8
 8006764:	46bd      	mov	sp, r7
 8006766:	bd80      	pop	{r7, pc}

08006768 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b086      	sub	sp, #24
 800676c:	af00      	add	r7, sp, #0
 800676e:	60f8      	str	r0, [r7, #12]
 8006770:	60b9      	str	r1, [r7, #8]
 8006772:	4613      	mov	r3, r2
 8006774:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8006776:	2301      	movs	r3, #1
 8006778:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	789b      	ldrb	r3, [r3, #2]
 800677e:	2b01      	cmp	r3, #1
 8006780:	d002      	beq.n	8006788 <USBH_CtlReq+0x20>
 8006782:	2b02      	cmp	r3, #2
 8006784:	d00f      	beq.n	80067a6 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8006786:	e027      	b.n	80067d8 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	68ba      	ldr	r2, [r7, #8]
 800678c:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	88fa      	ldrh	r2, [r7, #6]
 8006792:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	2201      	movs	r2, #1
 8006798:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	2202      	movs	r2, #2
 800679e:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80067a0:	2301      	movs	r3, #1
 80067a2:	75fb      	strb	r3, [r7, #23]
      break;
 80067a4:	e018      	b.n	80067d8 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 80067a6:	68f8      	ldr	r0, [r7, #12]
 80067a8:	f000 f81c 	bl	80067e4 <USBH_HandleControl>
 80067ac:	4603      	mov	r3, r0
 80067ae:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80067b0:	7dfb      	ldrb	r3, [r7, #23]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d002      	beq.n	80067bc <USBH_CtlReq+0x54>
 80067b6:	7dfb      	ldrb	r3, [r7, #23]
 80067b8:	2b03      	cmp	r3, #3
 80067ba:	d106      	bne.n	80067ca <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	2201      	movs	r2, #1
 80067c0:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	2200      	movs	r2, #0
 80067c6:	761a      	strb	r2, [r3, #24]
      break;
 80067c8:	e005      	b.n	80067d6 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 80067ca:	7dfb      	ldrb	r3, [r7, #23]
 80067cc:	2b02      	cmp	r3, #2
 80067ce:	d102      	bne.n	80067d6 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	2201      	movs	r2, #1
 80067d4:	709a      	strb	r2, [r3, #2]
      break;
 80067d6:	bf00      	nop
  }
  return status;
 80067d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80067da:	4618      	mov	r0, r3
 80067dc:	3718      	adds	r7, #24
 80067de:	46bd      	mov	sp, r7
 80067e0:	bd80      	pop	{r7, pc}
	...

080067e4 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b086      	sub	sp, #24
 80067e8:	af02      	add	r7, sp, #8
 80067ea:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80067ec:	2301      	movs	r3, #1
 80067ee:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80067f0:	2300      	movs	r3, #0
 80067f2:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	7e1b      	ldrb	r3, [r3, #24]
 80067f8:	3b01      	subs	r3, #1
 80067fa:	2b0a      	cmp	r3, #10
 80067fc:	f200 8156 	bhi.w	8006aac <USBH_HandleControl+0x2c8>
 8006800:	a201      	add	r2, pc, #4	; (adr r2, 8006808 <USBH_HandleControl+0x24>)
 8006802:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006806:	bf00      	nop
 8006808:	08006835 	.word	0x08006835
 800680c:	0800684f 	.word	0x0800684f
 8006810:	080068b9 	.word	0x080068b9
 8006814:	080068df 	.word	0x080068df
 8006818:	08006917 	.word	0x08006917
 800681c:	08006941 	.word	0x08006941
 8006820:	08006993 	.word	0x08006993
 8006824:	080069b5 	.word	0x080069b5
 8006828:	080069f1 	.word	0x080069f1
 800682c:	08006a17 	.word	0x08006a17
 8006830:	08006a55 	.word	0x08006a55
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	f103 0110 	add.w	r1, r3, #16
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	795b      	ldrb	r3, [r3, #5]
 800683e:	461a      	mov	r2, r3
 8006840:	6878      	ldr	r0, [r7, #4]
 8006842:	f000 f943 	bl	8006acc <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2202      	movs	r2, #2
 800684a:	761a      	strb	r2, [r3, #24]
      break;
 800684c:	e139      	b.n	8006ac2 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	795b      	ldrb	r3, [r3, #5]
 8006852:	4619      	mov	r1, r3
 8006854:	6878      	ldr	r0, [r7, #4]
 8006856:	f000 fc79 	bl	800714c <USBH_LL_GetURBState>
 800685a:	4603      	mov	r3, r0
 800685c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800685e:	7bbb      	ldrb	r3, [r7, #14]
 8006860:	2b01      	cmp	r3, #1
 8006862:	d11e      	bne.n	80068a2 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	7c1b      	ldrb	r3, [r3, #16]
 8006868:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800686c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	8adb      	ldrh	r3, [r3, #22]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d00a      	beq.n	800688c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8006876:	7b7b      	ldrb	r3, [r7, #13]
 8006878:	2b80      	cmp	r3, #128	; 0x80
 800687a:	d103      	bne.n	8006884 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2203      	movs	r2, #3
 8006880:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8006882:	e115      	b.n	8006ab0 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2205      	movs	r2, #5
 8006888:	761a      	strb	r2, [r3, #24]
      break;
 800688a:	e111      	b.n	8006ab0 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800688c:	7b7b      	ldrb	r3, [r7, #13]
 800688e:	2b80      	cmp	r3, #128	; 0x80
 8006890:	d103      	bne.n	800689a <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2209      	movs	r2, #9
 8006896:	761a      	strb	r2, [r3, #24]
      break;
 8006898:	e10a      	b.n	8006ab0 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2207      	movs	r2, #7
 800689e:	761a      	strb	r2, [r3, #24]
      break;
 80068a0:	e106      	b.n	8006ab0 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80068a2:	7bbb      	ldrb	r3, [r7, #14]
 80068a4:	2b04      	cmp	r3, #4
 80068a6:	d003      	beq.n	80068b0 <USBH_HandleControl+0xcc>
 80068a8:	7bbb      	ldrb	r3, [r7, #14]
 80068aa:	2b02      	cmp	r3, #2
 80068ac:	f040 8100 	bne.w	8006ab0 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	220b      	movs	r2, #11
 80068b4:	761a      	strb	r2, [r3, #24]
      break;
 80068b6:	e0fb      	b.n	8006ab0 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80068be:	b29a      	uxth	r2, r3
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	6899      	ldr	r1, [r3, #8]
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	899a      	ldrh	r2, [r3, #12]
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	791b      	ldrb	r3, [r3, #4]
 80068d0:	6878      	ldr	r0, [r7, #4]
 80068d2:	f000 f93a 	bl	8006b4a <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2204      	movs	r2, #4
 80068da:	761a      	strb	r2, [r3, #24]
      break;
 80068dc:	e0f1      	b.n	8006ac2 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	791b      	ldrb	r3, [r3, #4]
 80068e2:	4619      	mov	r1, r3
 80068e4:	6878      	ldr	r0, [r7, #4]
 80068e6:	f000 fc31 	bl	800714c <USBH_LL_GetURBState>
 80068ea:	4603      	mov	r3, r0
 80068ec:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80068ee:	7bbb      	ldrb	r3, [r7, #14]
 80068f0:	2b01      	cmp	r3, #1
 80068f2:	d102      	bne.n	80068fa <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2209      	movs	r2, #9
 80068f8:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80068fa:	7bbb      	ldrb	r3, [r7, #14]
 80068fc:	2b05      	cmp	r3, #5
 80068fe:	d102      	bne.n	8006906 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8006900:	2303      	movs	r3, #3
 8006902:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8006904:	e0d6      	b.n	8006ab4 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8006906:	7bbb      	ldrb	r3, [r7, #14]
 8006908:	2b04      	cmp	r3, #4
 800690a:	f040 80d3 	bne.w	8006ab4 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	220b      	movs	r2, #11
 8006912:	761a      	strb	r2, [r3, #24]
      break;
 8006914:	e0ce      	b.n	8006ab4 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6899      	ldr	r1, [r3, #8]
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	899a      	ldrh	r2, [r3, #12]
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	795b      	ldrb	r3, [r3, #5]
 8006922:	2001      	movs	r0, #1
 8006924:	9000      	str	r0, [sp, #0]
 8006926:	6878      	ldr	r0, [r7, #4]
 8006928:	f000 f8ea 	bl	8006b00 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006932:	b29a      	uxth	r2, r3
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2206      	movs	r2, #6
 800693c:	761a      	strb	r2, [r3, #24]
      break;
 800693e:	e0c0      	b.n	8006ac2 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	795b      	ldrb	r3, [r3, #5]
 8006944:	4619      	mov	r1, r3
 8006946:	6878      	ldr	r0, [r7, #4]
 8006948:	f000 fc00 	bl	800714c <USBH_LL_GetURBState>
 800694c:	4603      	mov	r3, r0
 800694e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8006950:	7bbb      	ldrb	r3, [r7, #14]
 8006952:	2b01      	cmp	r3, #1
 8006954:	d103      	bne.n	800695e <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	2207      	movs	r2, #7
 800695a:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800695c:	e0ac      	b.n	8006ab8 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800695e:	7bbb      	ldrb	r3, [r7, #14]
 8006960:	2b05      	cmp	r3, #5
 8006962:	d105      	bne.n	8006970 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	220c      	movs	r2, #12
 8006968:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800696a:	2303      	movs	r3, #3
 800696c:	73fb      	strb	r3, [r7, #15]
      break;
 800696e:	e0a3      	b.n	8006ab8 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8006970:	7bbb      	ldrb	r3, [r7, #14]
 8006972:	2b02      	cmp	r3, #2
 8006974:	d103      	bne.n	800697e <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2205      	movs	r2, #5
 800697a:	761a      	strb	r2, [r3, #24]
      break;
 800697c:	e09c      	b.n	8006ab8 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800697e:	7bbb      	ldrb	r3, [r7, #14]
 8006980:	2b04      	cmp	r3, #4
 8006982:	f040 8099 	bne.w	8006ab8 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	220b      	movs	r2, #11
 800698a:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800698c:	2302      	movs	r3, #2
 800698e:	73fb      	strb	r3, [r7, #15]
      break;
 8006990:	e092      	b.n	8006ab8 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	791b      	ldrb	r3, [r3, #4]
 8006996:	2200      	movs	r2, #0
 8006998:	2100      	movs	r1, #0
 800699a:	6878      	ldr	r0, [r7, #4]
 800699c:	f000 f8d5 	bl	8006b4a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80069a6:	b29a      	uxth	r2, r3
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2208      	movs	r2, #8
 80069b0:	761a      	strb	r2, [r3, #24]

      break;
 80069b2:	e086      	b.n	8006ac2 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	791b      	ldrb	r3, [r3, #4]
 80069b8:	4619      	mov	r1, r3
 80069ba:	6878      	ldr	r0, [r7, #4]
 80069bc:	f000 fbc6 	bl	800714c <USBH_LL_GetURBState>
 80069c0:	4603      	mov	r3, r0
 80069c2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80069c4:	7bbb      	ldrb	r3, [r7, #14]
 80069c6:	2b01      	cmp	r3, #1
 80069c8:	d105      	bne.n	80069d6 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	220d      	movs	r2, #13
 80069ce:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80069d0:	2300      	movs	r3, #0
 80069d2:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80069d4:	e072      	b.n	8006abc <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 80069d6:	7bbb      	ldrb	r3, [r7, #14]
 80069d8:	2b04      	cmp	r3, #4
 80069da:	d103      	bne.n	80069e4 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	220b      	movs	r2, #11
 80069e0:	761a      	strb	r2, [r3, #24]
      break;
 80069e2:	e06b      	b.n	8006abc <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 80069e4:	7bbb      	ldrb	r3, [r7, #14]
 80069e6:	2b05      	cmp	r3, #5
 80069e8:	d168      	bne.n	8006abc <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 80069ea:	2303      	movs	r3, #3
 80069ec:	73fb      	strb	r3, [r7, #15]
      break;
 80069ee:	e065      	b.n	8006abc <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	795b      	ldrb	r3, [r3, #5]
 80069f4:	2201      	movs	r2, #1
 80069f6:	9200      	str	r2, [sp, #0]
 80069f8:	2200      	movs	r2, #0
 80069fa:	2100      	movs	r1, #0
 80069fc:	6878      	ldr	r0, [r7, #4]
 80069fe:	f000 f87f 	bl	8006b00 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006a08:	b29a      	uxth	r2, r3
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	220a      	movs	r2, #10
 8006a12:	761a      	strb	r2, [r3, #24]
      break;
 8006a14:	e055      	b.n	8006ac2 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	795b      	ldrb	r3, [r3, #5]
 8006a1a:	4619      	mov	r1, r3
 8006a1c:	6878      	ldr	r0, [r7, #4]
 8006a1e:	f000 fb95 	bl	800714c <USBH_LL_GetURBState>
 8006a22:	4603      	mov	r3, r0
 8006a24:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8006a26:	7bbb      	ldrb	r3, [r7, #14]
 8006a28:	2b01      	cmp	r3, #1
 8006a2a:	d105      	bne.n	8006a38 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	220d      	movs	r2, #13
 8006a34:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8006a36:	e043      	b.n	8006ac0 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8006a38:	7bbb      	ldrb	r3, [r7, #14]
 8006a3a:	2b02      	cmp	r3, #2
 8006a3c:	d103      	bne.n	8006a46 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2209      	movs	r2, #9
 8006a42:	761a      	strb	r2, [r3, #24]
      break;
 8006a44:	e03c      	b.n	8006ac0 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8006a46:	7bbb      	ldrb	r3, [r7, #14]
 8006a48:	2b04      	cmp	r3, #4
 8006a4a:	d139      	bne.n	8006ac0 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	220b      	movs	r2, #11
 8006a50:	761a      	strb	r2, [r3, #24]
      break;
 8006a52:	e035      	b.n	8006ac0 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	7e5b      	ldrb	r3, [r3, #25]
 8006a58:	3301      	adds	r3, #1
 8006a5a:	b2da      	uxtb	r2, r3
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	765a      	strb	r2, [r3, #25]
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	7e5b      	ldrb	r3, [r3, #25]
 8006a64:	2b02      	cmp	r3, #2
 8006a66:	d806      	bhi.n	8006a76 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2201      	movs	r2, #1
 8006a6c:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	2201      	movs	r2, #1
 8006a72:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8006a74:	e025      	b.n	8006ac2 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006a7c:	2106      	movs	r1, #6
 8006a7e:	6878      	ldr	r0, [r7, #4]
 8006a80:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2200      	movs	r2, #0
 8006a86:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	795b      	ldrb	r3, [r3, #5]
 8006a8c:	4619      	mov	r1, r3
 8006a8e:	6878      	ldr	r0, [r7, #4]
 8006a90:	f000 f90c 	bl	8006cac <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	791b      	ldrb	r3, [r3, #4]
 8006a98:	4619      	mov	r1, r3
 8006a9a:	6878      	ldr	r0, [r7, #4]
 8006a9c:	f000 f906 	bl	8006cac <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8006aa6:	2302      	movs	r3, #2
 8006aa8:	73fb      	strb	r3, [r7, #15]
      break;
 8006aaa:	e00a      	b.n	8006ac2 <USBH_HandleControl+0x2de>

    default:
      break;
 8006aac:	bf00      	nop
 8006aae:	e008      	b.n	8006ac2 <USBH_HandleControl+0x2de>
      break;
 8006ab0:	bf00      	nop
 8006ab2:	e006      	b.n	8006ac2 <USBH_HandleControl+0x2de>
      break;
 8006ab4:	bf00      	nop
 8006ab6:	e004      	b.n	8006ac2 <USBH_HandleControl+0x2de>
      break;
 8006ab8:	bf00      	nop
 8006aba:	e002      	b.n	8006ac2 <USBH_HandleControl+0x2de>
      break;
 8006abc:	bf00      	nop
 8006abe:	e000      	b.n	8006ac2 <USBH_HandleControl+0x2de>
      break;
 8006ac0:	bf00      	nop
  }

  return status;
 8006ac2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	3710      	adds	r7, #16
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	bd80      	pop	{r7, pc}

08006acc <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b088      	sub	sp, #32
 8006ad0:	af04      	add	r7, sp, #16
 8006ad2:	60f8      	str	r0, [r7, #12]
 8006ad4:	60b9      	str	r1, [r7, #8]
 8006ad6:	4613      	mov	r3, r2
 8006ad8:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8006ada:	79f9      	ldrb	r1, [r7, #7]
 8006adc:	2300      	movs	r3, #0
 8006ade:	9303      	str	r3, [sp, #12]
 8006ae0:	2308      	movs	r3, #8
 8006ae2:	9302      	str	r3, [sp, #8]
 8006ae4:	68bb      	ldr	r3, [r7, #8]
 8006ae6:	9301      	str	r3, [sp, #4]
 8006ae8:	2300      	movs	r3, #0
 8006aea:	9300      	str	r3, [sp, #0]
 8006aec:	2300      	movs	r3, #0
 8006aee:	2200      	movs	r2, #0
 8006af0:	68f8      	ldr	r0, [r7, #12]
 8006af2:	f000 fafa 	bl	80070ea <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8006af6:	2300      	movs	r3, #0
}
 8006af8:	4618      	mov	r0, r3
 8006afa:	3710      	adds	r7, #16
 8006afc:	46bd      	mov	sp, r7
 8006afe:	bd80      	pop	{r7, pc}

08006b00 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b088      	sub	sp, #32
 8006b04:	af04      	add	r7, sp, #16
 8006b06:	60f8      	str	r0, [r7, #12]
 8006b08:	60b9      	str	r1, [r7, #8]
 8006b0a:	4611      	mov	r1, r2
 8006b0c:	461a      	mov	r2, r3
 8006b0e:	460b      	mov	r3, r1
 8006b10:	80fb      	strh	r3, [r7, #6]
 8006b12:	4613      	mov	r3, r2
 8006b14:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d001      	beq.n	8006b24 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8006b20:	2300      	movs	r3, #0
 8006b22:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8006b24:	7979      	ldrb	r1, [r7, #5]
 8006b26:	7e3b      	ldrb	r3, [r7, #24]
 8006b28:	9303      	str	r3, [sp, #12]
 8006b2a:	88fb      	ldrh	r3, [r7, #6]
 8006b2c:	9302      	str	r3, [sp, #8]
 8006b2e:	68bb      	ldr	r3, [r7, #8]
 8006b30:	9301      	str	r3, [sp, #4]
 8006b32:	2301      	movs	r3, #1
 8006b34:	9300      	str	r3, [sp, #0]
 8006b36:	2300      	movs	r3, #0
 8006b38:	2200      	movs	r2, #0
 8006b3a:	68f8      	ldr	r0, [r7, #12]
 8006b3c:	f000 fad5 	bl	80070ea <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8006b40:	2300      	movs	r3, #0
}
 8006b42:	4618      	mov	r0, r3
 8006b44:	3710      	adds	r7, #16
 8006b46:	46bd      	mov	sp, r7
 8006b48:	bd80      	pop	{r7, pc}

08006b4a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8006b4a:	b580      	push	{r7, lr}
 8006b4c:	b088      	sub	sp, #32
 8006b4e:	af04      	add	r7, sp, #16
 8006b50:	60f8      	str	r0, [r7, #12]
 8006b52:	60b9      	str	r1, [r7, #8]
 8006b54:	4611      	mov	r1, r2
 8006b56:	461a      	mov	r2, r3
 8006b58:	460b      	mov	r3, r1
 8006b5a:	80fb      	strh	r3, [r7, #6]
 8006b5c:	4613      	mov	r3, r2
 8006b5e:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8006b60:	7979      	ldrb	r1, [r7, #5]
 8006b62:	2300      	movs	r3, #0
 8006b64:	9303      	str	r3, [sp, #12]
 8006b66:	88fb      	ldrh	r3, [r7, #6]
 8006b68:	9302      	str	r3, [sp, #8]
 8006b6a:	68bb      	ldr	r3, [r7, #8]
 8006b6c:	9301      	str	r3, [sp, #4]
 8006b6e:	2301      	movs	r3, #1
 8006b70:	9300      	str	r3, [sp, #0]
 8006b72:	2300      	movs	r3, #0
 8006b74:	2201      	movs	r2, #1
 8006b76:	68f8      	ldr	r0, [r7, #12]
 8006b78:	f000 fab7 	bl	80070ea <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8006b7c:	2300      	movs	r3, #0

}
 8006b7e:	4618      	mov	r0, r3
 8006b80:	3710      	adds	r7, #16
 8006b82:	46bd      	mov	sp, r7
 8006b84:	bd80      	pop	{r7, pc}

08006b86 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8006b86:	b580      	push	{r7, lr}
 8006b88:	b088      	sub	sp, #32
 8006b8a:	af04      	add	r7, sp, #16
 8006b8c:	60f8      	str	r0, [r7, #12]
 8006b8e:	60b9      	str	r1, [r7, #8]
 8006b90:	4611      	mov	r1, r2
 8006b92:	461a      	mov	r2, r3
 8006b94:	460b      	mov	r3, r1
 8006b96:	80fb      	strh	r3, [r7, #6]
 8006b98:	4613      	mov	r3, r2
 8006b9a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d001      	beq.n	8006baa <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8006baa:	7979      	ldrb	r1, [r7, #5]
 8006bac:	7e3b      	ldrb	r3, [r7, #24]
 8006bae:	9303      	str	r3, [sp, #12]
 8006bb0:	88fb      	ldrh	r3, [r7, #6]
 8006bb2:	9302      	str	r3, [sp, #8]
 8006bb4:	68bb      	ldr	r3, [r7, #8]
 8006bb6:	9301      	str	r3, [sp, #4]
 8006bb8:	2301      	movs	r3, #1
 8006bba:	9300      	str	r3, [sp, #0]
 8006bbc:	2302      	movs	r3, #2
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	68f8      	ldr	r0, [r7, #12]
 8006bc2:	f000 fa92 	bl	80070ea <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8006bc6:	2300      	movs	r3, #0
}
 8006bc8:	4618      	mov	r0, r3
 8006bca:	3710      	adds	r7, #16
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	bd80      	pop	{r7, pc}

08006bd0 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b088      	sub	sp, #32
 8006bd4:	af04      	add	r7, sp, #16
 8006bd6:	60f8      	str	r0, [r7, #12]
 8006bd8:	60b9      	str	r1, [r7, #8]
 8006bda:	4611      	mov	r1, r2
 8006bdc:	461a      	mov	r2, r3
 8006bde:	460b      	mov	r3, r1
 8006be0:	80fb      	strh	r3, [r7, #6]
 8006be2:	4613      	mov	r3, r2
 8006be4:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8006be6:	7979      	ldrb	r1, [r7, #5]
 8006be8:	2300      	movs	r3, #0
 8006bea:	9303      	str	r3, [sp, #12]
 8006bec:	88fb      	ldrh	r3, [r7, #6]
 8006bee:	9302      	str	r3, [sp, #8]
 8006bf0:	68bb      	ldr	r3, [r7, #8]
 8006bf2:	9301      	str	r3, [sp, #4]
 8006bf4:	2301      	movs	r3, #1
 8006bf6:	9300      	str	r3, [sp, #0]
 8006bf8:	2302      	movs	r3, #2
 8006bfa:	2201      	movs	r2, #1
 8006bfc:	68f8      	ldr	r0, [r7, #12]
 8006bfe:	f000 fa74 	bl	80070ea <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8006c02:	2300      	movs	r3, #0
}
 8006c04:	4618      	mov	r0, r3
 8006c06:	3710      	adds	r7, #16
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	bd80      	pop	{r7, pc}

08006c0c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b086      	sub	sp, #24
 8006c10:	af04      	add	r7, sp, #16
 8006c12:	6078      	str	r0, [r7, #4]
 8006c14:	4608      	mov	r0, r1
 8006c16:	4611      	mov	r1, r2
 8006c18:	461a      	mov	r2, r3
 8006c1a:	4603      	mov	r3, r0
 8006c1c:	70fb      	strb	r3, [r7, #3]
 8006c1e:	460b      	mov	r3, r1
 8006c20:	70bb      	strb	r3, [r7, #2]
 8006c22:	4613      	mov	r3, r2
 8006c24:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8006c26:	7878      	ldrb	r0, [r7, #1]
 8006c28:	78ba      	ldrb	r2, [r7, #2]
 8006c2a:	78f9      	ldrb	r1, [r7, #3]
 8006c2c:	8b3b      	ldrh	r3, [r7, #24]
 8006c2e:	9302      	str	r3, [sp, #8]
 8006c30:	7d3b      	ldrb	r3, [r7, #20]
 8006c32:	9301      	str	r3, [sp, #4]
 8006c34:	7c3b      	ldrb	r3, [r7, #16]
 8006c36:	9300      	str	r3, [sp, #0]
 8006c38:	4603      	mov	r3, r0
 8006c3a:	6878      	ldr	r0, [r7, #4]
 8006c3c:	f000 fa07 	bl	800704e <USBH_LL_OpenPipe>

  return USBH_OK;
 8006c40:	2300      	movs	r3, #0
}
 8006c42:	4618      	mov	r0, r3
 8006c44:	3708      	adds	r7, #8
 8006c46:	46bd      	mov	sp, r7
 8006c48:	bd80      	pop	{r7, pc}

08006c4a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8006c4a:	b580      	push	{r7, lr}
 8006c4c:	b082      	sub	sp, #8
 8006c4e:	af00      	add	r7, sp, #0
 8006c50:	6078      	str	r0, [r7, #4]
 8006c52:	460b      	mov	r3, r1
 8006c54:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8006c56:	78fb      	ldrb	r3, [r7, #3]
 8006c58:	4619      	mov	r1, r3
 8006c5a:	6878      	ldr	r0, [r7, #4]
 8006c5c:	f000 fa26 	bl	80070ac <USBH_LL_ClosePipe>

  return USBH_OK;
 8006c60:	2300      	movs	r3, #0
}
 8006c62:	4618      	mov	r0, r3
 8006c64:	3708      	adds	r7, #8
 8006c66:	46bd      	mov	sp, r7
 8006c68:	bd80      	pop	{r7, pc}

08006c6a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8006c6a:	b580      	push	{r7, lr}
 8006c6c:	b084      	sub	sp, #16
 8006c6e:	af00      	add	r7, sp, #0
 8006c70:	6078      	str	r0, [r7, #4]
 8006c72:	460b      	mov	r3, r1
 8006c74:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8006c76:	6878      	ldr	r0, [r7, #4]
 8006c78:	f000 f836 	bl	8006ce8 <USBH_GetFreePipe>
 8006c7c:	4603      	mov	r3, r0
 8006c7e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8006c80:	89fb      	ldrh	r3, [r7, #14]
 8006c82:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d00a      	beq.n	8006ca0 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8006c8a:	78fa      	ldrb	r2, [r7, #3]
 8006c8c:	89fb      	ldrh	r3, [r7, #14]
 8006c8e:	f003 030f 	and.w	r3, r3, #15
 8006c92:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006c96:	6879      	ldr	r1, [r7, #4]
 8006c98:	33e0      	adds	r3, #224	; 0xe0
 8006c9a:	009b      	lsls	r3, r3, #2
 8006c9c:	440b      	add	r3, r1
 8006c9e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8006ca0:	89fb      	ldrh	r3, [r7, #14]
 8006ca2:	b2db      	uxtb	r3, r3
}
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	3710      	adds	r7, #16
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	bd80      	pop	{r7, pc}

08006cac <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8006cac:	b480      	push	{r7}
 8006cae:	b083      	sub	sp, #12
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
 8006cb4:	460b      	mov	r3, r1
 8006cb6:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8006cb8:	78fb      	ldrb	r3, [r7, #3]
 8006cba:	2b0f      	cmp	r3, #15
 8006cbc:	d80d      	bhi.n	8006cda <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8006cbe:	78fb      	ldrb	r3, [r7, #3]
 8006cc0:	687a      	ldr	r2, [r7, #4]
 8006cc2:	33e0      	adds	r3, #224	; 0xe0
 8006cc4:	009b      	lsls	r3, r3, #2
 8006cc6:	4413      	add	r3, r2
 8006cc8:	685a      	ldr	r2, [r3, #4]
 8006cca:	78fb      	ldrb	r3, [r7, #3]
 8006ccc:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8006cd0:	6879      	ldr	r1, [r7, #4]
 8006cd2:	33e0      	adds	r3, #224	; 0xe0
 8006cd4:	009b      	lsls	r3, r3, #2
 8006cd6:	440b      	add	r3, r1
 8006cd8:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8006cda:	2300      	movs	r3, #0
}
 8006cdc:	4618      	mov	r0, r3
 8006cde:	370c      	adds	r7, #12
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce6:	4770      	bx	lr

08006ce8 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8006ce8:	b480      	push	{r7}
 8006cea:	b085      	sub	sp, #20
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	73fb      	strb	r3, [r7, #15]
 8006cf8:	e00f      	b.n	8006d1a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8006cfa:	7bfb      	ldrb	r3, [r7, #15]
 8006cfc:	687a      	ldr	r2, [r7, #4]
 8006cfe:	33e0      	adds	r3, #224	; 0xe0
 8006d00:	009b      	lsls	r3, r3, #2
 8006d02:	4413      	add	r3, r2
 8006d04:	685b      	ldr	r3, [r3, #4]
 8006d06:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d102      	bne.n	8006d14 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8006d0e:	7bfb      	ldrb	r3, [r7, #15]
 8006d10:	b29b      	uxth	r3, r3
 8006d12:	e007      	b.n	8006d24 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8006d14:	7bfb      	ldrb	r3, [r7, #15]
 8006d16:	3301      	adds	r3, #1
 8006d18:	73fb      	strb	r3, [r7, #15]
 8006d1a:	7bfb      	ldrb	r3, [r7, #15]
 8006d1c:	2b0f      	cmp	r3, #15
 8006d1e:	d9ec      	bls.n	8006cfa <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8006d20:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8006d24:	4618      	mov	r0, r3
 8006d26:	3714      	adds	r7, #20
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2e:	4770      	bx	lr

08006d30 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8006d34:	2201      	movs	r2, #1
 8006d36:	490e      	ldr	r1, [pc, #56]	; (8006d70 <MX_USB_HOST_Init+0x40>)
 8006d38:	480e      	ldr	r0, [pc, #56]	; (8006d74 <MX_USB_HOST_Init+0x44>)
 8006d3a:	f7ff fb37 	bl	80063ac <USBH_Init>
 8006d3e:	4603      	mov	r3, r0
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d001      	beq.n	8006d48 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8006d44:	f7f9 fe36 	bl	80009b4 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8006d48:	490b      	ldr	r1, [pc, #44]	; (8006d78 <MX_USB_HOST_Init+0x48>)
 8006d4a:	480a      	ldr	r0, [pc, #40]	; (8006d74 <MX_USB_HOST_Init+0x44>)
 8006d4c:	f7ff fbbc 	bl	80064c8 <USBH_RegisterClass>
 8006d50:	4603      	mov	r3, r0
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d001      	beq.n	8006d5a <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8006d56:	f7f9 fe2d 	bl	80009b4 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8006d5a:	4806      	ldr	r0, [pc, #24]	; (8006d74 <MX_USB_HOST_Init+0x44>)
 8006d5c:	f7ff fc40 	bl	80065e0 <USBH_Start>
 8006d60:	4603      	mov	r3, r0
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d001      	beq.n	8006d6a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8006d66:	f7f9 fe25 	bl	80009b4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8006d6a:	bf00      	nop
 8006d6c:	bd80      	pop	{r7, pc}
 8006d6e:	bf00      	nop
 8006d70:	08006d7d 	.word	0x08006d7d
 8006d74:	200001e0 	.word	0x200001e0
 8006d78:	2000000c 	.word	0x2000000c

08006d7c <USBH_UserProcess>:
}
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8006d7c:	b480      	push	{r7}
 8006d7e:	b083      	sub	sp, #12
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
 8006d84:	460b      	mov	r3, r1
 8006d86:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8006d88:	78fb      	ldrb	r3, [r7, #3]
 8006d8a:	3b01      	subs	r3, #1
 8006d8c:	2b04      	cmp	r3, #4
 8006d8e:	d819      	bhi.n	8006dc4 <USBH_UserProcess+0x48>
 8006d90:	a201      	add	r2, pc, #4	; (adr r2, 8006d98 <USBH_UserProcess+0x1c>)
 8006d92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d96:	bf00      	nop
 8006d98:	08006dc5 	.word	0x08006dc5
 8006d9c:	08006db5 	.word	0x08006db5
 8006da0:	08006dc5 	.word	0x08006dc5
 8006da4:	08006dbd 	.word	0x08006dbd
 8006da8:	08006dad 	.word	0x08006dad
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8006dac:	4b09      	ldr	r3, [pc, #36]	; (8006dd4 <USBH_UserProcess+0x58>)
 8006dae:	2203      	movs	r2, #3
 8006db0:	701a      	strb	r2, [r3, #0]
  break;
 8006db2:	e008      	b.n	8006dc6 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8006db4:	4b07      	ldr	r3, [pc, #28]	; (8006dd4 <USBH_UserProcess+0x58>)
 8006db6:	2202      	movs	r2, #2
 8006db8:	701a      	strb	r2, [r3, #0]
  break;
 8006dba:	e004      	b.n	8006dc6 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8006dbc:	4b05      	ldr	r3, [pc, #20]	; (8006dd4 <USBH_UserProcess+0x58>)
 8006dbe:	2201      	movs	r2, #1
 8006dc0:	701a      	strb	r2, [r3, #0]
  break;
 8006dc2:	e000      	b.n	8006dc6 <USBH_UserProcess+0x4a>

  default:
  break;
 8006dc4:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8006dc6:	bf00      	nop
 8006dc8:	370c      	adds	r7, #12
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd0:	4770      	bx	lr
 8006dd2:	bf00      	nop
 8006dd4:	200005b8 	.word	0x200005b8

08006dd8 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b08a      	sub	sp, #40	; 0x28
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006de0:	f107 0314 	add.w	r3, r7, #20
 8006de4:	2200      	movs	r2, #0
 8006de6:	601a      	str	r2, [r3, #0]
 8006de8:	605a      	str	r2, [r3, #4]
 8006dea:	609a      	str	r2, [r3, #8]
 8006dec:	60da      	str	r2, [r3, #12]
 8006dee:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006df8:	d147      	bne.n	8006e8a <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	613b      	str	r3, [r7, #16]
 8006dfe:	4b25      	ldr	r3, [pc, #148]	; (8006e94 <HAL_HCD_MspInit+0xbc>)
 8006e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e02:	4a24      	ldr	r2, [pc, #144]	; (8006e94 <HAL_HCD_MspInit+0xbc>)
 8006e04:	f043 0301 	orr.w	r3, r3, #1
 8006e08:	6313      	str	r3, [r2, #48]	; 0x30
 8006e0a:	4b22      	ldr	r3, [pc, #136]	; (8006e94 <HAL_HCD_MspInit+0xbc>)
 8006e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e0e:	f003 0301 	and.w	r3, r3, #1
 8006e12:	613b      	str	r3, [r7, #16]
 8006e14:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8006e16:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006e1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e20:	2300      	movs	r3, #0
 8006e22:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8006e24:	f107 0314 	add.w	r3, r7, #20
 8006e28:	4619      	mov	r1, r3
 8006e2a:	481b      	ldr	r0, [pc, #108]	; (8006e98 <HAL_HCD_MspInit+0xc0>)
 8006e2c:	f7fa fd92 	bl	8001954 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8006e30:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8006e34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006e36:	2302      	movs	r3, #2
 8006e38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006e3e:	2300      	movs	r3, #0
 8006e40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006e42:	230a      	movs	r3, #10
 8006e44:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006e46:	f107 0314 	add.w	r3, r7, #20
 8006e4a:	4619      	mov	r1, r3
 8006e4c:	4812      	ldr	r0, [pc, #72]	; (8006e98 <HAL_HCD_MspInit+0xc0>)
 8006e4e:	f7fa fd81 	bl	8001954 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006e52:	4b10      	ldr	r3, [pc, #64]	; (8006e94 <HAL_HCD_MspInit+0xbc>)
 8006e54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e56:	4a0f      	ldr	r2, [pc, #60]	; (8006e94 <HAL_HCD_MspInit+0xbc>)
 8006e58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e5c:	6353      	str	r3, [r2, #52]	; 0x34
 8006e5e:	2300      	movs	r3, #0
 8006e60:	60fb      	str	r3, [r7, #12]
 8006e62:	4b0c      	ldr	r3, [pc, #48]	; (8006e94 <HAL_HCD_MspInit+0xbc>)
 8006e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e66:	4a0b      	ldr	r2, [pc, #44]	; (8006e94 <HAL_HCD_MspInit+0xbc>)
 8006e68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006e6c:	6453      	str	r3, [r2, #68]	; 0x44
 8006e6e:	4b09      	ldr	r3, [pc, #36]	; (8006e94 <HAL_HCD_MspInit+0xbc>)
 8006e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006e76:	60fb      	str	r3, [r7, #12]
 8006e78:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	2100      	movs	r1, #0
 8006e7e:	2043      	movs	r0, #67	; 0x43
 8006e80:	f7fa fd31 	bl	80018e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006e84:	2043      	movs	r0, #67	; 0x43
 8006e86:	f7fa fd4a 	bl	800191e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006e8a:	bf00      	nop
 8006e8c:	3728      	adds	r7, #40	; 0x28
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	bd80      	pop	{r7, pc}
 8006e92:	bf00      	nop
 8006e94:	40023800 	.word	0x40023800
 8006e98:	40020000 	.word	0x40020000

08006e9c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b082      	sub	sp, #8
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8006eaa:	4618      	mov	r0, r3
 8006eac:	f7ff fbb7 	bl	800661e <USBH_LL_IncTimer>
}
 8006eb0:	bf00      	nop
 8006eb2:	3708      	adds	r7, #8
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	bd80      	pop	{r7, pc}

08006eb8 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b082      	sub	sp, #8
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	f7ff fbef 	bl	80066aa <USBH_LL_Connect>
}
 8006ecc:	bf00      	nop
 8006ece:	3708      	adds	r7, #8
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	bd80      	pop	{r7, pc}

08006ed4 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b082      	sub	sp, #8
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	f7ff fbf8 	bl	80066d8 <USBH_LL_Disconnect>
}
 8006ee8:	bf00      	nop
 8006eea:	3708      	adds	r7, #8
 8006eec:	46bd      	mov	sp, r7
 8006eee:	bd80      	pop	{r7, pc}

08006ef0 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8006ef0:	b480      	push	{r7}
 8006ef2:	b083      	sub	sp, #12
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
 8006ef8:	460b      	mov	r3, r1
 8006efa:	70fb      	strb	r3, [r7, #3]
 8006efc:	4613      	mov	r3, r2
 8006efe:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8006f00:	bf00      	nop
 8006f02:	370c      	adds	r7, #12
 8006f04:	46bd      	mov	sp, r7
 8006f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0a:	4770      	bx	lr

08006f0c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b082      	sub	sp, #8
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	f7ff fba9 	bl	8006672 <USBH_LL_PortEnabled>
}
 8006f20:	bf00      	nop
 8006f22:	3708      	adds	r7, #8
 8006f24:	46bd      	mov	sp, r7
 8006f26:	bd80      	pop	{r7, pc}

08006f28 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b082      	sub	sp, #8
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8006f36:	4618      	mov	r0, r3
 8006f38:	f7ff fba9 	bl	800668e <USBH_LL_PortDisabled>
}
 8006f3c:	bf00      	nop
 8006f3e:	3708      	adds	r7, #8
 8006f40:	46bd      	mov	sp, r7
 8006f42:	bd80      	pop	{r7, pc}

08006f44 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b082      	sub	sp, #8
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8006f52:	2b01      	cmp	r3, #1
 8006f54:	d12a      	bne.n	8006fac <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8006f56:	4a18      	ldr	r2, [pc, #96]	; (8006fb8 <USBH_LL_Init+0x74>)
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	4a15      	ldr	r2, [pc, #84]	; (8006fb8 <USBH_LL_Init+0x74>)
 8006f62:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006f66:	4b14      	ldr	r3, [pc, #80]	; (8006fb8 <USBH_LL_Init+0x74>)
 8006f68:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8006f6c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8006f6e:	4b12      	ldr	r3, [pc, #72]	; (8006fb8 <USBH_LL_Init+0x74>)
 8006f70:	2208      	movs	r2, #8
 8006f72:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8006f74:	4b10      	ldr	r3, [pc, #64]	; (8006fb8 <USBH_LL_Init+0x74>)
 8006f76:	2201      	movs	r2, #1
 8006f78:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8006f7a:	4b0f      	ldr	r3, [pc, #60]	; (8006fb8 <USBH_LL_Init+0x74>)
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8006f80:	4b0d      	ldr	r3, [pc, #52]	; (8006fb8 <USBH_LL_Init+0x74>)
 8006f82:	2202      	movs	r2, #2
 8006f84:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8006f86:	4b0c      	ldr	r3, [pc, #48]	; (8006fb8 <USBH_LL_Init+0x74>)
 8006f88:	2200      	movs	r2, #0
 8006f8a:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8006f8c:	480a      	ldr	r0, [pc, #40]	; (8006fb8 <USBH_LL_Init+0x74>)
 8006f8e:	f7fa fe96 	bl	8001cbe <HAL_HCD_Init>
 8006f92:	4603      	mov	r3, r0
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d001      	beq.n	8006f9c <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8006f98:	f7f9 fd0c 	bl	80009b4 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8006f9c:	4806      	ldr	r0, [pc, #24]	; (8006fb8 <USBH_LL_Init+0x74>)
 8006f9e:	f7fb fa6c 	bl	800247a <HAL_HCD_GetCurrentFrame>
 8006fa2:	4603      	mov	r3, r0
 8006fa4:	4619      	mov	r1, r3
 8006fa6:	6878      	ldr	r0, [r7, #4]
 8006fa8:	f7ff fb2a 	bl	8006600 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8006fac:	2300      	movs	r3, #0
}
 8006fae:	4618      	mov	r0, r3
 8006fb0:	3708      	adds	r7, #8
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	bd80      	pop	{r7, pc}
 8006fb6:	bf00      	nop
 8006fb8:	200005bc 	.word	0x200005bc

08006fbc <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b084      	sub	sp, #16
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006fc8:	2300      	movs	r3, #0
 8006fca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	f7fb f9e9 	bl	80023aa <HAL_HCD_Start>
 8006fd8:	4603      	mov	r3, r0
 8006fda:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8006fdc:	7bfb      	ldrb	r3, [r7, #15]
 8006fde:	4618      	mov	r0, r3
 8006fe0:	f000 f90e 	bl	8007200 <USBH_Get_USB_Status>
 8006fe4:	4603      	mov	r3, r0
 8006fe6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006fe8:	7bbb      	ldrb	r3, [r7, #14]
}
 8006fea:	4618      	mov	r0, r3
 8006fec:	3710      	adds	r7, #16
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	bd80      	pop	{r7, pc}

08006ff2 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8006ff2:	b580      	push	{r7, lr}
 8006ff4:	b084      	sub	sp, #16
 8006ff6:	af00      	add	r7, sp, #0
 8006ff8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006ffe:	2300      	movs	r3, #0
 8007000:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007008:	4618      	mov	r0, r3
 800700a:	f7fb f9f1 	bl	80023f0 <HAL_HCD_Stop>
 800700e:	4603      	mov	r3, r0
 8007010:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007012:	7bfb      	ldrb	r3, [r7, #15]
 8007014:	4618      	mov	r0, r3
 8007016:	f000 f8f3 	bl	8007200 <USBH_Get_USB_Status>
 800701a:	4603      	mov	r3, r0
 800701c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800701e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007020:	4618      	mov	r0, r3
 8007022:	3710      	adds	r7, #16
 8007024:	46bd      	mov	sp, r7
 8007026:	bd80      	pop	{r7, pc}

08007028 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b082      	sub	sp, #8
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
 8007030:	460b      	mov	r3, r1
 8007032:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800703a:	78fa      	ldrb	r2, [r7, #3]
 800703c:	4611      	mov	r1, r2
 800703e:	4618      	mov	r0, r3
 8007040:	f7fb fa07 	bl	8002452 <HAL_HCD_HC_GetXferCount>
 8007044:	4603      	mov	r3, r0
}
 8007046:	4618      	mov	r0, r3
 8007048:	3708      	adds	r7, #8
 800704a:	46bd      	mov	sp, r7
 800704c:	bd80      	pop	{r7, pc}

0800704e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800704e:	b590      	push	{r4, r7, lr}
 8007050:	b089      	sub	sp, #36	; 0x24
 8007052:	af04      	add	r7, sp, #16
 8007054:	6078      	str	r0, [r7, #4]
 8007056:	4608      	mov	r0, r1
 8007058:	4611      	mov	r1, r2
 800705a:	461a      	mov	r2, r3
 800705c:	4603      	mov	r3, r0
 800705e:	70fb      	strb	r3, [r7, #3]
 8007060:	460b      	mov	r3, r1
 8007062:	70bb      	strb	r3, [r7, #2]
 8007064:	4613      	mov	r3, r2
 8007066:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007068:	2300      	movs	r3, #0
 800706a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800706c:	2300      	movs	r3, #0
 800706e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8007076:	787c      	ldrb	r4, [r7, #1]
 8007078:	78ba      	ldrb	r2, [r7, #2]
 800707a:	78f9      	ldrb	r1, [r7, #3]
 800707c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800707e:	9302      	str	r3, [sp, #8]
 8007080:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007084:	9301      	str	r3, [sp, #4]
 8007086:	f897 3020 	ldrb.w	r3, [r7, #32]
 800708a:	9300      	str	r3, [sp, #0]
 800708c:	4623      	mov	r3, r4
 800708e:	f7fa fe78 	bl	8001d82 <HAL_HCD_HC_Init>
 8007092:	4603      	mov	r3, r0
 8007094:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8007096:	7bfb      	ldrb	r3, [r7, #15]
 8007098:	4618      	mov	r0, r3
 800709a:	f000 f8b1 	bl	8007200 <USBH_Get_USB_Status>
 800709e:	4603      	mov	r3, r0
 80070a0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80070a2:	7bbb      	ldrb	r3, [r7, #14]
}
 80070a4:	4618      	mov	r0, r3
 80070a6:	3714      	adds	r7, #20
 80070a8:	46bd      	mov	sp, r7
 80070aa:	bd90      	pop	{r4, r7, pc}

080070ac <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b084      	sub	sp, #16
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
 80070b4:	460b      	mov	r3, r1
 80070b6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80070b8:	2300      	movs	r3, #0
 80070ba:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80070bc:	2300      	movs	r3, #0
 80070be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80070c6:	78fa      	ldrb	r2, [r7, #3]
 80070c8:	4611      	mov	r1, r2
 80070ca:	4618      	mov	r0, r3
 80070cc:	f7fa fee8 	bl	8001ea0 <HAL_HCD_HC_Halt>
 80070d0:	4603      	mov	r3, r0
 80070d2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80070d4:	7bfb      	ldrb	r3, [r7, #15]
 80070d6:	4618      	mov	r0, r3
 80070d8:	f000 f892 	bl	8007200 <USBH_Get_USB_Status>
 80070dc:	4603      	mov	r3, r0
 80070de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80070e0:	7bbb      	ldrb	r3, [r7, #14]
}
 80070e2:	4618      	mov	r0, r3
 80070e4:	3710      	adds	r7, #16
 80070e6:	46bd      	mov	sp, r7
 80070e8:	bd80      	pop	{r7, pc}

080070ea <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80070ea:	b590      	push	{r4, r7, lr}
 80070ec:	b089      	sub	sp, #36	; 0x24
 80070ee:	af04      	add	r7, sp, #16
 80070f0:	6078      	str	r0, [r7, #4]
 80070f2:	4608      	mov	r0, r1
 80070f4:	4611      	mov	r1, r2
 80070f6:	461a      	mov	r2, r3
 80070f8:	4603      	mov	r3, r0
 80070fa:	70fb      	strb	r3, [r7, #3]
 80070fc:	460b      	mov	r3, r1
 80070fe:	70bb      	strb	r3, [r7, #2]
 8007100:	4613      	mov	r3, r2
 8007102:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007104:	2300      	movs	r3, #0
 8007106:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007108:	2300      	movs	r3, #0
 800710a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8007112:	787c      	ldrb	r4, [r7, #1]
 8007114:	78ba      	ldrb	r2, [r7, #2]
 8007116:	78f9      	ldrb	r1, [r7, #3]
 8007118:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800711c:	9303      	str	r3, [sp, #12]
 800711e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007120:	9302      	str	r3, [sp, #8]
 8007122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007124:	9301      	str	r3, [sp, #4]
 8007126:	f897 3020 	ldrb.w	r3, [r7, #32]
 800712a:	9300      	str	r3, [sp, #0]
 800712c:	4623      	mov	r3, r4
 800712e:	f7fa fedb 	bl	8001ee8 <HAL_HCD_HC_SubmitRequest>
 8007132:	4603      	mov	r3, r0
 8007134:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8007136:	7bfb      	ldrb	r3, [r7, #15]
 8007138:	4618      	mov	r0, r3
 800713a:	f000 f861 	bl	8007200 <USBH_Get_USB_Status>
 800713e:	4603      	mov	r3, r0
 8007140:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007142:	7bbb      	ldrb	r3, [r7, #14]
}
 8007144:	4618      	mov	r0, r3
 8007146:	3714      	adds	r7, #20
 8007148:	46bd      	mov	sp, r7
 800714a:	bd90      	pop	{r4, r7, pc}

0800714c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b082      	sub	sp, #8
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
 8007154:	460b      	mov	r3, r1
 8007156:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800715e:	78fa      	ldrb	r2, [r7, #3]
 8007160:	4611      	mov	r1, r2
 8007162:	4618      	mov	r0, r3
 8007164:	f7fb f961 	bl	800242a <HAL_HCD_HC_GetURBState>
 8007168:	4603      	mov	r3, r0
}
 800716a:	4618      	mov	r0, r3
 800716c:	3708      	adds	r7, #8
 800716e:	46bd      	mov	sp, r7
 8007170:	bd80      	pop	{r7, pc}

08007172 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8007172:	b580      	push	{r7, lr}
 8007174:	b082      	sub	sp, #8
 8007176:	af00      	add	r7, sp, #0
 8007178:	6078      	str	r0, [r7, #4]
 800717a:	460b      	mov	r3, r1
 800717c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8007184:	2b01      	cmp	r3, #1
 8007186:	d103      	bne.n	8007190 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8007188:	78fb      	ldrb	r3, [r7, #3]
 800718a:	4618      	mov	r0, r3
 800718c:	f000 f864 	bl	8007258 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8007190:	20c8      	movs	r0, #200	; 0xc8
 8007192:	f7f9 fea9 	bl	8000ee8 <HAL_Delay>
  return USBH_OK;
 8007196:	2300      	movs	r3, #0
}
 8007198:	4618      	mov	r0, r3
 800719a:	3708      	adds	r7, #8
 800719c:	46bd      	mov	sp, r7
 800719e:	bd80      	pop	{r7, pc}

080071a0 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80071a0:	b480      	push	{r7}
 80071a2:	b085      	sub	sp, #20
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
 80071a8:	460b      	mov	r3, r1
 80071aa:	70fb      	strb	r3, [r7, #3]
 80071ac:	4613      	mov	r3, r2
 80071ae:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80071b6:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80071b8:	78fb      	ldrb	r3, [r7, #3]
 80071ba:	68fa      	ldr	r2, [r7, #12]
 80071bc:	212c      	movs	r1, #44	; 0x2c
 80071be:	fb01 f303 	mul.w	r3, r1, r3
 80071c2:	4413      	add	r3, r2
 80071c4:	333b      	adds	r3, #59	; 0x3b
 80071c6:	781b      	ldrb	r3, [r3, #0]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d009      	beq.n	80071e0 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80071cc:	78fb      	ldrb	r3, [r7, #3]
 80071ce:	68fa      	ldr	r2, [r7, #12]
 80071d0:	212c      	movs	r1, #44	; 0x2c
 80071d2:	fb01 f303 	mul.w	r3, r1, r3
 80071d6:	4413      	add	r3, r2
 80071d8:	3354      	adds	r3, #84	; 0x54
 80071da:	78ba      	ldrb	r2, [r7, #2]
 80071dc:	701a      	strb	r2, [r3, #0]
 80071de:	e008      	b.n	80071f2 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80071e0:	78fb      	ldrb	r3, [r7, #3]
 80071e2:	68fa      	ldr	r2, [r7, #12]
 80071e4:	212c      	movs	r1, #44	; 0x2c
 80071e6:	fb01 f303 	mul.w	r3, r1, r3
 80071ea:	4413      	add	r3, r2
 80071ec:	3355      	adds	r3, #85	; 0x55
 80071ee:	78ba      	ldrb	r2, [r7, #2]
 80071f0:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80071f2:	2300      	movs	r3, #0
}
 80071f4:	4618      	mov	r0, r3
 80071f6:	3714      	adds	r7, #20
 80071f8:	46bd      	mov	sp, r7
 80071fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fe:	4770      	bx	lr

08007200 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007200:	b480      	push	{r7}
 8007202:	b085      	sub	sp, #20
 8007204:	af00      	add	r7, sp, #0
 8007206:	4603      	mov	r3, r0
 8007208:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800720a:	2300      	movs	r3, #0
 800720c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800720e:	79fb      	ldrb	r3, [r7, #7]
 8007210:	2b03      	cmp	r3, #3
 8007212:	d817      	bhi.n	8007244 <USBH_Get_USB_Status+0x44>
 8007214:	a201      	add	r2, pc, #4	; (adr r2, 800721c <USBH_Get_USB_Status+0x1c>)
 8007216:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800721a:	bf00      	nop
 800721c:	0800722d 	.word	0x0800722d
 8007220:	08007233 	.word	0x08007233
 8007224:	08007239 	.word	0x08007239
 8007228:	0800723f 	.word	0x0800723f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800722c:	2300      	movs	r3, #0
 800722e:	73fb      	strb	r3, [r7, #15]
    break;
 8007230:	e00b      	b.n	800724a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8007232:	2302      	movs	r3, #2
 8007234:	73fb      	strb	r3, [r7, #15]
    break;
 8007236:	e008      	b.n	800724a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8007238:	2301      	movs	r3, #1
 800723a:	73fb      	strb	r3, [r7, #15]
    break;
 800723c:	e005      	b.n	800724a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800723e:	2302      	movs	r3, #2
 8007240:	73fb      	strb	r3, [r7, #15]
    break;
 8007242:	e002      	b.n	800724a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8007244:	2302      	movs	r3, #2
 8007246:	73fb      	strb	r3, [r7, #15]
    break;
 8007248:	bf00      	nop
  }
  return usb_status;
 800724a:	7bfb      	ldrb	r3, [r7, #15]
}
 800724c:	4618      	mov	r0, r3
 800724e:	3714      	adds	r7, #20
 8007250:	46bd      	mov	sp, r7
 8007252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007256:	4770      	bx	lr

08007258 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8007258:	b580      	push	{r7, lr}
 800725a:	b084      	sub	sp, #16
 800725c:	af00      	add	r7, sp, #0
 800725e:	4603      	mov	r3, r0
 8007260:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8007262:	79fb      	ldrb	r3, [r7, #7]
 8007264:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8007266:	79fb      	ldrb	r3, [r7, #7]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d102      	bne.n	8007272 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800726c:	2300      	movs	r3, #0
 800726e:	73fb      	strb	r3, [r7, #15]
 8007270:	e001      	b.n	8007276 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8007272:	2301      	movs	r3, #1
 8007274:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8007276:	7bfb      	ldrb	r3, [r7, #15]
 8007278:	461a      	mov	r2, r3
 800727a:	2101      	movs	r1, #1
 800727c:	4803      	ldr	r0, [pc, #12]	; (800728c <MX_DriverVbusFS+0x34>)
 800727e:	f7fa fd05 	bl	8001c8c <HAL_GPIO_WritePin>
}
 8007282:	bf00      	nop
 8007284:	3710      	adds	r7, #16
 8007286:	46bd      	mov	sp, r7
 8007288:	bd80      	pop	{r7, pc}
 800728a:	bf00      	nop
 800728c:	40020800 	.word	0x40020800

08007290 <malloc>:
 8007290:	4b02      	ldr	r3, [pc, #8]	; (800729c <malloc+0xc>)
 8007292:	4601      	mov	r1, r0
 8007294:	6818      	ldr	r0, [r3, #0]
 8007296:	f000 b82b 	b.w	80072f0 <_malloc_r>
 800729a:	bf00      	nop
 800729c:	20000078 	.word	0x20000078

080072a0 <free>:
 80072a0:	4b02      	ldr	r3, [pc, #8]	; (80072ac <free+0xc>)
 80072a2:	4601      	mov	r1, r0
 80072a4:	6818      	ldr	r0, [r3, #0]
 80072a6:	f000 b8f3 	b.w	8007490 <_free_r>
 80072aa:	bf00      	nop
 80072ac:	20000078 	.word	0x20000078

080072b0 <sbrk_aligned>:
 80072b0:	b570      	push	{r4, r5, r6, lr}
 80072b2:	4e0e      	ldr	r6, [pc, #56]	; (80072ec <sbrk_aligned+0x3c>)
 80072b4:	460c      	mov	r4, r1
 80072b6:	6831      	ldr	r1, [r6, #0]
 80072b8:	4605      	mov	r5, r0
 80072ba:	b911      	cbnz	r1, 80072c2 <sbrk_aligned+0x12>
 80072bc:	f000 f8ac 	bl	8007418 <_sbrk_r>
 80072c0:	6030      	str	r0, [r6, #0]
 80072c2:	4621      	mov	r1, r4
 80072c4:	4628      	mov	r0, r5
 80072c6:	f000 f8a7 	bl	8007418 <_sbrk_r>
 80072ca:	1c43      	adds	r3, r0, #1
 80072cc:	d00a      	beq.n	80072e4 <sbrk_aligned+0x34>
 80072ce:	1cc4      	adds	r4, r0, #3
 80072d0:	f024 0403 	bic.w	r4, r4, #3
 80072d4:	42a0      	cmp	r0, r4
 80072d6:	d007      	beq.n	80072e8 <sbrk_aligned+0x38>
 80072d8:	1a21      	subs	r1, r4, r0
 80072da:	4628      	mov	r0, r5
 80072dc:	f000 f89c 	bl	8007418 <_sbrk_r>
 80072e0:	3001      	adds	r0, #1
 80072e2:	d101      	bne.n	80072e8 <sbrk_aligned+0x38>
 80072e4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80072e8:	4620      	mov	r0, r4
 80072ea:	bd70      	pop	{r4, r5, r6, pc}
 80072ec:	200008c4 	.word	0x200008c4

080072f0 <_malloc_r>:
 80072f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80072f4:	1ccd      	adds	r5, r1, #3
 80072f6:	f025 0503 	bic.w	r5, r5, #3
 80072fa:	3508      	adds	r5, #8
 80072fc:	2d0c      	cmp	r5, #12
 80072fe:	bf38      	it	cc
 8007300:	250c      	movcc	r5, #12
 8007302:	2d00      	cmp	r5, #0
 8007304:	4607      	mov	r7, r0
 8007306:	db01      	blt.n	800730c <_malloc_r+0x1c>
 8007308:	42a9      	cmp	r1, r5
 800730a:	d905      	bls.n	8007318 <_malloc_r+0x28>
 800730c:	230c      	movs	r3, #12
 800730e:	603b      	str	r3, [r7, #0]
 8007310:	2600      	movs	r6, #0
 8007312:	4630      	mov	r0, r6
 8007314:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007318:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80073ec <_malloc_r+0xfc>
 800731c:	f000 f868 	bl	80073f0 <__malloc_lock>
 8007320:	f8d8 3000 	ldr.w	r3, [r8]
 8007324:	461c      	mov	r4, r3
 8007326:	bb5c      	cbnz	r4, 8007380 <_malloc_r+0x90>
 8007328:	4629      	mov	r1, r5
 800732a:	4638      	mov	r0, r7
 800732c:	f7ff ffc0 	bl	80072b0 <sbrk_aligned>
 8007330:	1c43      	adds	r3, r0, #1
 8007332:	4604      	mov	r4, r0
 8007334:	d155      	bne.n	80073e2 <_malloc_r+0xf2>
 8007336:	f8d8 4000 	ldr.w	r4, [r8]
 800733a:	4626      	mov	r6, r4
 800733c:	2e00      	cmp	r6, #0
 800733e:	d145      	bne.n	80073cc <_malloc_r+0xdc>
 8007340:	2c00      	cmp	r4, #0
 8007342:	d048      	beq.n	80073d6 <_malloc_r+0xe6>
 8007344:	6823      	ldr	r3, [r4, #0]
 8007346:	4631      	mov	r1, r6
 8007348:	4638      	mov	r0, r7
 800734a:	eb04 0903 	add.w	r9, r4, r3
 800734e:	f000 f863 	bl	8007418 <_sbrk_r>
 8007352:	4581      	cmp	r9, r0
 8007354:	d13f      	bne.n	80073d6 <_malloc_r+0xe6>
 8007356:	6821      	ldr	r1, [r4, #0]
 8007358:	1a6d      	subs	r5, r5, r1
 800735a:	4629      	mov	r1, r5
 800735c:	4638      	mov	r0, r7
 800735e:	f7ff ffa7 	bl	80072b0 <sbrk_aligned>
 8007362:	3001      	adds	r0, #1
 8007364:	d037      	beq.n	80073d6 <_malloc_r+0xe6>
 8007366:	6823      	ldr	r3, [r4, #0]
 8007368:	442b      	add	r3, r5
 800736a:	6023      	str	r3, [r4, #0]
 800736c:	f8d8 3000 	ldr.w	r3, [r8]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d038      	beq.n	80073e6 <_malloc_r+0xf6>
 8007374:	685a      	ldr	r2, [r3, #4]
 8007376:	42a2      	cmp	r2, r4
 8007378:	d12b      	bne.n	80073d2 <_malloc_r+0xe2>
 800737a:	2200      	movs	r2, #0
 800737c:	605a      	str	r2, [r3, #4]
 800737e:	e00f      	b.n	80073a0 <_malloc_r+0xb0>
 8007380:	6822      	ldr	r2, [r4, #0]
 8007382:	1b52      	subs	r2, r2, r5
 8007384:	d41f      	bmi.n	80073c6 <_malloc_r+0xd6>
 8007386:	2a0b      	cmp	r2, #11
 8007388:	d917      	bls.n	80073ba <_malloc_r+0xca>
 800738a:	1961      	adds	r1, r4, r5
 800738c:	42a3      	cmp	r3, r4
 800738e:	6025      	str	r5, [r4, #0]
 8007390:	bf18      	it	ne
 8007392:	6059      	strne	r1, [r3, #4]
 8007394:	6863      	ldr	r3, [r4, #4]
 8007396:	bf08      	it	eq
 8007398:	f8c8 1000 	streq.w	r1, [r8]
 800739c:	5162      	str	r2, [r4, r5]
 800739e:	604b      	str	r3, [r1, #4]
 80073a0:	4638      	mov	r0, r7
 80073a2:	f104 060b 	add.w	r6, r4, #11
 80073a6:	f000 f829 	bl	80073fc <__malloc_unlock>
 80073aa:	f026 0607 	bic.w	r6, r6, #7
 80073ae:	1d23      	adds	r3, r4, #4
 80073b0:	1af2      	subs	r2, r6, r3
 80073b2:	d0ae      	beq.n	8007312 <_malloc_r+0x22>
 80073b4:	1b9b      	subs	r3, r3, r6
 80073b6:	50a3      	str	r3, [r4, r2]
 80073b8:	e7ab      	b.n	8007312 <_malloc_r+0x22>
 80073ba:	42a3      	cmp	r3, r4
 80073bc:	6862      	ldr	r2, [r4, #4]
 80073be:	d1dd      	bne.n	800737c <_malloc_r+0x8c>
 80073c0:	f8c8 2000 	str.w	r2, [r8]
 80073c4:	e7ec      	b.n	80073a0 <_malloc_r+0xb0>
 80073c6:	4623      	mov	r3, r4
 80073c8:	6864      	ldr	r4, [r4, #4]
 80073ca:	e7ac      	b.n	8007326 <_malloc_r+0x36>
 80073cc:	4634      	mov	r4, r6
 80073ce:	6876      	ldr	r6, [r6, #4]
 80073d0:	e7b4      	b.n	800733c <_malloc_r+0x4c>
 80073d2:	4613      	mov	r3, r2
 80073d4:	e7cc      	b.n	8007370 <_malloc_r+0x80>
 80073d6:	230c      	movs	r3, #12
 80073d8:	603b      	str	r3, [r7, #0]
 80073da:	4638      	mov	r0, r7
 80073dc:	f000 f80e 	bl	80073fc <__malloc_unlock>
 80073e0:	e797      	b.n	8007312 <_malloc_r+0x22>
 80073e2:	6025      	str	r5, [r4, #0]
 80073e4:	e7dc      	b.n	80073a0 <_malloc_r+0xb0>
 80073e6:	605b      	str	r3, [r3, #4]
 80073e8:	deff      	udf	#255	; 0xff
 80073ea:	bf00      	nop
 80073ec:	200008c0 	.word	0x200008c0

080073f0 <__malloc_lock>:
 80073f0:	4801      	ldr	r0, [pc, #4]	; (80073f8 <__malloc_lock+0x8>)
 80073f2:	f000 b84b 	b.w	800748c <__retarget_lock_acquire_recursive>
 80073f6:	bf00      	nop
 80073f8:	20000a00 	.word	0x20000a00

080073fc <__malloc_unlock>:
 80073fc:	4801      	ldr	r0, [pc, #4]	; (8007404 <__malloc_unlock+0x8>)
 80073fe:	f000 b846 	b.w	800748e <__retarget_lock_release_recursive>
 8007402:	bf00      	nop
 8007404:	20000a00 	.word	0x20000a00

08007408 <memset>:
 8007408:	4402      	add	r2, r0
 800740a:	4603      	mov	r3, r0
 800740c:	4293      	cmp	r3, r2
 800740e:	d100      	bne.n	8007412 <memset+0xa>
 8007410:	4770      	bx	lr
 8007412:	f803 1b01 	strb.w	r1, [r3], #1
 8007416:	e7f9      	b.n	800740c <memset+0x4>

08007418 <_sbrk_r>:
 8007418:	b538      	push	{r3, r4, r5, lr}
 800741a:	4d06      	ldr	r5, [pc, #24]	; (8007434 <_sbrk_r+0x1c>)
 800741c:	2300      	movs	r3, #0
 800741e:	4604      	mov	r4, r0
 8007420:	4608      	mov	r0, r1
 8007422:	602b      	str	r3, [r5, #0]
 8007424:	f7f9 fc7c 	bl	8000d20 <_sbrk>
 8007428:	1c43      	adds	r3, r0, #1
 800742a:	d102      	bne.n	8007432 <_sbrk_r+0x1a>
 800742c:	682b      	ldr	r3, [r5, #0]
 800742e:	b103      	cbz	r3, 8007432 <_sbrk_r+0x1a>
 8007430:	6023      	str	r3, [r4, #0]
 8007432:	bd38      	pop	{r3, r4, r5, pc}
 8007434:	20000a04 	.word	0x20000a04

08007438 <__errno>:
 8007438:	4b01      	ldr	r3, [pc, #4]	; (8007440 <__errno+0x8>)
 800743a:	6818      	ldr	r0, [r3, #0]
 800743c:	4770      	bx	lr
 800743e:	bf00      	nop
 8007440:	20000078 	.word	0x20000078

08007444 <__libc_init_array>:
 8007444:	b570      	push	{r4, r5, r6, lr}
 8007446:	4d0d      	ldr	r5, [pc, #52]	; (800747c <__libc_init_array+0x38>)
 8007448:	4c0d      	ldr	r4, [pc, #52]	; (8007480 <__libc_init_array+0x3c>)
 800744a:	1b64      	subs	r4, r4, r5
 800744c:	10a4      	asrs	r4, r4, #2
 800744e:	2600      	movs	r6, #0
 8007450:	42a6      	cmp	r6, r4
 8007452:	d109      	bne.n	8007468 <__libc_init_array+0x24>
 8007454:	4d0b      	ldr	r5, [pc, #44]	; (8007484 <__libc_init_array+0x40>)
 8007456:	4c0c      	ldr	r4, [pc, #48]	; (8007488 <__libc_init_array+0x44>)
 8007458:	f000 f866 	bl	8007528 <_init>
 800745c:	1b64      	subs	r4, r4, r5
 800745e:	10a4      	asrs	r4, r4, #2
 8007460:	2600      	movs	r6, #0
 8007462:	42a6      	cmp	r6, r4
 8007464:	d105      	bne.n	8007472 <__libc_init_array+0x2e>
 8007466:	bd70      	pop	{r4, r5, r6, pc}
 8007468:	f855 3b04 	ldr.w	r3, [r5], #4
 800746c:	4798      	blx	r3
 800746e:	3601      	adds	r6, #1
 8007470:	e7ee      	b.n	8007450 <__libc_init_array+0xc>
 8007472:	f855 3b04 	ldr.w	r3, [r5], #4
 8007476:	4798      	blx	r3
 8007478:	3601      	adds	r6, #1
 800747a:	e7f2      	b.n	8007462 <__libc_init_array+0x1e>
 800747c:	08007564 	.word	0x08007564
 8007480:	08007564 	.word	0x08007564
 8007484:	08007564 	.word	0x08007564
 8007488:	08007568 	.word	0x08007568

0800748c <__retarget_lock_acquire_recursive>:
 800748c:	4770      	bx	lr

0800748e <__retarget_lock_release_recursive>:
 800748e:	4770      	bx	lr

08007490 <_free_r>:
 8007490:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007492:	2900      	cmp	r1, #0
 8007494:	d044      	beq.n	8007520 <_free_r+0x90>
 8007496:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800749a:	9001      	str	r0, [sp, #4]
 800749c:	2b00      	cmp	r3, #0
 800749e:	f1a1 0404 	sub.w	r4, r1, #4
 80074a2:	bfb8      	it	lt
 80074a4:	18e4      	addlt	r4, r4, r3
 80074a6:	f7ff ffa3 	bl	80073f0 <__malloc_lock>
 80074aa:	4a1e      	ldr	r2, [pc, #120]	; (8007524 <_free_r+0x94>)
 80074ac:	9801      	ldr	r0, [sp, #4]
 80074ae:	6813      	ldr	r3, [r2, #0]
 80074b0:	b933      	cbnz	r3, 80074c0 <_free_r+0x30>
 80074b2:	6063      	str	r3, [r4, #4]
 80074b4:	6014      	str	r4, [r2, #0]
 80074b6:	b003      	add	sp, #12
 80074b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80074bc:	f7ff bf9e 	b.w	80073fc <__malloc_unlock>
 80074c0:	42a3      	cmp	r3, r4
 80074c2:	d908      	bls.n	80074d6 <_free_r+0x46>
 80074c4:	6825      	ldr	r5, [r4, #0]
 80074c6:	1961      	adds	r1, r4, r5
 80074c8:	428b      	cmp	r3, r1
 80074ca:	bf01      	itttt	eq
 80074cc:	6819      	ldreq	r1, [r3, #0]
 80074ce:	685b      	ldreq	r3, [r3, #4]
 80074d0:	1949      	addeq	r1, r1, r5
 80074d2:	6021      	streq	r1, [r4, #0]
 80074d4:	e7ed      	b.n	80074b2 <_free_r+0x22>
 80074d6:	461a      	mov	r2, r3
 80074d8:	685b      	ldr	r3, [r3, #4]
 80074da:	b10b      	cbz	r3, 80074e0 <_free_r+0x50>
 80074dc:	42a3      	cmp	r3, r4
 80074de:	d9fa      	bls.n	80074d6 <_free_r+0x46>
 80074e0:	6811      	ldr	r1, [r2, #0]
 80074e2:	1855      	adds	r5, r2, r1
 80074e4:	42a5      	cmp	r5, r4
 80074e6:	d10b      	bne.n	8007500 <_free_r+0x70>
 80074e8:	6824      	ldr	r4, [r4, #0]
 80074ea:	4421      	add	r1, r4
 80074ec:	1854      	adds	r4, r2, r1
 80074ee:	42a3      	cmp	r3, r4
 80074f0:	6011      	str	r1, [r2, #0]
 80074f2:	d1e0      	bne.n	80074b6 <_free_r+0x26>
 80074f4:	681c      	ldr	r4, [r3, #0]
 80074f6:	685b      	ldr	r3, [r3, #4]
 80074f8:	6053      	str	r3, [r2, #4]
 80074fa:	440c      	add	r4, r1
 80074fc:	6014      	str	r4, [r2, #0]
 80074fe:	e7da      	b.n	80074b6 <_free_r+0x26>
 8007500:	d902      	bls.n	8007508 <_free_r+0x78>
 8007502:	230c      	movs	r3, #12
 8007504:	6003      	str	r3, [r0, #0]
 8007506:	e7d6      	b.n	80074b6 <_free_r+0x26>
 8007508:	6825      	ldr	r5, [r4, #0]
 800750a:	1961      	adds	r1, r4, r5
 800750c:	428b      	cmp	r3, r1
 800750e:	bf04      	itt	eq
 8007510:	6819      	ldreq	r1, [r3, #0]
 8007512:	685b      	ldreq	r3, [r3, #4]
 8007514:	6063      	str	r3, [r4, #4]
 8007516:	bf04      	itt	eq
 8007518:	1949      	addeq	r1, r1, r5
 800751a:	6021      	streq	r1, [r4, #0]
 800751c:	6054      	str	r4, [r2, #4]
 800751e:	e7ca      	b.n	80074b6 <_free_r+0x26>
 8007520:	b003      	add	sp, #12
 8007522:	bd30      	pop	{r4, r5, pc}
 8007524:	200008c0 	.word	0x200008c0

08007528 <_init>:
 8007528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800752a:	bf00      	nop
 800752c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800752e:	bc08      	pop	{r3}
 8007530:	469e      	mov	lr, r3
 8007532:	4770      	bx	lr

08007534 <_fini>:
 8007534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007536:	bf00      	nop
 8007538:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800753a:	bc08      	pop	{r3}
 800753c:	469e      	mov	lr, r3
 800753e:	4770      	bx	lr
