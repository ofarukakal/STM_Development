
STM_State-Machine_ADC_Task.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000073bc  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08007544  08007544  00017544  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007560  08007560  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08007560  08007560  00017560  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007568  08007568  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007568  08007568  00017568  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800756c  0800756c  0001756c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08007570  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002007c  2**0
                  CONTENTS
 10 .bss          0000098c  2000007c  2000007c  0002007c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000a08  20000a08  0002007c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 14 .debug_info   00015a38  00000000  00000000  000200ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003abd  00000000  00000000  00035b27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001210  00000000  00000000  000395e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000dc3  00000000  00000000  0003a7f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00024a78  00000000  00000000  0003b5bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00018a88  00000000  00000000  00060033  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d796f  00000000  00000000  00078abb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004e4c  00000000  00000000  0015042c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000062  00000000  00000000  00155278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000007c 	.word	0x2000007c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800752c 	.word	0x0800752c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000080 	.word	0x20000080
 80001c4:	0800752c 	.word	0x0800752c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c8:	f000 fc9e 	bl	8000e08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004cc:	f000 f826 	bl	800051c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d0:	f000 f974 	bl	80007bc <MX_GPIO_Init>
  MX_I2C1_Init();
 80004d4:	f000 f8de 	bl	8000694 <MX_I2C1_Init>
  MX_I2S3_Init();
 80004d8:	f000 f90a 	bl	80006f0 <MX_I2S3_Init>
  MX_SPI1_Init();
 80004dc:	f000 f938 	bl	8000750 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80004e0:	f006 fc28 	bl	8006d34 <MX_USB_HOST_Init>
  MX_ADC1_Init();
 80004e4:	f000 f884 	bl	80005f0 <MX_ADC1_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_ADC_Start(&hadc1); // start the adc
 80004e8:	480a      	ldr	r0, [pc, #40]	; (8000514 <main+0x50>)
 80004ea:	f000 fd67 	bl	8000fbc <HAL_ADC_Start>

	  HAL_ADC_PollForConversion(&hadc1, 100); // poll for conversion
 80004ee:	2164      	movs	r1, #100	; 0x64
 80004f0:	4808      	ldr	r0, [pc, #32]	; (8000514 <main+0x50>)
 80004f2:	f000 fe68 	bl	80011c6 <HAL_ADC_PollForConversion>

	  adcValue = HAL_ADC_GetValue(&hadc1); // get the adc value
 80004f6:	4807      	ldr	r0, [pc, #28]	; (8000514 <main+0x50>)
 80004f8:	f000 fef0 	bl	80012dc <HAL_ADC_GetValue>
 80004fc:	4603      	mov	r3, r0
 80004fe:	b29a      	uxth	r2, r3
 8000500:	4b05      	ldr	r3, [pc, #20]	; (8000518 <main+0x54>)
 8000502:	801a      	strh	r2, [r3, #0]

	  HAL_ADC_Stop(&hadc1); // stop adc
 8000504:	4803      	ldr	r0, [pc, #12]	; (8000514 <main+0x50>)
 8000506:	f000 fe2b 	bl	8001160 <HAL_ADC_Stop>

	  HAL_Delay (500); // wait for 500ms
 800050a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800050e:	f000 fced 	bl	8000eec <HAL_Delay>
	  HAL_ADC_Start(&hadc1); // start the adc
 8000512:	e7e9      	b.n	80004e8 <main+0x24>
 8000514:	20000098 	.word	0x20000098
 8000518:	200000e0 	.word	0x200000e0

0800051c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b094      	sub	sp, #80	; 0x50
 8000520:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000522:	f107 0320 	add.w	r3, r7, #32
 8000526:	2230      	movs	r2, #48	; 0x30
 8000528:	2100      	movs	r1, #0
 800052a:	4618      	mov	r0, r3
 800052c:	f006 ff6e 	bl	800740c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000530:	f107 030c 	add.w	r3, r7, #12
 8000534:	2200      	movs	r2, #0
 8000536:	601a      	str	r2, [r3, #0]
 8000538:	605a      	str	r2, [r3, #4]
 800053a:	609a      	str	r2, [r3, #8]
 800053c:	60da      	str	r2, [r3, #12]
 800053e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000540:	2300      	movs	r3, #0
 8000542:	60bb      	str	r3, [r7, #8]
 8000544:	4b28      	ldr	r3, [pc, #160]	; (80005e8 <SystemClock_Config+0xcc>)
 8000546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000548:	4a27      	ldr	r2, [pc, #156]	; (80005e8 <SystemClock_Config+0xcc>)
 800054a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800054e:	6413      	str	r3, [r2, #64]	; 0x40
 8000550:	4b25      	ldr	r3, [pc, #148]	; (80005e8 <SystemClock_Config+0xcc>)
 8000552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000554:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000558:	60bb      	str	r3, [r7, #8]
 800055a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800055c:	2300      	movs	r3, #0
 800055e:	607b      	str	r3, [r7, #4]
 8000560:	4b22      	ldr	r3, [pc, #136]	; (80005ec <SystemClock_Config+0xd0>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	4a21      	ldr	r2, [pc, #132]	; (80005ec <SystemClock_Config+0xd0>)
 8000566:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800056a:	6013      	str	r3, [r2, #0]
 800056c:	4b1f      	ldr	r3, [pc, #124]	; (80005ec <SystemClock_Config+0xd0>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000574:	607b      	str	r3, [r7, #4]
 8000576:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000578:	2301      	movs	r3, #1
 800057a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800057c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000580:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000582:	2302      	movs	r3, #2
 8000584:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000586:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800058a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800058c:	2308      	movs	r3, #8
 800058e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000590:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000594:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000596:	2302      	movs	r3, #2
 8000598:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800059a:	2307      	movs	r3, #7
 800059c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800059e:	f107 0320 	add.w	r3, r7, #32
 80005a2:	4618      	mov	r0, r3
 80005a4:	f003 fd60 	bl	8004068 <HAL_RCC_OscConfig>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d001      	beq.n	80005b2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005ae:	f000 fa03 	bl	80009b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b2:	230f      	movs	r3, #15
 80005b4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005b6:	2302      	movs	r3, #2
 80005b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ba:	2300      	movs	r3, #0
 80005bc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005be:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005c2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005c8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005ca:	f107 030c 	add.w	r3, r7, #12
 80005ce:	2105      	movs	r1, #5
 80005d0:	4618      	mov	r0, r3
 80005d2:	f003 ffc1 	bl	8004558 <HAL_RCC_ClockConfig>
 80005d6:	4603      	mov	r3, r0
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d001      	beq.n	80005e0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80005dc:	f000 f9ec 	bl	80009b8 <Error_Handler>
  }
}
 80005e0:	bf00      	nop
 80005e2:	3750      	adds	r7, #80	; 0x50
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	40023800 	.word	0x40023800
 80005ec:	40007000 	.word	0x40007000

080005f0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b084      	sub	sp, #16
 80005f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005f6:	463b      	mov	r3, r7
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
 80005fc:	605a      	str	r2, [r3, #4]
 80005fe:	609a      	str	r2, [r3, #8]
 8000600:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000602:	4b21      	ldr	r3, [pc, #132]	; (8000688 <MX_ADC1_Init+0x98>)
 8000604:	4a21      	ldr	r2, [pc, #132]	; (800068c <MX_ADC1_Init+0x9c>)
 8000606:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000608:	4b1f      	ldr	r3, [pc, #124]	; (8000688 <MX_ADC1_Init+0x98>)
 800060a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800060e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000610:	4b1d      	ldr	r3, [pc, #116]	; (8000688 <MX_ADC1_Init+0x98>)
 8000612:	2200      	movs	r2, #0
 8000614:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000616:	4b1c      	ldr	r3, [pc, #112]	; (8000688 <MX_ADC1_Init+0x98>)
 8000618:	2200      	movs	r2, #0
 800061a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800061c:	4b1a      	ldr	r3, [pc, #104]	; (8000688 <MX_ADC1_Init+0x98>)
 800061e:	2200      	movs	r2, #0
 8000620:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000622:	4b19      	ldr	r3, [pc, #100]	; (8000688 <MX_ADC1_Init+0x98>)
 8000624:	2200      	movs	r2, #0
 8000626:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800062a:	4b17      	ldr	r3, [pc, #92]	; (8000688 <MX_ADC1_Init+0x98>)
 800062c:	2200      	movs	r2, #0
 800062e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000630:	4b15      	ldr	r3, [pc, #84]	; (8000688 <MX_ADC1_Init+0x98>)
 8000632:	4a17      	ldr	r2, [pc, #92]	; (8000690 <MX_ADC1_Init+0xa0>)
 8000634:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000636:	4b14      	ldr	r3, [pc, #80]	; (8000688 <MX_ADC1_Init+0x98>)
 8000638:	2200      	movs	r2, #0
 800063a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800063c:	4b12      	ldr	r3, [pc, #72]	; (8000688 <MX_ADC1_Init+0x98>)
 800063e:	2201      	movs	r2, #1
 8000640:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000642:	4b11      	ldr	r3, [pc, #68]	; (8000688 <MX_ADC1_Init+0x98>)
 8000644:	2200      	movs	r2, #0
 8000646:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800064a:	4b0f      	ldr	r3, [pc, #60]	; (8000688 <MX_ADC1_Init+0x98>)
 800064c:	2201      	movs	r2, #1
 800064e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000650:	480d      	ldr	r0, [pc, #52]	; (8000688 <MX_ADC1_Init+0x98>)
 8000652:	f000 fc6f 	bl	8000f34 <HAL_ADC_Init>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d001      	beq.n	8000660 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800065c:	f000 f9ac 	bl	80009b8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000660:	2301      	movs	r3, #1
 8000662:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000664:	2301      	movs	r3, #1
 8000666:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8000668:	2303      	movs	r3, #3
 800066a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800066c:	463b      	mov	r3, r7
 800066e:	4619      	mov	r1, r3
 8000670:	4805      	ldr	r0, [pc, #20]	; (8000688 <MX_ADC1_Init+0x98>)
 8000672:	f000 fe41 	bl	80012f8 <HAL_ADC_ConfigChannel>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800067c:	f000 f99c 	bl	80009b8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000680:	bf00      	nop
 8000682:	3710      	adds	r7, #16
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	20000098 	.word	0x20000098
 800068c:	40012000 	.word	0x40012000
 8000690:	0f000001 	.word	0x0f000001

08000694 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000698:	4b12      	ldr	r3, [pc, #72]	; (80006e4 <MX_I2C1_Init+0x50>)
 800069a:	4a13      	ldr	r2, [pc, #76]	; (80006e8 <MX_I2C1_Init+0x54>)
 800069c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800069e:	4b11      	ldr	r3, [pc, #68]	; (80006e4 <MX_I2C1_Init+0x50>)
 80006a0:	4a12      	ldr	r2, [pc, #72]	; (80006ec <MX_I2C1_Init+0x58>)
 80006a2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006a4:	4b0f      	ldr	r3, [pc, #60]	; (80006e4 <MX_I2C1_Init+0x50>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006aa:	4b0e      	ldr	r3, [pc, #56]	; (80006e4 <MX_I2C1_Init+0x50>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006b0:	4b0c      	ldr	r3, [pc, #48]	; (80006e4 <MX_I2C1_Init+0x50>)
 80006b2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006b6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006b8:	4b0a      	ldr	r3, [pc, #40]	; (80006e4 <MX_I2C1_Init+0x50>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006be:	4b09      	ldr	r3, [pc, #36]	; (80006e4 <MX_I2C1_Init+0x50>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006c4:	4b07      	ldr	r3, [pc, #28]	; (80006e4 <MX_I2C1_Init+0x50>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006ca:	4b06      	ldr	r3, [pc, #24]	; (80006e4 <MX_I2C1_Init+0x50>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006d0:	4804      	ldr	r0, [pc, #16]	; (80006e4 <MX_I2C1_Init+0x50>)
 80006d2:	f002 fee5 	bl	80034a0 <HAL_I2C_Init>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006dc:	f000 f96c 	bl	80009b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006e0:	bf00      	nop
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	200000e4 	.word	0x200000e4
 80006e8:	40005400 	.word	0x40005400
 80006ec:	000186a0 	.word	0x000186a0

080006f0 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80006f4:	4b13      	ldr	r3, [pc, #76]	; (8000744 <MX_I2S3_Init+0x54>)
 80006f6:	4a14      	ldr	r2, [pc, #80]	; (8000748 <MX_I2S3_Init+0x58>)
 80006f8:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80006fa:	4b12      	ldr	r3, [pc, #72]	; (8000744 <MX_I2S3_Init+0x54>)
 80006fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000700:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000702:	4b10      	ldr	r3, [pc, #64]	; (8000744 <MX_I2S3_Init+0x54>)
 8000704:	2200      	movs	r2, #0
 8000706:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000708:	4b0e      	ldr	r3, [pc, #56]	; (8000744 <MX_I2S3_Init+0x54>)
 800070a:	2200      	movs	r2, #0
 800070c:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800070e:	4b0d      	ldr	r3, [pc, #52]	; (8000744 <MX_I2S3_Init+0x54>)
 8000710:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000714:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000716:	4b0b      	ldr	r3, [pc, #44]	; (8000744 <MX_I2S3_Init+0x54>)
 8000718:	4a0c      	ldr	r2, [pc, #48]	; (800074c <MX_I2S3_Init+0x5c>)
 800071a:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 800071c:	4b09      	ldr	r3, [pc, #36]	; (8000744 <MX_I2S3_Init+0x54>)
 800071e:	2200      	movs	r2, #0
 8000720:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000722:	4b08      	ldr	r3, [pc, #32]	; (8000744 <MX_I2S3_Init+0x54>)
 8000724:	2200      	movs	r2, #0
 8000726:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000728:	4b06      	ldr	r3, [pc, #24]	; (8000744 <MX_I2S3_Init+0x54>)
 800072a:	2200      	movs	r2, #0
 800072c:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800072e:	4805      	ldr	r0, [pc, #20]	; (8000744 <MX_I2S3_Init+0x54>)
 8000730:	f002 fffa 	bl	8003728 <HAL_I2S_Init>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800073a:	f000 f93d 	bl	80009b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800073e:	bf00      	nop
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	20000138 	.word	0x20000138
 8000748:	40003c00 	.word	0x40003c00
 800074c:	00017700 	.word	0x00017700

08000750 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000754:	4b17      	ldr	r3, [pc, #92]	; (80007b4 <MX_SPI1_Init+0x64>)
 8000756:	4a18      	ldr	r2, [pc, #96]	; (80007b8 <MX_SPI1_Init+0x68>)
 8000758:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800075a:	4b16      	ldr	r3, [pc, #88]	; (80007b4 <MX_SPI1_Init+0x64>)
 800075c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000760:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000762:	4b14      	ldr	r3, [pc, #80]	; (80007b4 <MX_SPI1_Init+0x64>)
 8000764:	2200      	movs	r2, #0
 8000766:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000768:	4b12      	ldr	r3, [pc, #72]	; (80007b4 <MX_SPI1_Init+0x64>)
 800076a:	2200      	movs	r2, #0
 800076c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800076e:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <MX_SPI1_Init+0x64>)
 8000770:	2200      	movs	r2, #0
 8000772:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000774:	4b0f      	ldr	r3, [pc, #60]	; (80007b4 <MX_SPI1_Init+0x64>)
 8000776:	2200      	movs	r2, #0
 8000778:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800077a:	4b0e      	ldr	r3, [pc, #56]	; (80007b4 <MX_SPI1_Init+0x64>)
 800077c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000780:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000782:	4b0c      	ldr	r3, [pc, #48]	; (80007b4 <MX_SPI1_Init+0x64>)
 8000784:	2200      	movs	r2, #0
 8000786:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000788:	4b0a      	ldr	r3, [pc, #40]	; (80007b4 <MX_SPI1_Init+0x64>)
 800078a:	2200      	movs	r2, #0
 800078c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800078e:	4b09      	ldr	r3, [pc, #36]	; (80007b4 <MX_SPI1_Init+0x64>)
 8000790:	2200      	movs	r2, #0
 8000792:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000794:	4b07      	ldr	r3, [pc, #28]	; (80007b4 <MX_SPI1_Init+0x64>)
 8000796:	2200      	movs	r2, #0
 8000798:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800079a:	4b06      	ldr	r3, [pc, #24]	; (80007b4 <MX_SPI1_Init+0x64>)
 800079c:	220a      	movs	r2, #10
 800079e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007a0:	4804      	ldr	r0, [pc, #16]	; (80007b4 <MX_SPI1_Init+0x64>)
 80007a2:	f004 fa25 	bl	8004bf0 <HAL_SPI_Init>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80007ac:	f000 f904 	bl	80009b8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007b0:	bf00      	nop
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	20000180 	.word	0x20000180
 80007b8:	40013000 	.word	0x40013000

080007bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b08c      	sub	sp, #48	; 0x30
 80007c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c2:	f107 031c 	add.w	r3, r7, #28
 80007c6:	2200      	movs	r2, #0
 80007c8:	601a      	str	r2, [r3, #0]
 80007ca:	605a      	str	r2, [r3, #4]
 80007cc:	609a      	str	r2, [r3, #8]
 80007ce:	60da      	str	r2, [r3, #12]
 80007d0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007d2:	2300      	movs	r3, #0
 80007d4:	61bb      	str	r3, [r7, #24]
 80007d6:	4b72      	ldr	r3, [pc, #456]	; (80009a0 <MX_GPIO_Init+0x1e4>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	4a71      	ldr	r2, [pc, #452]	; (80009a0 <MX_GPIO_Init+0x1e4>)
 80007dc:	f043 0310 	orr.w	r3, r3, #16
 80007e0:	6313      	str	r3, [r2, #48]	; 0x30
 80007e2:	4b6f      	ldr	r3, [pc, #444]	; (80009a0 <MX_GPIO_Init+0x1e4>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	f003 0310 	and.w	r3, r3, #16
 80007ea:	61bb      	str	r3, [r7, #24]
 80007ec:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ee:	2300      	movs	r3, #0
 80007f0:	617b      	str	r3, [r7, #20]
 80007f2:	4b6b      	ldr	r3, [pc, #428]	; (80009a0 <MX_GPIO_Init+0x1e4>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	4a6a      	ldr	r2, [pc, #424]	; (80009a0 <MX_GPIO_Init+0x1e4>)
 80007f8:	f043 0304 	orr.w	r3, r3, #4
 80007fc:	6313      	str	r3, [r2, #48]	; 0x30
 80007fe:	4b68      	ldr	r3, [pc, #416]	; (80009a0 <MX_GPIO_Init+0x1e4>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	f003 0304 	and.w	r3, r3, #4
 8000806:	617b      	str	r3, [r7, #20]
 8000808:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800080a:	2300      	movs	r3, #0
 800080c:	613b      	str	r3, [r7, #16]
 800080e:	4b64      	ldr	r3, [pc, #400]	; (80009a0 <MX_GPIO_Init+0x1e4>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	4a63      	ldr	r2, [pc, #396]	; (80009a0 <MX_GPIO_Init+0x1e4>)
 8000814:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000818:	6313      	str	r3, [r2, #48]	; 0x30
 800081a:	4b61      	ldr	r3, [pc, #388]	; (80009a0 <MX_GPIO_Init+0x1e4>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000822:	613b      	str	r3, [r7, #16]
 8000824:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000826:	2300      	movs	r3, #0
 8000828:	60fb      	str	r3, [r7, #12]
 800082a:	4b5d      	ldr	r3, [pc, #372]	; (80009a0 <MX_GPIO_Init+0x1e4>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	4a5c      	ldr	r2, [pc, #368]	; (80009a0 <MX_GPIO_Init+0x1e4>)
 8000830:	f043 0301 	orr.w	r3, r3, #1
 8000834:	6313      	str	r3, [r2, #48]	; 0x30
 8000836:	4b5a      	ldr	r3, [pc, #360]	; (80009a0 <MX_GPIO_Init+0x1e4>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	f003 0301 	and.w	r3, r3, #1
 800083e:	60fb      	str	r3, [r7, #12]
 8000840:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000842:	2300      	movs	r3, #0
 8000844:	60bb      	str	r3, [r7, #8]
 8000846:	4b56      	ldr	r3, [pc, #344]	; (80009a0 <MX_GPIO_Init+0x1e4>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	4a55      	ldr	r2, [pc, #340]	; (80009a0 <MX_GPIO_Init+0x1e4>)
 800084c:	f043 0302 	orr.w	r3, r3, #2
 8000850:	6313      	str	r3, [r2, #48]	; 0x30
 8000852:	4b53      	ldr	r3, [pc, #332]	; (80009a0 <MX_GPIO_Init+0x1e4>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	f003 0302 	and.w	r3, r3, #2
 800085a:	60bb      	str	r3, [r7, #8]
 800085c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800085e:	2300      	movs	r3, #0
 8000860:	607b      	str	r3, [r7, #4]
 8000862:	4b4f      	ldr	r3, [pc, #316]	; (80009a0 <MX_GPIO_Init+0x1e4>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	4a4e      	ldr	r2, [pc, #312]	; (80009a0 <MX_GPIO_Init+0x1e4>)
 8000868:	f043 0308 	orr.w	r3, r3, #8
 800086c:	6313      	str	r3, [r2, #48]	; 0x30
 800086e:	4b4c      	ldr	r3, [pc, #304]	; (80009a0 <MX_GPIO_Init+0x1e4>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	f003 0308 	and.w	r3, r3, #8
 8000876:	607b      	str	r3, [r7, #4]
 8000878:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800087a:	2200      	movs	r2, #0
 800087c:	2108      	movs	r1, #8
 800087e:	4849      	ldr	r0, [pc, #292]	; (80009a4 <MX_GPIO_Init+0x1e8>)
 8000880:	f001 fa06 	bl	8001c90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000884:	2201      	movs	r2, #1
 8000886:	2101      	movs	r1, #1
 8000888:	4847      	ldr	r0, [pc, #284]	; (80009a8 <MX_GPIO_Init+0x1ec>)
 800088a:	f001 fa01 	bl	8001c90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800088e:	2200      	movs	r2, #0
 8000890:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000894:	4845      	ldr	r0, [pc, #276]	; (80009ac <MX_GPIO_Init+0x1f0>)
 8000896:	f001 f9fb 	bl	8001c90 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800089a:	2308      	movs	r3, #8
 800089c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800089e:	2301      	movs	r3, #1
 80008a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a2:	2300      	movs	r3, #0
 80008a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a6:	2300      	movs	r3, #0
 80008a8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80008aa:	f107 031c 	add.w	r3, r7, #28
 80008ae:	4619      	mov	r1, r3
 80008b0:	483c      	ldr	r0, [pc, #240]	; (80009a4 <MX_GPIO_Init+0x1e8>)
 80008b2:	f001 f851 	bl	8001958 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80008b6:	2301      	movs	r3, #1
 80008b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ba:	2301      	movs	r3, #1
 80008bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008be:	2300      	movs	r3, #0
 80008c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c2:	2300      	movs	r3, #0
 80008c4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008c6:	f107 031c 	add.w	r3, r7, #28
 80008ca:	4619      	mov	r1, r3
 80008cc:	4836      	ldr	r0, [pc, #216]	; (80009a8 <MX_GPIO_Init+0x1ec>)
 80008ce:	f001 f843 	bl	8001958 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80008d2:	2308      	movs	r3, #8
 80008d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d6:	2302      	movs	r3, #2
 80008d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008da:	2300      	movs	r3, #0
 80008dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008de:	2300      	movs	r3, #0
 80008e0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008e2:	2305      	movs	r3, #5
 80008e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80008e6:	f107 031c 	add.w	r3, r7, #28
 80008ea:	4619      	mov	r1, r3
 80008ec:	482e      	ldr	r0, [pc, #184]	; (80009a8 <MX_GPIO_Init+0x1ec>)
 80008ee:	f001 f833 	bl	8001958 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008f2:	2301      	movs	r3, #1
 80008f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80008f6:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80008fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fc:	2300      	movs	r3, #0
 80008fe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000900:	f107 031c 	add.w	r3, r7, #28
 8000904:	4619      	mov	r1, r3
 8000906:	482a      	ldr	r0, [pc, #168]	; (80009b0 <MX_GPIO_Init+0x1f4>)
 8000908:	f001 f826 	bl	8001958 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800090c:	2304      	movs	r3, #4
 800090e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000910:	2300      	movs	r3, #0
 8000912:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000914:	2300      	movs	r3, #0
 8000916:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000918:	f107 031c 	add.w	r3, r7, #28
 800091c:	4619      	mov	r1, r3
 800091e:	4825      	ldr	r0, [pc, #148]	; (80009b4 <MX_GPIO_Init+0x1f8>)
 8000920:	f001 f81a 	bl	8001958 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000924:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000928:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800092a:	2302      	movs	r3, #2
 800092c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092e:	2300      	movs	r3, #0
 8000930:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000932:	2300      	movs	r3, #0
 8000934:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000936:	2305      	movs	r3, #5
 8000938:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800093a:	f107 031c 	add.w	r3, r7, #28
 800093e:	4619      	mov	r1, r3
 8000940:	481c      	ldr	r0, [pc, #112]	; (80009b4 <MX_GPIO_Init+0x1f8>)
 8000942:	f001 f809 	bl	8001958 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000946:	f24f 0310 	movw	r3, #61456	; 0xf010
 800094a:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800094c:	2301      	movs	r3, #1
 800094e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000950:	2300      	movs	r3, #0
 8000952:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000954:	2300      	movs	r3, #0
 8000956:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000958:	f107 031c 	add.w	r3, r7, #28
 800095c:	4619      	mov	r1, r3
 800095e:	4813      	ldr	r0, [pc, #76]	; (80009ac <MX_GPIO_Init+0x1f0>)
 8000960:	f000 fffa 	bl	8001958 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000964:	2320      	movs	r3, #32
 8000966:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000968:	2300      	movs	r3, #0
 800096a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096c:	2300      	movs	r3, #0
 800096e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000970:	f107 031c 	add.w	r3, r7, #28
 8000974:	4619      	mov	r1, r3
 8000976:	480d      	ldr	r0, [pc, #52]	; (80009ac <MX_GPIO_Init+0x1f0>)
 8000978:	f000 ffee 	bl	8001958 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 800097c:	2302      	movs	r3, #2
 800097e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000980:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000984:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000986:	2300      	movs	r3, #0
 8000988:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800098a:	f107 031c 	add.w	r3, r7, #28
 800098e:	4619      	mov	r1, r3
 8000990:	4804      	ldr	r0, [pc, #16]	; (80009a4 <MX_GPIO_Init+0x1e8>)
 8000992:	f000 ffe1 	bl	8001958 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000996:	bf00      	nop
 8000998:	3730      	adds	r7, #48	; 0x30
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	40023800 	.word	0x40023800
 80009a4:	40021000 	.word	0x40021000
 80009a8:	40020800 	.word	0x40020800
 80009ac:	40020c00 	.word	0x40020c00
 80009b0:	40020000 	.word	0x40020000
 80009b4:	40020400 	.word	0x40020400

080009b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009bc:	b672      	cpsid	i
}
 80009be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009c0:	e7fe      	b.n	80009c0 <Error_Handler+0x8>
	...

080009c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b082      	sub	sp, #8
 80009c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ca:	2300      	movs	r3, #0
 80009cc:	607b      	str	r3, [r7, #4]
 80009ce:	4b10      	ldr	r3, [pc, #64]	; (8000a10 <HAL_MspInit+0x4c>)
 80009d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009d2:	4a0f      	ldr	r2, [pc, #60]	; (8000a10 <HAL_MspInit+0x4c>)
 80009d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009d8:	6453      	str	r3, [r2, #68]	; 0x44
 80009da:	4b0d      	ldr	r3, [pc, #52]	; (8000a10 <HAL_MspInit+0x4c>)
 80009dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009e2:	607b      	str	r3, [r7, #4]
 80009e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009e6:	2300      	movs	r3, #0
 80009e8:	603b      	str	r3, [r7, #0]
 80009ea:	4b09      	ldr	r3, [pc, #36]	; (8000a10 <HAL_MspInit+0x4c>)
 80009ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ee:	4a08      	ldr	r2, [pc, #32]	; (8000a10 <HAL_MspInit+0x4c>)
 80009f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009f4:	6413      	str	r3, [r2, #64]	; 0x40
 80009f6:	4b06      	ldr	r3, [pc, #24]	; (8000a10 <HAL_MspInit+0x4c>)
 80009f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009fe:	603b      	str	r3, [r7, #0]
 8000a00:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a02:	2007      	movs	r0, #7
 8000a04:	f000 ff66 	bl	80018d4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a08:	bf00      	nop
 8000a0a:	3708      	adds	r7, #8
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	40023800 	.word	0x40023800

08000a14 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b08a      	sub	sp, #40	; 0x28
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a1c:	f107 0314 	add.w	r3, r7, #20
 8000a20:	2200      	movs	r2, #0
 8000a22:	601a      	str	r2, [r3, #0]
 8000a24:	605a      	str	r2, [r3, #4]
 8000a26:	609a      	str	r2, [r3, #8]
 8000a28:	60da      	str	r2, [r3, #12]
 8000a2a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	4a17      	ldr	r2, [pc, #92]	; (8000a90 <HAL_ADC_MspInit+0x7c>)
 8000a32:	4293      	cmp	r3, r2
 8000a34:	d127      	bne.n	8000a86 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000a36:	2300      	movs	r3, #0
 8000a38:	613b      	str	r3, [r7, #16]
 8000a3a:	4b16      	ldr	r3, [pc, #88]	; (8000a94 <HAL_ADC_MspInit+0x80>)
 8000a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a3e:	4a15      	ldr	r2, [pc, #84]	; (8000a94 <HAL_ADC_MspInit+0x80>)
 8000a40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a44:	6453      	str	r3, [r2, #68]	; 0x44
 8000a46:	4b13      	ldr	r3, [pc, #76]	; (8000a94 <HAL_ADC_MspInit+0x80>)
 8000a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a4e:	613b      	str	r3, [r7, #16]
 8000a50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a52:	2300      	movs	r3, #0
 8000a54:	60fb      	str	r3, [r7, #12]
 8000a56:	4b0f      	ldr	r3, [pc, #60]	; (8000a94 <HAL_ADC_MspInit+0x80>)
 8000a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5a:	4a0e      	ldr	r2, [pc, #56]	; (8000a94 <HAL_ADC_MspInit+0x80>)
 8000a5c:	f043 0301 	orr.w	r3, r3, #1
 8000a60:	6313      	str	r3, [r2, #48]	; 0x30
 8000a62:	4b0c      	ldr	r3, [pc, #48]	; (8000a94 <HAL_ADC_MspInit+0x80>)
 8000a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a66:	f003 0301 	and.w	r3, r3, #1
 8000a6a:	60fb      	str	r3, [r7, #12]
 8000a6c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = Pot_IN_Pin;
 8000a6e:	2302      	movs	r3, #2
 8000a70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a72:	2303      	movs	r3, #3
 8000a74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a76:	2300      	movs	r3, #0
 8000a78:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Pot_IN_GPIO_Port, &GPIO_InitStruct);
 8000a7a:	f107 0314 	add.w	r3, r7, #20
 8000a7e:	4619      	mov	r1, r3
 8000a80:	4805      	ldr	r0, [pc, #20]	; (8000a98 <HAL_ADC_MspInit+0x84>)
 8000a82:	f000 ff69 	bl	8001958 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000a86:	bf00      	nop
 8000a88:	3728      	adds	r7, #40	; 0x28
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	40012000 	.word	0x40012000
 8000a94:	40023800 	.word	0x40023800
 8000a98:	40020000 	.word	0x40020000

08000a9c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b08a      	sub	sp, #40	; 0x28
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa4:	f107 0314 	add.w	r3, r7, #20
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	601a      	str	r2, [r3, #0]
 8000aac:	605a      	str	r2, [r3, #4]
 8000aae:	609a      	str	r2, [r3, #8]
 8000ab0:	60da      	str	r2, [r3, #12]
 8000ab2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a19      	ldr	r2, [pc, #100]	; (8000b20 <HAL_I2C_MspInit+0x84>)
 8000aba:	4293      	cmp	r3, r2
 8000abc:	d12c      	bne.n	8000b18 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000abe:	2300      	movs	r3, #0
 8000ac0:	613b      	str	r3, [r7, #16]
 8000ac2:	4b18      	ldr	r3, [pc, #96]	; (8000b24 <HAL_I2C_MspInit+0x88>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac6:	4a17      	ldr	r2, [pc, #92]	; (8000b24 <HAL_I2C_MspInit+0x88>)
 8000ac8:	f043 0302 	orr.w	r3, r3, #2
 8000acc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ace:	4b15      	ldr	r3, [pc, #84]	; (8000b24 <HAL_I2C_MspInit+0x88>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad2:	f003 0302 	and.w	r3, r3, #2
 8000ad6:	613b      	str	r3, [r7, #16]
 8000ad8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000ada:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000ade:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ae0:	2312      	movs	r3, #18
 8000ae2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ae4:	2301      	movs	r3, #1
 8000ae6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000aec:	2304      	movs	r3, #4
 8000aee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000af0:	f107 0314 	add.w	r3, r7, #20
 8000af4:	4619      	mov	r1, r3
 8000af6:	480c      	ldr	r0, [pc, #48]	; (8000b28 <HAL_I2C_MspInit+0x8c>)
 8000af8:	f000 ff2e 	bl	8001958 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000afc:	2300      	movs	r3, #0
 8000afe:	60fb      	str	r3, [r7, #12]
 8000b00:	4b08      	ldr	r3, [pc, #32]	; (8000b24 <HAL_I2C_MspInit+0x88>)
 8000b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b04:	4a07      	ldr	r2, [pc, #28]	; (8000b24 <HAL_I2C_MspInit+0x88>)
 8000b06:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b0a:	6413      	str	r3, [r2, #64]	; 0x40
 8000b0c:	4b05      	ldr	r3, [pc, #20]	; (8000b24 <HAL_I2C_MspInit+0x88>)
 8000b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b14:	60fb      	str	r3, [r7, #12]
 8000b16:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000b18:	bf00      	nop
 8000b1a:	3728      	adds	r7, #40	; 0x28
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	40005400 	.word	0x40005400
 8000b24:	40023800 	.word	0x40023800
 8000b28:	40020400 	.word	0x40020400

08000b2c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b08e      	sub	sp, #56	; 0x38
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b38:	2200      	movs	r2, #0
 8000b3a:	601a      	str	r2, [r3, #0]
 8000b3c:	605a      	str	r2, [r3, #4]
 8000b3e:	609a      	str	r2, [r3, #8]
 8000b40:	60da      	str	r2, [r3, #12]
 8000b42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b44:	f107 0314 	add.w	r3, r7, #20
 8000b48:	2200      	movs	r2, #0
 8000b4a:	601a      	str	r2, [r3, #0]
 8000b4c:	605a      	str	r2, [r3, #4]
 8000b4e:	609a      	str	r2, [r3, #8]
 8000b50:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	4a31      	ldr	r2, [pc, #196]	; (8000c1c <HAL_I2S_MspInit+0xf0>)
 8000b58:	4293      	cmp	r3, r2
 8000b5a:	d15a      	bne.n	8000c12 <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000b60:	23c0      	movs	r3, #192	; 0xc0
 8000b62:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000b64:	2302      	movs	r3, #2
 8000b66:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b68:	f107 0314 	add.w	r3, r7, #20
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f003 feff 	bl	8004970 <HAL_RCCEx_PeriphCLKConfig>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d001      	beq.n	8000b7c <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000b78:	f7ff ff1e 	bl	80009b8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	613b      	str	r3, [r7, #16]
 8000b80:	4b27      	ldr	r3, [pc, #156]	; (8000c20 <HAL_I2S_MspInit+0xf4>)
 8000b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b84:	4a26      	ldr	r2, [pc, #152]	; (8000c20 <HAL_I2S_MspInit+0xf4>)
 8000b86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b8a:	6413      	str	r3, [r2, #64]	; 0x40
 8000b8c:	4b24      	ldr	r3, [pc, #144]	; (8000c20 <HAL_I2S_MspInit+0xf4>)
 8000b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b90:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b94:	613b      	str	r3, [r7, #16]
 8000b96:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b98:	2300      	movs	r3, #0
 8000b9a:	60fb      	str	r3, [r7, #12]
 8000b9c:	4b20      	ldr	r3, [pc, #128]	; (8000c20 <HAL_I2S_MspInit+0xf4>)
 8000b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba0:	4a1f      	ldr	r2, [pc, #124]	; (8000c20 <HAL_I2S_MspInit+0xf4>)
 8000ba2:	f043 0301 	orr.w	r3, r3, #1
 8000ba6:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba8:	4b1d      	ldr	r3, [pc, #116]	; (8000c20 <HAL_I2S_MspInit+0xf4>)
 8000baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bac:	f003 0301 	and.w	r3, r3, #1
 8000bb0:	60fb      	str	r3, [r7, #12]
 8000bb2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	60bb      	str	r3, [r7, #8]
 8000bb8:	4b19      	ldr	r3, [pc, #100]	; (8000c20 <HAL_I2S_MspInit+0xf4>)
 8000bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bbc:	4a18      	ldr	r2, [pc, #96]	; (8000c20 <HAL_I2S_MspInit+0xf4>)
 8000bbe:	f043 0304 	orr.w	r3, r3, #4
 8000bc2:	6313      	str	r3, [r2, #48]	; 0x30
 8000bc4:	4b16      	ldr	r3, [pc, #88]	; (8000c20 <HAL_I2S_MspInit+0xf4>)
 8000bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc8:	f003 0304 	and.w	r3, r3, #4
 8000bcc:	60bb      	str	r3, [r7, #8]
 8000bce:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000bd0:	2310      	movs	r3, #16
 8000bd2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd4:	2302      	movs	r3, #2
 8000bd6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000be0:	2306      	movs	r3, #6
 8000be2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000be4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000be8:	4619      	mov	r1, r3
 8000bea:	480e      	ldr	r0, [pc, #56]	; (8000c24 <HAL_I2S_MspInit+0xf8>)
 8000bec:	f000 feb4 	bl	8001958 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000bf0:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000bf4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf6:	2302      	movs	r3, #2
 8000bf8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c02:	2306      	movs	r3, #6
 8000c04:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	4806      	ldr	r0, [pc, #24]	; (8000c28 <HAL_I2S_MspInit+0xfc>)
 8000c0e:	f000 fea3 	bl	8001958 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000c12:	bf00      	nop
 8000c14:	3738      	adds	r7, #56	; 0x38
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	40003c00 	.word	0x40003c00
 8000c20:	40023800 	.word	0x40023800
 8000c24:	40020000 	.word	0x40020000
 8000c28:	40020800 	.word	0x40020800

08000c2c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b08a      	sub	sp, #40	; 0x28
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c34:	f107 0314 	add.w	r3, r7, #20
 8000c38:	2200      	movs	r2, #0
 8000c3a:	601a      	str	r2, [r3, #0]
 8000c3c:	605a      	str	r2, [r3, #4]
 8000c3e:	609a      	str	r2, [r3, #8]
 8000c40:	60da      	str	r2, [r3, #12]
 8000c42:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4a19      	ldr	r2, [pc, #100]	; (8000cb0 <HAL_SPI_MspInit+0x84>)
 8000c4a:	4293      	cmp	r3, r2
 8000c4c:	d12b      	bne.n	8000ca6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c4e:	2300      	movs	r3, #0
 8000c50:	613b      	str	r3, [r7, #16]
 8000c52:	4b18      	ldr	r3, [pc, #96]	; (8000cb4 <HAL_SPI_MspInit+0x88>)
 8000c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c56:	4a17      	ldr	r2, [pc, #92]	; (8000cb4 <HAL_SPI_MspInit+0x88>)
 8000c58:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c5c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c5e:	4b15      	ldr	r3, [pc, #84]	; (8000cb4 <HAL_SPI_MspInit+0x88>)
 8000c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c62:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c66:	613b      	str	r3, [r7, #16]
 8000c68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	60fb      	str	r3, [r7, #12]
 8000c6e:	4b11      	ldr	r3, [pc, #68]	; (8000cb4 <HAL_SPI_MspInit+0x88>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c72:	4a10      	ldr	r2, [pc, #64]	; (8000cb4 <HAL_SPI_MspInit+0x88>)
 8000c74:	f043 0301 	orr.w	r3, r3, #1
 8000c78:	6313      	str	r3, [r2, #48]	; 0x30
 8000c7a:	4b0e      	ldr	r3, [pc, #56]	; (8000cb4 <HAL_SPI_MspInit+0x88>)
 8000c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7e:	f003 0301 	and.w	r3, r3, #1
 8000c82:	60fb      	str	r3, [r7, #12]
 8000c84:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000c86:	23e0      	movs	r3, #224	; 0xe0
 8000c88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c8a:	2302      	movs	r3, #2
 8000c8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c92:	2300      	movs	r3, #0
 8000c94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c96:	2305      	movs	r3, #5
 8000c98:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c9a:	f107 0314 	add.w	r3, r7, #20
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	4805      	ldr	r0, [pc, #20]	; (8000cb8 <HAL_SPI_MspInit+0x8c>)
 8000ca2:	f000 fe59 	bl	8001958 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000ca6:	bf00      	nop
 8000ca8:	3728      	adds	r7, #40	; 0x28
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	40013000 	.word	0x40013000
 8000cb4:	40023800 	.word	0x40023800
 8000cb8:	40020000 	.word	0x40020000

08000cbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cc0:	e7fe      	b.n	8000cc0 <NMI_Handler+0x4>

08000cc2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cc2:	b480      	push	{r7}
 8000cc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cc6:	e7fe      	b.n	8000cc6 <HardFault_Handler+0x4>

08000cc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ccc:	e7fe      	b.n	8000ccc <MemManage_Handler+0x4>

08000cce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cce:	b480      	push	{r7}
 8000cd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cd2:	e7fe      	b.n	8000cd2 <BusFault_Handler+0x4>

08000cd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cd8:	e7fe      	b.n	8000cd8 <UsageFault_Handler+0x4>

08000cda <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cda:	b480      	push	{r7}
 8000cdc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cde:	bf00      	nop
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce6:	4770      	bx	lr

08000ce8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cec:	bf00      	nop
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr

08000cf6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cf6:	b480      	push	{r7}
 8000cf8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cfa:	bf00      	nop
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d02:	4770      	bx	lr

08000d04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d08:	f000 f8d0 	bl	8000eac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d0c:	bf00      	nop
 8000d0e:	bd80      	pop	{r7, pc}

08000d10 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000d14:	4802      	ldr	r0, [pc, #8]	; (8000d20 <OTG_FS_IRQHandler+0x10>)
 8000d16:	f001 fa3f 	bl	8002198 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000d1a:	bf00      	nop
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	200005bc 	.word	0x200005bc

08000d24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b086      	sub	sp, #24
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d2c:	4a14      	ldr	r2, [pc, #80]	; (8000d80 <_sbrk+0x5c>)
 8000d2e:	4b15      	ldr	r3, [pc, #84]	; (8000d84 <_sbrk+0x60>)
 8000d30:	1ad3      	subs	r3, r2, r3
 8000d32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d34:	697b      	ldr	r3, [r7, #20]
 8000d36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d38:	4b13      	ldr	r3, [pc, #76]	; (8000d88 <_sbrk+0x64>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d102      	bne.n	8000d46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d40:	4b11      	ldr	r3, [pc, #68]	; (8000d88 <_sbrk+0x64>)
 8000d42:	4a12      	ldr	r2, [pc, #72]	; (8000d8c <_sbrk+0x68>)
 8000d44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d46:	4b10      	ldr	r3, [pc, #64]	; (8000d88 <_sbrk+0x64>)
 8000d48:	681a      	ldr	r2, [r3, #0]
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	4413      	add	r3, r2
 8000d4e:	693a      	ldr	r2, [r7, #16]
 8000d50:	429a      	cmp	r2, r3
 8000d52:	d207      	bcs.n	8000d64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d54:	f006 fb72 	bl	800743c <__errno>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	220c      	movs	r2, #12
 8000d5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d62:	e009      	b.n	8000d78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d64:	4b08      	ldr	r3, [pc, #32]	; (8000d88 <_sbrk+0x64>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d6a:	4b07      	ldr	r3, [pc, #28]	; (8000d88 <_sbrk+0x64>)
 8000d6c:	681a      	ldr	r2, [r3, #0]
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	4413      	add	r3, r2
 8000d72:	4a05      	ldr	r2, [pc, #20]	; (8000d88 <_sbrk+0x64>)
 8000d74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d76:	68fb      	ldr	r3, [r7, #12]
}
 8000d78:	4618      	mov	r0, r3
 8000d7a:	3718      	adds	r7, #24
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	20020000 	.word	0x20020000
 8000d84:	00000400 	.word	0x00000400
 8000d88:	200001d8 	.word	0x200001d8
 8000d8c:	20000a08 	.word	0x20000a08

08000d90 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d94:	4b06      	ldr	r3, [pc, #24]	; (8000db0 <SystemInit+0x20>)
 8000d96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d9a:	4a05      	ldr	r2, [pc, #20]	; (8000db0 <SystemInit+0x20>)
 8000d9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000da0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000da4:	bf00      	nop
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr
 8000dae:	bf00      	nop
 8000db0:	e000ed00 	.word	0xe000ed00

08000db4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000db4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000dec <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000db8:	480d      	ldr	r0, [pc, #52]	; (8000df0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000dba:	490e      	ldr	r1, [pc, #56]	; (8000df4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000dbc:	4a0e      	ldr	r2, [pc, #56]	; (8000df8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000dbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dc0:	e002      	b.n	8000dc8 <LoopCopyDataInit>

08000dc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dc6:	3304      	adds	r3, #4

08000dc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dcc:	d3f9      	bcc.n	8000dc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dce:	4a0b      	ldr	r2, [pc, #44]	; (8000dfc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000dd0:	4c0b      	ldr	r4, [pc, #44]	; (8000e00 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000dd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dd4:	e001      	b.n	8000dda <LoopFillZerobss>

08000dd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dd8:	3204      	adds	r2, #4

08000dda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ddc:	d3fb      	bcc.n	8000dd6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000dde:	f7ff ffd7 	bl	8000d90 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000de2:	f006 fb31 	bl	8007448 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000de6:	f7ff fb6d 	bl	80004c4 <main>
  bx  lr    
 8000dea:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000dec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000df0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000df4:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000df8:	08007570 	.word	0x08007570
  ldr r2, =_sbss
 8000dfc:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000e00:	20000a08 	.word	0x20000a08

08000e04 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e04:	e7fe      	b.n	8000e04 <ADC_IRQHandler>
	...

08000e08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e0c:	4b0e      	ldr	r3, [pc, #56]	; (8000e48 <HAL_Init+0x40>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4a0d      	ldr	r2, [pc, #52]	; (8000e48 <HAL_Init+0x40>)
 8000e12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e16:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e18:	4b0b      	ldr	r3, [pc, #44]	; (8000e48 <HAL_Init+0x40>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a0a      	ldr	r2, [pc, #40]	; (8000e48 <HAL_Init+0x40>)
 8000e1e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e22:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e24:	4b08      	ldr	r3, [pc, #32]	; (8000e48 <HAL_Init+0x40>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a07      	ldr	r2, [pc, #28]	; (8000e48 <HAL_Init+0x40>)
 8000e2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e2e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e30:	2003      	movs	r0, #3
 8000e32:	f000 fd4f 	bl	80018d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e36:	2000      	movs	r0, #0
 8000e38:	f000 f808 	bl	8000e4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e3c:	f7ff fdc2 	bl	80009c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e40:	2300      	movs	r3, #0
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	40023c00 	.word	0x40023c00

08000e4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e54:	4b12      	ldr	r3, [pc, #72]	; (8000ea0 <HAL_InitTick+0x54>)
 8000e56:	681a      	ldr	r2, [r3, #0]
 8000e58:	4b12      	ldr	r3, [pc, #72]	; (8000ea4 <HAL_InitTick+0x58>)
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e62:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e66:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f000 fd67 	bl	800193e <HAL_SYSTICK_Config>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d001      	beq.n	8000e7a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e76:	2301      	movs	r3, #1
 8000e78:	e00e      	b.n	8000e98 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	2b0f      	cmp	r3, #15
 8000e7e:	d80a      	bhi.n	8000e96 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e80:	2200      	movs	r2, #0
 8000e82:	6879      	ldr	r1, [r7, #4]
 8000e84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e88:	f000 fd2f 	bl	80018ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e8c:	4a06      	ldr	r2, [pc, #24]	; (8000ea8 <HAL_InitTick+0x5c>)
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e92:	2300      	movs	r3, #0
 8000e94:	e000      	b.n	8000e98 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e96:	2301      	movs	r3, #1
}
 8000e98:	4618      	mov	r0, r3
 8000e9a:	3708      	adds	r7, #8
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	20000000 	.word	0x20000000
 8000ea4:	20000008 	.word	0x20000008
 8000ea8:	20000004 	.word	0x20000004

08000eac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000eb0:	4b06      	ldr	r3, [pc, #24]	; (8000ecc <HAL_IncTick+0x20>)
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	461a      	mov	r2, r3
 8000eb6:	4b06      	ldr	r3, [pc, #24]	; (8000ed0 <HAL_IncTick+0x24>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	4413      	add	r3, r2
 8000ebc:	4a04      	ldr	r2, [pc, #16]	; (8000ed0 <HAL_IncTick+0x24>)
 8000ebe:	6013      	str	r3, [r2, #0]
}
 8000ec0:	bf00      	nop
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	20000008 	.word	0x20000008
 8000ed0:	200001dc 	.word	0x200001dc

08000ed4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ed8:	4b03      	ldr	r3, [pc, #12]	; (8000ee8 <HAL_GetTick+0x14>)
 8000eda:	681b      	ldr	r3, [r3, #0]
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop
 8000ee8:	200001dc 	.word	0x200001dc

08000eec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b084      	sub	sp, #16
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ef4:	f7ff ffee 	bl	8000ed4 <HAL_GetTick>
 8000ef8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000f04:	d005      	beq.n	8000f12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f06:	4b0a      	ldr	r3, [pc, #40]	; (8000f30 <HAL_Delay+0x44>)
 8000f08:	781b      	ldrb	r3, [r3, #0]
 8000f0a:	461a      	mov	r2, r3
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	4413      	add	r3, r2
 8000f10:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f12:	bf00      	nop
 8000f14:	f7ff ffde 	bl	8000ed4 <HAL_GetTick>
 8000f18:	4602      	mov	r2, r0
 8000f1a:	68bb      	ldr	r3, [r7, #8]
 8000f1c:	1ad3      	subs	r3, r2, r3
 8000f1e:	68fa      	ldr	r2, [r7, #12]
 8000f20:	429a      	cmp	r2, r3
 8000f22:	d8f7      	bhi.n	8000f14 <HAL_Delay+0x28>
  {
  }
}
 8000f24:	bf00      	nop
 8000f26:	bf00      	nop
 8000f28:	3710      	adds	r7, #16
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	20000008 	.word	0x20000008

08000f34 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b084      	sub	sp, #16
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d101      	bne.n	8000f4a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000f46:	2301      	movs	r3, #1
 8000f48:	e033      	b.n	8000fb2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d109      	bne.n	8000f66 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000f52:	6878      	ldr	r0, [r7, #4]
 8000f54:	f7ff fd5e 	bl	8000a14 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	2200      	movs	r2, #0
 8000f62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f6a:	f003 0310 	and.w	r3, r3, #16
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d118      	bne.n	8000fa4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f76:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000f7a:	f023 0302 	bic.w	r3, r3, #2
 8000f7e:	f043 0202 	orr.w	r2, r3, #2
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000f86:	6878      	ldr	r0, [r7, #4]
 8000f88:	f000 fad8 	bl	800153c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	2200      	movs	r2, #0
 8000f90:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f96:	f023 0303 	bic.w	r3, r3, #3
 8000f9a:	f043 0201 	orr.w	r2, r3, #1
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	641a      	str	r2, [r3, #64]	; 0x40
 8000fa2:	e001      	b.n	8000fa8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	2200      	movs	r2, #0
 8000fac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000fb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	3710      	adds	r7, #16
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
	...

08000fbc <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b085      	sub	sp, #20
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000fce:	2b01      	cmp	r3, #1
 8000fd0:	d101      	bne.n	8000fd6 <HAL_ADC_Start+0x1a>
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	e0b2      	b.n	800113c <HAL_ADC_Start+0x180>
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	2201      	movs	r2, #1
 8000fda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	689b      	ldr	r3, [r3, #8]
 8000fe4:	f003 0301 	and.w	r3, r3, #1
 8000fe8:	2b01      	cmp	r3, #1
 8000fea:	d018      	beq.n	800101e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	689a      	ldr	r2, [r3, #8]
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	f042 0201 	orr.w	r2, r2, #1
 8000ffa:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000ffc:	4b52      	ldr	r3, [pc, #328]	; (8001148 <HAL_ADC_Start+0x18c>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4a52      	ldr	r2, [pc, #328]	; (800114c <HAL_ADC_Start+0x190>)
 8001002:	fba2 2303 	umull	r2, r3, r2, r3
 8001006:	0c9a      	lsrs	r2, r3, #18
 8001008:	4613      	mov	r3, r2
 800100a:	005b      	lsls	r3, r3, #1
 800100c:	4413      	add	r3, r2
 800100e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001010:	e002      	b.n	8001018 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001012:	68bb      	ldr	r3, [r7, #8]
 8001014:	3b01      	subs	r3, #1
 8001016:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001018:	68bb      	ldr	r3, [r7, #8]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d1f9      	bne.n	8001012 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	689b      	ldr	r3, [r3, #8]
 8001024:	f003 0301 	and.w	r3, r3, #1
 8001028:	2b01      	cmp	r3, #1
 800102a:	d17a      	bne.n	8001122 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001030:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001034:	f023 0301 	bic.w	r3, r3, #1
 8001038:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800104a:	2b00      	cmp	r3, #0
 800104c:	d007      	beq.n	800105e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001052:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001056:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001062:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001066:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800106a:	d106      	bne.n	800107a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001070:	f023 0206 	bic.w	r2, r3, #6
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	645a      	str	r2, [r3, #68]	; 0x44
 8001078:	e002      	b.n	8001080 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	2200      	movs	r2, #0
 800107e:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	2200      	movs	r2, #0
 8001084:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001088:	4b31      	ldr	r3, [pc, #196]	; (8001150 <HAL_ADC_Start+0x194>)
 800108a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001094:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	f003 031f 	and.w	r3, r3, #31
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d12a      	bne.n	80010f8 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	4a2b      	ldr	r2, [pc, #172]	; (8001154 <HAL_ADC_Start+0x198>)
 80010a8:	4293      	cmp	r3, r2
 80010aa:	d015      	beq.n	80010d8 <HAL_ADC_Start+0x11c>
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a29      	ldr	r2, [pc, #164]	; (8001158 <HAL_ADC_Start+0x19c>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d105      	bne.n	80010c2 <HAL_ADC_Start+0x106>
 80010b6:	4b26      	ldr	r3, [pc, #152]	; (8001150 <HAL_ADC_Start+0x194>)
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	f003 031f 	and.w	r3, r3, #31
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d00a      	beq.n	80010d8 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	4a25      	ldr	r2, [pc, #148]	; (800115c <HAL_ADC_Start+0x1a0>)
 80010c8:	4293      	cmp	r3, r2
 80010ca:	d136      	bne.n	800113a <HAL_ADC_Start+0x17e>
 80010cc:	4b20      	ldr	r3, [pc, #128]	; (8001150 <HAL_ADC_Start+0x194>)
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	f003 0310 	and.w	r3, r3, #16
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d130      	bne.n	800113a <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	689b      	ldr	r3, [r3, #8]
 80010de:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d129      	bne.n	800113a <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	689a      	ldr	r2, [r3, #8]
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80010f4:	609a      	str	r2, [r3, #8]
 80010f6:	e020      	b.n	800113a <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4a15      	ldr	r2, [pc, #84]	; (8001154 <HAL_ADC_Start+0x198>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d11b      	bne.n	800113a <HAL_ADC_Start+0x17e>
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	689b      	ldr	r3, [r3, #8]
 8001108:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800110c:	2b00      	cmp	r3, #0
 800110e:	d114      	bne.n	800113a <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	689a      	ldr	r2, [r3, #8]
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800111e:	609a      	str	r2, [r3, #8]
 8001120:	e00b      	b.n	800113a <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001126:	f043 0210 	orr.w	r2, r3, #16
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001132:	f043 0201 	orr.w	r2, r3, #1
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800113a:	2300      	movs	r3, #0
}
 800113c:	4618      	mov	r0, r3
 800113e:	3714      	adds	r7, #20
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr
 8001148:	20000000 	.word	0x20000000
 800114c:	431bde83 	.word	0x431bde83
 8001150:	40012300 	.word	0x40012300
 8001154:	40012000 	.word	0x40012000
 8001158:	40012100 	.word	0x40012100
 800115c:	40012200 	.word	0x40012200

08001160 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001160:	b480      	push	{r7}
 8001162:	b083      	sub	sp, #12
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800116e:	2b01      	cmp	r3, #1
 8001170:	d101      	bne.n	8001176 <HAL_ADC_Stop+0x16>
 8001172:	2302      	movs	r3, #2
 8001174:	e021      	b.n	80011ba <HAL_ADC_Stop+0x5a>
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	2201      	movs	r2, #1
 800117a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	689a      	ldr	r2, [r3, #8]
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f022 0201 	bic.w	r2, r2, #1
 800118c:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	689b      	ldr	r3, [r3, #8]
 8001194:	f003 0301 	and.w	r3, r3, #1
 8001198:	2b00      	cmp	r3, #0
 800119a:	d109      	bne.n	80011b0 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80011a4:	f023 0301 	bic.w	r3, r3, #1
 80011a8:	f043 0201 	orr.w	r2, r3, #1
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	2200      	movs	r2, #0
 80011b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80011b8:	2300      	movs	r3, #0
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	370c      	adds	r7, #12
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr

080011c6 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80011c6:	b580      	push	{r7, lr}
 80011c8:	b084      	sub	sp, #16
 80011ca:	af00      	add	r7, sp, #0
 80011cc:	6078      	str	r0, [r7, #4]
 80011ce:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80011d0:	2300      	movs	r3, #0
 80011d2:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	689b      	ldr	r3, [r3, #8]
 80011da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011e2:	d113      	bne.n	800120c <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	689b      	ldr	r3, [r3, #8]
 80011ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80011ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80011f2:	d10b      	bne.n	800120c <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f8:	f043 0220 	orr.w	r2, r3, #32
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	2200      	movs	r2, #0
 8001204:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001208:	2301      	movs	r3, #1
 800120a:	e063      	b.n	80012d4 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800120c:	f7ff fe62 	bl	8000ed4 <HAL_GetTick>
 8001210:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001212:	e021      	b.n	8001258 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800121a:	d01d      	beq.n	8001258 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d007      	beq.n	8001232 <HAL_ADC_PollForConversion+0x6c>
 8001222:	f7ff fe57 	bl	8000ed4 <HAL_GetTick>
 8001226:	4602      	mov	r2, r0
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	1ad3      	subs	r3, r2, r3
 800122c:	683a      	ldr	r2, [r7, #0]
 800122e:	429a      	cmp	r2, r3
 8001230:	d212      	bcs.n	8001258 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f003 0302 	and.w	r3, r3, #2
 800123c:	2b02      	cmp	r3, #2
 800123e:	d00b      	beq.n	8001258 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001244:	f043 0204 	orr.w	r2, r3, #4
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	2200      	movs	r2, #0
 8001250:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001254:	2303      	movs	r3, #3
 8001256:	e03d      	b.n	80012d4 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f003 0302 	and.w	r3, r3, #2
 8001262:	2b02      	cmp	r3, #2
 8001264:	d1d6      	bne.n	8001214 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f06f 0212 	mvn.w	r2, #18
 800126e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001274:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	689b      	ldr	r3, [r3, #8]
 8001282:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001286:	2b00      	cmp	r3, #0
 8001288:	d123      	bne.n	80012d2 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800128e:	2b00      	cmp	r3, #0
 8001290:	d11f      	bne.n	80012d2 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001298:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800129c:	2b00      	cmp	r3, #0
 800129e:	d006      	beq.n	80012ae <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	689b      	ldr	r3, [r3, #8]
 80012a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d111      	bne.n	80012d2 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d105      	bne.n	80012d2 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ca:	f043 0201 	orr.w	r2, r3, #1
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80012d2:	2300      	movs	r3, #0
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	3710      	adds	r7, #16
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}

080012dc <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80012dc:	b480      	push	{r7}
 80012de:	b083      	sub	sp, #12
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	370c      	adds	r7, #12
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
	...

080012f8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b085      	sub	sp, #20
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
 8001300:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001302:	2300      	movs	r3, #0
 8001304:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800130c:	2b01      	cmp	r3, #1
 800130e:	d101      	bne.n	8001314 <HAL_ADC_ConfigChannel+0x1c>
 8001310:	2302      	movs	r3, #2
 8001312:	e105      	b.n	8001520 <HAL_ADC_ConfigChannel+0x228>
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2201      	movs	r2, #1
 8001318:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	2b09      	cmp	r3, #9
 8001322:	d925      	bls.n	8001370 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	68d9      	ldr	r1, [r3, #12]
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	b29b      	uxth	r3, r3
 8001330:	461a      	mov	r2, r3
 8001332:	4613      	mov	r3, r2
 8001334:	005b      	lsls	r3, r3, #1
 8001336:	4413      	add	r3, r2
 8001338:	3b1e      	subs	r3, #30
 800133a:	2207      	movs	r2, #7
 800133c:	fa02 f303 	lsl.w	r3, r2, r3
 8001340:	43da      	mvns	r2, r3
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	400a      	ands	r2, r1
 8001348:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	68d9      	ldr	r1, [r3, #12]
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	689a      	ldr	r2, [r3, #8]
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	b29b      	uxth	r3, r3
 800135a:	4618      	mov	r0, r3
 800135c:	4603      	mov	r3, r0
 800135e:	005b      	lsls	r3, r3, #1
 8001360:	4403      	add	r3, r0
 8001362:	3b1e      	subs	r3, #30
 8001364:	409a      	lsls	r2, r3
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	430a      	orrs	r2, r1
 800136c:	60da      	str	r2, [r3, #12]
 800136e:	e022      	b.n	80013b6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	6919      	ldr	r1, [r3, #16]
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	b29b      	uxth	r3, r3
 800137c:	461a      	mov	r2, r3
 800137e:	4613      	mov	r3, r2
 8001380:	005b      	lsls	r3, r3, #1
 8001382:	4413      	add	r3, r2
 8001384:	2207      	movs	r2, #7
 8001386:	fa02 f303 	lsl.w	r3, r2, r3
 800138a:	43da      	mvns	r2, r3
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	400a      	ands	r2, r1
 8001392:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	6919      	ldr	r1, [r3, #16]
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	689a      	ldr	r2, [r3, #8]
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	b29b      	uxth	r3, r3
 80013a4:	4618      	mov	r0, r3
 80013a6:	4603      	mov	r3, r0
 80013a8:	005b      	lsls	r3, r3, #1
 80013aa:	4403      	add	r3, r0
 80013ac:	409a      	lsls	r2, r3
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	430a      	orrs	r2, r1
 80013b4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	2b06      	cmp	r3, #6
 80013bc:	d824      	bhi.n	8001408 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	685a      	ldr	r2, [r3, #4]
 80013c8:	4613      	mov	r3, r2
 80013ca:	009b      	lsls	r3, r3, #2
 80013cc:	4413      	add	r3, r2
 80013ce:	3b05      	subs	r3, #5
 80013d0:	221f      	movs	r2, #31
 80013d2:	fa02 f303 	lsl.w	r3, r2, r3
 80013d6:	43da      	mvns	r2, r3
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	400a      	ands	r2, r1
 80013de:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	b29b      	uxth	r3, r3
 80013ec:	4618      	mov	r0, r3
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	685a      	ldr	r2, [r3, #4]
 80013f2:	4613      	mov	r3, r2
 80013f4:	009b      	lsls	r3, r3, #2
 80013f6:	4413      	add	r3, r2
 80013f8:	3b05      	subs	r3, #5
 80013fa:	fa00 f203 	lsl.w	r2, r0, r3
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	430a      	orrs	r2, r1
 8001404:	635a      	str	r2, [r3, #52]	; 0x34
 8001406:	e04c      	b.n	80014a2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	2b0c      	cmp	r3, #12
 800140e:	d824      	bhi.n	800145a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	685a      	ldr	r2, [r3, #4]
 800141a:	4613      	mov	r3, r2
 800141c:	009b      	lsls	r3, r3, #2
 800141e:	4413      	add	r3, r2
 8001420:	3b23      	subs	r3, #35	; 0x23
 8001422:	221f      	movs	r2, #31
 8001424:	fa02 f303 	lsl.w	r3, r2, r3
 8001428:	43da      	mvns	r2, r3
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	400a      	ands	r2, r1
 8001430:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	b29b      	uxth	r3, r3
 800143e:	4618      	mov	r0, r3
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	685a      	ldr	r2, [r3, #4]
 8001444:	4613      	mov	r3, r2
 8001446:	009b      	lsls	r3, r3, #2
 8001448:	4413      	add	r3, r2
 800144a:	3b23      	subs	r3, #35	; 0x23
 800144c:	fa00 f203 	lsl.w	r2, r0, r3
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	430a      	orrs	r2, r1
 8001456:	631a      	str	r2, [r3, #48]	; 0x30
 8001458:	e023      	b.n	80014a2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	685a      	ldr	r2, [r3, #4]
 8001464:	4613      	mov	r3, r2
 8001466:	009b      	lsls	r3, r3, #2
 8001468:	4413      	add	r3, r2
 800146a:	3b41      	subs	r3, #65	; 0x41
 800146c:	221f      	movs	r2, #31
 800146e:	fa02 f303 	lsl.w	r3, r2, r3
 8001472:	43da      	mvns	r2, r3
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	400a      	ands	r2, r1
 800147a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	b29b      	uxth	r3, r3
 8001488:	4618      	mov	r0, r3
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	685a      	ldr	r2, [r3, #4]
 800148e:	4613      	mov	r3, r2
 8001490:	009b      	lsls	r3, r3, #2
 8001492:	4413      	add	r3, r2
 8001494:	3b41      	subs	r3, #65	; 0x41
 8001496:	fa00 f203 	lsl.w	r2, r0, r3
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	430a      	orrs	r2, r1
 80014a0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80014a2:	4b22      	ldr	r3, [pc, #136]	; (800152c <HAL_ADC_ConfigChannel+0x234>)
 80014a4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4a21      	ldr	r2, [pc, #132]	; (8001530 <HAL_ADC_ConfigChannel+0x238>)
 80014ac:	4293      	cmp	r3, r2
 80014ae:	d109      	bne.n	80014c4 <HAL_ADC_ConfigChannel+0x1cc>
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	2b12      	cmp	r3, #18
 80014b6:	d105      	bne.n	80014c4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a19      	ldr	r2, [pc, #100]	; (8001530 <HAL_ADC_ConfigChannel+0x238>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d123      	bne.n	8001516 <HAL_ADC_ConfigChannel+0x21e>
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	2b10      	cmp	r3, #16
 80014d4:	d003      	beq.n	80014de <HAL_ADC_ConfigChannel+0x1e6>
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	2b11      	cmp	r3, #17
 80014dc:	d11b      	bne.n	8001516 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	2b10      	cmp	r3, #16
 80014f0:	d111      	bne.n	8001516 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80014f2:	4b10      	ldr	r3, [pc, #64]	; (8001534 <HAL_ADC_ConfigChannel+0x23c>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4a10      	ldr	r2, [pc, #64]	; (8001538 <HAL_ADC_ConfigChannel+0x240>)
 80014f8:	fba2 2303 	umull	r2, r3, r2, r3
 80014fc:	0c9a      	lsrs	r2, r3, #18
 80014fe:	4613      	mov	r3, r2
 8001500:	009b      	lsls	r3, r3, #2
 8001502:	4413      	add	r3, r2
 8001504:	005b      	lsls	r3, r3, #1
 8001506:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001508:	e002      	b.n	8001510 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800150a:	68bb      	ldr	r3, [r7, #8]
 800150c:	3b01      	subs	r3, #1
 800150e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001510:	68bb      	ldr	r3, [r7, #8]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d1f9      	bne.n	800150a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2200      	movs	r2, #0
 800151a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800151e:	2300      	movs	r3, #0
}
 8001520:	4618      	mov	r0, r3
 8001522:	3714      	adds	r7, #20
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr
 800152c:	40012300 	.word	0x40012300
 8001530:	40012000 	.word	0x40012000
 8001534:	20000000 	.word	0x20000000
 8001538:	431bde83 	.word	0x431bde83

0800153c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800153c:	b480      	push	{r7}
 800153e:	b085      	sub	sp, #20
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001544:	4b79      	ldr	r3, [pc, #484]	; (800172c <ADC_Init+0x1f0>)
 8001546:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	685a      	ldr	r2, [r3, #4]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	431a      	orrs	r2, r3
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	685a      	ldr	r2, [r3, #4]
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001570:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	6859      	ldr	r1, [r3, #4]
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	691b      	ldr	r3, [r3, #16]
 800157c:	021a      	lsls	r2, r3, #8
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	430a      	orrs	r2, r1
 8001584:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	685a      	ldr	r2, [r3, #4]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001594:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	6859      	ldr	r1, [r3, #4]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	689a      	ldr	r2, [r3, #8]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	430a      	orrs	r2, r1
 80015a6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	689a      	ldr	r2, [r3, #8]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80015b6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	6899      	ldr	r1, [r3, #8]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	68da      	ldr	r2, [r3, #12]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	430a      	orrs	r2, r1
 80015c8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015ce:	4a58      	ldr	r2, [pc, #352]	; (8001730 <ADC_Init+0x1f4>)
 80015d0:	4293      	cmp	r3, r2
 80015d2:	d022      	beq.n	800161a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	689a      	ldr	r2, [r3, #8]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80015e2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	6899      	ldr	r1, [r3, #8]
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	430a      	orrs	r2, r1
 80015f4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	689a      	ldr	r2, [r3, #8]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001604:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	6899      	ldr	r1, [r3, #8]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	430a      	orrs	r2, r1
 8001616:	609a      	str	r2, [r3, #8]
 8001618:	e00f      	b.n	800163a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	689a      	ldr	r2, [r3, #8]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001628:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	689a      	ldr	r2, [r3, #8]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001638:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	689a      	ldr	r2, [r3, #8]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f022 0202 	bic.w	r2, r2, #2
 8001648:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	6899      	ldr	r1, [r3, #8]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	7e1b      	ldrb	r3, [r3, #24]
 8001654:	005a      	lsls	r2, r3, #1
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	430a      	orrs	r2, r1
 800165c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d01b      	beq.n	80016a0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	685a      	ldr	r2, [r3, #4]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001676:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	685a      	ldr	r2, [r3, #4]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001686:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	6859      	ldr	r1, [r3, #4]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001692:	3b01      	subs	r3, #1
 8001694:	035a      	lsls	r2, r3, #13
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	430a      	orrs	r2, r1
 800169c:	605a      	str	r2, [r3, #4]
 800169e:	e007      	b.n	80016b0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	685a      	ldr	r2, [r3, #4]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80016ae:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80016be:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	69db      	ldr	r3, [r3, #28]
 80016ca:	3b01      	subs	r3, #1
 80016cc:	051a      	lsls	r2, r3, #20
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	430a      	orrs	r2, r1
 80016d4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	689a      	ldr	r2, [r3, #8]
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80016e4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	6899      	ldr	r1, [r3, #8]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80016f2:	025a      	lsls	r2, r3, #9
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	430a      	orrs	r2, r1
 80016fa:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	689a      	ldr	r2, [r3, #8]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800170a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	6899      	ldr	r1, [r3, #8]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	695b      	ldr	r3, [r3, #20]
 8001716:	029a      	lsls	r2, r3, #10
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	430a      	orrs	r2, r1
 800171e:	609a      	str	r2, [r3, #8]
}
 8001720:	bf00      	nop
 8001722:	3714      	adds	r7, #20
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr
 800172c:	40012300 	.word	0x40012300
 8001730:	0f000001 	.word	0x0f000001

08001734 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001734:	b480      	push	{r7}
 8001736:	b085      	sub	sp, #20
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	f003 0307 	and.w	r3, r3, #7
 8001742:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001744:	4b0c      	ldr	r3, [pc, #48]	; (8001778 <__NVIC_SetPriorityGrouping+0x44>)
 8001746:	68db      	ldr	r3, [r3, #12]
 8001748:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800174a:	68ba      	ldr	r2, [r7, #8]
 800174c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001750:	4013      	ands	r3, r2
 8001752:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001758:	68bb      	ldr	r3, [r7, #8]
 800175a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800175c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001760:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001764:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001766:	4a04      	ldr	r2, [pc, #16]	; (8001778 <__NVIC_SetPriorityGrouping+0x44>)
 8001768:	68bb      	ldr	r3, [r7, #8]
 800176a:	60d3      	str	r3, [r2, #12]
}
 800176c:	bf00      	nop
 800176e:	3714      	adds	r7, #20
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr
 8001778:	e000ed00 	.word	0xe000ed00

0800177c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001780:	4b04      	ldr	r3, [pc, #16]	; (8001794 <__NVIC_GetPriorityGrouping+0x18>)
 8001782:	68db      	ldr	r3, [r3, #12]
 8001784:	0a1b      	lsrs	r3, r3, #8
 8001786:	f003 0307 	and.w	r3, r3, #7
}
 800178a:	4618      	mov	r0, r3
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr
 8001794:	e000ed00 	.word	0xe000ed00

08001798 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001798:	b480      	push	{r7}
 800179a:	b083      	sub	sp, #12
 800179c:	af00      	add	r7, sp, #0
 800179e:	4603      	mov	r3, r0
 80017a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	db0b      	blt.n	80017c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017aa:	79fb      	ldrb	r3, [r7, #7]
 80017ac:	f003 021f 	and.w	r2, r3, #31
 80017b0:	4907      	ldr	r1, [pc, #28]	; (80017d0 <__NVIC_EnableIRQ+0x38>)
 80017b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017b6:	095b      	lsrs	r3, r3, #5
 80017b8:	2001      	movs	r0, #1
 80017ba:	fa00 f202 	lsl.w	r2, r0, r2
 80017be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017c2:	bf00      	nop
 80017c4:	370c      	adds	r7, #12
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop
 80017d0:	e000e100 	.word	0xe000e100

080017d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b083      	sub	sp, #12
 80017d8:	af00      	add	r7, sp, #0
 80017da:	4603      	mov	r3, r0
 80017dc:	6039      	str	r1, [r7, #0]
 80017de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	db0a      	blt.n	80017fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	b2da      	uxtb	r2, r3
 80017ec:	490c      	ldr	r1, [pc, #48]	; (8001820 <__NVIC_SetPriority+0x4c>)
 80017ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017f2:	0112      	lsls	r2, r2, #4
 80017f4:	b2d2      	uxtb	r2, r2
 80017f6:	440b      	add	r3, r1
 80017f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017fc:	e00a      	b.n	8001814 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	b2da      	uxtb	r2, r3
 8001802:	4908      	ldr	r1, [pc, #32]	; (8001824 <__NVIC_SetPriority+0x50>)
 8001804:	79fb      	ldrb	r3, [r7, #7]
 8001806:	f003 030f 	and.w	r3, r3, #15
 800180a:	3b04      	subs	r3, #4
 800180c:	0112      	lsls	r2, r2, #4
 800180e:	b2d2      	uxtb	r2, r2
 8001810:	440b      	add	r3, r1
 8001812:	761a      	strb	r2, [r3, #24]
}
 8001814:	bf00      	nop
 8001816:	370c      	adds	r7, #12
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr
 8001820:	e000e100 	.word	0xe000e100
 8001824:	e000ed00 	.word	0xe000ed00

08001828 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001828:	b480      	push	{r7}
 800182a:	b089      	sub	sp, #36	; 0x24
 800182c:	af00      	add	r7, sp, #0
 800182e:	60f8      	str	r0, [r7, #12]
 8001830:	60b9      	str	r1, [r7, #8]
 8001832:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	f003 0307 	and.w	r3, r3, #7
 800183a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800183c:	69fb      	ldr	r3, [r7, #28]
 800183e:	f1c3 0307 	rsb	r3, r3, #7
 8001842:	2b04      	cmp	r3, #4
 8001844:	bf28      	it	cs
 8001846:	2304      	movcs	r3, #4
 8001848:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800184a:	69fb      	ldr	r3, [r7, #28]
 800184c:	3304      	adds	r3, #4
 800184e:	2b06      	cmp	r3, #6
 8001850:	d902      	bls.n	8001858 <NVIC_EncodePriority+0x30>
 8001852:	69fb      	ldr	r3, [r7, #28]
 8001854:	3b03      	subs	r3, #3
 8001856:	e000      	b.n	800185a <NVIC_EncodePriority+0x32>
 8001858:	2300      	movs	r3, #0
 800185a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800185c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001860:	69bb      	ldr	r3, [r7, #24]
 8001862:	fa02 f303 	lsl.w	r3, r2, r3
 8001866:	43da      	mvns	r2, r3
 8001868:	68bb      	ldr	r3, [r7, #8]
 800186a:	401a      	ands	r2, r3
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001870:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	fa01 f303 	lsl.w	r3, r1, r3
 800187a:	43d9      	mvns	r1, r3
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001880:	4313      	orrs	r3, r2
         );
}
 8001882:	4618      	mov	r0, r3
 8001884:	3724      	adds	r7, #36	; 0x24
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr
	...

08001890 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	3b01      	subs	r3, #1
 800189c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018a0:	d301      	bcc.n	80018a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018a2:	2301      	movs	r3, #1
 80018a4:	e00f      	b.n	80018c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018a6:	4a0a      	ldr	r2, [pc, #40]	; (80018d0 <SysTick_Config+0x40>)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	3b01      	subs	r3, #1
 80018ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018ae:	210f      	movs	r1, #15
 80018b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80018b4:	f7ff ff8e 	bl	80017d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018b8:	4b05      	ldr	r3, [pc, #20]	; (80018d0 <SysTick_Config+0x40>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018be:	4b04      	ldr	r3, [pc, #16]	; (80018d0 <SysTick_Config+0x40>)
 80018c0:	2207      	movs	r2, #7
 80018c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018c4:	2300      	movs	r3, #0
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	3708      	adds	r7, #8
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	e000e010 	.word	0xe000e010

080018d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018dc:	6878      	ldr	r0, [r7, #4]
 80018de:	f7ff ff29 	bl	8001734 <__NVIC_SetPriorityGrouping>
}
 80018e2:	bf00      	nop
 80018e4:	3708      	adds	r7, #8
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}

080018ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018ea:	b580      	push	{r7, lr}
 80018ec:	b086      	sub	sp, #24
 80018ee:	af00      	add	r7, sp, #0
 80018f0:	4603      	mov	r3, r0
 80018f2:	60b9      	str	r1, [r7, #8]
 80018f4:	607a      	str	r2, [r7, #4]
 80018f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018f8:	2300      	movs	r3, #0
 80018fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018fc:	f7ff ff3e 	bl	800177c <__NVIC_GetPriorityGrouping>
 8001900:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001902:	687a      	ldr	r2, [r7, #4]
 8001904:	68b9      	ldr	r1, [r7, #8]
 8001906:	6978      	ldr	r0, [r7, #20]
 8001908:	f7ff ff8e 	bl	8001828 <NVIC_EncodePriority>
 800190c:	4602      	mov	r2, r0
 800190e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001912:	4611      	mov	r1, r2
 8001914:	4618      	mov	r0, r3
 8001916:	f7ff ff5d 	bl	80017d4 <__NVIC_SetPriority>
}
 800191a:	bf00      	nop
 800191c:	3718      	adds	r7, #24
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}

08001922 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001922:	b580      	push	{r7, lr}
 8001924:	b082      	sub	sp, #8
 8001926:	af00      	add	r7, sp, #0
 8001928:	4603      	mov	r3, r0
 800192a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800192c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001930:	4618      	mov	r0, r3
 8001932:	f7ff ff31 	bl	8001798 <__NVIC_EnableIRQ>
}
 8001936:	bf00      	nop
 8001938:	3708      	adds	r7, #8
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}

0800193e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800193e:	b580      	push	{r7, lr}
 8001940:	b082      	sub	sp, #8
 8001942:	af00      	add	r7, sp, #0
 8001944:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001946:	6878      	ldr	r0, [r7, #4]
 8001948:	f7ff ffa2 	bl	8001890 <SysTick_Config>
 800194c:	4603      	mov	r3, r0
}
 800194e:	4618      	mov	r0, r3
 8001950:	3708      	adds	r7, #8
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
	...

08001958 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001958:	b480      	push	{r7}
 800195a:	b089      	sub	sp, #36	; 0x24
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
 8001960:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001962:	2300      	movs	r3, #0
 8001964:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001966:	2300      	movs	r3, #0
 8001968:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800196a:	2300      	movs	r3, #0
 800196c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800196e:	2300      	movs	r3, #0
 8001970:	61fb      	str	r3, [r7, #28]
 8001972:	e16b      	b.n	8001c4c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001974:	2201      	movs	r2, #1
 8001976:	69fb      	ldr	r3, [r7, #28]
 8001978:	fa02 f303 	lsl.w	r3, r2, r3
 800197c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	697a      	ldr	r2, [r7, #20]
 8001984:	4013      	ands	r3, r2
 8001986:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001988:	693a      	ldr	r2, [r7, #16]
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	429a      	cmp	r2, r3
 800198e:	f040 815a 	bne.w	8001c46 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	f003 0303 	and.w	r3, r3, #3
 800199a:	2b01      	cmp	r3, #1
 800199c:	d005      	beq.n	80019aa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019a6:	2b02      	cmp	r3, #2
 80019a8:	d130      	bne.n	8001a0c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80019b0:	69fb      	ldr	r3, [r7, #28]
 80019b2:	005b      	lsls	r3, r3, #1
 80019b4:	2203      	movs	r2, #3
 80019b6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ba:	43db      	mvns	r3, r3
 80019bc:	69ba      	ldr	r2, [r7, #24]
 80019be:	4013      	ands	r3, r2
 80019c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	68da      	ldr	r2, [r3, #12]
 80019c6:	69fb      	ldr	r3, [r7, #28]
 80019c8:	005b      	lsls	r3, r3, #1
 80019ca:	fa02 f303 	lsl.w	r3, r2, r3
 80019ce:	69ba      	ldr	r2, [r7, #24]
 80019d0:	4313      	orrs	r3, r2
 80019d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	69ba      	ldr	r2, [r7, #24]
 80019d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019e0:	2201      	movs	r2, #1
 80019e2:	69fb      	ldr	r3, [r7, #28]
 80019e4:	fa02 f303 	lsl.w	r3, r2, r3
 80019e8:	43db      	mvns	r3, r3
 80019ea:	69ba      	ldr	r2, [r7, #24]
 80019ec:	4013      	ands	r3, r2
 80019ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	091b      	lsrs	r3, r3, #4
 80019f6:	f003 0201 	and.w	r2, r3, #1
 80019fa:	69fb      	ldr	r3, [r7, #28]
 80019fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001a00:	69ba      	ldr	r2, [r7, #24]
 8001a02:	4313      	orrs	r3, r2
 8001a04:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	69ba      	ldr	r2, [r7, #24]
 8001a0a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	f003 0303 	and.w	r3, r3, #3
 8001a14:	2b03      	cmp	r3, #3
 8001a16:	d017      	beq.n	8001a48 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	68db      	ldr	r3, [r3, #12]
 8001a1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a1e:	69fb      	ldr	r3, [r7, #28]
 8001a20:	005b      	lsls	r3, r3, #1
 8001a22:	2203      	movs	r2, #3
 8001a24:	fa02 f303 	lsl.w	r3, r2, r3
 8001a28:	43db      	mvns	r3, r3
 8001a2a:	69ba      	ldr	r2, [r7, #24]
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	689a      	ldr	r2, [r3, #8]
 8001a34:	69fb      	ldr	r3, [r7, #28]
 8001a36:	005b      	lsls	r3, r3, #1
 8001a38:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3c:	69ba      	ldr	r2, [r7, #24]
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	69ba      	ldr	r2, [r7, #24]
 8001a46:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	f003 0303 	and.w	r3, r3, #3
 8001a50:	2b02      	cmp	r3, #2
 8001a52:	d123      	bne.n	8001a9c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a54:	69fb      	ldr	r3, [r7, #28]
 8001a56:	08da      	lsrs	r2, r3, #3
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	3208      	adds	r2, #8
 8001a5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a60:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a62:	69fb      	ldr	r3, [r7, #28]
 8001a64:	f003 0307 	and.w	r3, r3, #7
 8001a68:	009b      	lsls	r3, r3, #2
 8001a6a:	220f      	movs	r2, #15
 8001a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a70:	43db      	mvns	r3, r3
 8001a72:	69ba      	ldr	r2, [r7, #24]
 8001a74:	4013      	ands	r3, r2
 8001a76:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	691a      	ldr	r2, [r3, #16]
 8001a7c:	69fb      	ldr	r3, [r7, #28]
 8001a7e:	f003 0307 	and.w	r3, r3, #7
 8001a82:	009b      	lsls	r3, r3, #2
 8001a84:	fa02 f303 	lsl.w	r3, r2, r3
 8001a88:	69ba      	ldr	r2, [r7, #24]
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a8e:	69fb      	ldr	r3, [r7, #28]
 8001a90:	08da      	lsrs	r2, r3, #3
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	3208      	adds	r2, #8
 8001a96:	69b9      	ldr	r1, [r7, #24]
 8001a98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	005b      	lsls	r3, r3, #1
 8001aa6:	2203      	movs	r2, #3
 8001aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aac:	43db      	mvns	r3, r3
 8001aae:	69ba      	ldr	r2, [r7, #24]
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	f003 0203 	and.w	r2, r3, #3
 8001abc:	69fb      	ldr	r3, [r7, #28]
 8001abe:	005b      	lsls	r3, r3, #1
 8001ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac4:	69ba      	ldr	r2, [r7, #24]
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	69ba      	ldr	r2, [r7, #24]
 8001ace:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	f000 80b4 	beq.w	8001c46 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ade:	2300      	movs	r3, #0
 8001ae0:	60fb      	str	r3, [r7, #12]
 8001ae2:	4b60      	ldr	r3, [pc, #384]	; (8001c64 <HAL_GPIO_Init+0x30c>)
 8001ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ae6:	4a5f      	ldr	r2, [pc, #380]	; (8001c64 <HAL_GPIO_Init+0x30c>)
 8001ae8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001aec:	6453      	str	r3, [r2, #68]	; 0x44
 8001aee:	4b5d      	ldr	r3, [pc, #372]	; (8001c64 <HAL_GPIO_Init+0x30c>)
 8001af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001af2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001af6:	60fb      	str	r3, [r7, #12]
 8001af8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001afa:	4a5b      	ldr	r2, [pc, #364]	; (8001c68 <HAL_GPIO_Init+0x310>)
 8001afc:	69fb      	ldr	r3, [r7, #28]
 8001afe:	089b      	lsrs	r3, r3, #2
 8001b00:	3302      	adds	r3, #2
 8001b02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b06:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b08:	69fb      	ldr	r3, [r7, #28]
 8001b0a:	f003 0303 	and.w	r3, r3, #3
 8001b0e:	009b      	lsls	r3, r3, #2
 8001b10:	220f      	movs	r2, #15
 8001b12:	fa02 f303 	lsl.w	r3, r2, r3
 8001b16:	43db      	mvns	r3, r3
 8001b18:	69ba      	ldr	r2, [r7, #24]
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	4a52      	ldr	r2, [pc, #328]	; (8001c6c <HAL_GPIO_Init+0x314>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d02b      	beq.n	8001b7e <HAL_GPIO_Init+0x226>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	4a51      	ldr	r2, [pc, #324]	; (8001c70 <HAL_GPIO_Init+0x318>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d025      	beq.n	8001b7a <HAL_GPIO_Init+0x222>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	4a50      	ldr	r2, [pc, #320]	; (8001c74 <HAL_GPIO_Init+0x31c>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d01f      	beq.n	8001b76 <HAL_GPIO_Init+0x21e>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	4a4f      	ldr	r2, [pc, #316]	; (8001c78 <HAL_GPIO_Init+0x320>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d019      	beq.n	8001b72 <HAL_GPIO_Init+0x21a>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	4a4e      	ldr	r2, [pc, #312]	; (8001c7c <HAL_GPIO_Init+0x324>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d013      	beq.n	8001b6e <HAL_GPIO_Init+0x216>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	4a4d      	ldr	r2, [pc, #308]	; (8001c80 <HAL_GPIO_Init+0x328>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d00d      	beq.n	8001b6a <HAL_GPIO_Init+0x212>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	4a4c      	ldr	r2, [pc, #304]	; (8001c84 <HAL_GPIO_Init+0x32c>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d007      	beq.n	8001b66 <HAL_GPIO_Init+0x20e>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	4a4b      	ldr	r2, [pc, #300]	; (8001c88 <HAL_GPIO_Init+0x330>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d101      	bne.n	8001b62 <HAL_GPIO_Init+0x20a>
 8001b5e:	2307      	movs	r3, #7
 8001b60:	e00e      	b.n	8001b80 <HAL_GPIO_Init+0x228>
 8001b62:	2308      	movs	r3, #8
 8001b64:	e00c      	b.n	8001b80 <HAL_GPIO_Init+0x228>
 8001b66:	2306      	movs	r3, #6
 8001b68:	e00a      	b.n	8001b80 <HAL_GPIO_Init+0x228>
 8001b6a:	2305      	movs	r3, #5
 8001b6c:	e008      	b.n	8001b80 <HAL_GPIO_Init+0x228>
 8001b6e:	2304      	movs	r3, #4
 8001b70:	e006      	b.n	8001b80 <HAL_GPIO_Init+0x228>
 8001b72:	2303      	movs	r3, #3
 8001b74:	e004      	b.n	8001b80 <HAL_GPIO_Init+0x228>
 8001b76:	2302      	movs	r3, #2
 8001b78:	e002      	b.n	8001b80 <HAL_GPIO_Init+0x228>
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e000      	b.n	8001b80 <HAL_GPIO_Init+0x228>
 8001b7e:	2300      	movs	r3, #0
 8001b80:	69fa      	ldr	r2, [r7, #28]
 8001b82:	f002 0203 	and.w	r2, r2, #3
 8001b86:	0092      	lsls	r2, r2, #2
 8001b88:	4093      	lsls	r3, r2
 8001b8a:	69ba      	ldr	r2, [r7, #24]
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b90:	4935      	ldr	r1, [pc, #212]	; (8001c68 <HAL_GPIO_Init+0x310>)
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	089b      	lsrs	r3, r3, #2
 8001b96:	3302      	adds	r3, #2
 8001b98:	69ba      	ldr	r2, [r7, #24]
 8001b9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b9e:	4b3b      	ldr	r3, [pc, #236]	; (8001c8c <HAL_GPIO_Init+0x334>)
 8001ba0:	689b      	ldr	r3, [r3, #8]
 8001ba2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	43db      	mvns	r3, r3
 8001ba8:	69ba      	ldr	r2, [r7, #24]
 8001baa:	4013      	ands	r3, r2
 8001bac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d003      	beq.n	8001bc2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001bba:	69ba      	ldr	r2, [r7, #24]
 8001bbc:	693b      	ldr	r3, [r7, #16]
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001bc2:	4a32      	ldr	r2, [pc, #200]	; (8001c8c <HAL_GPIO_Init+0x334>)
 8001bc4:	69bb      	ldr	r3, [r7, #24]
 8001bc6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001bc8:	4b30      	ldr	r3, [pc, #192]	; (8001c8c <HAL_GPIO_Init+0x334>)
 8001bca:	68db      	ldr	r3, [r3, #12]
 8001bcc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	43db      	mvns	r3, r3
 8001bd2:	69ba      	ldr	r2, [r7, #24]
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d003      	beq.n	8001bec <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001be4:	69ba      	ldr	r2, [r7, #24]
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	4313      	orrs	r3, r2
 8001bea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001bec:	4a27      	ldr	r2, [pc, #156]	; (8001c8c <HAL_GPIO_Init+0x334>)
 8001bee:	69bb      	ldr	r3, [r7, #24]
 8001bf0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001bf2:	4b26      	ldr	r3, [pc, #152]	; (8001c8c <HAL_GPIO_Init+0x334>)
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bf8:	693b      	ldr	r3, [r7, #16]
 8001bfa:	43db      	mvns	r3, r3
 8001bfc:	69ba      	ldr	r2, [r7, #24]
 8001bfe:	4013      	ands	r3, r2
 8001c00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d003      	beq.n	8001c16 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001c0e:	69ba      	ldr	r2, [r7, #24]
 8001c10:	693b      	ldr	r3, [r7, #16]
 8001c12:	4313      	orrs	r3, r2
 8001c14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c16:	4a1d      	ldr	r2, [pc, #116]	; (8001c8c <HAL_GPIO_Init+0x334>)
 8001c18:	69bb      	ldr	r3, [r7, #24]
 8001c1a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c1c:	4b1b      	ldr	r3, [pc, #108]	; (8001c8c <HAL_GPIO_Init+0x334>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	43db      	mvns	r3, r3
 8001c26:	69ba      	ldr	r2, [r7, #24]
 8001c28:	4013      	ands	r3, r2
 8001c2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d003      	beq.n	8001c40 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001c38:	69ba      	ldr	r2, [r7, #24]
 8001c3a:	693b      	ldr	r3, [r7, #16]
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c40:	4a12      	ldr	r2, [pc, #72]	; (8001c8c <HAL_GPIO_Init+0x334>)
 8001c42:	69bb      	ldr	r3, [r7, #24]
 8001c44:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	3301      	adds	r3, #1
 8001c4a:	61fb      	str	r3, [r7, #28]
 8001c4c:	69fb      	ldr	r3, [r7, #28]
 8001c4e:	2b0f      	cmp	r3, #15
 8001c50:	f67f ae90 	bls.w	8001974 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c54:	bf00      	nop
 8001c56:	bf00      	nop
 8001c58:	3724      	adds	r7, #36	; 0x24
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr
 8001c62:	bf00      	nop
 8001c64:	40023800 	.word	0x40023800
 8001c68:	40013800 	.word	0x40013800
 8001c6c:	40020000 	.word	0x40020000
 8001c70:	40020400 	.word	0x40020400
 8001c74:	40020800 	.word	0x40020800
 8001c78:	40020c00 	.word	0x40020c00
 8001c7c:	40021000 	.word	0x40021000
 8001c80:	40021400 	.word	0x40021400
 8001c84:	40021800 	.word	0x40021800
 8001c88:	40021c00 	.word	0x40021c00
 8001c8c:	40013c00 	.word	0x40013c00

08001c90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b083      	sub	sp, #12
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
 8001c98:	460b      	mov	r3, r1
 8001c9a:	807b      	strh	r3, [r7, #2]
 8001c9c:	4613      	mov	r3, r2
 8001c9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ca0:	787b      	ldrb	r3, [r7, #1]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d003      	beq.n	8001cae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ca6:	887a      	ldrh	r2, [r7, #2]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001cac:	e003      	b.n	8001cb6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001cae:	887b      	ldrh	r3, [r7, #2]
 8001cb0:	041a      	lsls	r2, r3, #16
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	619a      	str	r2, [r3, #24]
}
 8001cb6:	bf00      	nop
 8001cb8:	370c      	adds	r7, #12
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr

08001cc2 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001cc2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cc4:	b08f      	sub	sp, #60	; 0x3c
 8001cc6:	af0a      	add	r7, sp, #40	; 0x28
 8001cc8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d101      	bne.n	8001cd4 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	e054      	b.n	8001d7e <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001ce0:	b2db      	uxtb	r3, r3
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d106      	bne.n	8001cf4 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2200      	movs	r2, #0
 8001cea:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001cee:	6878      	ldr	r0, [r7, #4]
 8001cf0:	f005 f874 	bl	8006ddc <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2203      	movs	r2, #3
 8001cf8:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d102      	bne.n	8001d0e <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4618      	mov	r0, r3
 8001d14:	f003 f867 	bl	8004de6 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	603b      	str	r3, [r7, #0]
 8001d1e:	687e      	ldr	r6, [r7, #4]
 8001d20:	466d      	mov	r5, sp
 8001d22:	f106 0410 	add.w	r4, r6, #16
 8001d26:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d28:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d2a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d2c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d2e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001d32:	e885 0003 	stmia.w	r5, {r0, r1}
 8001d36:	1d33      	adds	r3, r6, #4
 8001d38:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d3a:	6838      	ldr	r0, [r7, #0]
 8001d3c:	f002 ffe1 	bl	8004d02 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	2101      	movs	r1, #1
 8001d46:	4618      	mov	r0, r3
 8001d48:	f003 f85e 	bl	8004e08 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	603b      	str	r3, [r7, #0]
 8001d52:	687e      	ldr	r6, [r7, #4]
 8001d54:	466d      	mov	r5, sp
 8001d56:	f106 0410 	add.w	r4, r6, #16
 8001d5a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d5c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d5e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d60:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d62:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001d66:	e885 0003 	stmia.w	r5, {r0, r1}
 8001d6a:	1d33      	adds	r3, r6, #4
 8001d6c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d6e:	6838      	ldr	r0, [r7, #0]
 8001d70:	f003 f9e6 	bl	8005140 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2201      	movs	r2, #1
 8001d78:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8001d7c:	2300      	movs	r3, #0
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3714      	adds	r7, #20
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001d86 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001d86:	b590      	push	{r4, r7, lr}
 8001d88:	b089      	sub	sp, #36	; 0x24
 8001d8a:	af04      	add	r7, sp, #16
 8001d8c:	6078      	str	r0, [r7, #4]
 8001d8e:	4608      	mov	r0, r1
 8001d90:	4611      	mov	r1, r2
 8001d92:	461a      	mov	r2, r3
 8001d94:	4603      	mov	r3, r0
 8001d96:	70fb      	strb	r3, [r7, #3]
 8001d98:	460b      	mov	r3, r1
 8001d9a:	70bb      	strb	r3, [r7, #2]
 8001d9c:	4613      	mov	r3, r2
 8001d9e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001da6:	2b01      	cmp	r3, #1
 8001da8:	d101      	bne.n	8001dae <HAL_HCD_HC_Init+0x28>
 8001daa:	2302      	movs	r3, #2
 8001dac:	e076      	b.n	8001e9c <HAL_HCD_HC_Init+0x116>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2201      	movs	r2, #1
 8001db2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8001db6:	78fb      	ldrb	r3, [r7, #3]
 8001db8:	687a      	ldr	r2, [r7, #4]
 8001dba:	212c      	movs	r1, #44	; 0x2c
 8001dbc:	fb01 f303 	mul.w	r3, r1, r3
 8001dc0:	4413      	add	r3, r2
 8001dc2:	333d      	adds	r3, #61	; 0x3d
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001dc8:	78fb      	ldrb	r3, [r7, #3]
 8001dca:	687a      	ldr	r2, [r7, #4]
 8001dcc:	212c      	movs	r1, #44	; 0x2c
 8001dce:	fb01 f303 	mul.w	r3, r1, r3
 8001dd2:	4413      	add	r3, r2
 8001dd4:	3338      	adds	r3, #56	; 0x38
 8001dd6:	787a      	ldrb	r2, [r7, #1]
 8001dd8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001dda:	78fb      	ldrb	r3, [r7, #3]
 8001ddc:	687a      	ldr	r2, [r7, #4]
 8001dde:	212c      	movs	r1, #44	; 0x2c
 8001de0:	fb01 f303 	mul.w	r3, r1, r3
 8001de4:	4413      	add	r3, r2
 8001de6:	3340      	adds	r3, #64	; 0x40
 8001de8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001dea:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001dec:	78fb      	ldrb	r3, [r7, #3]
 8001dee:	687a      	ldr	r2, [r7, #4]
 8001df0:	212c      	movs	r1, #44	; 0x2c
 8001df2:	fb01 f303 	mul.w	r3, r1, r3
 8001df6:	4413      	add	r3, r2
 8001df8:	3339      	adds	r3, #57	; 0x39
 8001dfa:	78fa      	ldrb	r2, [r7, #3]
 8001dfc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001dfe:	78fb      	ldrb	r3, [r7, #3]
 8001e00:	687a      	ldr	r2, [r7, #4]
 8001e02:	212c      	movs	r1, #44	; 0x2c
 8001e04:	fb01 f303 	mul.w	r3, r1, r3
 8001e08:	4413      	add	r3, r2
 8001e0a:	333f      	adds	r3, #63	; 0x3f
 8001e0c:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001e10:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001e12:	78fb      	ldrb	r3, [r7, #3]
 8001e14:	78ba      	ldrb	r2, [r7, #2]
 8001e16:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001e1a:	b2d0      	uxtb	r0, r2
 8001e1c:	687a      	ldr	r2, [r7, #4]
 8001e1e:	212c      	movs	r1, #44	; 0x2c
 8001e20:	fb01 f303 	mul.w	r3, r1, r3
 8001e24:	4413      	add	r3, r2
 8001e26:	333a      	adds	r3, #58	; 0x3a
 8001e28:	4602      	mov	r2, r0
 8001e2a:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001e2c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	da09      	bge.n	8001e48 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001e34:	78fb      	ldrb	r3, [r7, #3]
 8001e36:	687a      	ldr	r2, [r7, #4]
 8001e38:	212c      	movs	r1, #44	; 0x2c
 8001e3a:	fb01 f303 	mul.w	r3, r1, r3
 8001e3e:	4413      	add	r3, r2
 8001e40:	333b      	adds	r3, #59	; 0x3b
 8001e42:	2201      	movs	r2, #1
 8001e44:	701a      	strb	r2, [r3, #0]
 8001e46:	e008      	b.n	8001e5a <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001e48:	78fb      	ldrb	r3, [r7, #3]
 8001e4a:	687a      	ldr	r2, [r7, #4]
 8001e4c:	212c      	movs	r1, #44	; 0x2c
 8001e4e:	fb01 f303 	mul.w	r3, r1, r3
 8001e52:	4413      	add	r3, r2
 8001e54:	333b      	adds	r3, #59	; 0x3b
 8001e56:	2200      	movs	r2, #0
 8001e58:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001e5a:	78fb      	ldrb	r3, [r7, #3]
 8001e5c:	687a      	ldr	r2, [r7, #4]
 8001e5e:	212c      	movs	r1, #44	; 0x2c
 8001e60:	fb01 f303 	mul.w	r3, r1, r3
 8001e64:	4413      	add	r3, r2
 8001e66:	333c      	adds	r3, #60	; 0x3c
 8001e68:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001e6c:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6818      	ldr	r0, [r3, #0]
 8001e72:	787c      	ldrb	r4, [r7, #1]
 8001e74:	78ba      	ldrb	r2, [r7, #2]
 8001e76:	78f9      	ldrb	r1, [r7, #3]
 8001e78:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001e7a:	9302      	str	r3, [sp, #8]
 8001e7c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001e80:	9301      	str	r3, [sp, #4]
 8001e82:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001e86:	9300      	str	r3, [sp, #0]
 8001e88:	4623      	mov	r3, r4
 8001e8a:	f003 fab5 	bl	80053f8 <USB_HC_Init>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2200      	movs	r2, #0
 8001e96:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001e9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	3714      	adds	r7, #20
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd90      	pop	{r4, r7, pc}

08001ea4 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b084      	sub	sp, #16
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
 8001eac:	460b      	mov	r3, r1
 8001eae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001eba:	2b01      	cmp	r3, #1
 8001ebc:	d101      	bne.n	8001ec2 <HAL_HCD_HC_Halt+0x1e>
 8001ebe:	2302      	movs	r3, #2
 8001ec0:	e00f      	b.n	8001ee2 <HAL_HCD_HC_Halt+0x3e>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	78fa      	ldrb	r2, [r7, #3]
 8001ed0:	4611      	mov	r1, r2
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f003 fd05 	bl	80058e2 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2200      	movs	r2, #0
 8001edc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001ee0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3710      	adds	r7, #16
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
	...

08001eec <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b082      	sub	sp, #8
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
 8001ef4:	4608      	mov	r0, r1
 8001ef6:	4611      	mov	r1, r2
 8001ef8:	461a      	mov	r2, r3
 8001efa:	4603      	mov	r3, r0
 8001efc:	70fb      	strb	r3, [r7, #3]
 8001efe:	460b      	mov	r3, r1
 8001f00:	70bb      	strb	r3, [r7, #2]
 8001f02:	4613      	mov	r3, r2
 8001f04:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001f06:	78fb      	ldrb	r3, [r7, #3]
 8001f08:	687a      	ldr	r2, [r7, #4]
 8001f0a:	212c      	movs	r1, #44	; 0x2c
 8001f0c:	fb01 f303 	mul.w	r3, r1, r3
 8001f10:	4413      	add	r3, r2
 8001f12:	333b      	adds	r3, #59	; 0x3b
 8001f14:	78ba      	ldrb	r2, [r7, #2]
 8001f16:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001f18:	78fb      	ldrb	r3, [r7, #3]
 8001f1a:	687a      	ldr	r2, [r7, #4]
 8001f1c:	212c      	movs	r1, #44	; 0x2c
 8001f1e:	fb01 f303 	mul.w	r3, r1, r3
 8001f22:	4413      	add	r3, r2
 8001f24:	333f      	adds	r3, #63	; 0x3f
 8001f26:	787a      	ldrb	r2, [r7, #1]
 8001f28:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001f2a:	7c3b      	ldrb	r3, [r7, #16]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d112      	bne.n	8001f56 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001f30:	78fb      	ldrb	r3, [r7, #3]
 8001f32:	687a      	ldr	r2, [r7, #4]
 8001f34:	212c      	movs	r1, #44	; 0x2c
 8001f36:	fb01 f303 	mul.w	r3, r1, r3
 8001f3a:	4413      	add	r3, r2
 8001f3c:	3342      	adds	r3, #66	; 0x42
 8001f3e:	2203      	movs	r2, #3
 8001f40:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001f42:	78fb      	ldrb	r3, [r7, #3]
 8001f44:	687a      	ldr	r2, [r7, #4]
 8001f46:	212c      	movs	r1, #44	; 0x2c
 8001f48:	fb01 f303 	mul.w	r3, r1, r3
 8001f4c:	4413      	add	r3, r2
 8001f4e:	333d      	adds	r3, #61	; 0x3d
 8001f50:	7f3a      	ldrb	r2, [r7, #28]
 8001f52:	701a      	strb	r2, [r3, #0]
 8001f54:	e008      	b.n	8001f68 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001f56:	78fb      	ldrb	r3, [r7, #3]
 8001f58:	687a      	ldr	r2, [r7, #4]
 8001f5a:	212c      	movs	r1, #44	; 0x2c
 8001f5c:	fb01 f303 	mul.w	r3, r1, r3
 8001f60:	4413      	add	r3, r2
 8001f62:	3342      	adds	r3, #66	; 0x42
 8001f64:	2202      	movs	r2, #2
 8001f66:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001f68:	787b      	ldrb	r3, [r7, #1]
 8001f6a:	2b03      	cmp	r3, #3
 8001f6c:	f200 80c6 	bhi.w	80020fc <HAL_HCD_HC_SubmitRequest+0x210>
 8001f70:	a201      	add	r2, pc, #4	; (adr r2, 8001f78 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8001f72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f76:	bf00      	nop
 8001f78:	08001f89 	.word	0x08001f89
 8001f7c:	080020e9 	.word	0x080020e9
 8001f80:	08001fed 	.word	0x08001fed
 8001f84:	0800206b 	.word	0x0800206b
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001f88:	7c3b      	ldrb	r3, [r7, #16]
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	f040 80b8 	bne.w	8002100 <HAL_HCD_HC_SubmitRequest+0x214>
 8001f90:	78bb      	ldrb	r3, [r7, #2]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	f040 80b4 	bne.w	8002100 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8001f98:	8b3b      	ldrh	r3, [r7, #24]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d108      	bne.n	8001fb0 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001f9e:	78fb      	ldrb	r3, [r7, #3]
 8001fa0:	687a      	ldr	r2, [r7, #4]
 8001fa2:	212c      	movs	r1, #44	; 0x2c
 8001fa4:	fb01 f303 	mul.w	r3, r1, r3
 8001fa8:	4413      	add	r3, r2
 8001faa:	3355      	adds	r3, #85	; 0x55
 8001fac:	2201      	movs	r2, #1
 8001fae:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001fb0:	78fb      	ldrb	r3, [r7, #3]
 8001fb2:	687a      	ldr	r2, [r7, #4]
 8001fb4:	212c      	movs	r1, #44	; 0x2c
 8001fb6:	fb01 f303 	mul.w	r3, r1, r3
 8001fba:	4413      	add	r3, r2
 8001fbc:	3355      	adds	r3, #85	; 0x55
 8001fbe:	781b      	ldrb	r3, [r3, #0]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d109      	bne.n	8001fd8 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001fc4:	78fb      	ldrb	r3, [r7, #3]
 8001fc6:	687a      	ldr	r2, [r7, #4]
 8001fc8:	212c      	movs	r1, #44	; 0x2c
 8001fca:	fb01 f303 	mul.w	r3, r1, r3
 8001fce:	4413      	add	r3, r2
 8001fd0:	3342      	adds	r3, #66	; 0x42
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001fd6:	e093      	b.n	8002100 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001fd8:	78fb      	ldrb	r3, [r7, #3]
 8001fda:	687a      	ldr	r2, [r7, #4]
 8001fdc:	212c      	movs	r1, #44	; 0x2c
 8001fde:	fb01 f303 	mul.w	r3, r1, r3
 8001fe2:	4413      	add	r3, r2
 8001fe4:	3342      	adds	r3, #66	; 0x42
 8001fe6:	2202      	movs	r2, #2
 8001fe8:	701a      	strb	r2, [r3, #0]
      break;
 8001fea:	e089      	b.n	8002100 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001fec:	78bb      	ldrb	r3, [r7, #2]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d11d      	bne.n	800202e <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001ff2:	78fb      	ldrb	r3, [r7, #3]
 8001ff4:	687a      	ldr	r2, [r7, #4]
 8001ff6:	212c      	movs	r1, #44	; 0x2c
 8001ff8:	fb01 f303 	mul.w	r3, r1, r3
 8001ffc:	4413      	add	r3, r2
 8001ffe:	3355      	adds	r3, #85	; 0x55
 8002000:	781b      	ldrb	r3, [r3, #0]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d109      	bne.n	800201a <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002006:	78fb      	ldrb	r3, [r7, #3]
 8002008:	687a      	ldr	r2, [r7, #4]
 800200a:	212c      	movs	r1, #44	; 0x2c
 800200c:	fb01 f303 	mul.w	r3, r1, r3
 8002010:	4413      	add	r3, r2
 8002012:	3342      	adds	r3, #66	; 0x42
 8002014:	2200      	movs	r2, #0
 8002016:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002018:	e073      	b.n	8002102 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800201a:	78fb      	ldrb	r3, [r7, #3]
 800201c:	687a      	ldr	r2, [r7, #4]
 800201e:	212c      	movs	r1, #44	; 0x2c
 8002020:	fb01 f303 	mul.w	r3, r1, r3
 8002024:	4413      	add	r3, r2
 8002026:	3342      	adds	r3, #66	; 0x42
 8002028:	2202      	movs	r2, #2
 800202a:	701a      	strb	r2, [r3, #0]
      break;
 800202c:	e069      	b.n	8002102 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800202e:	78fb      	ldrb	r3, [r7, #3]
 8002030:	687a      	ldr	r2, [r7, #4]
 8002032:	212c      	movs	r1, #44	; 0x2c
 8002034:	fb01 f303 	mul.w	r3, r1, r3
 8002038:	4413      	add	r3, r2
 800203a:	3354      	adds	r3, #84	; 0x54
 800203c:	781b      	ldrb	r3, [r3, #0]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d109      	bne.n	8002056 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002042:	78fb      	ldrb	r3, [r7, #3]
 8002044:	687a      	ldr	r2, [r7, #4]
 8002046:	212c      	movs	r1, #44	; 0x2c
 8002048:	fb01 f303 	mul.w	r3, r1, r3
 800204c:	4413      	add	r3, r2
 800204e:	3342      	adds	r3, #66	; 0x42
 8002050:	2200      	movs	r2, #0
 8002052:	701a      	strb	r2, [r3, #0]
      break;
 8002054:	e055      	b.n	8002102 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002056:	78fb      	ldrb	r3, [r7, #3]
 8002058:	687a      	ldr	r2, [r7, #4]
 800205a:	212c      	movs	r1, #44	; 0x2c
 800205c:	fb01 f303 	mul.w	r3, r1, r3
 8002060:	4413      	add	r3, r2
 8002062:	3342      	adds	r3, #66	; 0x42
 8002064:	2202      	movs	r2, #2
 8002066:	701a      	strb	r2, [r3, #0]
      break;
 8002068:	e04b      	b.n	8002102 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800206a:	78bb      	ldrb	r3, [r7, #2]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d11d      	bne.n	80020ac <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002070:	78fb      	ldrb	r3, [r7, #3]
 8002072:	687a      	ldr	r2, [r7, #4]
 8002074:	212c      	movs	r1, #44	; 0x2c
 8002076:	fb01 f303 	mul.w	r3, r1, r3
 800207a:	4413      	add	r3, r2
 800207c:	3355      	adds	r3, #85	; 0x55
 800207e:	781b      	ldrb	r3, [r3, #0]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d109      	bne.n	8002098 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002084:	78fb      	ldrb	r3, [r7, #3]
 8002086:	687a      	ldr	r2, [r7, #4]
 8002088:	212c      	movs	r1, #44	; 0x2c
 800208a:	fb01 f303 	mul.w	r3, r1, r3
 800208e:	4413      	add	r3, r2
 8002090:	3342      	adds	r3, #66	; 0x42
 8002092:	2200      	movs	r2, #0
 8002094:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002096:	e034      	b.n	8002102 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002098:	78fb      	ldrb	r3, [r7, #3]
 800209a:	687a      	ldr	r2, [r7, #4]
 800209c:	212c      	movs	r1, #44	; 0x2c
 800209e:	fb01 f303 	mul.w	r3, r1, r3
 80020a2:	4413      	add	r3, r2
 80020a4:	3342      	adds	r3, #66	; 0x42
 80020a6:	2202      	movs	r2, #2
 80020a8:	701a      	strb	r2, [r3, #0]
      break;
 80020aa:	e02a      	b.n	8002102 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80020ac:	78fb      	ldrb	r3, [r7, #3]
 80020ae:	687a      	ldr	r2, [r7, #4]
 80020b0:	212c      	movs	r1, #44	; 0x2c
 80020b2:	fb01 f303 	mul.w	r3, r1, r3
 80020b6:	4413      	add	r3, r2
 80020b8:	3354      	adds	r3, #84	; 0x54
 80020ba:	781b      	ldrb	r3, [r3, #0]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d109      	bne.n	80020d4 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80020c0:	78fb      	ldrb	r3, [r7, #3]
 80020c2:	687a      	ldr	r2, [r7, #4]
 80020c4:	212c      	movs	r1, #44	; 0x2c
 80020c6:	fb01 f303 	mul.w	r3, r1, r3
 80020ca:	4413      	add	r3, r2
 80020cc:	3342      	adds	r3, #66	; 0x42
 80020ce:	2200      	movs	r2, #0
 80020d0:	701a      	strb	r2, [r3, #0]
      break;
 80020d2:	e016      	b.n	8002102 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80020d4:	78fb      	ldrb	r3, [r7, #3]
 80020d6:	687a      	ldr	r2, [r7, #4]
 80020d8:	212c      	movs	r1, #44	; 0x2c
 80020da:	fb01 f303 	mul.w	r3, r1, r3
 80020de:	4413      	add	r3, r2
 80020e0:	3342      	adds	r3, #66	; 0x42
 80020e2:	2202      	movs	r2, #2
 80020e4:	701a      	strb	r2, [r3, #0]
      break;
 80020e6:	e00c      	b.n	8002102 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80020e8:	78fb      	ldrb	r3, [r7, #3]
 80020ea:	687a      	ldr	r2, [r7, #4]
 80020ec:	212c      	movs	r1, #44	; 0x2c
 80020ee:	fb01 f303 	mul.w	r3, r1, r3
 80020f2:	4413      	add	r3, r2
 80020f4:	3342      	adds	r3, #66	; 0x42
 80020f6:	2200      	movs	r2, #0
 80020f8:	701a      	strb	r2, [r3, #0]
      break;
 80020fa:	e002      	b.n	8002102 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 80020fc:	bf00      	nop
 80020fe:	e000      	b.n	8002102 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8002100:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002102:	78fb      	ldrb	r3, [r7, #3]
 8002104:	687a      	ldr	r2, [r7, #4]
 8002106:	212c      	movs	r1, #44	; 0x2c
 8002108:	fb01 f303 	mul.w	r3, r1, r3
 800210c:	4413      	add	r3, r2
 800210e:	3344      	adds	r3, #68	; 0x44
 8002110:	697a      	ldr	r2, [r7, #20]
 8002112:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002114:	78fb      	ldrb	r3, [r7, #3]
 8002116:	8b3a      	ldrh	r2, [r7, #24]
 8002118:	6879      	ldr	r1, [r7, #4]
 800211a:	202c      	movs	r0, #44	; 0x2c
 800211c:	fb00 f303 	mul.w	r3, r0, r3
 8002120:	440b      	add	r3, r1
 8002122:	334c      	adds	r3, #76	; 0x4c
 8002124:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002126:	78fb      	ldrb	r3, [r7, #3]
 8002128:	687a      	ldr	r2, [r7, #4]
 800212a:	212c      	movs	r1, #44	; 0x2c
 800212c:	fb01 f303 	mul.w	r3, r1, r3
 8002130:	4413      	add	r3, r2
 8002132:	3360      	adds	r3, #96	; 0x60
 8002134:	2200      	movs	r2, #0
 8002136:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002138:	78fb      	ldrb	r3, [r7, #3]
 800213a:	687a      	ldr	r2, [r7, #4]
 800213c:	212c      	movs	r1, #44	; 0x2c
 800213e:	fb01 f303 	mul.w	r3, r1, r3
 8002142:	4413      	add	r3, r2
 8002144:	3350      	adds	r3, #80	; 0x50
 8002146:	2200      	movs	r2, #0
 8002148:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800214a:	78fb      	ldrb	r3, [r7, #3]
 800214c:	687a      	ldr	r2, [r7, #4]
 800214e:	212c      	movs	r1, #44	; 0x2c
 8002150:	fb01 f303 	mul.w	r3, r1, r3
 8002154:	4413      	add	r3, r2
 8002156:	3339      	adds	r3, #57	; 0x39
 8002158:	78fa      	ldrb	r2, [r7, #3]
 800215a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 800215c:	78fb      	ldrb	r3, [r7, #3]
 800215e:	687a      	ldr	r2, [r7, #4]
 8002160:	212c      	movs	r1, #44	; 0x2c
 8002162:	fb01 f303 	mul.w	r3, r1, r3
 8002166:	4413      	add	r3, r2
 8002168:	3361      	adds	r3, #97	; 0x61
 800216a:	2200      	movs	r2, #0
 800216c:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6818      	ldr	r0, [r3, #0]
 8002172:	78fb      	ldrb	r3, [r7, #3]
 8002174:	222c      	movs	r2, #44	; 0x2c
 8002176:	fb02 f303 	mul.w	r3, r2, r3
 800217a:	3338      	adds	r3, #56	; 0x38
 800217c:	687a      	ldr	r2, [r7, #4]
 800217e:	18d1      	adds	r1, r2, r3
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	691b      	ldr	r3, [r3, #16]
 8002184:	b2db      	uxtb	r3, r3
 8002186:	461a      	mov	r2, r3
 8002188:	f003 fa58 	bl	800563c <USB_HC_StartXfer>
 800218c:	4603      	mov	r3, r0
}
 800218e:	4618      	mov	r0, r3
 8002190:	3708      	adds	r7, #8
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop

08002198 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b086      	sub	sp, #24
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4618      	mov	r0, r3
 80021b0:	f002 ff83 	bl	80050ba <USB_GetMode>
 80021b4:	4603      	mov	r3, r0
 80021b6:	2b01      	cmp	r3, #1
 80021b8:	f040 80f6 	bne.w	80023a8 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4618      	mov	r0, r3
 80021c2:	f002 ff67 	bl	8005094 <USB_ReadInterrupts>
 80021c6:	4603      	mov	r3, r0
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	f000 80ec 	beq.w	80023a6 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4618      	mov	r0, r3
 80021d4:	f002 ff5e 	bl	8005094 <USB_ReadInterrupts>
 80021d8:	4603      	mov	r3, r0
 80021da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021de:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80021e2:	d104      	bne.n	80021ee <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80021ec:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4618      	mov	r0, r3
 80021f4:	f002 ff4e 	bl	8005094 <USB_ReadInterrupts>
 80021f8:	4603      	mov	r3, r0
 80021fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002202:	d104      	bne.n	800220e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800220c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4618      	mov	r0, r3
 8002214:	f002 ff3e 	bl	8005094 <USB_ReadInterrupts>
 8002218:	4603      	mov	r3, r0
 800221a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800221e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002222:	d104      	bne.n	800222e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800222c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4618      	mov	r0, r3
 8002234:	f002 ff2e 	bl	8005094 <USB_ReadInterrupts>
 8002238:	4603      	mov	r3, r0
 800223a:	f003 0302 	and.w	r3, r3, #2
 800223e:	2b02      	cmp	r3, #2
 8002240:	d103      	bne.n	800224a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	2202      	movs	r2, #2
 8002248:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4618      	mov	r0, r3
 8002250:	f002 ff20 	bl	8005094 <USB_ReadInterrupts>
 8002254:	4603      	mov	r3, r0
 8002256:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800225a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800225e:	d11c      	bne.n	800229a <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002268:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f003 0301 	and.w	r3, r3, #1
 8002276:	2b00      	cmp	r3, #0
 8002278:	d10f      	bne.n	800229a <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800227a:	2110      	movs	r1, #16
 800227c:	6938      	ldr	r0, [r7, #16]
 800227e:	f002 fe0f 	bl	8004ea0 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002282:	6938      	ldr	r0, [r7, #16]
 8002284:	f002 fe40 	bl	8004f08 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	2101      	movs	r1, #1
 800228e:	4618      	mov	r0, r3
 8002290:	f003 f816 	bl	80052c0 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002294:	6878      	ldr	r0, [r7, #4]
 8002296:	f004 fe1f 	bl	8006ed8 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4618      	mov	r0, r3
 80022a0:	f002 fef8 	bl	8005094 <USB_ReadInterrupts>
 80022a4:	4603      	mov	r3, r0
 80022a6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80022aa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022ae:	d102      	bne.n	80022b6 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 80022b0:	6878      	ldr	r0, [r7, #4]
 80022b2:	f001 f882 	bl	80033ba <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4618      	mov	r0, r3
 80022bc:	f002 feea 	bl	8005094 <USB_ReadInterrupts>
 80022c0:	4603      	mov	r3, r0
 80022c2:	f003 0308 	and.w	r3, r3, #8
 80022c6:	2b08      	cmp	r3, #8
 80022c8:	d106      	bne.n	80022d8 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80022ca:	6878      	ldr	r0, [r7, #4]
 80022cc:	f004 fde8 	bl	8006ea0 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	2208      	movs	r2, #8
 80022d6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4618      	mov	r0, r3
 80022de:	f002 fed9 	bl	8005094 <USB_ReadInterrupts>
 80022e2:	4603      	mov	r3, r0
 80022e4:	f003 0310 	and.w	r3, r3, #16
 80022e8:	2b10      	cmp	r3, #16
 80022ea:	d101      	bne.n	80022f0 <HAL_HCD_IRQHandler+0x158>
 80022ec:	2301      	movs	r3, #1
 80022ee:	e000      	b.n	80022f2 <HAL_HCD_IRQHandler+0x15a>
 80022f0:	2300      	movs	r3, #0
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d012      	beq.n	800231c <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	699a      	ldr	r2, [r3, #24]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f022 0210 	bic.w	r2, r2, #16
 8002304:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002306:	6878      	ldr	r0, [r7, #4]
 8002308:	f000 ff85 	bl	8003216 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	699a      	ldr	r2, [r3, #24]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f042 0210 	orr.w	r2, r2, #16
 800231a:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4618      	mov	r0, r3
 8002322:	f002 feb7 	bl	8005094 <USB_ReadInterrupts>
 8002326:	4603      	mov	r3, r0
 8002328:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800232c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002330:	d13a      	bne.n	80023a8 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4618      	mov	r0, r3
 8002338:	f003 fac2 	bl	80058c0 <USB_HC_ReadInterrupt>
 800233c:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800233e:	2300      	movs	r3, #0
 8002340:	617b      	str	r3, [r7, #20]
 8002342:	e025      	b.n	8002390 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	f003 030f 	and.w	r3, r3, #15
 800234a:	68ba      	ldr	r2, [r7, #8]
 800234c:	fa22 f303 	lsr.w	r3, r2, r3
 8002350:	f003 0301 	and.w	r3, r3, #1
 8002354:	2b00      	cmp	r3, #0
 8002356:	d018      	beq.n	800238a <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	015a      	lsls	r2, r3, #5
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	4413      	add	r3, r2
 8002360:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800236a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800236e:	d106      	bne.n	800237e <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	b2db      	uxtb	r3, r3
 8002374:	4619      	mov	r1, r3
 8002376:	6878      	ldr	r0, [r7, #4]
 8002378:	f000 f88f 	bl	800249a <HCD_HC_IN_IRQHandler>
 800237c:	e005      	b.n	800238a <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	b2db      	uxtb	r3, r3
 8002382:	4619      	mov	r1, r3
 8002384:	6878      	ldr	r0, [r7, #4]
 8002386:	f000 fbdd 	bl	8002b44 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	3301      	adds	r3, #1
 800238e:	617b      	str	r3, [r7, #20]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	697a      	ldr	r2, [r7, #20]
 8002396:	429a      	cmp	r2, r3
 8002398:	d3d4      	bcc.n	8002344 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80023a2:	615a      	str	r2, [r3, #20]
 80023a4:	e000      	b.n	80023a8 <HAL_HCD_IRQHandler+0x210>
      return;
 80023a6:	bf00      	nop
    }
  }
}
 80023a8:	3718      	adds	r7, #24
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}

080023ae <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80023ae:	b580      	push	{r7, lr}
 80023b0:	b082      	sub	sp, #8
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80023bc:	2b01      	cmp	r3, #1
 80023be:	d101      	bne.n	80023c4 <HAL_HCD_Start+0x16>
 80023c0:	2302      	movs	r3, #2
 80023c2:	e013      	b.n	80023ec <HAL_HCD_Start+0x3e>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2201      	movs	r2, #1
 80023c8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	2101      	movs	r1, #1
 80023d2:	4618      	mov	r0, r3
 80023d4:	f002 ffae 	bl	8005334 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4618      	mov	r0, r3
 80023de:	f002 fcf1 	bl	8004dc4 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2200      	movs	r2, #0
 80023e6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80023ea:	2300      	movs	r3, #0
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	3708      	adds	r7, #8
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}

080023f4 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b082      	sub	sp, #8
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002402:	2b01      	cmp	r3, #1
 8002404:	d101      	bne.n	800240a <HAL_HCD_Stop+0x16>
 8002406:	2302      	movs	r3, #2
 8002408:	e00d      	b.n	8002426 <HAL_HCD_Stop+0x32>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2201      	movs	r2, #1
 800240e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4618      	mov	r0, r3
 8002418:	f003 fb9c 	bl	8005b54 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2200      	movs	r2, #0
 8002420:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002424:	2300      	movs	r3, #0
}
 8002426:	4618      	mov	r0, r3
 8002428:	3708      	adds	r7, #8
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}

0800242e <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800242e:	b480      	push	{r7}
 8002430:	b083      	sub	sp, #12
 8002432:	af00      	add	r7, sp, #0
 8002434:	6078      	str	r0, [r7, #4]
 8002436:	460b      	mov	r3, r1
 8002438:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800243a:	78fb      	ldrb	r3, [r7, #3]
 800243c:	687a      	ldr	r2, [r7, #4]
 800243e:	212c      	movs	r1, #44	; 0x2c
 8002440:	fb01 f303 	mul.w	r3, r1, r3
 8002444:	4413      	add	r3, r2
 8002446:	3360      	adds	r3, #96	; 0x60
 8002448:	781b      	ldrb	r3, [r3, #0]
}
 800244a:	4618      	mov	r0, r3
 800244c:	370c      	adds	r7, #12
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr

08002456 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002456:	b480      	push	{r7}
 8002458:	b083      	sub	sp, #12
 800245a:	af00      	add	r7, sp, #0
 800245c:	6078      	str	r0, [r7, #4]
 800245e:	460b      	mov	r3, r1
 8002460:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002462:	78fb      	ldrb	r3, [r7, #3]
 8002464:	687a      	ldr	r2, [r7, #4]
 8002466:	212c      	movs	r1, #44	; 0x2c
 8002468:	fb01 f303 	mul.w	r3, r1, r3
 800246c:	4413      	add	r3, r2
 800246e:	3350      	adds	r3, #80	; 0x50
 8002470:	681b      	ldr	r3, [r3, #0]
}
 8002472:	4618      	mov	r0, r3
 8002474:	370c      	adds	r7, #12
 8002476:	46bd      	mov	sp, r7
 8002478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247c:	4770      	bx	lr

0800247e <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800247e:	b580      	push	{r7, lr}
 8002480:	b082      	sub	sp, #8
 8002482:	af00      	add	r7, sp, #0
 8002484:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4618      	mov	r0, r3
 800248c:	f002 ffa2 	bl	80053d4 <USB_GetCurrentFrame>
 8002490:	4603      	mov	r3, r0
}
 8002492:	4618      	mov	r0, r3
 8002494:	3708      	adds	r7, #8
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}

0800249a <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800249a:	b580      	push	{r7, lr}
 800249c:	b086      	sub	sp, #24
 800249e:	af00      	add	r7, sp, #0
 80024a0:	6078      	str	r0, [r7, #4]
 80024a2:	460b      	mov	r3, r1
 80024a4:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80024b0:	78fb      	ldrb	r3, [r7, #3]
 80024b2:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	015a      	lsls	r2, r3, #5
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	4413      	add	r3, r2
 80024bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	f003 0304 	and.w	r3, r3, #4
 80024c6:	2b04      	cmp	r3, #4
 80024c8:	d11a      	bne.n	8002500 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	015a      	lsls	r2, r3, #5
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	4413      	add	r3, r2
 80024d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024d6:	461a      	mov	r2, r3
 80024d8:	2304      	movs	r3, #4
 80024da:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80024dc:	687a      	ldr	r2, [r7, #4]
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	212c      	movs	r1, #44	; 0x2c
 80024e2:	fb01 f303 	mul.w	r3, r1, r3
 80024e6:	4413      	add	r3, r2
 80024e8:	3361      	adds	r3, #97	; 0x61
 80024ea:	2206      	movs	r2, #6
 80024ec:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	68fa      	ldr	r2, [r7, #12]
 80024f4:	b2d2      	uxtb	r2, r2
 80024f6:	4611      	mov	r1, r2
 80024f8:	4618      	mov	r0, r3
 80024fa:	f003 f9f2 	bl	80058e2 <USB_HC_Halt>
 80024fe:	e0af      	b.n	8002660 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	015a      	lsls	r2, r3, #5
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	4413      	add	r3, r2
 8002508:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002512:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002516:	d11b      	bne.n	8002550 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	015a      	lsls	r2, r3, #5
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	4413      	add	r3, r2
 8002520:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002524:	461a      	mov	r2, r3
 8002526:	f44f 7380 	mov.w	r3, #256	; 0x100
 800252a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 800252c:	687a      	ldr	r2, [r7, #4]
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	212c      	movs	r1, #44	; 0x2c
 8002532:	fb01 f303 	mul.w	r3, r1, r3
 8002536:	4413      	add	r3, r2
 8002538:	3361      	adds	r3, #97	; 0x61
 800253a:	2207      	movs	r2, #7
 800253c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	68fa      	ldr	r2, [r7, #12]
 8002544:	b2d2      	uxtb	r2, r2
 8002546:	4611      	mov	r1, r2
 8002548:	4618      	mov	r0, r3
 800254a:	f003 f9ca 	bl	80058e2 <USB_HC_Halt>
 800254e:	e087      	b.n	8002660 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	015a      	lsls	r2, r3, #5
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	4413      	add	r3, r2
 8002558:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	f003 0320 	and.w	r3, r3, #32
 8002562:	2b20      	cmp	r3, #32
 8002564:	d109      	bne.n	800257a <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	015a      	lsls	r2, r3, #5
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	4413      	add	r3, r2
 800256e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002572:	461a      	mov	r2, r3
 8002574:	2320      	movs	r3, #32
 8002576:	6093      	str	r3, [r2, #8]
 8002578:	e072      	b.n	8002660 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	015a      	lsls	r2, r3, #5
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	4413      	add	r3, r2
 8002582:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	f003 0308 	and.w	r3, r3, #8
 800258c:	2b08      	cmp	r3, #8
 800258e:	d11a      	bne.n	80025c6 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	015a      	lsls	r2, r3, #5
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	4413      	add	r3, r2
 8002598:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800259c:	461a      	mov	r2, r3
 800259e:	2308      	movs	r3, #8
 80025a0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80025a2:	687a      	ldr	r2, [r7, #4]
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	212c      	movs	r1, #44	; 0x2c
 80025a8:	fb01 f303 	mul.w	r3, r1, r3
 80025ac:	4413      	add	r3, r2
 80025ae:	3361      	adds	r3, #97	; 0x61
 80025b0:	2205      	movs	r2, #5
 80025b2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	68fa      	ldr	r2, [r7, #12]
 80025ba:	b2d2      	uxtb	r2, r2
 80025bc:	4611      	mov	r1, r2
 80025be:	4618      	mov	r0, r3
 80025c0:	f003 f98f 	bl	80058e2 <USB_HC_Halt>
 80025c4:	e04c      	b.n	8002660 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	015a      	lsls	r2, r3, #5
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	4413      	add	r3, r2
 80025ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025dc:	d11b      	bne.n	8002616 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	015a      	lsls	r2, r3, #5
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	4413      	add	r3, r2
 80025e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025ea:	461a      	mov	r2, r3
 80025ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80025f0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80025f2:	687a      	ldr	r2, [r7, #4]
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	212c      	movs	r1, #44	; 0x2c
 80025f8:	fb01 f303 	mul.w	r3, r1, r3
 80025fc:	4413      	add	r3, r2
 80025fe:	3361      	adds	r3, #97	; 0x61
 8002600:	2208      	movs	r2, #8
 8002602:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	68fa      	ldr	r2, [r7, #12]
 800260a:	b2d2      	uxtb	r2, r2
 800260c:	4611      	mov	r1, r2
 800260e:	4618      	mov	r0, r3
 8002610:	f003 f967 	bl	80058e2 <USB_HC_Halt>
 8002614:	e024      	b.n	8002660 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	015a      	lsls	r2, r3, #5
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	4413      	add	r3, r2
 800261e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002628:	2b80      	cmp	r3, #128	; 0x80
 800262a:	d119      	bne.n	8002660 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	015a      	lsls	r2, r3, #5
 8002630:	693b      	ldr	r3, [r7, #16]
 8002632:	4413      	add	r3, r2
 8002634:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002638:	461a      	mov	r2, r3
 800263a:	2380      	movs	r3, #128	; 0x80
 800263c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800263e:	687a      	ldr	r2, [r7, #4]
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	212c      	movs	r1, #44	; 0x2c
 8002644:	fb01 f303 	mul.w	r3, r1, r3
 8002648:	4413      	add	r3, r2
 800264a:	3361      	adds	r3, #97	; 0x61
 800264c:	2206      	movs	r2, #6
 800264e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	68fa      	ldr	r2, [r7, #12]
 8002656:	b2d2      	uxtb	r2, r2
 8002658:	4611      	mov	r1, r2
 800265a:	4618      	mov	r0, r3
 800265c:	f003 f941 	bl	80058e2 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	015a      	lsls	r2, r3, #5
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	4413      	add	r3, r2
 8002668:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002672:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002676:	d112      	bne.n	800269e <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	68fa      	ldr	r2, [r7, #12]
 800267e:	b2d2      	uxtb	r2, r2
 8002680:	4611      	mov	r1, r2
 8002682:	4618      	mov	r0, r3
 8002684:	f003 f92d 	bl	80058e2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	015a      	lsls	r2, r3, #5
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	4413      	add	r3, r2
 8002690:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002694:	461a      	mov	r2, r3
 8002696:	f44f 7300 	mov.w	r3, #512	; 0x200
 800269a:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 800269c:	e24e      	b.n	8002b3c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	015a      	lsls	r2, r3, #5
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	4413      	add	r3, r2
 80026a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	f003 0301 	and.w	r3, r3, #1
 80026b0:	2b01      	cmp	r3, #1
 80026b2:	f040 80df 	bne.w	8002874 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	691b      	ldr	r3, [r3, #16]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d019      	beq.n	80026f2 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80026be:	687a      	ldr	r2, [r7, #4]
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	212c      	movs	r1, #44	; 0x2c
 80026c4:	fb01 f303 	mul.w	r3, r1, r3
 80026c8:	4413      	add	r3, r2
 80026ca:	3348      	adds	r3, #72	; 0x48
 80026cc:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	0159      	lsls	r1, r3, #5
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	440b      	add	r3, r1
 80026d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026da:	691b      	ldr	r3, [r3, #16]
 80026dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80026e0:	1ad2      	subs	r2, r2, r3
 80026e2:	6879      	ldr	r1, [r7, #4]
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	202c      	movs	r0, #44	; 0x2c
 80026e8:	fb00 f303 	mul.w	r3, r0, r3
 80026ec:	440b      	add	r3, r1
 80026ee:	3350      	adds	r3, #80	; 0x50
 80026f0:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80026f2:	687a      	ldr	r2, [r7, #4]
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	212c      	movs	r1, #44	; 0x2c
 80026f8:	fb01 f303 	mul.w	r3, r1, r3
 80026fc:	4413      	add	r3, r2
 80026fe:	3361      	adds	r3, #97	; 0x61
 8002700:	2201      	movs	r2, #1
 8002702:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002704:	687a      	ldr	r2, [r7, #4]
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	212c      	movs	r1, #44	; 0x2c
 800270a:	fb01 f303 	mul.w	r3, r1, r3
 800270e:	4413      	add	r3, r2
 8002710:	335c      	adds	r3, #92	; 0x5c
 8002712:	2200      	movs	r2, #0
 8002714:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	015a      	lsls	r2, r3, #5
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	4413      	add	r3, r2
 800271e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002722:	461a      	mov	r2, r3
 8002724:	2301      	movs	r3, #1
 8002726:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002728:	687a      	ldr	r2, [r7, #4]
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	212c      	movs	r1, #44	; 0x2c
 800272e:	fb01 f303 	mul.w	r3, r1, r3
 8002732:	4413      	add	r3, r2
 8002734:	333f      	adds	r3, #63	; 0x3f
 8002736:	781b      	ldrb	r3, [r3, #0]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d009      	beq.n	8002750 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800273c:	687a      	ldr	r2, [r7, #4]
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	212c      	movs	r1, #44	; 0x2c
 8002742:	fb01 f303 	mul.w	r3, r1, r3
 8002746:	4413      	add	r3, r2
 8002748:	333f      	adds	r3, #63	; 0x3f
 800274a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800274c:	2b02      	cmp	r3, #2
 800274e:	d111      	bne.n	8002774 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	68fa      	ldr	r2, [r7, #12]
 8002756:	b2d2      	uxtb	r2, r2
 8002758:	4611      	mov	r1, r2
 800275a:	4618      	mov	r0, r3
 800275c:	f003 f8c1 	bl	80058e2 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	015a      	lsls	r2, r3, #5
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	4413      	add	r3, r2
 8002768:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800276c:	461a      	mov	r2, r3
 800276e:	2310      	movs	r3, #16
 8002770:	6093      	str	r3, [r2, #8]
 8002772:	e03a      	b.n	80027ea <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002774:	687a      	ldr	r2, [r7, #4]
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	212c      	movs	r1, #44	; 0x2c
 800277a:	fb01 f303 	mul.w	r3, r1, r3
 800277e:	4413      	add	r3, r2
 8002780:	333f      	adds	r3, #63	; 0x3f
 8002782:	781b      	ldrb	r3, [r3, #0]
 8002784:	2b03      	cmp	r3, #3
 8002786:	d009      	beq.n	800279c <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8002788:	687a      	ldr	r2, [r7, #4]
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	212c      	movs	r1, #44	; 0x2c
 800278e:	fb01 f303 	mul.w	r3, r1, r3
 8002792:	4413      	add	r3, r2
 8002794:	333f      	adds	r3, #63	; 0x3f
 8002796:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002798:	2b01      	cmp	r3, #1
 800279a:	d126      	bne.n	80027ea <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	015a      	lsls	r2, r3, #5
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	4413      	add	r3, r2
 80027a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	68fa      	ldr	r2, [r7, #12]
 80027ac:	0151      	lsls	r1, r2, #5
 80027ae:	693a      	ldr	r2, [r7, #16]
 80027b0:	440a      	add	r2, r1
 80027b2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80027b6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80027ba:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80027bc:	687a      	ldr	r2, [r7, #4]
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	212c      	movs	r1, #44	; 0x2c
 80027c2:	fb01 f303 	mul.w	r3, r1, r3
 80027c6:	4413      	add	r3, r2
 80027c8:	3360      	adds	r3, #96	; 0x60
 80027ca:	2201      	movs	r2, #1
 80027cc:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	b2d9      	uxtb	r1, r3
 80027d2:	687a      	ldr	r2, [r7, #4]
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	202c      	movs	r0, #44	; 0x2c
 80027d8:	fb00 f303 	mul.w	r3, r0, r3
 80027dc:	4413      	add	r3, r2
 80027de:	3360      	adds	r3, #96	; 0x60
 80027e0:	781b      	ldrb	r3, [r3, #0]
 80027e2:	461a      	mov	r2, r3
 80027e4:	6878      	ldr	r0, [r7, #4]
 80027e6:	f004 fb85 	bl	8006ef4 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	691b      	ldr	r3, [r3, #16]
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	d12b      	bne.n	800284a <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80027f2:	687a      	ldr	r2, [r7, #4]
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	212c      	movs	r1, #44	; 0x2c
 80027f8:	fb01 f303 	mul.w	r3, r1, r3
 80027fc:	4413      	add	r3, r2
 80027fe:	3348      	adds	r3, #72	; 0x48
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	6879      	ldr	r1, [r7, #4]
 8002804:	68fa      	ldr	r2, [r7, #12]
 8002806:	202c      	movs	r0, #44	; 0x2c
 8002808:	fb00 f202 	mul.w	r2, r0, r2
 800280c:	440a      	add	r2, r1
 800280e:	3240      	adds	r2, #64	; 0x40
 8002810:	8812      	ldrh	r2, [r2, #0]
 8002812:	fbb3 f3f2 	udiv	r3, r3, r2
 8002816:	f003 0301 	and.w	r3, r3, #1
 800281a:	2b00      	cmp	r3, #0
 800281c:	f000 818e 	beq.w	8002b3c <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002820:	687a      	ldr	r2, [r7, #4]
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	212c      	movs	r1, #44	; 0x2c
 8002826:	fb01 f303 	mul.w	r3, r1, r3
 800282a:	4413      	add	r3, r2
 800282c:	3354      	adds	r3, #84	; 0x54
 800282e:	781b      	ldrb	r3, [r3, #0]
 8002830:	f083 0301 	eor.w	r3, r3, #1
 8002834:	b2d8      	uxtb	r0, r3
 8002836:	687a      	ldr	r2, [r7, #4]
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	212c      	movs	r1, #44	; 0x2c
 800283c:	fb01 f303 	mul.w	r3, r1, r3
 8002840:	4413      	add	r3, r2
 8002842:	3354      	adds	r3, #84	; 0x54
 8002844:	4602      	mov	r2, r0
 8002846:	701a      	strb	r2, [r3, #0]
}
 8002848:	e178      	b.n	8002b3c <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800284a:	687a      	ldr	r2, [r7, #4]
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	212c      	movs	r1, #44	; 0x2c
 8002850:	fb01 f303 	mul.w	r3, r1, r3
 8002854:	4413      	add	r3, r2
 8002856:	3354      	adds	r3, #84	; 0x54
 8002858:	781b      	ldrb	r3, [r3, #0]
 800285a:	f083 0301 	eor.w	r3, r3, #1
 800285e:	b2d8      	uxtb	r0, r3
 8002860:	687a      	ldr	r2, [r7, #4]
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	212c      	movs	r1, #44	; 0x2c
 8002866:	fb01 f303 	mul.w	r3, r1, r3
 800286a:	4413      	add	r3, r2
 800286c:	3354      	adds	r3, #84	; 0x54
 800286e:	4602      	mov	r2, r0
 8002870:	701a      	strb	r2, [r3, #0]
}
 8002872:	e163      	b.n	8002b3c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	015a      	lsls	r2, r3, #5
 8002878:	693b      	ldr	r3, [r7, #16]
 800287a:	4413      	add	r3, r2
 800287c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002880:	689b      	ldr	r3, [r3, #8]
 8002882:	f003 0302 	and.w	r3, r3, #2
 8002886:	2b02      	cmp	r3, #2
 8002888:	f040 80f6 	bne.w	8002a78 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800288c:	687a      	ldr	r2, [r7, #4]
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	212c      	movs	r1, #44	; 0x2c
 8002892:	fb01 f303 	mul.w	r3, r1, r3
 8002896:	4413      	add	r3, r2
 8002898:	3361      	adds	r3, #97	; 0x61
 800289a:	781b      	ldrb	r3, [r3, #0]
 800289c:	2b01      	cmp	r3, #1
 800289e:	d109      	bne.n	80028b4 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80028a0:	687a      	ldr	r2, [r7, #4]
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	212c      	movs	r1, #44	; 0x2c
 80028a6:	fb01 f303 	mul.w	r3, r1, r3
 80028aa:	4413      	add	r3, r2
 80028ac:	3360      	adds	r3, #96	; 0x60
 80028ae:	2201      	movs	r2, #1
 80028b0:	701a      	strb	r2, [r3, #0]
 80028b2:	e0c9      	b.n	8002a48 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80028b4:	687a      	ldr	r2, [r7, #4]
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	212c      	movs	r1, #44	; 0x2c
 80028ba:	fb01 f303 	mul.w	r3, r1, r3
 80028be:	4413      	add	r3, r2
 80028c0:	3361      	adds	r3, #97	; 0x61
 80028c2:	781b      	ldrb	r3, [r3, #0]
 80028c4:	2b05      	cmp	r3, #5
 80028c6:	d109      	bne.n	80028dc <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80028c8:	687a      	ldr	r2, [r7, #4]
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	212c      	movs	r1, #44	; 0x2c
 80028ce:	fb01 f303 	mul.w	r3, r1, r3
 80028d2:	4413      	add	r3, r2
 80028d4:	3360      	adds	r3, #96	; 0x60
 80028d6:	2205      	movs	r2, #5
 80028d8:	701a      	strb	r2, [r3, #0]
 80028da:	e0b5      	b.n	8002a48 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80028dc:	687a      	ldr	r2, [r7, #4]
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	212c      	movs	r1, #44	; 0x2c
 80028e2:	fb01 f303 	mul.w	r3, r1, r3
 80028e6:	4413      	add	r3, r2
 80028e8:	3361      	adds	r3, #97	; 0x61
 80028ea:	781b      	ldrb	r3, [r3, #0]
 80028ec:	2b06      	cmp	r3, #6
 80028ee:	d009      	beq.n	8002904 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80028f0:	687a      	ldr	r2, [r7, #4]
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	212c      	movs	r1, #44	; 0x2c
 80028f6:	fb01 f303 	mul.w	r3, r1, r3
 80028fa:	4413      	add	r3, r2
 80028fc:	3361      	adds	r3, #97	; 0x61
 80028fe:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002900:	2b08      	cmp	r3, #8
 8002902:	d150      	bne.n	80029a6 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8002904:	687a      	ldr	r2, [r7, #4]
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	212c      	movs	r1, #44	; 0x2c
 800290a:	fb01 f303 	mul.w	r3, r1, r3
 800290e:	4413      	add	r3, r2
 8002910:	335c      	adds	r3, #92	; 0x5c
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	1c5a      	adds	r2, r3, #1
 8002916:	6879      	ldr	r1, [r7, #4]
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	202c      	movs	r0, #44	; 0x2c
 800291c:	fb00 f303 	mul.w	r3, r0, r3
 8002920:	440b      	add	r3, r1
 8002922:	335c      	adds	r3, #92	; 0x5c
 8002924:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002926:	687a      	ldr	r2, [r7, #4]
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	212c      	movs	r1, #44	; 0x2c
 800292c:	fb01 f303 	mul.w	r3, r1, r3
 8002930:	4413      	add	r3, r2
 8002932:	335c      	adds	r3, #92	; 0x5c
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	2b02      	cmp	r3, #2
 8002938:	d912      	bls.n	8002960 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800293a:	687a      	ldr	r2, [r7, #4]
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	212c      	movs	r1, #44	; 0x2c
 8002940:	fb01 f303 	mul.w	r3, r1, r3
 8002944:	4413      	add	r3, r2
 8002946:	335c      	adds	r3, #92	; 0x5c
 8002948:	2200      	movs	r2, #0
 800294a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800294c:	687a      	ldr	r2, [r7, #4]
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	212c      	movs	r1, #44	; 0x2c
 8002952:	fb01 f303 	mul.w	r3, r1, r3
 8002956:	4413      	add	r3, r2
 8002958:	3360      	adds	r3, #96	; 0x60
 800295a:	2204      	movs	r2, #4
 800295c:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800295e:	e073      	b.n	8002a48 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002960:	687a      	ldr	r2, [r7, #4]
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	212c      	movs	r1, #44	; 0x2c
 8002966:	fb01 f303 	mul.w	r3, r1, r3
 800296a:	4413      	add	r3, r2
 800296c:	3360      	adds	r3, #96	; 0x60
 800296e:	2202      	movs	r2, #2
 8002970:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	015a      	lsls	r2, r3, #5
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	4413      	add	r3, r2
 800297a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002988:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002990:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	015a      	lsls	r2, r3, #5
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	4413      	add	r3, r2
 800299a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800299e:	461a      	mov	r2, r3
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80029a4:	e050      	b.n	8002a48 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80029a6:	687a      	ldr	r2, [r7, #4]
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	212c      	movs	r1, #44	; 0x2c
 80029ac:	fb01 f303 	mul.w	r3, r1, r3
 80029b0:	4413      	add	r3, r2
 80029b2:	3361      	adds	r3, #97	; 0x61
 80029b4:	781b      	ldrb	r3, [r3, #0]
 80029b6:	2b03      	cmp	r3, #3
 80029b8:	d122      	bne.n	8002a00 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80029ba:	687a      	ldr	r2, [r7, #4]
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	212c      	movs	r1, #44	; 0x2c
 80029c0:	fb01 f303 	mul.w	r3, r1, r3
 80029c4:	4413      	add	r3, r2
 80029c6:	3360      	adds	r3, #96	; 0x60
 80029c8:	2202      	movs	r2, #2
 80029ca:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	015a      	lsls	r2, r3, #5
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	4413      	add	r3, r2
 80029d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80029e2:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80029ea:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	015a      	lsls	r2, r3, #5
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	4413      	add	r3, r2
 80029f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029f8:	461a      	mov	r2, r3
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	6013      	str	r3, [r2, #0]
 80029fe:	e023      	b.n	8002a48 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002a00:	687a      	ldr	r2, [r7, #4]
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	212c      	movs	r1, #44	; 0x2c
 8002a06:	fb01 f303 	mul.w	r3, r1, r3
 8002a0a:	4413      	add	r3, r2
 8002a0c:	3361      	adds	r3, #97	; 0x61
 8002a0e:	781b      	ldrb	r3, [r3, #0]
 8002a10:	2b07      	cmp	r3, #7
 8002a12:	d119      	bne.n	8002a48 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002a14:	687a      	ldr	r2, [r7, #4]
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	212c      	movs	r1, #44	; 0x2c
 8002a1a:	fb01 f303 	mul.w	r3, r1, r3
 8002a1e:	4413      	add	r3, r2
 8002a20:	335c      	adds	r3, #92	; 0x5c
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	1c5a      	adds	r2, r3, #1
 8002a26:	6879      	ldr	r1, [r7, #4]
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	202c      	movs	r0, #44	; 0x2c
 8002a2c:	fb00 f303 	mul.w	r3, r0, r3
 8002a30:	440b      	add	r3, r1
 8002a32:	335c      	adds	r3, #92	; 0x5c
 8002a34:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002a36:	687a      	ldr	r2, [r7, #4]
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	212c      	movs	r1, #44	; 0x2c
 8002a3c:	fb01 f303 	mul.w	r3, r1, r3
 8002a40:	4413      	add	r3, r2
 8002a42:	3360      	adds	r3, #96	; 0x60
 8002a44:	2204      	movs	r2, #4
 8002a46:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	015a      	lsls	r2, r3, #5
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	4413      	add	r3, r2
 8002a50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a54:	461a      	mov	r2, r3
 8002a56:	2302      	movs	r3, #2
 8002a58:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	b2d9      	uxtb	r1, r3
 8002a5e:	687a      	ldr	r2, [r7, #4]
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	202c      	movs	r0, #44	; 0x2c
 8002a64:	fb00 f303 	mul.w	r3, r0, r3
 8002a68:	4413      	add	r3, r2
 8002a6a:	3360      	adds	r3, #96	; 0x60
 8002a6c:	781b      	ldrb	r3, [r3, #0]
 8002a6e:	461a      	mov	r2, r3
 8002a70:	6878      	ldr	r0, [r7, #4]
 8002a72:	f004 fa3f 	bl	8006ef4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002a76:	e061      	b.n	8002b3c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	015a      	lsls	r2, r3, #5
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	4413      	add	r3, r2
 8002a80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	f003 0310 	and.w	r3, r3, #16
 8002a8a:	2b10      	cmp	r3, #16
 8002a8c:	d156      	bne.n	8002b3c <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002a8e:	687a      	ldr	r2, [r7, #4]
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	212c      	movs	r1, #44	; 0x2c
 8002a94:	fb01 f303 	mul.w	r3, r1, r3
 8002a98:	4413      	add	r3, r2
 8002a9a:	333f      	adds	r3, #63	; 0x3f
 8002a9c:	781b      	ldrb	r3, [r3, #0]
 8002a9e:	2b03      	cmp	r3, #3
 8002aa0:	d111      	bne.n	8002ac6 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002aa2:	687a      	ldr	r2, [r7, #4]
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	212c      	movs	r1, #44	; 0x2c
 8002aa8:	fb01 f303 	mul.w	r3, r1, r3
 8002aac:	4413      	add	r3, r2
 8002aae:	335c      	adds	r3, #92	; 0x5c
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	68fa      	ldr	r2, [r7, #12]
 8002aba:	b2d2      	uxtb	r2, r2
 8002abc:	4611      	mov	r1, r2
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f002 ff0f 	bl	80058e2 <USB_HC_Halt>
 8002ac4:	e031      	b.n	8002b2a <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002ac6:	687a      	ldr	r2, [r7, #4]
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	212c      	movs	r1, #44	; 0x2c
 8002acc:	fb01 f303 	mul.w	r3, r1, r3
 8002ad0:	4413      	add	r3, r2
 8002ad2:	333f      	adds	r3, #63	; 0x3f
 8002ad4:	781b      	ldrb	r3, [r3, #0]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d009      	beq.n	8002aee <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002ada:	687a      	ldr	r2, [r7, #4]
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	212c      	movs	r1, #44	; 0x2c
 8002ae0:	fb01 f303 	mul.w	r3, r1, r3
 8002ae4:	4413      	add	r3, r2
 8002ae6:	333f      	adds	r3, #63	; 0x3f
 8002ae8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002aea:	2b02      	cmp	r3, #2
 8002aec:	d11d      	bne.n	8002b2a <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002aee:	687a      	ldr	r2, [r7, #4]
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	212c      	movs	r1, #44	; 0x2c
 8002af4:	fb01 f303 	mul.w	r3, r1, r3
 8002af8:	4413      	add	r3, r2
 8002afa:	335c      	adds	r3, #92	; 0x5c
 8002afc:	2200      	movs	r2, #0
 8002afe:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	691b      	ldr	r3, [r3, #16]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d110      	bne.n	8002b2a <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8002b08:	687a      	ldr	r2, [r7, #4]
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	212c      	movs	r1, #44	; 0x2c
 8002b0e:	fb01 f303 	mul.w	r3, r1, r3
 8002b12:	4413      	add	r3, r2
 8002b14:	3361      	adds	r3, #97	; 0x61
 8002b16:	2203      	movs	r2, #3
 8002b18:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	68fa      	ldr	r2, [r7, #12]
 8002b20:	b2d2      	uxtb	r2, r2
 8002b22:	4611      	mov	r1, r2
 8002b24:	4618      	mov	r0, r3
 8002b26:	f002 fedc 	bl	80058e2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	015a      	lsls	r2, r3, #5
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	4413      	add	r3, r2
 8002b32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b36:	461a      	mov	r2, r3
 8002b38:	2310      	movs	r3, #16
 8002b3a:	6093      	str	r3, [r2, #8]
}
 8002b3c:	bf00      	nop
 8002b3e:	3718      	adds	r7, #24
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}

08002b44 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b088      	sub	sp, #32
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
 8002b4c:	460b      	mov	r3, r1
 8002b4e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b56:	69fb      	ldr	r3, [r7, #28]
 8002b58:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8002b5a:	78fb      	ldrb	r3, [r7, #3]
 8002b5c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	015a      	lsls	r2, r3, #5
 8002b62:	69bb      	ldr	r3, [r7, #24]
 8002b64:	4413      	add	r3, r2
 8002b66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	f003 0304 	and.w	r3, r3, #4
 8002b70:	2b04      	cmp	r3, #4
 8002b72:	d11a      	bne.n	8002baa <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	015a      	lsls	r2, r3, #5
 8002b78:	69bb      	ldr	r3, [r7, #24]
 8002b7a:	4413      	add	r3, r2
 8002b7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b80:	461a      	mov	r2, r3
 8002b82:	2304      	movs	r3, #4
 8002b84:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002b86:	687a      	ldr	r2, [r7, #4]
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	212c      	movs	r1, #44	; 0x2c
 8002b8c:	fb01 f303 	mul.w	r3, r1, r3
 8002b90:	4413      	add	r3, r2
 8002b92:	3361      	adds	r3, #97	; 0x61
 8002b94:	2206      	movs	r2, #6
 8002b96:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	697a      	ldr	r2, [r7, #20]
 8002b9e:	b2d2      	uxtb	r2, r2
 8002ba0:	4611      	mov	r1, r2
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f002 fe9d 	bl	80058e2 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8002ba8:	e331      	b.n	800320e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	015a      	lsls	r2, r3, #5
 8002bae:	69bb      	ldr	r3, [r7, #24]
 8002bb0:	4413      	add	r3, r2
 8002bb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	f003 0320 	and.w	r3, r3, #32
 8002bbc:	2b20      	cmp	r3, #32
 8002bbe:	d12e      	bne.n	8002c1e <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	015a      	lsls	r2, r3, #5
 8002bc4:	69bb      	ldr	r3, [r7, #24]
 8002bc6:	4413      	add	r3, r2
 8002bc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bcc:	461a      	mov	r2, r3
 8002bce:	2320      	movs	r3, #32
 8002bd0:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002bd2:	687a      	ldr	r2, [r7, #4]
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	212c      	movs	r1, #44	; 0x2c
 8002bd8:	fb01 f303 	mul.w	r3, r1, r3
 8002bdc:	4413      	add	r3, r2
 8002bde:	333d      	adds	r3, #61	; 0x3d
 8002be0:	781b      	ldrb	r3, [r3, #0]
 8002be2:	2b01      	cmp	r3, #1
 8002be4:	f040 8313 	bne.w	800320e <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8002be8:	687a      	ldr	r2, [r7, #4]
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	212c      	movs	r1, #44	; 0x2c
 8002bee:	fb01 f303 	mul.w	r3, r1, r3
 8002bf2:	4413      	add	r3, r2
 8002bf4:	333d      	adds	r3, #61	; 0x3d
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002bfa:	687a      	ldr	r2, [r7, #4]
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	212c      	movs	r1, #44	; 0x2c
 8002c00:	fb01 f303 	mul.w	r3, r1, r3
 8002c04:	4413      	add	r3, r2
 8002c06:	3360      	adds	r3, #96	; 0x60
 8002c08:	2202      	movs	r2, #2
 8002c0a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	697a      	ldr	r2, [r7, #20]
 8002c12:	b2d2      	uxtb	r2, r2
 8002c14:	4611      	mov	r1, r2
 8002c16:	4618      	mov	r0, r3
 8002c18:	f002 fe63 	bl	80058e2 <USB_HC_Halt>
}
 8002c1c:	e2f7      	b.n	800320e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	015a      	lsls	r2, r3, #5
 8002c22:	69bb      	ldr	r3, [r7, #24]
 8002c24:	4413      	add	r3, r2
 8002c26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c34:	d112      	bne.n	8002c5c <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	015a      	lsls	r2, r3, #5
 8002c3a:	69bb      	ldr	r3, [r7, #24]
 8002c3c:	4413      	add	r3, r2
 8002c3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c42:	461a      	mov	r2, r3
 8002c44:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c48:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	697a      	ldr	r2, [r7, #20]
 8002c50:	b2d2      	uxtb	r2, r2
 8002c52:	4611      	mov	r1, r2
 8002c54:	4618      	mov	r0, r3
 8002c56:	f002 fe44 	bl	80058e2 <USB_HC_Halt>
}
 8002c5a:	e2d8      	b.n	800320e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	015a      	lsls	r2, r3, #5
 8002c60:	69bb      	ldr	r3, [r7, #24]
 8002c62:	4413      	add	r3, r2
 8002c64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	f003 0301 	and.w	r3, r3, #1
 8002c6e:	2b01      	cmp	r3, #1
 8002c70:	d140      	bne.n	8002cf4 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002c72:	687a      	ldr	r2, [r7, #4]
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	212c      	movs	r1, #44	; 0x2c
 8002c78:	fb01 f303 	mul.w	r3, r1, r3
 8002c7c:	4413      	add	r3, r2
 8002c7e:	335c      	adds	r3, #92	; 0x5c
 8002c80:	2200      	movs	r2, #0
 8002c82:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	015a      	lsls	r2, r3, #5
 8002c88:	69bb      	ldr	r3, [r7, #24]
 8002c8a:	4413      	add	r3, r2
 8002c8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c96:	2b40      	cmp	r3, #64	; 0x40
 8002c98:	d111      	bne.n	8002cbe <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8002c9a:	687a      	ldr	r2, [r7, #4]
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	212c      	movs	r1, #44	; 0x2c
 8002ca0:	fb01 f303 	mul.w	r3, r1, r3
 8002ca4:	4413      	add	r3, r2
 8002ca6:	333d      	adds	r3, #61	; 0x3d
 8002ca8:	2201      	movs	r2, #1
 8002caa:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	015a      	lsls	r2, r3, #5
 8002cb0:	69bb      	ldr	r3, [r7, #24]
 8002cb2:	4413      	add	r3, r2
 8002cb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cb8:	461a      	mov	r2, r3
 8002cba:	2340      	movs	r3, #64	; 0x40
 8002cbc:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	015a      	lsls	r2, r3, #5
 8002cc2:	69bb      	ldr	r3, [r7, #24]
 8002cc4:	4413      	add	r3, r2
 8002cc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cca:	461a      	mov	r2, r3
 8002ccc:	2301      	movs	r3, #1
 8002cce:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002cd0:	687a      	ldr	r2, [r7, #4]
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	212c      	movs	r1, #44	; 0x2c
 8002cd6:	fb01 f303 	mul.w	r3, r1, r3
 8002cda:	4413      	add	r3, r2
 8002cdc:	3361      	adds	r3, #97	; 0x61
 8002cde:	2201      	movs	r2, #1
 8002ce0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	697a      	ldr	r2, [r7, #20]
 8002ce8:	b2d2      	uxtb	r2, r2
 8002cea:	4611      	mov	r1, r2
 8002cec:	4618      	mov	r0, r3
 8002cee:	f002 fdf8 	bl	80058e2 <USB_HC_Halt>
}
 8002cf2:	e28c      	b.n	800320e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	015a      	lsls	r2, r3, #5
 8002cf8:	69bb      	ldr	r3, [r7, #24]
 8002cfa:	4413      	add	r3, r2
 8002cfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d06:	2b40      	cmp	r3, #64	; 0x40
 8002d08:	d12c      	bne.n	8002d64 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8002d0a:	687a      	ldr	r2, [r7, #4]
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	212c      	movs	r1, #44	; 0x2c
 8002d10:	fb01 f303 	mul.w	r3, r1, r3
 8002d14:	4413      	add	r3, r2
 8002d16:	3361      	adds	r3, #97	; 0x61
 8002d18:	2204      	movs	r2, #4
 8002d1a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002d1c:	687a      	ldr	r2, [r7, #4]
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	212c      	movs	r1, #44	; 0x2c
 8002d22:	fb01 f303 	mul.w	r3, r1, r3
 8002d26:	4413      	add	r3, r2
 8002d28:	333d      	adds	r3, #61	; 0x3d
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002d2e:	687a      	ldr	r2, [r7, #4]
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	212c      	movs	r1, #44	; 0x2c
 8002d34:	fb01 f303 	mul.w	r3, r1, r3
 8002d38:	4413      	add	r3, r2
 8002d3a:	335c      	adds	r3, #92	; 0x5c
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	697a      	ldr	r2, [r7, #20]
 8002d46:	b2d2      	uxtb	r2, r2
 8002d48:	4611      	mov	r1, r2
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f002 fdc9 	bl	80058e2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	015a      	lsls	r2, r3, #5
 8002d54:	69bb      	ldr	r3, [r7, #24]
 8002d56:	4413      	add	r3, r2
 8002d58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d5c:	461a      	mov	r2, r3
 8002d5e:	2340      	movs	r3, #64	; 0x40
 8002d60:	6093      	str	r3, [r2, #8]
}
 8002d62:	e254      	b.n	800320e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	015a      	lsls	r2, r3, #5
 8002d68:	69bb      	ldr	r3, [r7, #24]
 8002d6a:	4413      	add	r3, r2
 8002d6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d70:	689b      	ldr	r3, [r3, #8]
 8002d72:	f003 0308 	and.w	r3, r3, #8
 8002d76:	2b08      	cmp	r3, #8
 8002d78:	d11a      	bne.n	8002db0 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	015a      	lsls	r2, r3, #5
 8002d7e:	69bb      	ldr	r3, [r7, #24]
 8002d80:	4413      	add	r3, r2
 8002d82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d86:	461a      	mov	r2, r3
 8002d88:	2308      	movs	r3, #8
 8002d8a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002d8c:	687a      	ldr	r2, [r7, #4]
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	212c      	movs	r1, #44	; 0x2c
 8002d92:	fb01 f303 	mul.w	r3, r1, r3
 8002d96:	4413      	add	r3, r2
 8002d98:	3361      	adds	r3, #97	; 0x61
 8002d9a:	2205      	movs	r2, #5
 8002d9c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	697a      	ldr	r2, [r7, #20]
 8002da4:	b2d2      	uxtb	r2, r2
 8002da6:	4611      	mov	r1, r2
 8002da8:	4618      	mov	r0, r3
 8002daa:	f002 fd9a 	bl	80058e2 <USB_HC_Halt>
}
 8002dae:	e22e      	b.n	800320e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	015a      	lsls	r2, r3, #5
 8002db4:	69bb      	ldr	r3, [r7, #24]
 8002db6:	4413      	add	r3, r2
 8002db8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	f003 0310 	and.w	r3, r3, #16
 8002dc2:	2b10      	cmp	r3, #16
 8002dc4:	d140      	bne.n	8002e48 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002dc6:	687a      	ldr	r2, [r7, #4]
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	212c      	movs	r1, #44	; 0x2c
 8002dcc:	fb01 f303 	mul.w	r3, r1, r3
 8002dd0:	4413      	add	r3, r2
 8002dd2:	335c      	adds	r3, #92	; 0x5c
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002dd8:	687a      	ldr	r2, [r7, #4]
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	212c      	movs	r1, #44	; 0x2c
 8002dde:	fb01 f303 	mul.w	r3, r1, r3
 8002de2:	4413      	add	r3, r2
 8002de4:	3361      	adds	r3, #97	; 0x61
 8002de6:	2203      	movs	r2, #3
 8002de8:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002dea:	687a      	ldr	r2, [r7, #4]
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	212c      	movs	r1, #44	; 0x2c
 8002df0:	fb01 f303 	mul.w	r3, r1, r3
 8002df4:	4413      	add	r3, r2
 8002df6:	333d      	adds	r3, #61	; 0x3d
 8002df8:	781b      	ldrb	r3, [r3, #0]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d112      	bne.n	8002e24 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8002dfe:	687a      	ldr	r2, [r7, #4]
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	212c      	movs	r1, #44	; 0x2c
 8002e04:	fb01 f303 	mul.w	r3, r1, r3
 8002e08:	4413      	add	r3, r2
 8002e0a:	333c      	adds	r3, #60	; 0x3c
 8002e0c:	781b      	ldrb	r3, [r3, #0]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d108      	bne.n	8002e24 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8002e12:	687a      	ldr	r2, [r7, #4]
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	212c      	movs	r1, #44	; 0x2c
 8002e18:	fb01 f303 	mul.w	r3, r1, r3
 8002e1c:	4413      	add	r3, r2
 8002e1e:	333d      	adds	r3, #61	; 0x3d
 8002e20:	2201      	movs	r2, #1
 8002e22:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	697a      	ldr	r2, [r7, #20]
 8002e2a:	b2d2      	uxtb	r2, r2
 8002e2c:	4611      	mov	r1, r2
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f002 fd57 	bl	80058e2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	015a      	lsls	r2, r3, #5
 8002e38:	69bb      	ldr	r3, [r7, #24]
 8002e3a:	4413      	add	r3, r2
 8002e3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e40:	461a      	mov	r2, r3
 8002e42:	2310      	movs	r3, #16
 8002e44:	6093      	str	r3, [r2, #8]
}
 8002e46:	e1e2      	b.n	800320e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	015a      	lsls	r2, r3, #5
 8002e4c:	69bb      	ldr	r3, [r7, #24]
 8002e4e:	4413      	add	r3, r2
 8002e50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e5a:	2b80      	cmp	r3, #128	; 0x80
 8002e5c:	d164      	bne.n	8002f28 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	691b      	ldr	r3, [r3, #16]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d111      	bne.n	8002e8a <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8002e66:	687a      	ldr	r2, [r7, #4]
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	212c      	movs	r1, #44	; 0x2c
 8002e6c:	fb01 f303 	mul.w	r3, r1, r3
 8002e70:	4413      	add	r3, r2
 8002e72:	3361      	adds	r3, #97	; 0x61
 8002e74:	2206      	movs	r2, #6
 8002e76:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	697a      	ldr	r2, [r7, #20]
 8002e7e:	b2d2      	uxtb	r2, r2
 8002e80:	4611      	mov	r1, r2
 8002e82:	4618      	mov	r0, r3
 8002e84:	f002 fd2d 	bl	80058e2 <USB_HC_Halt>
 8002e88:	e044      	b.n	8002f14 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8002e8a:	687a      	ldr	r2, [r7, #4]
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	212c      	movs	r1, #44	; 0x2c
 8002e90:	fb01 f303 	mul.w	r3, r1, r3
 8002e94:	4413      	add	r3, r2
 8002e96:	335c      	adds	r3, #92	; 0x5c
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	1c5a      	adds	r2, r3, #1
 8002e9c:	6879      	ldr	r1, [r7, #4]
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	202c      	movs	r0, #44	; 0x2c
 8002ea2:	fb00 f303 	mul.w	r3, r0, r3
 8002ea6:	440b      	add	r3, r1
 8002ea8:	335c      	adds	r3, #92	; 0x5c
 8002eaa:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002eac:	687a      	ldr	r2, [r7, #4]
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	212c      	movs	r1, #44	; 0x2c
 8002eb2:	fb01 f303 	mul.w	r3, r1, r3
 8002eb6:	4413      	add	r3, r2
 8002eb8:	335c      	adds	r3, #92	; 0x5c
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	2b02      	cmp	r3, #2
 8002ebe:	d920      	bls.n	8002f02 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002ec0:	687a      	ldr	r2, [r7, #4]
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	212c      	movs	r1, #44	; 0x2c
 8002ec6:	fb01 f303 	mul.w	r3, r1, r3
 8002eca:	4413      	add	r3, r2
 8002ecc:	335c      	adds	r3, #92	; 0x5c
 8002ece:	2200      	movs	r2, #0
 8002ed0:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002ed2:	687a      	ldr	r2, [r7, #4]
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	212c      	movs	r1, #44	; 0x2c
 8002ed8:	fb01 f303 	mul.w	r3, r1, r3
 8002edc:	4413      	add	r3, r2
 8002ede:	3360      	adds	r3, #96	; 0x60
 8002ee0:	2204      	movs	r2, #4
 8002ee2:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	b2d9      	uxtb	r1, r3
 8002ee8:	687a      	ldr	r2, [r7, #4]
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	202c      	movs	r0, #44	; 0x2c
 8002eee:	fb00 f303 	mul.w	r3, r0, r3
 8002ef2:	4413      	add	r3, r2
 8002ef4:	3360      	adds	r3, #96	; 0x60
 8002ef6:	781b      	ldrb	r3, [r3, #0]
 8002ef8:	461a      	mov	r2, r3
 8002efa:	6878      	ldr	r0, [r7, #4]
 8002efc:	f003 fffa 	bl	8006ef4 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002f00:	e008      	b.n	8002f14 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002f02:	687a      	ldr	r2, [r7, #4]
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	212c      	movs	r1, #44	; 0x2c
 8002f08:	fb01 f303 	mul.w	r3, r1, r3
 8002f0c:	4413      	add	r3, r2
 8002f0e:	3360      	adds	r3, #96	; 0x60
 8002f10:	2202      	movs	r2, #2
 8002f12:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	015a      	lsls	r2, r3, #5
 8002f18:	69bb      	ldr	r3, [r7, #24]
 8002f1a:	4413      	add	r3, r2
 8002f1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f20:	461a      	mov	r2, r3
 8002f22:	2380      	movs	r3, #128	; 0x80
 8002f24:	6093      	str	r3, [r2, #8]
}
 8002f26:	e172      	b.n	800320e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	015a      	lsls	r2, r3, #5
 8002f2c:	69bb      	ldr	r3, [r7, #24]
 8002f2e:	4413      	add	r3, r2
 8002f30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f3e:	d11b      	bne.n	8002f78 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002f40:	687a      	ldr	r2, [r7, #4]
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	212c      	movs	r1, #44	; 0x2c
 8002f46:	fb01 f303 	mul.w	r3, r1, r3
 8002f4a:	4413      	add	r3, r2
 8002f4c:	3361      	adds	r3, #97	; 0x61
 8002f4e:	2208      	movs	r2, #8
 8002f50:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	697a      	ldr	r2, [r7, #20]
 8002f58:	b2d2      	uxtb	r2, r2
 8002f5a:	4611      	mov	r1, r2
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f002 fcc0 	bl	80058e2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	015a      	lsls	r2, r3, #5
 8002f66:	69bb      	ldr	r3, [r7, #24]
 8002f68:	4413      	add	r3, r2
 8002f6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f6e:	461a      	mov	r2, r3
 8002f70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f74:	6093      	str	r3, [r2, #8]
}
 8002f76:	e14a      	b.n	800320e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	015a      	lsls	r2, r3, #5
 8002f7c:	69bb      	ldr	r3, [r7, #24]
 8002f7e:	4413      	add	r3, r2
 8002f80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	f003 0302 	and.w	r3, r3, #2
 8002f8a:	2b02      	cmp	r3, #2
 8002f8c:	f040 813f 	bne.w	800320e <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002f90:	687a      	ldr	r2, [r7, #4]
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	212c      	movs	r1, #44	; 0x2c
 8002f96:	fb01 f303 	mul.w	r3, r1, r3
 8002f9a:	4413      	add	r3, r2
 8002f9c:	3361      	adds	r3, #97	; 0x61
 8002f9e:	781b      	ldrb	r3, [r3, #0]
 8002fa0:	2b01      	cmp	r3, #1
 8002fa2:	d17d      	bne.n	80030a0 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002fa4:	687a      	ldr	r2, [r7, #4]
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	212c      	movs	r1, #44	; 0x2c
 8002faa:	fb01 f303 	mul.w	r3, r1, r3
 8002fae:	4413      	add	r3, r2
 8002fb0:	3360      	adds	r3, #96	; 0x60
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002fb6:	687a      	ldr	r2, [r7, #4]
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	212c      	movs	r1, #44	; 0x2c
 8002fbc:	fb01 f303 	mul.w	r3, r1, r3
 8002fc0:	4413      	add	r3, r2
 8002fc2:	333f      	adds	r3, #63	; 0x3f
 8002fc4:	781b      	ldrb	r3, [r3, #0]
 8002fc6:	2b02      	cmp	r3, #2
 8002fc8:	d00a      	beq.n	8002fe0 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002fca:	687a      	ldr	r2, [r7, #4]
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	212c      	movs	r1, #44	; 0x2c
 8002fd0:	fb01 f303 	mul.w	r3, r1, r3
 8002fd4:	4413      	add	r3, r2
 8002fd6:	333f      	adds	r3, #63	; 0x3f
 8002fd8:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002fda:	2b03      	cmp	r3, #3
 8002fdc:	f040 8100 	bne.w	80031e0 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	691b      	ldr	r3, [r3, #16]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d113      	bne.n	8003010 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002fe8:	687a      	ldr	r2, [r7, #4]
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	212c      	movs	r1, #44	; 0x2c
 8002fee:	fb01 f303 	mul.w	r3, r1, r3
 8002ff2:	4413      	add	r3, r2
 8002ff4:	3355      	adds	r3, #85	; 0x55
 8002ff6:	781b      	ldrb	r3, [r3, #0]
 8002ff8:	f083 0301 	eor.w	r3, r3, #1
 8002ffc:	b2d8      	uxtb	r0, r3
 8002ffe:	687a      	ldr	r2, [r7, #4]
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	212c      	movs	r1, #44	; 0x2c
 8003004:	fb01 f303 	mul.w	r3, r1, r3
 8003008:	4413      	add	r3, r2
 800300a:	3355      	adds	r3, #85	; 0x55
 800300c:	4602      	mov	r2, r0
 800300e:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	691b      	ldr	r3, [r3, #16]
 8003014:	2b01      	cmp	r3, #1
 8003016:	f040 80e3 	bne.w	80031e0 <HCD_HC_OUT_IRQHandler+0x69c>
 800301a:	687a      	ldr	r2, [r7, #4]
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	212c      	movs	r1, #44	; 0x2c
 8003020:	fb01 f303 	mul.w	r3, r1, r3
 8003024:	4413      	add	r3, r2
 8003026:	334c      	adds	r3, #76	; 0x4c
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	2b00      	cmp	r3, #0
 800302c:	f000 80d8 	beq.w	80031e0 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8003030:	687a      	ldr	r2, [r7, #4]
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	212c      	movs	r1, #44	; 0x2c
 8003036:	fb01 f303 	mul.w	r3, r1, r3
 800303a:	4413      	add	r3, r2
 800303c:	334c      	adds	r3, #76	; 0x4c
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	6879      	ldr	r1, [r7, #4]
 8003042:	697a      	ldr	r2, [r7, #20]
 8003044:	202c      	movs	r0, #44	; 0x2c
 8003046:	fb00 f202 	mul.w	r2, r0, r2
 800304a:	440a      	add	r2, r1
 800304c:	3240      	adds	r2, #64	; 0x40
 800304e:	8812      	ldrh	r2, [r2, #0]
 8003050:	4413      	add	r3, r2
 8003052:	3b01      	subs	r3, #1
 8003054:	6879      	ldr	r1, [r7, #4]
 8003056:	697a      	ldr	r2, [r7, #20]
 8003058:	202c      	movs	r0, #44	; 0x2c
 800305a:	fb00 f202 	mul.w	r2, r0, r2
 800305e:	440a      	add	r2, r1
 8003060:	3240      	adds	r2, #64	; 0x40
 8003062:	8812      	ldrh	r2, [r2, #0]
 8003064:	fbb3 f3f2 	udiv	r3, r3, r2
 8003068:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	f003 0301 	and.w	r3, r3, #1
 8003070:	2b00      	cmp	r3, #0
 8003072:	f000 80b5 	beq.w	80031e0 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8003076:	687a      	ldr	r2, [r7, #4]
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	212c      	movs	r1, #44	; 0x2c
 800307c:	fb01 f303 	mul.w	r3, r1, r3
 8003080:	4413      	add	r3, r2
 8003082:	3355      	adds	r3, #85	; 0x55
 8003084:	781b      	ldrb	r3, [r3, #0]
 8003086:	f083 0301 	eor.w	r3, r3, #1
 800308a:	b2d8      	uxtb	r0, r3
 800308c:	687a      	ldr	r2, [r7, #4]
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	212c      	movs	r1, #44	; 0x2c
 8003092:	fb01 f303 	mul.w	r3, r1, r3
 8003096:	4413      	add	r3, r2
 8003098:	3355      	adds	r3, #85	; 0x55
 800309a:	4602      	mov	r2, r0
 800309c:	701a      	strb	r2, [r3, #0]
 800309e:	e09f      	b.n	80031e0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80030a0:	687a      	ldr	r2, [r7, #4]
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	212c      	movs	r1, #44	; 0x2c
 80030a6:	fb01 f303 	mul.w	r3, r1, r3
 80030aa:	4413      	add	r3, r2
 80030ac:	3361      	adds	r3, #97	; 0x61
 80030ae:	781b      	ldrb	r3, [r3, #0]
 80030b0:	2b03      	cmp	r3, #3
 80030b2:	d109      	bne.n	80030c8 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80030b4:	687a      	ldr	r2, [r7, #4]
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	212c      	movs	r1, #44	; 0x2c
 80030ba:	fb01 f303 	mul.w	r3, r1, r3
 80030be:	4413      	add	r3, r2
 80030c0:	3360      	adds	r3, #96	; 0x60
 80030c2:	2202      	movs	r2, #2
 80030c4:	701a      	strb	r2, [r3, #0]
 80030c6:	e08b      	b.n	80031e0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80030c8:	687a      	ldr	r2, [r7, #4]
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	212c      	movs	r1, #44	; 0x2c
 80030ce:	fb01 f303 	mul.w	r3, r1, r3
 80030d2:	4413      	add	r3, r2
 80030d4:	3361      	adds	r3, #97	; 0x61
 80030d6:	781b      	ldrb	r3, [r3, #0]
 80030d8:	2b04      	cmp	r3, #4
 80030da:	d109      	bne.n	80030f0 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80030dc:	687a      	ldr	r2, [r7, #4]
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	212c      	movs	r1, #44	; 0x2c
 80030e2:	fb01 f303 	mul.w	r3, r1, r3
 80030e6:	4413      	add	r3, r2
 80030e8:	3360      	adds	r3, #96	; 0x60
 80030ea:	2202      	movs	r2, #2
 80030ec:	701a      	strb	r2, [r3, #0]
 80030ee:	e077      	b.n	80031e0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80030f0:	687a      	ldr	r2, [r7, #4]
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	212c      	movs	r1, #44	; 0x2c
 80030f6:	fb01 f303 	mul.w	r3, r1, r3
 80030fa:	4413      	add	r3, r2
 80030fc:	3361      	adds	r3, #97	; 0x61
 80030fe:	781b      	ldrb	r3, [r3, #0]
 8003100:	2b05      	cmp	r3, #5
 8003102:	d109      	bne.n	8003118 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003104:	687a      	ldr	r2, [r7, #4]
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	212c      	movs	r1, #44	; 0x2c
 800310a:	fb01 f303 	mul.w	r3, r1, r3
 800310e:	4413      	add	r3, r2
 8003110:	3360      	adds	r3, #96	; 0x60
 8003112:	2205      	movs	r2, #5
 8003114:	701a      	strb	r2, [r3, #0]
 8003116:	e063      	b.n	80031e0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003118:	687a      	ldr	r2, [r7, #4]
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	212c      	movs	r1, #44	; 0x2c
 800311e:	fb01 f303 	mul.w	r3, r1, r3
 8003122:	4413      	add	r3, r2
 8003124:	3361      	adds	r3, #97	; 0x61
 8003126:	781b      	ldrb	r3, [r3, #0]
 8003128:	2b06      	cmp	r3, #6
 800312a:	d009      	beq.n	8003140 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800312c:	687a      	ldr	r2, [r7, #4]
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	212c      	movs	r1, #44	; 0x2c
 8003132:	fb01 f303 	mul.w	r3, r1, r3
 8003136:	4413      	add	r3, r2
 8003138:	3361      	adds	r3, #97	; 0x61
 800313a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800313c:	2b08      	cmp	r3, #8
 800313e:	d14f      	bne.n	80031e0 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8003140:	687a      	ldr	r2, [r7, #4]
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	212c      	movs	r1, #44	; 0x2c
 8003146:	fb01 f303 	mul.w	r3, r1, r3
 800314a:	4413      	add	r3, r2
 800314c:	335c      	adds	r3, #92	; 0x5c
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	1c5a      	adds	r2, r3, #1
 8003152:	6879      	ldr	r1, [r7, #4]
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	202c      	movs	r0, #44	; 0x2c
 8003158:	fb00 f303 	mul.w	r3, r0, r3
 800315c:	440b      	add	r3, r1
 800315e:	335c      	adds	r3, #92	; 0x5c
 8003160:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003162:	687a      	ldr	r2, [r7, #4]
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	212c      	movs	r1, #44	; 0x2c
 8003168:	fb01 f303 	mul.w	r3, r1, r3
 800316c:	4413      	add	r3, r2
 800316e:	335c      	adds	r3, #92	; 0x5c
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	2b02      	cmp	r3, #2
 8003174:	d912      	bls.n	800319c <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003176:	687a      	ldr	r2, [r7, #4]
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	212c      	movs	r1, #44	; 0x2c
 800317c:	fb01 f303 	mul.w	r3, r1, r3
 8003180:	4413      	add	r3, r2
 8003182:	335c      	adds	r3, #92	; 0x5c
 8003184:	2200      	movs	r2, #0
 8003186:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003188:	687a      	ldr	r2, [r7, #4]
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	212c      	movs	r1, #44	; 0x2c
 800318e:	fb01 f303 	mul.w	r3, r1, r3
 8003192:	4413      	add	r3, r2
 8003194:	3360      	adds	r3, #96	; 0x60
 8003196:	2204      	movs	r2, #4
 8003198:	701a      	strb	r2, [r3, #0]
 800319a:	e021      	b.n	80031e0 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800319c:	687a      	ldr	r2, [r7, #4]
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	212c      	movs	r1, #44	; 0x2c
 80031a2:	fb01 f303 	mul.w	r3, r1, r3
 80031a6:	4413      	add	r3, r2
 80031a8:	3360      	adds	r3, #96	; 0x60
 80031aa:	2202      	movs	r2, #2
 80031ac:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	015a      	lsls	r2, r3, #5
 80031b2:	69bb      	ldr	r3, [r7, #24]
 80031b4:	4413      	add	r3, r2
 80031b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80031c4:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80031cc:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	015a      	lsls	r2, r3, #5
 80031d2:	69bb      	ldr	r3, [r7, #24]
 80031d4:	4413      	add	r3, r2
 80031d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031da:	461a      	mov	r2, r3
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	015a      	lsls	r2, r3, #5
 80031e4:	69bb      	ldr	r3, [r7, #24]
 80031e6:	4413      	add	r3, r2
 80031e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031ec:	461a      	mov	r2, r3
 80031ee:	2302      	movs	r3, #2
 80031f0:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	b2d9      	uxtb	r1, r3
 80031f6:	687a      	ldr	r2, [r7, #4]
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	202c      	movs	r0, #44	; 0x2c
 80031fc:	fb00 f303 	mul.w	r3, r0, r3
 8003200:	4413      	add	r3, r2
 8003202:	3360      	adds	r3, #96	; 0x60
 8003204:	781b      	ldrb	r3, [r3, #0]
 8003206:	461a      	mov	r2, r3
 8003208:	6878      	ldr	r0, [r7, #4]
 800320a:	f003 fe73 	bl	8006ef4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800320e:	bf00      	nop
 8003210:	3720      	adds	r7, #32
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}

08003216 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003216:	b580      	push	{r7, lr}
 8003218:	b08a      	sub	sp, #40	; 0x28
 800321a:	af00      	add	r7, sp, #0
 800321c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003226:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	6a1b      	ldr	r3, [r3, #32]
 800322e:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003230:	69fb      	ldr	r3, [r7, #28]
 8003232:	f003 030f 	and.w	r3, r3, #15
 8003236:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003238:	69fb      	ldr	r3, [r7, #28]
 800323a:	0c5b      	lsrs	r3, r3, #17
 800323c:	f003 030f 	and.w	r3, r3, #15
 8003240:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003242:	69fb      	ldr	r3, [r7, #28]
 8003244:	091b      	lsrs	r3, r3, #4
 8003246:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800324a:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	2b02      	cmp	r3, #2
 8003250:	d004      	beq.n	800325c <HCD_RXQLVL_IRQHandler+0x46>
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	2b05      	cmp	r3, #5
 8003256:	f000 80a9 	beq.w	80033ac <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800325a:	e0aa      	b.n	80033b2 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	2b00      	cmp	r3, #0
 8003260:	f000 80a6 	beq.w	80033b0 <HCD_RXQLVL_IRQHandler+0x19a>
 8003264:	687a      	ldr	r2, [r7, #4]
 8003266:	69bb      	ldr	r3, [r7, #24]
 8003268:	212c      	movs	r1, #44	; 0x2c
 800326a:	fb01 f303 	mul.w	r3, r1, r3
 800326e:	4413      	add	r3, r2
 8003270:	3344      	adds	r3, #68	; 0x44
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	2b00      	cmp	r3, #0
 8003276:	f000 809b 	beq.w	80033b0 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 800327a:	687a      	ldr	r2, [r7, #4]
 800327c:	69bb      	ldr	r3, [r7, #24]
 800327e:	212c      	movs	r1, #44	; 0x2c
 8003280:	fb01 f303 	mul.w	r3, r1, r3
 8003284:	4413      	add	r3, r2
 8003286:	3350      	adds	r3, #80	; 0x50
 8003288:	681a      	ldr	r2, [r3, #0]
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	441a      	add	r2, r3
 800328e:	6879      	ldr	r1, [r7, #4]
 8003290:	69bb      	ldr	r3, [r7, #24]
 8003292:	202c      	movs	r0, #44	; 0x2c
 8003294:	fb00 f303 	mul.w	r3, r0, r3
 8003298:	440b      	add	r3, r1
 800329a:	334c      	adds	r3, #76	; 0x4c
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	429a      	cmp	r2, r3
 80032a0:	d87a      	bhi.n	8003398 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6818      	ldr	r0, [r3, #0]
 80032a6:	687a      	ldr	r2, [r7, #4]
 80032a8:	69bb      	ldr	r3, [r7, #24]
 80032aa:	212c      	movs	r1, #44	; 0x2c
 80032ac:	fb01 f303 	mul.w	r3, r1, r3
 80032b0:	4413      	add	r3, r2
 80032b2:	3344      	adds	r3, #68	; 0x44
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	693a      	ldr	r2, [r7, #16]
 80032b8:	b292      	uxth	r2, r2
 80032ba:	4619      	mov	r1, r3
 80032bc:	f001 fe92 	bl	8004fe4 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80032c0:	687a      	ldr	r2, [r7, #4]
 80032c2:	69bb      	ldr	r3, [r7, #24]
 80032c4:	212c      	movs	r1, #44	; 0x2c
 80032c6:	fb01 f303 	mul.w	r3, r1, r3
 80032ca:	4413      	add	r3, r2
 80032cc:	3344      	adds	r3, #68	; 0x44
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	441a      	add	r2, r3
 80032d4:	6879      	ldr	r1, [r7, #4]
 80032d6:	69bb      	ldr	r3, [r7, #24]
 80032d8:	202c      	movs	r0, #44	; 0x2c
 80032da:	fb00 f303 	mul.w	r3, r0, r3
 80032de:	440b      	add	r3, r1
 80032e0:	3344      	adds	r3, #68	; 0x44
 80032e2:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80032e4:	687a      	ldr	r2, [r7, #4]
 80032e6:	69bb      	ldr	r3, [r7, #24]
 80032e8:	212c      	movs	r1, #44	; 0x2c
 80032ea:	fb01 f303 	mul.w	r3, r1, r3
 80032ee:	4413      	add	r3, r2
 80032f0:	3350      	adds	r3, #80	; 0x50
 80032f2:	681a      	ldr	r2, [r3, #0]
 80032f4:	693b      	ldr	r3, [r7, #16]
 80032f6:	441a      	add	r2, r3
 80032f8:	6879      	ldr	r1, [r7, #4]
 80032fa:	69bb      	ldr	r3, [r7, #24]
 80032fc:	202c      	movs	r0, #44	; 0x2c
 80032fe:	fb00 f303 	mul.w	r3, r0, r3
 8003302:	440b      	add	r3, r1
 8003304:	3350      	adds	r3, #80	; 0x50
 8003306:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003308:	69bb      	ldr	r3, [r7, #24]
 800330a:	015a      	lsls	r2, r3, #5
 800330c:	6a3b      	ldr	r3, [r7, #32]
 800330e:	4413      	add	r3, r2
 8003310:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003314:	691b      	ldr	r3, [r3, #16]
 8003316:	0cdb      	lsrs	r3, r3, #19
 8003318:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800331c:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800331e:	687a      	ldr	r2, [r7, #4]
 8003320:	69bb      	ldr	r3, [r7, #24]
 8003322:	212c      	movs	r1, #44	; 0x2c
 8003324:	fb01 f303 	mul.w	r3, r1, r3
 8003328:	4413      	add	r3, r2
 800332a:	3340      	adds	r3, #64	; 0x40
 800332c:	881b      	ldrh	r3, [r3, #0]
 800332e:	461a      	mov	r2, r3
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	4293      	cmp	r3, r2
 8003334:	d13c      	bne.n	80033b0 <HCD_RXQLVL_IRQHandler+0x19a>
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d039      	beq.n	80033b0 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 800333c:	69bb      	ldr	r3, [r7, #24]
 800333e:	015a      	lsls	r2, r3, #5
 8003340:	6a3b      	ldr	r3, [r7, #32]
 8003342:	4413      	add	r3, r2
 8003344:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003352:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800335a:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 800335c:	69bb      	ldr	r3, [r7, #24]
 800335e:	015a      	lsls	r2, r3, #5
 8003360:	6a3b      	ldr	r3, [r7, #32]
 8003362:	4413      	add	r3, r2
 8003364:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003368:	461a      	mov	r2, r3
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 800336e:	687a      	ldr	r2, [r7, #4]
 8003370:	69bb      	ldr	r3, [r7, #24]
 8003372:	212c      	movs	r1, #44	; 0x2c
 8003374:	fb01 f303 	mul.w	r3, r1, r3
 8003378:	4413      	add	r3, r2
 800337a:	3354      	adds	r3, #84	; 0x54
 800337c:	781b      	ldrb	r3, [r3, #0]
 800337e:	f083 0301 	eor.w	r3, r3, #1
 8003382:	b2d8      	uxtb	r0, r3
 8003384:	687a      	ldr	r2, [r7, #4]
 8003386:	69bb      	ldr	r3, [r7, #24]
 8003388:	212c      	movs	r1, #44	; 0x2c
 800338a:	fb01 f303 	mul.w	r3, r1, r3
 800338e:	4413      	add	r3, r2
 8003390:	3354      	adds	r3, #84	; 0x54
 8003392:	4602      	mov	r2, r0
 8003394:	701a      	strb	r2, [r3, #0]
      break;
 8003396:	e00b      	b.n	80033b0 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003398:	687a      	ldr	r2, [r7, #4]
 800339a:	69bb      	ldr	r3, [r7, #24]
 800339c:	212c      	movs	r1, #44	; 0x2c
 800339e:	fb01 f303 	mul.w	r3, r1, r3
 80033a2:	4413      	add	r3, r2
 80033a4:	3360      	adds	r3, #96	; 0x60
 80033a6:	2204      	movs	r2, #4
 80033a8:	701a      	strb	r2, [r3, #0]
      break;
 80033aa:	e001      	b.n	80033b0 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 80033ac:	bf00      	nop
 80033ae:	e000      	b.n	80033b2 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 80033b0:	bf00      	nop
  }
}
 80033b2:	bf00      	nop
 80033b4:	3728      	adds	r7, #40	; 0x28
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}

080033ba <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80033ba:	b580      	push	{r7, lr}
 80033bc:	b086      	sub	sp, #24
 80033be:	af00      	add	r7, sp, #0
 80033c0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80033e6:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	f003 0302 	and.w	r3, r3, #2
 80033ee:	2b02      	cmp	r3, #2
 80033f0:	d10b      	bne.n	800340a <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	f003 0301 	and.w	r3, r3, #1
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	d102      	bne.n	8003402 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80033fc:	6878      	ldr	r0, [r7, #4]
 80033fe:	f003 fd5d 	bl	8006ebc <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	f043 0302 	orr.w	r3, r3, #2
 8003408:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	f003 0308 	and.w	r3, r3, #8
 8003410:	2b08      	cmp	r3, #8
 8003412:	d132      	bne.n	800347a <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	f043 0308 	orr.w	r3, r3, #8
 800341a:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	f003 0304 	and.w	r3, r3, #4
 8003422:	2b04      	cmp	r3, #4
 8003424:	d126      	bne.n	8003474 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	699b      	ldr	r3, [r3, #24]
 800342a:	2b02      	cmp	r3, #2
 800342c:	d113      	bne.n	8003456 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003434:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003438:	d106      	bne.n	8003448 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	2102      	movs	r1, #2
 8003440:	4618      	mov	r0, r3
 8003442:	f001 ff3d 	bl	80052c0 <USB_InitFSLSPClkSel>
 8003446:	e011      	b.n	800346c <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	2101      	movs	r1, #1
 800344e:	4618      	mov	r0, r3
 8003450:	f001 ff36 	bl	80052c0 <USB_InitFSLSPClkSel>
 8003454:	e00a      	b.n	800346c <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	68db      	ldr	r3, [r3, #12]
 800345a:	2b01      	cmp	r3, #1
 800345c:	d106      	bne.n	800346c <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003464:	461a      	mov	r2, r3
 8003466:	f64e 2360 	movw	r3, #60000	; 0xea60
 800346a:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800346c:	6878      	ldr	r0, [r7, #4]
 800346e:	f003 fd4f 	bl	8006f10 <HAL_HCD_PortEnabled_Callback>
 8003472:	e002      	b.n	800347a <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003474:	6878      	ldr	r0, [r7, #4]
 8003476:	f003 fd59 	bl	8006f2c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	f003 0320 	and.w	r3, r3, #32
 8003480:	2b20      	cmp	r3, #32
 8003482:	d103      	bne.n	800348c <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	f043 0320 	orr.w	r3, r3, #32
 800348a:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003492:	461a      	mov	r2, r3
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	6013      	str	r3, [r2, #0]
}
 8003498:	bf00      	nop
 800349a:	3718      	adds	r7, #24
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}

080034a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b084      	sub	sp, #16
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d101      	bne.n	80034b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80034ae:	2301      	movs	r3, #1
 80034b0:	e12b      	b.n	800370a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034b8:	b2db      	uxtb	r3, r3
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d106      	bne.n	80034cc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2200      	movs	r2, #0
 80034c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80034c6:	6878      	ldr	r0, [r7, #4]
 80034c8:	f7fd fae8 	bl	8000a9c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2224      	movs	r2, #36	; 0x24
 80034d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	681a      	ldr	r2, [r3, #0]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f022 0201 	bic.w	r2, r2, #1
 80034e2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80034f2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	681a      	ldr	r2, [r3, #0]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003502:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003504:	f001 fa20 	bl	8004948 <HAL_RCC_GetPCLK1Freq>
 8003508:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	4a81      	ldr	r2, [pc, #516]	; (8003714 <HAL_I2C_Init+0x274>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d807      	bhi.n	8003524 <HAL_I2C_Init+0x84>
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	4a80      	ldr	r2, [pc, #512]	; (8003718 <HAL_I2C_Init+0x278>)
 8003518:	4293      	cmp	r3, r2
 800351a:	bf94      	ite	ls
 800351c:	2301      	movls	r3, #1
 800351e:	2300      	movhi	r3, #0
 8003520:	b2db      	uxtb	r3, r3
 8003522:	e006      	b.n	8003532 <HAL_I2C_Init+0x92>
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	4a7d      	ldr	r2, [pc, #500]	; (800371c <HAL_I2C_Init+0x27c>)
 8003528:	4293      	cmp	r3, r2
 800352a:	bf94      	ite	ls
 800352c:	2301      	movls	r3, #1
 800352e:	2300      	movhi	r3, #0
 8003530:	b2db      	uxtb	r3, r3
 8003532:	2b00      	cmp	r3, #0
 8003534:	d001      	beq.n	800353a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	e0e7      	b.n	800370a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	4a78      	ldr	r2, [pc, #480]	; (8003720 <HAL_I2C_Init+0x280>)
 800353e:	fba2 2303 	umull	r2, r3, r2, r3
 8003542:	0c9b      	lsrs	r3, r3, #18
 8003544:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	68ba      	ldr	r2, [r7, #8]
 8003556:	430a      	orrs	r2, r1
 8003558:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	6a1b      	ldr	r3, [r3, #32]
 8003560:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	4a6a      	ldr	r2, [pc, #424]	; (8003714 <HAL_I2C_Init+0x274>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d802      	bhi.n	8003574 <HAL_I2C_Init+0xd4>
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	3301      	adds	r3, #1
 8003572:	e009      	b.n	8003588 <HAL_I2C_Init+0xe8>
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800357a:	fb02 f303 	mul.w	r3, r2, r3
 800357e:	4a69      	ldr	r2, [pc, #420]	; (8003724 <HAL_I2C_Init+0x284>)
 8003580:	fba2 2303 	umull	r2, r3, r2, r3
 8003584:	099b      	lsrs	r3, r3, #6
 8003586:	3301      	adds	r3, #1
 8003588:	687a      	ldr	r2, [r7, #4]
 800358a:	6812      	ldr	r2, [r2, #0]
 800358c:	430b      	orrs	r3, r1
 800358e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	69db      	ldr	r3, [r3, #28]
 8003596:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800359a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	495c      	ldr	r1, [pc, #368]	; (8003714 <HAL_I2C_Init+0x274>)
 80035a4:	428b      	cmp	r3, r1
 80035a6:	d819      	bhi.n	80035dc <HAL_I2C_Init+0x13c>
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	1e59      	subs	r1, r3, #1
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	005b      	lsls	r3, r3, #1
 80035b2:	fbb1 f3f3 	udiv	r3, r1, r3
 80035b6:	1c59      	adds	r1, r3, #1
 80035b8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80035bc:	400b      	ands	r3, r1
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d00a      	beq.n	80035d8 <HAL_I2C_Init+0x138>
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	1e59      	subs	r1, r3, #1
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	005b      	lsls	r3, r3, #1
 80035cc:	fbb1 f3f3 	udiv	r3, r1, r3
 80035d0:	3301      	adds	r3, #1
 80035d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035d6:	e051      	b.n	800367c <HAL_I2C_Init+0x1dc>
 80035d8:	2304      	movs	r3, #4
 80035da:	e04f      	b.n	800367c <HAL_I2C_Init+0x1dc>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	689b      	ldr	r3, [r3, #8]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d111      	bne.n	8003608 <HAL_I2C_Init+0x168>
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	1e58      	subs	r0, r3, #1
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6859      	ldr	r1, [r3, #4]
 80035ec:	460b      	mov	r3, r1
 80035ee:	005b      	lsls	r3, r3, #1
 80035f0:	440b      	add	r3, r1
 80035f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80035f6:	3301      	adds	r3, #1
 80035f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	bf0c      	ite	eq
 8003600:	2301      	moveq	r3, #1
 8003602:	2300      	movne	r3, #0
 8003604:	b2db      	uxtb	r3, r3
 8003606:	e012      	b.n	800362e <HAL_I2C_Init+0x18e>
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	1e58      	subs	r0, r3, #1
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6859      	ldr	r1, [r3, #4]
 8003610:	460b      	mov	r3, r1
 8003612:	009b      	lsls	r3, r3, #2
 8003614:	440b      	add	r3, r1
 8003616:	0099      	lsls	r1, r3, #2
 8003618:	440b      	add	r3, r1
 800361a:	fbb0 f3f3 	udiv	r3, r0, r3
 800361e:	3301      	adds	r3, #1
 8003620:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003624:	2b00      	cmp	r3, #0
 8003626:	bf0c      	ite	eq
 8003628:	2301      	moveq	r3, #1
 800362a:	2300      	movne	r3, #0
 800362c:	b2db      	uxtb	r3, r3
 800362e:	2b00      	cmp	r3, #0
 8003630:	d001      	beq.n	8003636 <HAL_I2C_Init+0x196>
 8003632:	2301      	movs	r3, #1
 8003634:	e022      	b.n	800367c <HAL_I2C_Init+0x1dc>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d10e      	bne.n	800365c <HAL_I2C_Init+0x1bc>
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	1e58      	subs	r0, r3, #1
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6859      	ldr	r1, [r3, #4]
 8003646:	460b      	mov	r3, r1
 8003648:	005b      	lsls	r3, r3, #1
 800364a:	440b      	add	r3, r1
 800364c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003650:	3301      	adds	r3, #1
 8003652:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003656:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800365a:	e00f      	b.n	800367c <HAL_I2C_Init+0x1dc>
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	1e58      	subs	r0, r3, #1
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6859      	ldr	r1, [r3, #4]
 8003664:	460b      	mov	r3, r1
 8003666:	009b      	lsls	r3, r3, #2
 8003668:	440b      	add	r3, r1
 800366a:	0099      	lsls	r1, r3, #2
 800366c:	440b      	add	r3, r1
 800366e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003672:	3301      	adds	r3, #1
 8003674:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003678:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800367c:	6879      	ldr	r1, [r7, #4]
 800367e:	6809      	ldr	r1, [r1, #0]
 8003680:	4313      	orrs	r3, r2
 8003682:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	69da      	ldr	r2, [r3, #28]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6a1b      	ldr	r3, [r3, #32]
 8003696:	431a      	orrs	r2, r3
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	430a      	orrs	r2, r1
 800369e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80036aa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80036ae:	687a      	ldr	r2, [r7, #4]
 80036b0:	6911      	ldr	r1, [r2, #16]
 80036b2:	687a      	ldr	r2, [r7, #4]
 80036b4:	68d2      	ldr	r2, [r2, #12]
 80036b6:	4311      	orrs	r1, r2
 80036b8:	687a      	ldr	r2, [r7, #4]
 80036ba:	6812      	ldr	r2, [r2, #0]
 80036bc:	430b      	orrs	r3, r1
 80036be:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	68db      	ldr	r3, [r3, #12]
 80036c6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	695a      	ldr	r2, [r3, #20]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	699b      	ldr	r3, [r3, #24]
 80036d2:	431a      	orrs	r2, r3
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	430a      	orrs	r2, r1
 80036da:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	681a      	ldr	r2, [r3, #0]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f042 0201 	orr.w	r2, r2, #1
 80036ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2200      	movs	r2, #0
 80036f0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2220      	movs	r2, #32
 80036f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2200      	movs	r2, #0
 80036fe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2200      	movs	r2, #0
 8003704:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003708:	2300      	movs	r3, #0
}
 800370a:	4618      	mov	r0, r3
 800370c:	3710      	adds	r7, #16
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}
 8003712:	bf00      	nop
 8003714:	000186a0 	.word	0x000186a0
 8003718:	001e847f 	.word	0x001e847f
 800371c:	003d08ff 	.word	0x003d08ff
 8003720:	431bde83 	.word	0x431bde83
 8003724:	10624dd3 	.word	0x10624dd3

08003728 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b088      	sub	sp, #32
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d101      	bne.n	800373a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	e128      	b.n	800398c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003740:	b2db      	uxtb	r3, r3
 8003742:	2b00      	cmp	r3, #0
 8003744:	d109      	bne.n	800375a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2200      	movs	r2, #0
 800374a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	4a90      	ldr	r2, [pc, #576]	; (8003994 <HAL_I2S_Init+0x26c>)
 8003752:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003754:	6878      	ldr	r0, [r7, #4]
 8003756:	f7fd f9e9 	bl	8000b2c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2202      	movs	r2, #2
 800375e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	69db      	ldr	r3, [r3, #28]
 8003768:	687a      	ldr	r2, [r7, #4]
 800376a:	6812      	ldr	r2, [r2, #0]
 800376c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003770:	f023 030f 	bic.w	r3, r3, #15
 8003774:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	2202      	movs	r2, #2
 800377c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	695b      	ldr	r3, [r3, #20]
 8003782:	2b02      	cmp	r3, #2
 8003784:	d060      	beq.n	8003848 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	68db      	ldr	r3, [r3, #12]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d102      	bne.n	8003794 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800378e:	2310      	movs	r3, #16
 8003790:	617b      	str	r3, [r7, #20]
 8003792:	e001      	b.n	8003798 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003794:	2320      	movs	r3, #32
 8003796:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	2b20      	cmp	r3, #32
 800379e:	d802      	bhi.n	80037a6 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	005b      	lsls	r3, r3, #1
 80037a4:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80037a6:	2001      	movs	r0, #1
 80037a8:	f001 f9c4 	bl	8004b34 <HAL_RCCEx_GetPeriphCLKFreq>
 80037ac:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	691b      	ldr	r3, [r3, #16]
 80037b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037b6:	d125      	bne.n	8003804 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	68db      	ldr	r3, [r3, #12]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d010      	beq.n	80037e2 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	009b      	lsls	r3, r3, #2
 80037c4:	68fa      	ldr	r2, [r7, #12]
 80037c6:	fbb2 f2f3 	udiv	r2, r2, r3
 80037ca:	4613      	mov	r3, r2
 80037cc:	009b      	lsls	r3, r3, #2
 80037ce:	4413      	add	r3, r2
 80037d0:	005b      	lsls	r3, r3, #1
 80037d2:	461a      	mov	r2, r3
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	695b      	ldr	r3, [r3, #20]
 80037d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80037dc:	3305      	adds	r3, #5
 80037de:	613b      	str	r3, [r7, #16]
 80037e0:	e01f      	b.n	8003822 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	00db      	lsls	r3, r3, #3
 80037e6:	68fa      	ldr	r2, [r7, #12]
 80037e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80037ec:	4613      	mov	r3, r2
 80037ee:	009b      	lsls	r3, r3, #2
 80037f0:	4413      	add	r3, r2
 80037f2:	005b      	lsls	r3, r3, #1
 80037f4:	461a      	mov	r2, r3
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	695b      	ldr	r3, [r3, #20]
 80037fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80037fe:	3305      	adds	r3, #5
 8003800:	613b      	str	r3, [r7, #16]
 8003802:	e00e      	b.n	8003822 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003804:	68fa      	ldr	r2, [r7, #12]
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	fbb2 f2f3 	udiv	r2, r2, r3
 800380c:	4613      	mov	r3, r2
 800380e:	009b      	lsls	r3, r3, #2
 8003810:	4413      	add	r3, r2
 8003812:	005b      	lsls	r3, r3, #1
 8003814:	461a      	mov	r2, r3
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	695b      	ldr	r3, [r3, #20]
 800381a:	fbb2 f3f3 	udiv	r3, r2, r3
 800381e:	3305      	adds	r3, #5
 8003820:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	4a5c      	ldr	r2, [pc, #368]	; (8003998 <HAL_I2S_Init+0x270>)
 8003826:	fba2 2303 	umull	r2, r3, r2, r3
 800382a:	08db      	lsrs	r3, r3, #3
 800382c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	f003 0301 	and.w	r3, r3, #1
 8003834:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003836:	693a      	ldr	r2, [r7, #16]
 8003838:	69bb      	ldr	r3, [r7, #24]
 800383a:	1ad3      	subs	r3, r2, r3
 800383c:	085b      	lsrs	r3, r3, #1
 800383e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003840:	69bb      	ldr	r3, [r7, #24]
 8003842:	021b      	lsls	r3, r3, #8
 8003844:	61bb      	str	r3, [r7, #24]
 8003846:	e003      	b.n	8003850 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003848:	2302      	movs	r3, #2
 800384a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800384c:	2300      	movs	r3, #0
 800384e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003850:	69fb      	ldr	r3, [r7, #28]
 8003852:	2b01      	cmp	r3, #1
 8003854:	d902      	bls.n	800385c <HAL_I2S_Init+0x134>
 8003856:	69fb      	ldr	r3, [r7, #28]
 8003858:	2bff      	cmp	r3, #255	; 0xff
 800385a:	d907      	bls.n	800386c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003860:	f043 0210 	orr.w	r2, r3, #16
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003868:	2301      	movs	r3, #1
 800386a:	e08f      	b.n	800398c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	691a      	ldr	r2, [r3, #16]
 8003870:	69bb      	ldr	r3, [r7, #24]
 8003872:	ea42 0103 	orr.w	r1, r2, r3
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	69fa      	ldr	r2, [r7, #28]
 800387c:	430a      	orrs	r2, r1
 800387e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	69db      	ldr	r3, [r3, #28]
 8003886:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800388a:	f023 030f 	bic.w	r3, r3, #15
 800388e:	687a      	ldr	r2, [r7, #4]
 8003890:	6851      	ldr	r1, [r2, #4]
 8003892:	687a      	ldr	r2, [r7, #4]
 8003894:	6892      	ldr	r2, [r2, #8]
 8003896:	4311      	orrs	r1, r2
 8003898:	687a      	ldr	r2, [r7, #4]
 800389a:	68d2      	ldr	r2, [r2, #12]
 800389c:	4311      	orrs	r1, r2
 800389e:	687a      	ldr	r2, [r7, #4]
 80038a0:	6992      	ldr	r2, [r2, #24]
 80038a2:	430a      	orrs	r2, r1
 80038a4:	431a      	orrs	r2, r3
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80038ae:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6a1b      	ldr	r3, [r3, #32]
 80038b4:	2b01      	cmp	r3, #1
 80038b6:	d161      	bne.n	800397c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	4a38      	ldr	r2, [pc, #224]	; (800399c <HAL_I2S_Init+0x274>)
 80038bc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a37      	ldr	r2, [pc, #220]	; (80039a0 <HAL_I2S_Init+0x278>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d101      	bne.n	80038cc <HAL_I2S_Init+0x1a4>
 80038c8:	4b36      	ldr	r3, [pc, #216]	; (80039a4 <HAL_I2S_Init+0x27c>)
 80038ca:	e001      	b.n	80038d0 <HAL_I2S_Init+0x1a8>
 80038cc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038d0:	69db      	ldr	r3, [r3, #28]
 80038d2:	687a      	ldr	r2, [r7, #4]
 80038d4:	6812      	ldr	r2, [r2, #0]
 80038d6:	4932      	ldr	r1, [pc, #200]	; (80039a0 <HAL_I2S_Init+0x278>)
 80038d8:	428a      	cmp	r2, r1
 80038da:	d101      	bne.n	80038e0 <HAL_I2S_Init+0x1b8>
 80038dc:	4a31      	ldr	r2, [pc, #196]	; (80039a4 <HAL_I2S_Init+0x27c>)
 80038de:	e001      	b.n	80038e4 <HAL_I2S_Init+0x1bc>
 80038e0:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80038e4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80038e8:	f023 030f 	bic.w	r3, r3, #15
 80038ec:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a2b      	ldr	r2, [pc, #172]	; (80039a0 <HAL_I2S_Init+0x278>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d101      	bne.n	80038fc <HAL_I2S_Init+0x1d4>
 80038f8:	4b2a      	ldr	r3, [pc, #168]	; (80039a4 <HAL_I2S_Init+0x27c>)
 80038fa:	e001      	b.n	8003900 <HAL_I2S_Init+0x1d8>
 80038fc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003900:	2202      	movs	r2, #2
 8003902:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a25      	ldr	r2, [pc, #148]	; (80039a0 <HAL_I2S_Init+0x278>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d101      	bne.n	8003912 <HAL_I2S_Init+0x1ea>
 800390e:	4b25      	ldr	r3, [pc, #148]	; (80039a4 <HAL_I2S_Init+0x27c>)
 8003910:	e001      	b.n	8003916 <HAL_I2S_Init+0x1ee>
 8003912:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003916:	69db      	ldr	r3, [r3, #28]
 8003918:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003922:	d003      	beq.n	800392c <HAL_I2S_Init+0x204>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d103      	bne.n	8003934 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 800392c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003930:	613b      	str	r3, [r7, #16]
 8003932:	e001      	b.n	8003938 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003934:	2300      	movs	r3, #0
 8003936:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003942:	4313      	orrs	r3, r2
 8003944:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	68db      	ldr	r3, [r3, #12]
 800394a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800394c:	4313      	orrs	r3, r2
 800394e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	699b      	ldr	r3, [r3, #24]
 8003954:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003956:	4313      	orrs	r3, r2
 8003958:	b29a      	uxth	r2, r3
 800395a:	897b      	ldrh	r3, [r7, #10]
 800395c:	4313      	orrs	r3, r2
 800395e:	b29b      	uxth	r3, r3
 8003960:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003964:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a0d      	ldr	r2, [pc, #52]	; (80039a0 <HAL_I2S_Init+0x278>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d101      	bne.n	8003974 <HAL_I2S_Init+0x24c>
 8003970:	4b0c      	ldr	r3, [pc, #48]	; (80039a4 <HAL_I2S_Init+0x27c>)
 8003972:	e001      	b.n	8003978 <HAL_I2S_Init+0x250>
 8003974:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003978:	897a      	ldrh	r2, [r7, #10]
 800397a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2200      	movs	r2, #0
 8003980:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2201      	movs	r2, #1
 8003986:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800398a:	2300      	movs	r3, #0
}
 800398c:	4618      	mov	r0, r3
 800398e:	3720      	adds	r7, #32
 8003990:	46bd      	mov	sp, r7
 8003992:	bd80      	pop	{r7, pc}
 8003994:	08003a9f 	.word	0x08003a9f
 8003998:	cccccccd 	.word	0xcccccccd
 800399c:	08003bb5 	.word	0x08003bb5
 80039a0:	40003800 	.word	0x40003800
 80039a4:	40003400 	.word	0x40003400

080039a8 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80039a8:	b480      	push	{r7}
 80039aa:	b083      	sub	sp, #12
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80039b0:	bf00      	nop
 80039b2:	370c      	adds	r7, #12
 80039b4:	46bd      	mov	sp, r7
 80039b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ba:	4770      	bx	lr

080039bc <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80039bc:	b480      	push	{r7}
 80039be:	b083      	sub	sp, #12
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80039c4:	bf00      	nop
 80039c6:	370c      	adds	r7, #12
 80039c8:	46bd      	mov	sp, r7
 80039ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ce:	4770      	bx	lr

080039d0 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80039d0:	b480      	push	{r7}
 80039d2:	b083      	sub	sp, #12
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80039d8:	bf00      	nop
 80039da:	370c      	adds	r7, #12
 80039dc:	46bd      	mov	sp, r7
 80039de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e2:	4770      	bx	lr

080039e4 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b082      	sub	sp, #8
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f0:	881a      	ldrh	r2, [r3, #0]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039fc:	1c9a      	adds	r2, r3, #2
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a06:	b29b      	uxth	r3, r3
 8003a08:	3b01      	subs	r3, #1
 8003a0a:	b29a      	uxth	r2, r3
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a14:	b29b      	uxth	r3, r3
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d10e      	bne.n	8003a38 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	685a      	ldr	r2, [r3, #4]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003a28:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2201      	movs	r2, #1
 8003a2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003a32:	6878      	ldr	r0, [r7, #4]
 8003a34:	f7ff ffb8 	bl	80039a8 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003a38:	bf00      	nop
 8003a3a:	3708      	adds	r7, #8
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd80      	pop	{r7, pc}

08003a40 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b082      	sub	sp, #8
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	68da      	ldr	r2, [r3, #12]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a52:	b292      	uxth	r2, r2
 8003a54:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a5a:	1c9a      	adds	r2, r3, #2
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003a64:	b29b      	uxth	r3, r3
 8003a66:	3b01      	subs	r3, #1
 8003a68:	b29a      	uxth	r2, r3
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003a72:	b29b      	uxth	r3, r3
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d10e      	bne.n	8003a96 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	685a      	ldr	r2, [r3, #4]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003a86:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003a90:	6878      	ldr	r0, [r7, #4]
 8003a92:	f7ff ff93 	bl	80039bc <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003a96:	bf00      	nop
 8003a98:	3708      	adds	r7, #8
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd80      	pop	{r7, pc}

08003a9e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003a9e:	b580      	push	{r7, lr}
 8003aa0:	b086      	sub	sp, #24
 8003aa2:	af00      	add	r7, sp, #0
 8003aa4:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ab4:	b2db      	uxtb	r3, r3
 8003ab6:	2b04      	cmp	r3, #4
 8003ab8:	d13a      	bne.n	8003b30 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	f003 0301 	and.w	r3, r3, #1
 8003ac0:	2b01      	cmp	r3, #1
 8003ac2:	d109      	bne.n	8003ad8 <I2S_IRQHandler+0x3a>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ace:	2b40      	cmp	r3, #64	; 0x40
 8003ad0:	d102      	bne.n	8003ad8 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003ad2:	6878      	ldr	r0, [r7, #4]
 8003ad4:	f7ff ffb4 	bl	8003a40 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ade:	2b40      	cmp	r3, #64	; 0x40
 8003ae0:	d126      	bne.n	8003b30 <I2S_IRQHandler+0x92>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	f003 0320 	and.w	r3, r3, #32
 8003aec:	2b20      	cmp	r3, #32
 8003aee:	d11f      	bne.n	8003b30 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	685a      	ldr	r2, [r3, #4]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003afe:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003b00:	2300      	movs	r3, #0
 8003b02:	613b      	str	r3, [r7, #16]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	68db      	ldr	r3, [r3, #12]
 8003b0a:	613b      	str	r3, [r7, #16]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	689b      	ldr	r3, [r3, #8]
 8003b12:	613b      	str	r3, [r7, #16]
 8003b14:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2201      	movs	r2, #1
 8003b1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b22:	f043 0202 	orr.w	r2, r3, #2
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003b2a:	6878      	ldr	r0, [r7, #4]
 8003b2c:	f7ff ff50 	bl	80039d0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b36:	b2db      	uxtb	r3, r3
 8003b38:	2b03      	cmp	r3, #3
 8003b3a:	d136      	bne.n	8003baa <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	f003 0302 	and.w	r3, r3, #2
 8003b42:	2b02      	cmp	r3, #2
 8003b44:	d109      	bne.n	8003b5a <I2S_IRQHandler+0xbc>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b50:	2b80      	cmp	r3, #128	; 0x80
 8003b52:	d102      	bne.n	8003b5a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003b54:	6878      	ldr	r0, [r7, #4]
 8003b56:	f7ff ff45 	bl	80039e4 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	f003 0308 	and.w	r3, r3, #8
 8003b60:	2b08      	cmp	r3, #8
 8003b62:	d122      	bne.n	8003baa <I2S_IRQHandler+0x10c>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	f003 0320 	and.w	r3, r3, #32
 8003b6e:	2b20      	cmp	r3, #32
 8003b70:	d11b      	bne.n	8003baa <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	685a      	ldr	r2, [r3, #4]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003b80:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003b82:	2300      	movs	r3, #0
 8003b84:	60fb      	str	r3, [r7, #12]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	689b      	ldr	r3, [r3, #8]
 8003b8c:	60fb      	str	r3, [r7, #12]
 8003b8e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2201      	movs	r2, #1
 8003b94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b9c:	f043 0204 	orr.w	r2, r3, #4
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003ba4:	6878      	ldr	r0, [r7, #4]
 8003ba6:	f7ff ff13 	bl	80039d0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003baa:	bf00      	nop
 8003bac:	3718      	adds	r7, #24
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}
	...

08003bb4 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b088      	sub	sp, #32
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a92      	ldr	r2, [pc, #584]	; (8003e14 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d101      	bne.n	8003bd2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003bce:	4b92      	ldr	r3, [pc, #584]	; (8003e18 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003bd0:	e001      	b.n	8003bd6 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003bd2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a8b      	ldr	r2, [pc, #556]	; (8003e14 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d101      	bne.n	8003bf0 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003bec:	4b8a      	ldr	r3, [pc, #552]	; (8003e18 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003bee:	e001      	b.n	8003bf4 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003bf0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c00:	d004      	beq.n	8003c0c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	f040 8099 	bne.w	8003d3e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003c0c:	69fb      	ldr	r3, [r7, #28]
 8003c0e:	f003 0302 	and.w	r3, r3, #2
 8003c12:	2b02      	cmp	r3, #2
 8003c14:	d107      	bne.n	8003c26 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d002      	beq.n	8003c26 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003c20:	6878      	ldr	r0, [r7, #4]
 8003c22:	f000 f925 	bl	8003e70 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003c26:	69bb      	ldr	r3, [r7, #24]
 8003c28:	f003 0301 	and.w	r3, r3, #1
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	d107      	bne.n	8003c40 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003c30:	693b      	ldr	r3, [r7, #16]
 8003c32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d002      	beq.n	8003c40 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	f000 f9c8 	bl	8003fd0 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003c40:	69bb      	ldr	r3, [r7, #24]
 8003c42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c46:	2b40      	cmp	r3, #64	; 0x40
 8003c48:	d13a      	bne.n	8003cc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	f003 0320 	and.w	r3, r3, #32
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d035      	beq.n	8003cc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a6e      	ldr	r2, [pc, #440]	; (8003e14 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d101      	bne.n	8003c62 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003c5e:	4b6e      	ldr	r3, [pc, #440]	; (8003e18 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003c60:	e001      	b.n	8003c66 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003c62:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c66:	685a      	ldr	r2, [r3, #4]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4969      	ldr	r1, [pc, #420]	; (8003e14 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003c6e:	428b      	cmp	r3, r1
 8003c70:	d101      	bne.n	8003c76 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003c72:	4b69      	ldr	r3, [pc, #420]	; (8003e18 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003c74:	e001      	b.n	8003c7a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003c76:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c7a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003c7e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	685a      	ldr	r2, [r3, #4]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003c8e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003c90:	2300      	movs	r3, #0
 8003c92:	60fb      	str	r3, [r7, #12]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	68db      	ldr	r3, [r3, #12]
 8003c9a:	60fb      	str	r3, [r7, #12]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	689b      	ldr	r3, [r3, #8]
 8003ca2:	60fb      	str	r3, [r7, #12]
 8003ca4:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2201      	movs	r2, #1
 8003caa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cb2:	f043 0202 	orr.w	r2, r3, #2
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003cba:	6878      	ldr	r0, [r7, #4]
 8003cbc:	f7ff fe88 	bl	80039d0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003cc0:	69fb      	ldr	r3, [r7, #28]
 8003cc2:	f003 0308 	and.w	r3, r3, #8
 8003cc6:	2b08      	cmp	r3, #8
 8003cc8:	f040 80c3 	bne.w	8003e52 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	f003 0320 	and.w	r3, r3, #32
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	f000 80bd 	beq.w	8003e52 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	685a      	ldr	r2, [r3, #4]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003ce6:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a49      	ldr	r2, [pc, #292]	; (8003e14 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d101      	bne.n	8003cf6 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003cf2:	4b49      	ldr	r3, [pc, #292]	; (8003e18 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003cf4:	e001      	b.n	8003cfa <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003cf6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003cfa:	685a      	ldr	r2, [r3, #4]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4944      	ldr	r1, [pc, #272]	; (8003e14 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003d02:	428b      	cmp	r3, r1
 8003d04:	d101      	bne.n	8003d0a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003d06:	4b44      	ldr	r3, [pc, #272]	; (8003e18 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003d08:	e001      	b.n	8003d0e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003d0a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d0e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003d12:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003d14:	2300      	movs	r3, #0
 8003d16:	60bb      	str	r3, [r7, #8]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	689b      	ldr	r3, [r3, #8]
 8003d1e:	60bb      	str	r3, [r7, #8]
 8003d20:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2201      	movs	r2, #1
 8003d26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d2e:	f043 0204 	orr.w	r2, r3, #4
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	f7ff fe4a 	bl	80039d0 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003d3c:	e089      	b.n	8003e52 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003d3e:	69bb      	ldr	r3, [r7, #24]
 8003d40:	f003 0302 	and.w	r3, r3, #2
 8003d44:	2b02      	cmp	r3, #2
 8003d46:	d107      	bne.n	8003d58 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003d48:	693b      	ldr	r3, [r7, #16]
 8003d4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d002      	beq.n	8003d58 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003d52:	6878      	ldr	r0, [r7, #4]
 8003d54:	f000 f8be 	bl	8003ed4 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003d58:	69fb      	ldr	r3, [r7, #28]
 8003d5a:	f003 0301 	and.w	r3, r3, #1
 8003d5e:	2b01      	cmp	r3, #1
 8003d60:	d107      	bne.n	8003d72 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d002      	beq.n	8003d72 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003d6c:	6878      	ldr	r0, [r7, #4]
 8003d6e:	f000 f8fd 	bl	8003f6c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003d72:	69fb      	ldr	r3, [r7, #28]
 8003d74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d78:	2b40      	cmp	r3, #64	; 0x40
 8003d7a:	d12f      	bne.n	8003ddc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	f003 0320 	and.w	r3, r3, #32
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d02a      	beq.n	8003ddc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	685a      	ldr	r2, [r3, #4]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003d94:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a1e      	ldr	r2, [pc, #120]	; (8003e14 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d101      	bne.n	8003da4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003da0:	4b1d      	ldr	r3, [pc, #116]	; (8003e18 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003da2:	e001      	b.n	8003da8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003da4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003da8:	685a      	ldr	r2, [r3, #4]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4919      	ldr	r1, [pc, #100]	; (8003e14 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003db0:	428b      	cmp	r3, r1
 8003db2:	d101      	bne.n	8003db8 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003db4:	4b18      	ldr	r3, [pc, #96]	; (8003e18 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003db6:	e001      	b.n	8003dbc <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003db8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003dbc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003dc0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2201      	movs	r2, #1
 8003dc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dce:	f043 0202 	orr.w	r2, r3, #2
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	f7ff fdfa 	bl	80039d0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003ddc:	69bb      	ldr	r3, [r7, #24]
 8003dde:	f003 0308 	and.w	r3, r3, #8
 8003de2:	2b08      	cmp	r3, #8
 8003de4:	d136      	bne.n	8003e54 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	f003 0320 	and.w	r3, r3, #32
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d031      	beq.n	8003e54 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a07      	ldr	r2, [pc, #28]	; (8003e14 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d101      	bne.n	8003dfe <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003dfa:	4b07      	ldr	r3, [pc, #28]	; (8003e18 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003dfc:	e001      	b.n	8003e02 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003dfe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e02:	685a      	ldr	r2, [r3, #4]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4902      	ldr	r1, [pc, #8]	; (8003e14 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003e0a:	428b      	cmp	r3, r1
 8003e0c:	d106      	bne.n	8003e1c <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8003e0e:	4b02      	ldr	r3, [pc, #8]	; (8003e18 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003e10:	e006      	b.n	8003e20 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8003e12:	bf00      	nop
 8003e14:	40003800 	.word	0x40003800
 8003e18:	40003400 	.word	0x40003400
 8003e1c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e20:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003e24:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	685a      	ldr	r2, [r3, #4]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003e34:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2201      	movs	r2, #1
 8003e3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e42:	f043 0204 	orr.w	r2, r3, #4
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	f7ff fdc0 	bl	80039d0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003e50:	e000      	b.n	8003e54 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003e52:	bf00      	nop
}
 8003e54:	bf00      	nop
 8003e56:	3720      	adds	r7, #32
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bd80      	pop	{r7, pc}

08003e5c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b083      	sub	sp, #12
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003e64:	bf00      	nop
 8003e66:	370c      	adds	r7, #12
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6e:	4770      	bx	lr

08003e70 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b082      	sub	sp, #8
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e7c:	1c99      	adds	r1, r3, #2
 8003e7e:	687a      	ldr	r2, [r7, #4]
 8003e80:	6251      	str	r1, [r2, #36]	; 0x24
 8003e82:	881a      	ldrh	r2, [r3, #0]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e8e:	b29b      	uxth	r3, r3
 8003e90:	3b01      	subs	r3, #1
 8003e92:	b29a      	uxth	r2, r3
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e9c:	b29b      	uxth	r3, r3
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d113      	bne.n	8003eca <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	685a      	ldr	r2, [r3, #4]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003eb0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003eb6:	b29b      	uxth	r3, r3
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d106      	bne.n	8003eca <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003ec4:	6878      	ldr	r0, [r7, #4]
 8003ec6:	f7ff ffc9 	bl	8003e5c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003eca:	bf00      	nop
 8003ecc:	3708      	adds	r7, #8
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bd80      	pop	{r7, pc}
	...

08003ed4 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b082      	sub	sp, #8
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee0:	1c99      	adds	r1, r3, #2
 8003ee2:	687a      	ldr	r2, [r7, #4]
 8003ee4:	6251      	str	r1, [r2, #36]	; 0x24
 8003ee6:	8819      	ldrh	r1, [r3, #0]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a1d      	ldr	r2, [pc, #116]	; (8003f64 <I2SEx_TxISR_I2SExt+0x90>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d101      	bne.n	8003ef6 <I2SEx_TxISR_I2SExt+0x22>
 8003ef2:	4b1d      	ldr	r3, [pc, #116]	; (8003f68 <I2SEx_TxISR_I2SExt+0x94>)
 8003ef4:	e001      	b.n	8003efa <I2SEx_TxISR_I2SExt+0x26>
 8003ef6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003efa:	460a      	mov	r2, r1
 8003efc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f02:	b29b      	uxth	r3, r3
 8003f04:	3b01      	subs	r3, #1
 8003f06:	b29a      	uxth	r2, r3
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f10:	b29b      	uxth	r3, r3
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d121      	bne.n	8003f5a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a12      	ldr	r2, [pc, #72]	; (8003f64 <I2SEx_TxISR_I2SExt+0x90>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d101      	bne.n	8003f24 <I2SEx_TxISR_I2SExt+0x50>
 8003f20:	4b11      	ldr	r3, [pc, #68]	; (8003f68 <I2SEx_TxISR_I2SExt+0x94>)
 8003f22:	e001      	b.n	8003f28 <I2SEx_TxISR_I2SExt+0x54>
 8003f24:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f28:	685a      	ldr	r2, [r3, #4]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	490d      	ldr	r1, [pc, #52]	; (8003f64 <I2SEx_TxISR_I2SExt+0x90>)
 8003f30:	428b      	cmp	r3, r1
 8003f32:	d101      	bne.n	8003f38 <I2SEx_TxISR_I2SExt+0x64>
 8003f34:	4b0c      	ldr	r3, [pc, #48]	; (8003f68 <I2SEx_TxISR_I2SExt+0x94>)
 8003f36:	e001      	b.n	8003f3c <I2SEx_TxISR_I2SExt+0x68>
 8003f38:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f3c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003f40:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003f46:	b29b      	uxth	r3, r3
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d106      	bne.n	8003f5a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2201      	movs	r2, #1
 8003f50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003f54:	6878      	ldr	r0, [r7, #4]
 8003f56:	f7ff ff81 	bl	8003e5c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003f5a:	bf00      	nop
 8003f5c:	3708      	adds	r7, #8
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}
 8003f62:	bf00      	nop
 8003f64:	40003800 	.word	0x40003800
 8003f68:	40003400 	.word	0x40003400

08003f6c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b082      	sub	sp, #8
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	68d8      	ldr	r0, [r3, #12]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f7e:	1c99      	adds	r1, r3, #2
 8003f80:	687a      	ldr	r2, [r7, #4]
 8003f82:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003f84:	b282      	uxth	r2, r0
 8003f86:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003f8c:	b29b      	uxth	r3, r3
 8003f8e:	3b01      	subs	r3, #1
 8003f90:	b29a      	uxth	r2, r3
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003f9a:	b29b      	uxth	r3, r3
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d113      	bne.n	8003fc8 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	685a      	ldr	r2, [r3, #4]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003fae:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fb4:	b29b      	uxth	r3, r3
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d106      	bne.n	8003fc8 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2201      	movs	r2, #1
 8003fbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003fc2:	6878      	ldr	r0, [r7, #4]
 8003fc4:	f7ff ff4a 	bl	8003e5c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003fc8:	bf00      	nop
 8003fca:	3708      	adds	r7, #8
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bd80      	pop	{r7, pc}

08003fd0 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b082      	sub	sp, #8
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a20      	ldr	r2, [pc, #128]	; (8004060 <I2SEx_RxISR_I2SExt+0x90>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d101      	bne.n	8003fe6 <I2SEx_RxISR_I2SExt+0x16>
 8003fe2:	4b20      	ldr	r3, [pc, #128]	; (8004064 <I2SEx_RxISR_I2SExt+0x94>)
 8003fe4:	e001      	b.n	8003fea <I2SEx_RxISR_I2SExt+0x1a>
 8003fe6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003fea:	68d8      	ldr	r0, [r3, #12]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ff0:	1c99      	adds	r1, r3, #2
 8003ff2:	687a      	ldr	r2, [r7, #4]
 8003ff4:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003ff6:	b282      	uxth	r2, r0
 8003ff8:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003ffe:	b29b      	uxth	r3, r3
 8004000:	3b01      	subs	r3, #1
 8004002:	b29a      	uxth	r2, r3
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800400c:	b29b      	uxth	r3, r3
 800400e:	2b00      	cmp	r3, #0
 8004010:	d121      	bne.n	8004056 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a12      	ldr	r2, [pc, #72]	; (8004060 <I2SEx_RxISR_I2SExt+0x90>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d101      	bne.n	8004020 <I2SEx_RxISR_I2SExt+0x50>
 800401c:	4b11      	ldr	r3, [pc, #68]	; (8004064 <I2SEx_RxISR_I2SExt+0x94>)
 800401e:	e001      	b.n	8004024 <I2SEx_RxISR_I2SExt+0x54>
 8004020:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004024:	685a      	ldr	r2, [r3, #4]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	490d      	ldr	r1, [pc, #52]	; (8004060 <I2SEx_RxISR_I2SExt+0x90>)
 800402c:	428b      	cmp	r3, r1
 800402e:	d101      	bne.n	8004034 <I2SEx_RxISR_I2SExt+0x64>
 8004030:	4b0c      	ldr	r3, [pc, #48]	; (8004064 <I2SEx_RxISR_I2SExt+0x94>)
 8004032:	e001      	b.n	8004038 <I2SEx_RxISR_I2SExt+0x68>
 8004034:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004038:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800403c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004042:	b29b      	uxth	r3, r3
 8004044:	2b00      	cmp	r3, #0
 8004046:	d106      	bne.n	8004056 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2201      	movs	r2, #1
 800404c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004050:	6878      	ldr	r0, [r7, #4]
 8004052:	f7ff ff03 	bl	8003e5c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004056:	bf00      	nop
 8004058:	3708      	adds	r7, #8
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}
 800405e:	bf00      	nop
 8004060:	40003800 	.word	0x40003800
 8004064:	40003400 	.word	0x40003400

08004068 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b086      	sub	sp, #24
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d101      	bne.n	800407a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004076:	2301      	movs	r3, #1
 8004078:	e267      	b.n	800454a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f003 0301 	and.w	r3, r3, #1
 8004082:	2b00      	cmp	r3, #0
 8004084:	d075      	beq.n	8004172 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004086:	4b88      	ldr	r3, [pc, #544]	; (80042a8 <HAL_RCC_OscConfig+0x240>)
 8004088:	689b      	ldr	r3, [r3, #8]
 800408a:	f003 030c 	and.w	r3, r3, #12
 800408e:	2b04      	cmp	r3, #4
 8004090:	d00c      	beq.n	80040ac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004092:	4b85      	ldr	r3, [pc, #532]	; (80042a8 <HAL_RCC_OscConfig+0x240>)
 8004094:	689b      	ldr	r3, [r3, #8]
 8004096:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800409a:	2b08      	cmp	r3, #8
 800409c:	d112      	bne.n	80040c4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800409e:	4b82      	ldr	r3, [pc, #520]	; (80042a8 <HAL_RCC_OscConfig+0x240>)
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80040aa:	d10b      	bne.n	80040c4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040ac:	4b7e      	ldr	r3, [pc, #504]	; (80042a8 <HAL_RCC_OscConfig+0x240>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d05b      	beq.n	8004170 <HAL_RCC_OscConfig+0x108>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d157      	bne.n	8004170 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80040c0:	2301      	movs	r3, #1
 80040c2:	e242      	b.n	800454a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040cc:	d106      	bne.n	80040dc <HAL_RCC_OscConfig+0x74>
 80040ce:	4b76      	ldr	r3, [pc, #472]	; (80042a8 <HAL_RCC_OscConfig+0x240>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a75      	ldr	r2, [pc, #468]	; (80042a8 <HAL_RCC_OscConfig+0x240>)
 80040d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040d8:	6013      	str	r3, [r2, #0]
 80040da:	e01d      	b.n	8004118 <HAL_RCC_OscConfig+0xb0>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80040e4:	d10c      	bne.n	8004100 <HAL_RCC_OscConfig+0x98>
 80040e6:	4b70      	ldr	r3, [pc, #448]	; (80042a8 <HAL_RCC_OscConfig+0x240>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a6f      	ldr	r2, [pc, #444]	; (80042a8 <HAL_RCC_OscConfig+0x240>)
 80040ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80040f0:	6013      	str	r3, [r2, #0]
 80040f2:	4b6d      	ldr	r3, [pc, #436]	; (80042a8 <HAL_RCC_OscConfig+0x240>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a6c      	ldr	r2, [pc, #432]	; (80042a8 <HAL_RCC_OscConfig+0x240>)
 80040f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040fc:	6013      	str	r3, [r2, #0]
 80040fe:	e00b      	b.n	8004118 <HAL_RCC_OscConfig+0xb0>
 8004100:	4b69      	ldr	r3, [pc, #420]	; (80042a8 <HAL_RCC_OscConfig+0x240>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a68      	ldr	r2, [pc, #416]	; (80042a8 <HAL_RCC_OscConfig+0x240>)
 8004106:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800410a:	6013      	str	r3, [r2, #0]
 800410c:	4b66      	ldr	r3, [pc, #408]	; (80042a8 <HAL_RCC_OscConfig+0x240>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a65      	ldr	r2, [pc, #404]	; (80042a8 <HAL_RCC_OscConfig+0x240>)
 8004112:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004116:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d013      	beq.n	8004148 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004120:	f7fc fed8 	bl	8000ed4 <HAL_GetTick>
 8004124:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004126:	e008      	b.n	800413a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004128:	f7fc fed4 	bl	8000ed4 <HAL_GetTick>
 800412c:	4602      	mov	r2, r0
 800412e:	693b      	ldr	r3, [r7, #16]
 8004130:	1ad3      	subs	r3, r2, r3
 8004132:	2b64      	cmp	r3, #100	; 0x64
 8004134:	d901      	bls.n	800413a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004136:	2303      	movs	r3, #3
 8004138:	e207      	b.n	800454a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800413a:	4b5b      	ldr	r3, [pc, #364]	; (80042a8 <HAL_RCC_OscConfig+0x240>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004142:	2b00      	cmp	r3, #0
 8004144:	d0f0      	beq.n	8004128 <HAL_RCC_OscConfig+0xc0>
 8004146:	e014      	b.n	8004172 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004148:	f7fc fec4 	bl	8000ed4 <HAL_GetTick>
 800414c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800414e:	e008      	b.n	8004162 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004150:	f7fc fec0 	bl	8000ed4 <HAL_GetTick>
 8004154:	4602      	mov	r2, r0
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	1ad3      	subs	r3, r2, r3
 800415a:	2b64      	cmp	r3, #100	; 0x64
 800415c:	d901      	bls.n	8004162 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800415e:	2303      	movs	r3, #3
 8004160:	e1f3      	b.n	800454a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004162:	4b51      	ldr	r3, [pc, #324]	; (80042a8 <HAL_RCC_OscConfig+0x240>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800416a:	2b00      	cmp	r3, #0
 800416c:	d1f0      	bne.n	8004150 <HAL_RCC_OscConfig+0xe8>
 800416e:	e000      	b.n	8004172 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004170:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f003 0302 	and.w	r3, r3, #2
 800417a:	2b00      	cmp	r3, #0
 800417c:	d063      	beq.n	8004246 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800417e:	4b4a      	ldr	r3, [pc, #296]	; (80042a8 <HAL_RCC_OscConfig+0x240>)
 8004180:	689b      	ldr	r3, [r3, #8]
 8004182:	f003 030c 	and.w	r3, r3, #12
 8004186:	2b00      	cmp	r3, #0
 8004188:	d00b      	beq.n	80041a2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800418a:	4b47      	ldr	r3, [pc, #284]	; (80042a8 <HAL_RCC_OscConfig+0x240>)
 800418c:	689b      	ldr	r3, [r3, #8]
 800418e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004192:	2b08      	cmp	r3, #8
 8004194:	d11c      	bne.n	80041d0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004196:	4b44      	ldr	r3, [pc, #272]	; (80042a8 <HAL_RCC_OscConfig+0x240>)
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d116      	bne.n	80041d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041a2:	4b41      	ldr	r3, [pc, #260]	; (80042a8 <HAL_RCC_OscConfig+0x240>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f003 0302 	and.w	r3, r3, #2
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d005      	beq.n	80041ba <HAL_RCC_OscConfig+0x152>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	68db      	ldr	r3, [r3, #12]
 80041b2:	2b01      	cmp	r3, #1
 80041b4:	d001      	beq.n	80041ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80041b6:	2301      	movs	r3, #1
 80041b8:	e1c7      	b.n	800454a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041ba:	4b3b      	ldr	r3, [pc, #236]	; (80042a8 <HAL_RCC_OscConfig+0x240>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	691b      	ldr	r3, [r3, #16]
 80041c6:	00db      	lsls	r3, r3, #3
 80041c8:	4937      	ldr	r1, [pc, #220]	; (80042a8 <HAL_RCC_OscConfig+0x240>)
 80041ca:	4313      	orrs	r3, r2
 80041cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041ce:	e03a      	b.n	8004246 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	68db      	ldr	r3, [r3, #12]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d020      	beq.n	800421a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80041d8:	4b34      	ldr	r3, [pc, #208]	; (80042ac <HAL_RCC_OscConfig+0x244>)
 80041da:	2201      	movs	r2, #1
 80041dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041de:	f7fc fe79 	bl	8000ed4 <HAL_GetTick>
 80041e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041e4:	e008      	b.n	80041f8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80041e6:	f7fc fe75 	bl	8000ed4 <HAL_GetTick>
 80041ea:	4602      	mov	r2, r0
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	1ad3      	subs	r3, r2, r3
 80041f0:	2b02      	cmp	r3, #2
 80041f2:	d901      	bls.n	80041f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80041f4:	2303      	movs	r3, #3
 80041f6:	e1a8      	b.n	800454a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041f8:	4b2b      	ldr	r3, [pc, #172]	; (80042a8 <HAL_RCC_OscConfig+0x240>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f003 0302 	and.w	r3, r3, #2
 8004200:	2b00      	cmp	r3, #0
 8004202:	d0f0      	beq.n	80041e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004204:	4b28      	ldr	r3, [pc, #160]	; (80042a8 <HAL_RCC_OscConfig+0x240>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	691b      	ldr	r3, [r3, #16]
 8004210:	00db      	lsls	r3, r3, #3
 8004212:	4925      	ldr	r1, [pc, #148]	; (80042a8 <HAL_RCC_OscConfig+0x240>)
 8004214:	4313      	orrs	r3, r2
 8004216:	600b      	str	r3, [r1, #0]
 8004218:	e015      	b.n	8004246 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800421a:	4b24      	ldr	r3, [pc, #144]	; (80042ac <HAL_RCC_OscConfig+0x244>)
 800421c:	2200      	movs	r2, #0
 800421e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004220:	f7fc fe58 	bl	8000ed4 <HAL_GetTick>
 8004224:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004226:	e008      	b.n	800423a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004228:	f7fc fe54 	bl	8000ed4 <HAL_GetTick>
 800422c:	4602      	mov	r2, r0
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	1ad3      	subs	r3, r2, r3
 8004232:	2b02      	cmp	r3, #2
 8004234:	d901      	bls.n	800423a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004236:	2303      	movs	r3, #3
 8004238:	e187      	b.n	800454a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800423a:	4b1b      	ldr	r3, [pc, #108]	; (80042a8 <HAL_RCC_OscConfig+0x240>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f003 0302 	and.w	r3, r3, #2
 8004242:	2b00      	cmp	r3, #0
 8004244:	d1f0      	bne.n	8004228 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f003 0308 	and.w	r3, r3, #8
 800424e:	2b00      	cmp	r3, #0
 8004250:	d036      	beq.n	80042c0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	695b      	ldr	r3, [r3, #20]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d016      	beq.n	8004288 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800425a:	4b15      	ldr	r3, [pc, #84]	; (80042b0 <HAL_RCC_OscConfig+0x248>)
 800425c:	2201      	movs	r2, #1
 800425e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004260:	f7fc fe38 	bl	8000ed4 <HAL_GetTick>
 8004264:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004266:	e008      	b.n	800427a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004268:	f7fc fe34 	bl	8000ed4 <HAL_GetTick>
 800426c:	4602      	mov	r2, r0
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	1ad3      	subs	r3, r2, r3
 8004272:	2b02      	cmp	r3, #2
 8004274:	d901      	bls.n	800427a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004276:	2303      	movs	r3, #3
 8004278:	e167      	b.n	800454a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800427a:	4b0b      	ldr	r3, [pc, #44]	; (80042a8 <HAL_RCC_OscConfig+0x240>)
 800427c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800427e:	f003 0302 	and.w	r3, r3, #2
 8004282:	2b00      	cmp	r3, #0
 8004284:	d0f0      	beq.n	8004268 <HAL_RCC_OscConfig+0x200>
 8004286:	e01b      	b.n	80042c0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004288:	4b09      	ldr	r3, [pc, #36]	; (80042b0 <HAL_RCC_OscConfig+0x248>)
 800428a:	2200      	movs	r2, #0
 800428c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800428e:	f7fc fe21 	bl	8000ed4 <HAL_GetTick>
 8004292:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004294:	e00e      	b.n	80042b4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004296:	f7fc fe1d 	bl	8000ed4 <HAL_GetTick>
 800429a:	4602      	mov	r2, r0
 800429c:	693b      	ldr	r3, [r7, #16]
 800429e:	1ad3      	subs	r3, r2, r3
 80042a0:	2b02      	cmp	r3, #2
 80042a2:	d907      	bls.n	80042b4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80042a4:	2303      	movs	r3, #3
 80042a6:	e150      	b.n	800454a <HAL_RCC_OscConfig+0x4e2>
 80042a8:	40023800 	.word	0x40023800
 80042ac:	42470000 	.word	0x42470000
 80042b0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042b4:	4b88      	ldr	r3, [pc, #544]	; (80044d8 <HAL_RCC_OscConfig+0x470>)
 80042b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042b8:	f003 0302 	and.w	r3, r3, #2
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d1ea      	bne.n	8004296 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f003 0304 	and.w	r3, r3, #4
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	f000 8097 	beq.w	80043fc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042ce:	2300      	movs	r3, #0
 80042d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042d2:	4b81      	ldr	r3, [pc, #516]	; (80044d8 <HAL_RCC_OscConfig+0x470>)
 80042d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d10f      	bne.n	80042fe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042de:	2300      	movs	r3, #0
 80042e0:	60bb      	str	r3, [r7, #8]
 80042e2:	4b7d      	ldr	r3, [pc, #500]	; (80044d8 <HAL_RCC_OscConfig+0x470>)
 80042e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e6:	4a7c      	ldr	r2, [pc, #496]	; (80044d8 <HAL_RCC_OscConfig+0x470>)
 80042e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042ec:	6413      	str	r3, [r2, #64]	; 0x40
 80042ee:	4b7a      	ldr	r3, [pc, #488]	; (80044d8 <HAL_RCC_OscConfig+0x470>)
 80042f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042f6:	60bb      	str	r3, [r7, #8]
 80042f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042fa:	2301      	movs	r3, #1
 80042fc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042fe:	4b77      	ldr	r3, [pc, #476]	; (80044dc <HAL_RCC_OscConfig+0x474>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004306:	2b00      	cmp	r3, #0
 8004308:	d118      	bne.n	800433c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800430a:	4b74      	ldr	r3, [pc, #464]	; (80044dc <HAL_RCC_OscConfig+0x474>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a73      	ldr	r2, [pc, #460]	; (80044dc <HAL_RCC_OscConfig+0x474>)
 8004310:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004314:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004316:	f7fc fddd 	bl	8000ed4 <HAL_GetTick>
 800431a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800431c:	e008      	b.n	8004330 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800431e:	f7fc fdd9 	bl	8000ed4 <HAL_GetTick>
 8004322:	4602      	mov	r2, r0
 8004324:	693b      	ldr	r3, [r7, #16]
 8004326:	1ad3      	subs	r3, r2, r3
 8004328:	2b02      	cmp	r3, #2
 800432a:	d901      	bls.n	8004330 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800432c:	2303      	movs	r3, #3
 800432e:	e10c      	b.n	800454a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004330:	4b6a      	ldr	r3, [pc, #424]	; (80044dc <HAL_RCC_OscConfig+0x474>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004338:	2b00      	cmp	r3, #0
 800433a:	d0f0      	beq.n	800431e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	689b      	ldr	r3, [r3, #8]
 8004340:	2b01      	cmp	r3, #1
 8004342:	d106      	bne.n	8004352 <HAL_RCC_OscConfig+0x2ea>
 8004344:	4b64      	ldr	r3, [pc, #400]	; (80044d8 <HAL_RCC_OscConfig+0x470>)
 8004346:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004348:	4a63      	ldr	r2, [pc, #396]	; (80044d8 <HAL_RCC_OscConfig+0x470>)
 800434a:	f043 0301 	orr.w	r3, r3, #1
 800434e:	6713      	str	r3, [r2, #112]	; 0x70
 8004350:	e01c      	b.n	800438c <HAL_RCC_OscConfig+0x324>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	689b      	ldr	r3, [r3, #8]
 8004356:	2b05      	cmp	r3, #5
 8004358:	d10c      	bne.n	8004374 <HAL_RCC_OscConfig+0x30c>
 800435a:	4b5f      	ldr	r3, [pc, #380]	; (80044d8 <HAL_RCC_OscConfig+0x470>)
 800435c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800435e:	4a5e      	ldr	r2, [pc, #376]	; (80044d8 <HAL_RCC_OscConfig+0x470>)
 8004360:	f043 0304 	orr.w	r3, r3, #4
 8004364:	6713      	str	r3, [r2, #112]	; 0x70
 8004366:	4b5c      	ldr	r3, [pc, #368]	; (80044d8 <HAL_RCC_OscConfig+0x470>)
 8004368:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800436a:	4a5b      	ldr	r2, [pc, #364]	; (80044d8 <HAL_RCC_OscConfig+0x470>)
 800436c:	f043 0301 	orr.w	r3, r3, #1
 8004370:	6713      	str	r3, [r2, #112]	; 0x70
 8004372:	e00b      	b.n	800438c <HAL_RCC_OscConfig+0x324>
 8004374:	4b58      	ldr	r3, [pc, #352]	; (80044d8 <HAL_RCC_OscConfig+0x470>)
 8004376:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004378:	4a57      	ldr	r2, [pc, #348]	; (80044d8 <HAL_RCC_OscConfig+0x470>)
 800437a:	f023 0301 	bic.w	r3, r3, #1
 800437e:	6713      	str	r3, [r2, #112]	; 0x70
 8004380:	4b55      	ldr	r3, [pc, #340]	; (80044d8 <HAL_RCC_OscConfig+0x470>)
 8004382:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004384:	4a54      	ldr	r2, [pc, #336]	; (80044d8 <HAL_RCC_OscConfig+0x470>)
 8004386:	f023 0304 	bic.w	r3, r3, #4
 800438a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	689b      	ldr	r3, [r3, #8]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d015      	beq.n	80043c0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004394:	f7fc fd9e 	bl	8000ed4 <HAL_GetTick>
 8004398:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800439a:	e00a      	b.n	80043b2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800439c:	f7fc fd9a 	bl	8000ed4 <HAL_GetTick>
 80043a0:	4602      	mov	r2, r0
 80043a2:	693b      	ldr	r3, [r7, #16]
 80043a4:	1ad3      	subs	r3, r2, r3
 80043a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d901      	bls.n	80043b2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80043ae:	2303      	movs	r3, #3
 80043b0:	e0cb      	b.n	800454a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043b2:	4b49      	ldr	r3, [pc, #292]	; (80044d8 <HAL_RCC_OscConfig+0x470>)
 80043b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043b6:	f003 0302 	and.w	r3, r3, #2
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d0ee      	beq.n	800439c <HAL_RCC_OscConfig+0x334>
 80043be:	e014      	b.n	80043ea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043c0:	f7fc fd88 	bl	8000ed4 <HAL_GetTick>
 80043c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043c6:	e00a      	b.n	80043de <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043c8:	f7fc fd84 	bl	8000ed4 <HAL_GetTick>
 80043cc:	4602      	mov	r2, r0
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	1ad3      	subs	r3, r2, r3
 80043d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d901      	bls.n	80043de <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80043da:	2303      	movs	r3, #3
 80043dc:	e0b5      	b.n	800454a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043de:	4b3e      	ldr	r3, [pc, #248]	; (80044d8 <HAL_RCC_OscConfig+0x470>)
 80043e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043e2:	f003 0302 	and.w	r3, r3, #2
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d1ee      	bne.n	80043c8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80043ea:	7dfb      	ldrb	r3, [r7, #23]
 80043ec:	2b01      	cmp	r3, #1
 80043ee:	d105      	bne.n	80043fc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043f0:	4b39      	ldr	r3, [pc, #228]	; (80044d8 <HAL_RCC_OscConfig+0x470>)
 80043f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f4:	4a38      	ldr	r2, [pc, #224]	; (80044d8 <HAL_RCC_OscConfig+0x470>)
 80043f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043fa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	699b      	ldr	r3, [r3, #24]
 8004400:	2b00      	cmp	r3, #0
 8004402:	f000 80a1 	beq.w	8004548 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004406:	4b34      	ldr	r3, [pc, #208]	; (80044d8 <HAL_RCC_OscConfig+0x470>)
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	f003 030c 	and.w	r3, r3, #12
 800440e:	2b08      	cmp	r3, #8
 8004410:	d05c      	beq.n	80044cc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	699b      	ldr	r3, [r3, #24]
 8004416:	2b02      	cmp	r3, #2
 8004418:	d141      	bne.n	800449e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800441a:	4b31      	ldr	r3, [pc, #196]	; (80044e0 <HAL_RCC_OscConfig+0x478>)
 800441c:	2200      	movs	r2, #0
 800441e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004420:	f7fc fd58 	bl	8000ed4 <HAL_GetTick>
 8004424:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004426:	e008      	b.n	800443a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004428:	f7fc fd54 	bl	8000ed4 <HAL_GetTick>
 800442c:	4602      	mov	r2, r0
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	1ad3      	subs	r3, r2, r3
 8004432:	2b02      	cmp	r3, #2
 8004434:	d901      	bls.n	800443a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004436:	2303      	movs	r3, #3
 8004438:	e087      	b.n	800454a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800443a:	4b27      	ldr	r3, [pc, #156]	; (80044d8 <HAL_RCC_OscConfig+0x470>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004442:	2b00      	cmp	r3, #0
 8004444:	d1f0      	bne.n	8004428 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	69da      	ldr	r2, [r3, #28]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6a1b      	ldr	r3, [r3, #32]
 800444e:	431a      	orrs	r2, r3
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004454:	019b      	lsls	r3, r3, #6
 8004456:	431a      	orrs	r2, r3
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800445c:	085b      	lsrs	r3, r3, #1
 800445e:	3b01      	subs	r3, #1
 8004460:	041b      	lsls	r3, r3, #16
 8004462:	431a      	orrs	r2, r3
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004468:	061b      	lsls	r3, r3, #24
 800446a:	491b      	ldr	r1, [pc, #108]	; (80044d8 <HAL_RCC_OscConfig+0x470>)
 800446c:	4313      	orrs	r3, r2
 800446e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004470:	4b1b      	ldr	r3, [pc, #108]	; (80044e0 <HAL_RCC_OscConfig+0x478>)
 8004472:	2201      	movs	r2, #1
 8004474:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004476:	f7fc fd2d 	bl	8000ed4 <HAL_GetTick>
 800447a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800447c:	e008      	b.n	8004490 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800447e:	f7fc fd29 	bl	8000ed4 <HAL_GetTick>
 8004482:	4602      	mov	r2, r0
 8004484:	693b      	ldr	r3, [r7, #16]
 8004486:	1ad3      	subs	r3, r2, r3
 8004488:	2b02      	cmp	r3, #2
 800448a:	d901      	bls.n	8004490 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800448c:	2303      	movs	r3, #3
 800448e:	e05c      	b.n	800454a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004490:	4b11      	ldr	r3, [pc, #68]	; (80044d8 <HAL_RCC_OscConfig+0x470>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004498:	2b00      	cmp	r3, #0
 800449a:	d0f0      	beq.n	800447e <HAL_RCC_OscConfig+0x416>
 800449c:	e054      	b.n	8004548 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800449e:	4b10      	ldr	r3, [pc, #64]	; (80044e0 <HAL_RCC_OscConfig+0x478>)
 80044a0:	2200      	movs	r2, #0
 80044a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044a4:	f7fc fd16 	bl	8000ed4 <HAL_GetTick>
 80044a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044aa:	e008      	b.n	80044be <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044ac:	f7fc fd12 	bl	8000ed4 <HAL_GetTick>
 80044b0:	4602      	mov	r2, r0
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	1ad3      	subs	r3, r2, r3
 80044b6:	2b02      	cmp	r3, #2
 80044b8:	d901      	bls.n	80044be <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80044ba:	2303      	movs	r3, #3
 80044bc:	e045      	b.n	800454a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044be:	4b06      	ldr	r3, [pc, #24]	; (80044d8 <HAL_RCC_OscConfig+0x470>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d1f0      	bne.n	80044ac <HAL_RCC_OscConfig+0x444>
 80044ca:	e03d      	b.n	8004548 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	699b      	ldr	r3, [r3, #24]
 80044d0:	2b01      	cmp	r3, #1
 80044d2:	d107      	bne.n	80044e4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80044d4:	2301      	movs	r3, #1
 80044d6:	e038      	b.n	800454a <HAL_RCC_OscConfig+0x4e2>
 80044d8:	40023800 	.word	0x40023800
 80044dc:	40007000 	.word	0x40007000
 80044e0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80044e4:	4b1b      	ldr	r3, [pc, #108]	; (8004554 <HAL_RCC_OscConfig+0x4ec>)
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	699b      	ldr	r3, [r3, #24]
 80044ee:	2b01      	cmp	r3, #1
 80044f0:	d028      	beq.n	8004544 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044fc:	429a      	cmp	r2, r3
 80044fe:	d121      	bne.n	8004544 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800450a:	429a      	cmp	r2, r3
 800450c:	d11a      	bne.n	8004544 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800450e:	68fa      	ldr	r2, [r7, #12]
 8004510:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004514:	4013      	ands	r3, r2
 8004516:	687a      	ldr	r2, [r7, #4]
 8004518:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800451a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800451c:	4293      	cmp	r3, r2
 800451e:	d111      	bne.n	8004544 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800452a:	085b      	lsrs	r3, r3, #1
 800452c:	3b01      	subs	r3, #1
 800452e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004530:	429a      	cmp	r2, r3
 8004532:	d107      	bne.n	8004544 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800453e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004540:	429a      	cmp	r2, r3
 8004542:	d001      	beq.n	8004548 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004544:	2301      	movs	r3, #1
 8004546:	e000      	b.n	800454a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004548:	2300      	movs	r3, #0
}
 800454a:	4618      	mov	r0, r3
 800454c:	3718      	adds	r7, #24
 800454e:	46bd      	mov	sp, r7
 8004550:	bd80      	pop	{r7, pc}
 8004552:	bf00      	nop
 8004554:	40023800 	.word	0x40023800

08004558 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b084      	sub	sp, #16
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
 8004560:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d101      	bne.n	800456c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004568:	2301      	movs	r3, #1
 800456a:	e0cc      	b.n	8004706 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800456c:	4b68      	ldr	r3, [pc, #416]	; (8004710 <HAL_RCC_ClockConfig+0x1b8>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f003 0307 	and.w	r3, r3, #7
 8004574:	683a      	ldr	r2, [r7, #0]
 8004576:	429a      	cmp	r2, r3
 8004578:	d90c      	bls.n	8004594 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800457a:	4b65      	ldr	r3, [pc, #404]	; (8004710 <HAL_RCC_ClockConfig+0x1b8>)
 800457c:	683a      	ldr	r2, [r7, #0]
 800457e:	b2d2      	uxtb	r2, r2
 8004580:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004582:	4b63      	ldr	r3, [pc, #396]	; (8004710 <HAL_RCC_ClockConfig+0x1b8>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f003 0307 	and.w	r3, r3, #7
 800458a:	683a      	ldr	r2, [r7, #0]
 800458c:	429a      	cmp	r2, r3
 800458e:	d001      	beq.n	8004594 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004590:	2301      	movs	r3, #1
 8004592:	e0b8      	b.n	8004706 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f003 0302 	and.w	r3, r3, #2
 800459c:	2b00      	cmp	r3, #0
 800459e:	d020      	beq.n	80045e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f003 0304 	and.w	r3, r3, #4
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d005      	beq.n	80045b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80045ac:	4b59      	ldr	r3, [pc, #356]	; (8004714 <HAL_RCC_ClockConfig+0x1bc>)
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	4a58      	ldr	r2, [pc, #352]	; (8004714 <HAL_RCC_ClockConfig+0x1bc>)
 80045b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80045b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f003 0308 	and.w	r3, r3, #8
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d005      	beq.n	80045d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80045c4:	4b53      	ldr	r3, [pc, #332]	; (8004714 <HAL_RCC_ClockConfig+0x1bc>)
 80045c6:	689b      	ldr	r3, [r3, #8]
 80045c8:	4a52      	ldr	r2, [pc, #328]	; (8004714 <HAL_RCC_ClockConfig+0x1bc>)
 80045ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80045ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045d0:	4b50      	ldr	r3, [pc, #320]	; (8004714 <HAL_RCC_ClockConfig+0x1bc>)
 80045d2:	689b      	ldr	r3, [r3, #8]
 80045d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	494d      	ldr	r1, [pc, #308]	; (8004714 <HAL_RCC_ClockConfig+0x1bc>)
 80045de:	4313      	orrs	r3, r2
 80045e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f003 0301 	and.w	r3, r3, #1
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d044      	beq.n	8004678 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	2b01      	cmp	r3, #1
 80045f4:	d107      	bne.n	8004606 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045f6:	4b47      	ldr	r3, [pc, #284]	; (8004714 <HAL_RCC_ClockConfig+0x1bc>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d119      	bne.n	8004636 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004602:	2301      	movs	r3, #1
 8004604:	e07f      	b.n	8004706 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	2b02      	cmp	r3, #2
 800460c:	d003      	beq.n	8004616 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004612:	2b03      	cmp	r3, #3
 8004614:	d107      	bne.n	8004626 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004616:	4b3f      	ldr	r3, [pc, #252]	; (8004714 <HAL_RCC_ClockConfig+0x1bc>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800461e:	2b00      	cmp	r3, #0
 8004620:	d109      	bne.n	8004636 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004622:	2301      	movs	r3, #1
 8004624:	e06f      	b.n	8004706 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004626:	4b3b      	ldr	r3, [pc, #236]	; (8004714 <HAL_RCC_ClockConfig+0x1bc>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f003 0302 	and.w	r3, r3, #2
 800462e:	2b00      	cmp	r3, #0
 8004630:	d101      	bne.n	8004636 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004632:	2301      	movs	r3, #1
 8004634:	e067      	b.n	8004706 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004636:	4b37      	ldr	r3, [pc, #220]	; (8004714 <HAL_RCC_ClockConfig+0x1bc>)
 8004638:	689b      	ldr	r3, [r3, #8]
 800463a:	f023 0203 	bic.w	r2, r3, #3
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	4934      	ldr	r1, [pc, #208]	; (8004714 <HAL_RCC_ClockConfig+0x1bc>)
 8004644:	4313      	orrs	r3, r2
 8004646:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004648:	f7fc fc44 	bl	8000ed4 <HAL_GetTick>
 800464c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800464e:	e00a      	b.n	8004666 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004650:	f7fc fc40 	bl	8000ed4 <HAL_GetTick>
 8004654:	4602      	mov	r2, r0
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	1ad3      	subs	r3, r2, r3
 800465a:	f241 3288 	movw	r2, #5000	; 0x1388
 800465e:	4293      	cmp	r3, r2
 8004660:	d901      	bls.n	8004666 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004662:	2303      	movs	r3, #3
 8004664:	e04f      	b.n	8004706 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004666:	4b2b      	ldr	r3, [pc, #172]	; (8004714 <HAL_RCC_ClockConfig+0x1bc>)
 8004668:	689b      	ldr	r3, [r3, #8]
 800466a:	f003 020c 	and.w	r2, r3, #12
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	009b      	lsls	r3, r3, #2
 8004674:	429a      	cmp	r2, r3
 8004676:	d1eb      	bne.n	8004650 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004678:	4b25      	ldr	r3, [pc, #148]	; (8004710 <HAL_RCC_ClockConfig+0x1b8>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f003 0307 	and.w	r3, r3, #7
 8004680:	683a      	ldr	r2, [r7, #0]
 8004682:	429a      	cmp	r2, r3
 8004684:	d20c      	bcs.n	80046a0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004686:	4b22      	ldr	r3, [pc, #136]	; (8004710 <HAL_RCC_ClockConfig+0x1b8>)
 8004688:	683a      	ldr	r2, [r7, #0]
 800468a:	b2d2      	uxtb	r2, r2
 800468c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800468e:	4b20      	ldr	r3, [pc, #128]	; (8004710 <HAL_RCC_ClockConfig+0x1b8>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f003 0307 	and.w	r3, r3, #7
 8004696:	683a      	ldr	r2, [r7, #0]
 8004698:	429a      	cmp	r2, r3
 800469a:	d001      	beq.n	80046a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800469c:	2301      	movs	r3, #1
 800469e:	e032      	b.n	8004706 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f003 0304 	and.w	r3, r3, #4
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d008      	beq.n	80046be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80046ac:	4b19      	ldr	r3, [pc, #100]	; (8004714 <HAL_RCC_ClockConfig+0x1bc>)
 80046ae:	689b      	ldr	r3, [r3, #8]
 80046b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	68db      	ldr	r3, [r3, #12]
 80046b8:	4916      	ldr	r1, [pc, #88]	; (8004714 <HAL_RCC_ClockConfig+0x1bc>)
 80046ba:	4313      	orrs	r3, r2
 80046bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f003 0308 	and.w	r3, r3, #8
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d009      	beq.n	80046de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80046ca:	4b12      	ldr	r3, [pc, #72]	; (8004714 <HAL_RCC_ClockConfig+0x1bc>)
 80046cc:	689b      	ldr	r3, [r3, #8]
 80046ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	691b      	ldr	r3, [r3, #16]
 80046d6:	00db      	lsls	r3, r3, #3
 80046d8:	490e      	ldr	r1, [pc, #56]	; (8004714 <HAL_RCC_ClockConfig+0x1bc>)
 80046da:	4313      	orrs	r3, r2
 80046dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80046de:	f000 f821 	bl	8004724 <HAL_RCC_GetSysClockFreq>
 80046e2:	4602      	mov	r2, r0
 80046e4:	4b0b      	ldr	r3, [pc, #44]	; (8004714 <HAL_RCC_ClockConfig+0x1bc>)
 80046e6:	689b      	ldr	r3, [r3, #8]
 80046e8:	091b      	lsrs	r3, r3, #4
 80046ea:	f003 030f 	and.w	r3, r3, #15
 80046ee:	490a      	ldr	r1, [pc, #40]	; (8004718 <HAL_RCC_ClockConfig+0x1c0>)
 80046f0:	5ccb      	ldrb	r3, [r1, r3]
 80046f2:	fa22 f303 	lsr.w	r3, r2, r3
 80046f6:	4a09      	ldr	r2, [pc, #36]	; (800471c <HAL_RCC_ClockConfig+0x1c4>)
 80046f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80046fa:	4b09      	ldr	r3, [pc, #36]	; (8004720 <HAL_RCC_ClockConfig+0x1c8>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4618      	mov	r0, r3
 8004700:	f7fc fba4 	bl	8000e4c <HAL_InitTick>

  return HAL_OK;
 8004704:	2300      	movs	r3, #0
}
 8004706:	4618      	mov	r0, r3
 8004708:	3710      	adds	r7, #16
 800470a:	46bd      	mov	sp, r7
 800470c:	bd80      	pop	{r7, pc}
 800470e:	bf00      	nop
 8004710:	40023c00 	.word	0x40023c00
 8004714:	40023800 	.word	0x40023800
 8004718:	08007548 	.word	0x08007548
 800471c:	20000000 	.word	0x20000000
 8004720:	20000004 	.word	0x20000004

08004724 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004724:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004728:	b094      	sub	sp, #80	; 0x50
 800472a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800472c:	2300      	movs	r3, #0
 800472e:	647b      	str	r3, [r7, #68]	; 0x44
 8004730:	2300      	movs	r3, #0
 8004732:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004734:	2300      	movs	r3, #0
 8004736:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004738:	2300      	movs	r3, #0
 800473a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800473c:	4b79      	ldr	r3, [pc, #484]	; (8004924 <HAL_RCC_GetSysClockFreq+0x200>)
 800473e:	689b      	ldr	r3, [r3, #8]
 8004740:	f003 030c 	and.w	r3, r3, #12
 8004744:	2b08      	cmp	r3, #8
 8004746:	d00d      	beq.n	8004764 <HAL_RCC_GetSysClockFreq+0x40>
 8004748:	2b08      	cmp	r3, #8
 800474a:	f200 80e1 	bhi.w	8004910 <HAL_RCC_GetSysClockFreq+0x1ec>
 800474e:	2b00      	cmp	r3, #0
 8004750:	d002      	beq.n	8004758 <HAL_RCC_GetSysClockFreq+0x34>
 8004752:	2b04      	cmp	r3, #4
 8004754:	d003      	beq.n	800475e <HAL_RCC_GetSysClockFreq+0x3a>
 8004756:	e0db      	b.n	8004910 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004758:	4b73      	ldr	r3, [pc, #460]	; (8004928 <HAL_RCC_GetSysClockFreq+0x204>)
 800475a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800475c:	e0db      	b.n	8004916 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800475e:	4b73      	ldr	r3, [pc, #460]	; (800492c <HAL_RCC_GetSysClockFreq+0x208>)
 8004760:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004762:	e0d8      	b.n	8004916 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004764:	4b6f      	ldr	r3, [pc, #444]	; (8004924 <HAL_RCC_GetSysClockFreq+0x200>)
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800476c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800476e:	4b6d      	ldr	r3, [pc, #436]	; (8004924 <HAL_RCC_GetSysClockFreq+0x200>)
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004776:	2b00      	cmp	r3, #0
 8004778:	d063      	beq.n	8004842 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800477a:	4b6a      	ldr	r3, [pc, #424]	; (8004924 <HAL_RCC_GetSysClockFreq+0x200>)
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	099b      	lsrs	r3, r3, #6
 8004780:	2200      	movs	r2, #0
 8004782:	63bb      	str	r3, [r7, #56]	; 0x38
 8004784:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004788:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800478c:	633b      	str	r3, [r7, #48]	; 0x30
 800478e:	2300      	movs	r3, #0
 8004790:	637b      	str	r3, [r7, #52]	; 0x34
 8004792:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004796:	4622      	mov	r2, r4
 8004798:	462b      	mov	r3, r5
 800479a:	f04f 0000 	mov.w	r0, #0
 800479e:	f04f 0100 	mov.w	r1, #0
 80047a2:	0159      	lsls	r1, r3, #5
 80047a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80047a8:	0150      	lsls	r0, r2, #5
 80047aa:	4602      	mov	r2, r0
 80047ac:	460b      	mov	r3, r1
 80047ae:	4621      	mov	r1, r4
 80047b0:	1a51      	subs	r1, r2, r1
 80047b2:	6139      	str	r1, [r7, #16]
 80047b4:	4629      	mov	r1, r5
 80047b6:	eb63 0301 	sbc.w	r3, r3, r1
 80047ba:	617b      	str	r3, [r7, #20]
 80047bc:	f04f 0200 	mov.w	r2, #0
 80047c0:	f04f 0300 	mov.w	r3, #0
 80047c4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80047c8:	4659      	mov	r1, fp
 80047ca:	018b      	lsls	r3, r1, #6
 80047cc:	4651      	mov	r1, sl
 80047ce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80047d2:	4651      	mov	r1, sl
 80047d4:	018a      	lsls	r2, r1, #6
 80047d6:	4651      	mov	r1, sl
 80047d8:	ebb2 0801 	subs.w	r8, r2, r1
 80047dc:	4659      	mov	r1, fp
 80047de:	eb63 0901 	sbc.w	r9, r3, r1
 80047e2:	f04f 0200 	mov.w	r2, #0
 80047e6:	f04f 0300 	mov.w	r3, #0
 80047ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80047ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80047f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80047f6:	4690      	mov	r8, r2
 80047f8:	4699      	mov	r9, r3
 80047fa:	4623      	mov	r3, r4
 80047fc:	eb18 0303 	adds.w	r3, r8, r3
 8004800:	60bb      	str	r3, [r7, #8]
 8004802:	462b      	mov	r3, r5
 8004804:	eb49 0303 	adc.w	r3, r9, r3
 8004808:	60fb      	str	r3, [r7, #12]
 800480a:	f04f 0200 	mov.w	r2, #0
 800480e:	f04f 0300 	mov.w	r3, #0
 8004812:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004816:	4629      	mov	r1, r5
 8004818:	024b      	lsls	r3, r1, #9
 800481a:	4621      	mov	r1, r4
 800481c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004820:	4621      	mov	r1, r4
 8004822:	024a      	lsls	r2, r1, #9
 8004824:	4610      	mov	r0, r2
 8004826:	4619      	mov	r1, r3
 8004828:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800482a:	2200      	movs	r2, #0
 800482c:	62bb      	str	r3, [r7, #40]	; 0x28
 800482e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004830:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004834:	f7fb fcc8 	bl	80001c8 <__aeabi_uldivmod>
 8004838:	4602      	mov	r2, r0
 800483a:	460b      	mov	r3, r1
 800483c:	4613      	mov	r3, r2
 800483e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004840:	e058      	b.n	80048f4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004842:	4b38      	ldr	r3, [pc, #224]	; (8004924 <HAL_RCC_GetSysClockFreq+0x200>)
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	099b      	lsrs	r3, r3, #6
 8004848:	2200      	movs	r2, #0
 800484a:	4618      	mov	r0, r3
 800484c:	4611      	mov	r1, r2
 800484e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004852:	623b      	str	r3, [r7, #32]
 8004854:	2300      	movs	r3, #0
 8004856:	627b      	str	r3, [r7, #36]	; 0x24
 8004858:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800485c:	4642      	mov	r2, r8
 800485e:	464b      	mov	r3, r9
 8004860:	f04f 0000 	mov.w	r0, #0
 8004864:	f04f 0100 	mov.w	r1, #0
 8004868:	0159      	lsls	r1, r3, #5
 800486a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800486e:	0150      	lsls	r0, r2, #5
 8004870:	4602      	mov	r2, r0
 8004872:	460b      	mov	r3, r1
 8004874:	4641      	mov	r1, r8
 8004876:	ebb2 0a01 	subs.w	sl, r2, r1
 800487a:	4649      	mov	r1, r9
 800487c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004880:	f04f 0200 	mov.w	r2, #0
 8004884:	f04f 0300 	mov.w	r3, #0
 8004888:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800488c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004890:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004894:	ebb2 040a 	subs.w	r4, r2, sl
 8004898:	eb63 050b 	sbc.w	r5, r3, fp
 800489c:	f04f 0200 	mov.w	r2, #0
 80048a0:	f04f 0300 	mov.w	r3, #0
 80048a4:	00eb      	lsls	r3, r5, #3
 80048a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80048aa:	00e2      	lsls	r2, r4, #3
 80048ac:	4614      	mov	r4, r2
 80048ae:	461d      	mov	r5, r3
 80048b0:	4643      	mov	r3, r8
 80048b2:	18e3      	adds	r3, r4, r3
 80048b4:	603b      	str	r3, [r7, #0]
 80048b6:	464b      	mov	r3, r9
 80048b8:	eb45 0303 	adc.w	r3, r5, r3
 80048bc:	607b      	str	r3, [r7, #4]
 80048be:	f04f 0200 	mov.w	r2, #0
 80048c2:	f04f 0300 	mov.w	r3, #0
 80048c6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80048ca:	4629      	mov	r1, r5
 80048cc:	028b      	lsls	r3, r1, #10
 80048ce:	4621      	mov	r1, r4
 80048d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80048d4:	4621      	mov	r1, r4
 80048d6:	028a      	lsls	r2, r1, #10
 80048d8:	4610      	mov	r0, r2
 80048da:	4619      	mov	r1, r3
 80048dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048de:	2200      	movs	r2, #0
 80048e0:	61bb      	str	r3, [r7, #24]
 80048e2:	61fa      	str	r2, [r7, #28]
 80048e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80048e8:	f7fb fc6e 	bl	80001c8 <__aeabi_uldivmod>
 80048ec:	4602      	mov	r2, r0
 80048ee:	460b      	mov	r3, r1
 80048f0:	4613      	mov	r3, r2
 80048f2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80048f4:	4b0b      	ldr	r3, [pc, #44]	; (8004924 <HAL_RCC_GetSysClockFreq+0x200>)
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	0c1b      	lsrs	r3, r3, #16
 80048fa:	f003 0303 	and.w	r3, r3, #3
 80048fe:	3301      	adds	r3, #1
 8004900:	005b      	lsls	r3, r3, #1
 8004902:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004904:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004906:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004908:	fbb2 f3f3 	udiv	r3, r2, r3
 800490c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800490e:	e002      	b.n	8004916 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004910:	4b05      	ldr	r3, [pc, #20]	; (8004928 <HAL_RCC_GetSysClockFreq+0x204>)
 8004912:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004914:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004916:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004918:	4618      	mov	r0, r3
 800491a:	3750      	adds	r7, #80	; 0x50
 800491c:	46bd      	mov	sp, r7
 800491e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004922:	bf00      	nop
 8004924:	40023800 	.word	0x40023800
 8004928:	00f42400 	.word	0x00f42400
 800492c:	007a1200 	.word	0x007a1200

08004930 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004930:	b480      	push	{r7}
 8004932:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004934:	4b03      	ldr	r3, [pc, #12]	; (8004944 <HAL_RCC_GetHCLKFreq+0x14>)
 8004936:	681b      	ldr	r3, [r3, #0]
}
 8004938:	4618      	mov	r0, r3
 800493a:	46bd      	mov	sp, r7
 800493c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004940:	4770      	bx	lr
 8004942:	bf00      	nop
 8004944:	20000000 	.word	0x20000000

08004948 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800494c:	f7ff fff0 	bl	8004930 <HAL_RCC_GetHCLKFreq>
 8004950:	4602      	mov	r2, r0
 8004952:	4b05      	ldr	r3, [pc, #20]	; (8004968 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004954:	689b      	ldr	r3, [r3, #8]
 8004956:	0a9b      	lsrs	r3, r3, #10
 8004958:	f003 0307 	and.w	r3, r3, #7
 800495c:	4903      	ldr	r1, [pc, #12]	; (800496c <HAL_RCC_GetPCLK1Freq+0x24>)
 800495e:	5ccb      	ldrb	r3, [r1, r3]
 8004960:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004964:	4618      	mov	r0, r3
 8004966:	bd80      	pop	{r7, pc}
 8004968:	40023800 	.word	0x40023800
 800496c:	08007558 	.word	0x08007558

08004970 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b086      	sub	sp, #24
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004978:	2300      	movs	r3, #0
 800497a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800497c:	2300      	movs	r3, #0
 800497e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f003 0301 	and.w	r3, r3, #1
 8004988:	2b00      	cmp	r3, #0
 800498a:	d105      	bne.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004994:	2b00      	cmp	r3, #0
 8004996:	d035      	beq.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004998:	4b62      	ldr	r3, [pc, #392]	; (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800499a:	2200      	movs	r2, #0
 800499c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800499e:	f7fc fa99 	bl	8000ed4 <HAL_GetTick>
 80049a2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80049a4:	e008      	b.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80049a6:	f7fc fa95 	bl	8000ed4 <HAL_GetTick>
 80049aa:	4602      	mov	r2, r0
 80049ac:	697b      	ldr	r3, [r7, #20]
 80049ae:	1ad3      	subs	r3, r2, r3
 80049b0:	2b02      	cmp	r3, #2
 80049b2:	d901      	bls.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80049b4:	2303      	movs	r3, #3
 80049b6:	e0b0      	b.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80049b8:	4b5b      	ldr	r3, [pc, #364]	; (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d1f0      	bne.n	80049a6 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	019a      	lsls	r2, r3, #6
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	689b      	ldr	r3, [r3, #8]
 80049ce:	071b      	lsls	r3, r3, #28
 80049d0:	4955      	ldr	r1, [pc, #340]	; (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80049d2:	4313      	orrs	r3, r2
 80049d4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80049d8:	4b52      	ldr	r3, [pc, #328]	; (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80049da:	2201      	movs	r2, #1
 80049dc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80049de:	f7fc fa79 	bl	8000ed4 <HAL_GetTick>
 80049e2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80049e4:	e008      	b.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80049e6:	f7fc fa75 	bl	8000ed4 <HAL_GetTick>
 80049ea:	4602      	mov	r2, r0
 80049ec:	697b      	ldr	r3, [r7, #20]
 80049ee:	1ad3      	subs	r3, r2, r3
 80049f0:	2b02      	cmp	r3, #2
 80049f2:	d901      	bls.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80049f4:	2303      	movs	r3, #3
 80049f6:	e090      	b.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80049f8:	4b4b      	ldr	r3, [pc, #300]	; (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d0f0      	beq.n	80049e6 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f003 0302 	and.w	r3, r3, #2
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	f000 8083 	beq.w	8004b18 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004a12:	2300      	movs	r3, #0
 8004a14:	60fb      	str	r3, [r7, #12]
 8004a16:	4b44      	ldr	r3, [pc, #272]	; (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a1a:	4a43      	ldr	r2, [pc, #268]	; (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a20:	6413      	str	r3, [r2, #64]	; 0x40
 8004a22:	4b41      	ldr	r3, [pc, #260]	; (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a2a:	60fb      	str	r3, [r7, #12]
 8004a2c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004a2e:	4b3f      	ldr	r3, [pc, #252]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4a3e      	ldr	r2, [pc, #248]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004a34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a38:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004a3a:	f7fc fa4b 	bl	8000ed4 <HAL_GetTick>
 8004a3e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004a40:	e008      	b.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004a42:	f7fc fa47 	bl	8000ed4 <HAL_GetTick>
 8004a46:	4602      	mov	r2, r0
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	1ad3      	subs	r3, r2, r3
 8004a4c:	2b02      	cmp	r3, #2
 8004a4e:	d901      	bls.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004a50:	2303      	movs	r3, #3
 8004a52:	e062      	b.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004a54:	4b35      	ldr	r3, [pc, #212]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d0f0      	beq.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004a60:	4b31      	ldr	r3, [pc, #196]	; (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a64:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a68:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004a6a:	693b      	ldr	r3, [r7, #16]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d02f      	beq.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	68db      	ldr	r3, [r3, #12]
 8004a74:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a78:	693a      	ldr	r2, [r7, #16]
 8004a7a:	429a      	cmp	r2, r3
 8004a7c:	d028      	beq.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004a7e:	4b2a      	ldr	r3, [pc, #168]	; (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a86:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004a88:	4b29      	ldr	r3, [pc, #164]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004a8e:	4b28      	ldr	r3, [pc, #160]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004a90:	2200      	movs	r2, #0
 8004a92:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004a94:	4a24      	ldr	r2, [pc, #144]	; (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a96:	693b      	ldr	r3, [r7, #16]
 8004a98:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004a9a:	4b23      	ldr	r3, [pc, #140]	; (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a9e:	f003 0301 	and.w	r3, r3, #1
 8004aa2:	2b01      	cmp	r3, #1
 8004aa4:	d114      	bne.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004aa6:	f7fc fa15 	bl	8000ed4 <HAL_GetTick>
 8004aaa:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004aac:	e00a      	b.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004aae:	f7fc fa11 	bl	8000ed4 <HAL_GetTick>
 8004ab2:	4602      	mov	r2, r0
 8004ab4:	697b      	ldr	r3, [r7, #20]
 8004ab6:	1ad3      	subs	r3, r2, r3
 8004ab8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d901      	bls.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004ac0:	2303      	movs	r3, #3
 8004ac2:	e02a      	b.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ac4:	4b18      	ldr	r3, [pc, #96]	; (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ac6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ac8:	f003 0302 	and.w	r3, r3, #2
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d0ee      	beq.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	68db      	ldr	r3, [r3, #12]
 8004ad4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ad8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004adc:	d10d      	bne.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004ade:	4b12      	ldr	r3, [pc, #72]	; (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ae0:	689b      	ldr	r3, [r3, #8]
 8004ae2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	68db      	ldr	r3, [r3, #12]
 8004aea:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004aee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004af2:	490d      	ldr	r1, [pc, #52]	; (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004af4:	4313      	orrs	r3, r2
 8004af6:	608b      	str	r3, [r1, #8]
 8004af8:	e005      	b.n	8004b06 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004afa:	4b0b      	ldr	r3, [pc, #44]	; (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004afc:	689b      	ldr	r3, [r3, #8]
 8004afe:	4a0a      	ldr	r2, [pc, #40]	; (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b00:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004b04:	6093      	str	r3, [r2, #8]
 8004b06:	4b08      	ldr	r3, [pc, #32]	; (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b08:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	68db      	ldr	r3, [r3, #12]
 8004b0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b12:	4905      	ldr	r1, [pc, #20]	; (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b14:	4313      	orrs	r3, r2
 8004b16:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004b18:	2300      	movs	r3, #0
}
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	3718      	adds	r7, #24
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}
 8004b22:	bf00      	nop
 8004b24:	42470068 	.word	0x42470068
 8004b28:	40023800 	.word	0x40023800
 8004b2c:	40007000 	.word	0x40007000
 8004b30:	42470e40 	.word	0x42470e40

08004b34 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004b34:	b480      	push	{r7}
 8004b36:	b087      	sub	sp, #28
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004b40:	2300      	movs	r3, #0
 8004b42:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004b44:	2300      	movs	r3, #0
 8004b46:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004b48:	2300      	movs	r3, #0
 8004b4a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2b01      	cmp	r3, #1
 8004b50:	d13e      	bne.n	8004bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004b52:	4b23      	ldr	r3, [pc, #140]	; (8004be0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004b54:	689b      	ldr	r3, [r3, #8]
 8004b56:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004b5a:	60fb      	str	r3, [r7, #12]
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d005      	beq.n	8004b6e <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	2b01      	cmp	r3, #1
 8004b66:	d12f      	bne.n	8004bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004b68:	4b1e      	ldr	r3, [pc, #120]	; (8004be4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004b6a:	617b      	str	r3, [r7, #20]
          break;
 8004b6c:	e02f      	b.n	8004bce <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004b6e:	4b1c      	ldr	r3, [pc, #112]	; (8004be0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b76:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b7a:	d108      	bne.n	8004b8e <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004b7c:	4b18      	ldr	r3, [pc, #96]	; (8004be0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b84:	4a18      	ldr	r2, [pc, #96]	; (8004be8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004b86:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b8a:	613b      	str	r3, [r7, #16]
 8004b8c:	e007      	b.n	8004b9e <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004b8e:	4b14      	ldr	r3, [pc, #80]	; (8004be0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b96:	4a15      	ldr	r2, [pc, #84]	; (8004bec <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004b98:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b9c:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004b9e:	4b10      	ldr	r3, [pc, #64]	; (8004be0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004ba0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ba4:	099b      	lsrs	r3, r3, #6
 8004ba6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	fb02 f303 	mul.w	r3, r2, r3
 8004bb0:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004bb2:	4b0b      	ldr	r3, [pc, #44]	; (8004be0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004bb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004bb8:	0f1b      	lsrs	r3, r3, #28
 8004bba:	f003 0307 	and.w	r3, r3, #7
 8004bbe:	68ba      	ldr	r2, [r7, #8]
 8004bc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bc4:	617b      	str	r3, [r7, #20]
          break;
 8004bc6:	e002      	b.n	8004bce <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004bc8:	2300      	movs	r3, #0
 8004bca:	617b      	str	r3, [r7, #20]
          break;
 8004bcc:	bf00      	nop
        }
      }
      break;
 8004bce:	bf00      	nop
    }
  }
  return frequency;
 8004bd0:	697b      	ldr	r3, [r7, #20]
}
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	371c      	adds	r7, #28
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bdc:	4770      	bx	lr
 8004bde:	bf00      	nop
 8004be0:	40023800 	.word	0x40023800
 8004be4:	00bb8000 	.word	0x00bb8000
 8004be8:	007a1200 	.word	0x007a1200
 8004bec:	00f42400 	.word	0x00f42400

08004bf0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b082      	sub	sp, #8
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d101      	bne.n	8004c02 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	e07b      	b.n	8004cfa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d108      	bne.n	8004c1c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c12:	d009      	beq.n	8004c28 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2200      	movs	r2, #0
 8004c18:	61da      	str	r2, [r3, #28]
 8004c1a:	e005      	b.n	8004c28 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2200      	movs	r2, #0
 8004c20:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2200      	movs	r2, #0
 8004c26:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c34:	b2db      	uxtb	r3, r3
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d106      	bne.n	8004c48 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	f7fb fff2 	bl	8000c2c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2202      	movs	r2, #2
 8004c4c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	681a      	ldr	r2, [r3, #0]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c5e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	689b      	ldr	r3, [r3, #8]
 8004c6c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004c70:	431a      	orrs	r2, r3
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	68db      	ldr	r3, [r3, #12]
 8004c76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c7a:	431a      	orrs	r2, r3
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	691b      	ldr	r3, [r3, #16]
 8004c80:	f003 0302 	and.w	r3, r3, #2
 8004c84:	431a      	orrs	r2, r3
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	695b      	ldr	r3, [r3, #20]
 8004c8a:	f003 0301 	and.w	r3, r3, #1
 8004c8e:	431a      	orrs	r2, r3
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	699b      	ldr	r3, [r3, #24]
 8004c94:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c98:	431a      	orrs	r2, r3
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	69db      	ldr	r3, [r3, #28]
 8004c9e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004ca2:	431a      	orrs	r2, r3
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6a1b      	ldr	r3, [r3, #32]
 8004ca8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cac:	ea42 0103 	orr.w	r1, r2, r3
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cb4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	430a      	orrs	r2, r1
 8004cbe:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	699b      	ldr	r3, [r3, #24]
 8004cc4:	0c1b      	lsrs	r3, r3, #16
 8004cc6:	f003 0104 	and.w	r1, r3, #4
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cce:	f003 0210 	and.w	r2, r3, #16
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	430a      	orrs	r2, r1
 8004cd8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	69da      	ldr	r2, [r3, #28]
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ce8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2200      	movs	r2, #0
 8004cee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004cf8:	2300      	movs	r3, #0
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	3708      	adds	r7, #8
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd80      	pop	{r7, pc}

08004d02 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004d02:	b084      	sub	sp, #16
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b084      	sub	sp, #16
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
 8004d0c:	f107 001c 	add.w	r0, r7, #28
 8004d10:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004d14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d16:	2b01      	cmp	r3, #1
 8004d18:	d122      	bne.n	8004d60 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d1e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	68db      	ldr	r3, [r3, #12]
 8004d2a:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004d2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d32:	687a      	ldr	r2, [r7, #4]
 8004d34:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	68db      	ldr	r3, [r3, #12]
 8004d3a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004d42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d44:	2b01      	cmp	r3, #1
 8004d46:	d105      	bne.n	8004d54 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	68db      	ldr	r3, [r3, #12]
 8004d4c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004d54:	6878      	ldr	r0, [r7, #4]
 8004d56:	f000 f9bf 	bl	80050d8 <USB_CoreReset>
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	73fb      	strb	r3, [r7, #15]
 8004d5e:	e01a      	b.n	8004d96 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	68db      	ldr	r3, [r3, #12]
 8004d64:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004d6c:	6878      	ldr	r0, [r7, #4]
 8004d6e:	f000 f9b3 	bl	80050d8 <USB_CoreReset>
 8004d72:	4603      	mov	r3, r0
 8004d74:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004d76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d106      	bne.n	8004d8a <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d80:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	639a      	str	r2, [r3, #56]	; 0x38
 8004d88:	e005      	b.n	8004d96 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d8e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004d96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d98:	2b01      	cmp	r3, #1
 8004d9a:	d10b      	bne.n	8004db4 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	689b      	ldr	r3, [r3, #8]
 8004da0:	f043 0206 	orr.w	r2, r3, #6
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	689b      	ldr	r3, [r3, #8]
 8004dac:	f043 0220 	orr.w	r2, r3, #32
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004db4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004db6:	4618      	mov	r0, r3
 8004db8:	3710      	adds	r7, #16
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004dc0:	b004      	add	sp, #16
 8004dc2:	4770      	bx	lr

08004dc4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	b083      	sub	sp, #12
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	689b      	ldr	r3, [r3, #8]
 8004dd0:	f043 0201 	orr.w	r2, r3, #1
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004dd8:	2300      	movs	r3, #0
}
 8004dda:	4618      	mov	r0, r3
 8004ddc:	370c      	adds	r7, #12
 8004dde:	46bd      	mov	sp, r7
 8004de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de4:	4770      	bx	lr

08004de6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004de6:	b480      	push	{r7}
 8004de8:	b083      	sub	sp, #12
 8004dea:	af00      	add	r7, sp, #0
 8004dec:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	689b      	ldr	r3, [r3, #8]
 8004df2:	f023 0201 	bic.w	r2, r3, #1
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004dfa:	2300      	movs	r3, #0
}
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	370c      	adds	r7, #12
 8004e00:	46bd      	mov	sp, r7
 8004e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e06:	4770      	bx	lr

08004e08 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b084      	sub	sp, #16
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
 8004e10:	460b      	mov	r3, r1
 8004e12:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004e14:	2300      	movs	r3, #0
 8004e16:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	68db      	ldr	r3, [r3, #12]
 8004e1c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004e24:	78fb      	ldrb	r3, [r7, #3]
 8004e26:	2b01      	cmp	r3, #1
 8004e28:	d115      	bne.n	8004e56 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	68db      	ldr	r3, [r3, #12]
 8004e2e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004e36:	2001      	movs	r0, #1
 8004e38:	f7fc f858 	bl	8000eec <HAL_Delay>
      ms++;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	3301      	adds	r3, #1
 8004e40:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004e42:	6878      	ldr	r0, [r7, #4]
 8004e44:	f000 f939 	bl	80050ba <USB_GetMode>
 8004e48:	4603      	mov	r3, r0
 8004e4a:	2b01      	cmp	r3, #1
 8004e4c:	d01e      	beq.n	8004e8c <USB_SetCurrentMode+0x84>
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	2b31      	cmp	r3, #49	; 0x31
 8004e52:	d9f0      	bls.n	8004e36 <USB_SetCurrentMode+0x2e>
 8004e54:	e01a      	b.n	8004e8c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004e56:	78fb      	ldrb	r3, [r7, #3]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d115      	bne.n	8004e88 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	68db      	ldr	r3, [r3, #12]
 8004e60:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004e68:	2001      	movs	r0, #1
 8004e6a:	f7fc f83f 	bl	8000eec <HAL_Delay>
      ms++;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	3301      	adds	r3, #1
 8004e72:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004e74:	6878      	ldr	r0, [r7, #4]
 8004e76:	f000 f920 	bl	80050ba <USB_GetMode>
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d005      	beq.n	8004e8c <USB_SetCurrentMode+0x84>
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	2b31      	cmp	r3, #49	; 0x31
 8004e84:	d9f0      	bls.n	8004e68 <USB_SetCurrentMode+0x60>
 8004e86:	e001      	b.n	8004e8c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004e88:	2301      	movs	r3, #1
 8004e8a:	e005      	b.n	8004e98 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	2b32      	cmp	r3, #50	; 0x32
 8004e90:	d101      	bne.n	8004e96 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004e92:	2301      	movs	r3, #1
 8004e94:	e000      	b.n	8004e98 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004e96:	2300      	movs	r3, #0
}
 8004e98:	4618      	mov	r0, r3
 8004e9a:	3710      	adds	r7, #16
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	bd80      	pop	{r7, pc}

08004ea0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	b085      	sub	sp, #20
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
 8004ea8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004eaa:	2300      	movs	r3, #0
 8004eac:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	3301      	adds	r3, #1
 8004eb2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	4a13      	ldr	r2, [pc, #76]	; (8004f04 <USB_FlushTxFifo+0x64>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d901      	bls.n	8004ec0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004ebc:	2303      	movs	r3, #3
 8004ebe:	e01b      	b.n	8004ef8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	691b      	ldr	r3, [r3, #16]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	daf2      	bge.n	8004eae <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004ec8:	2300      	movs	r3, #0
 8004eca:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	019b      	lsls	r3, r3, #6
 8004ed0:	f043 0220 	orr.w	r2, r3, #32
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	3301      	adds	r3, #1
 8004edc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	4a08      	ldr	r2, [pc, #32]	; (8004f04 <USB_FlushTxFifo+0x64>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d901      	bls.n	8004eea <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004ee6:	2303      	movs	r3, #3
 8004ee8:	e006      	b.n	8004ef8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	691b      	ldr	r3, [r3, #16]
 8004eee:	f003 0320 	and.w	r3, r3, #32
 8004ef2:	2b20      	cmp	r3, #32
 8004ef4:	d0f0      	beq.n	8004ed8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004ef6:	2300      	movs	r3, #0
}
 8004ef8:	4618      	mov	r0, r3
 8004efa:	3714      	adds	r7, #20
 8004efc:	46bd      	mov	sp, r7
 8004efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f02:	4770      	bx	lr
 8004f04:	00030d40 	.word	0x00030d40

08004f08 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004f08:	b480      	push	{r7}
 8004f0a:	b085      	sub	sp, #20
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004f10:	2300      	movs	r3, #0
 8004f12:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	3301      	adds	r3, #1
 8004f18:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	4a11      	ldr	r2, [pc, #68]	; (8004f64 <USB_FlushRxFifo+0x5c>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d901      	bls.n	8004f26 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004f22:	2303      	movs	r3, #3
 8004f24:	e018      	b.n	8004f58 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	691b      	ldr	r3, [r3, #16]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	daf2      	bge.n	8004f14 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004f2e:	2300      	movs	r3, #0
 8004f30:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2210      	movs	r2, #16
 8004f36:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	3301      	adds	r3, #1
 8004f3c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	4a08      	ldr	r2, [pc, #32]	; (8004f64 <USB_FlushRxFifo+0x5c>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d901      	bls.n	8004f4a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004f46:	2303      	movs	r3, #3
 8004f48:	e006      	b.n	8004f58 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	691b      	ldr	r3, [r3, #16]
 8004f4e:	f003 0310 	and.w	r3, r3, #16
 8004f52:	2b10      	cmp	r3, #16
 8004f54:	d0f0      	beq.n	8004f38 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004f56:	2300      	movs	r3, #0
}
 8004f58:	4618      	mov	r0, r3
 8004f5a:	3714      	adds	r7, #20
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f62:	4770      	bx	lr
 8004f64:	00030d40 	.word	0x00030d40

08004f68 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b089      	sub	sp, #36	; 0x24
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	60f8      	str	r0, [r7, #12]
 8004f70:	60b9      	str	r1, [r7, #8]
 8004f72:	4611      	mov	r1, r2
 8004f74:	461a      	mov	r2, r3
 8004f76:	460b      	mov	r3, r1
 8004f78:	71fb      	strb	r3, [r7, #7]
 8004f7a:	4613      	mov	r3, r2
 8004f7c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004f82:	68bb      	ldr	r3, [r7, #8]
 8004f84:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004f86:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d123      	bne.n	8004fd6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004f8e:	88bb      	ldrh	r3, [r7, #4]
 8004f90:	3303      	adds	r3, #3
 8004f92:	089b      	lsrs	r3, r3, #2
 8004f94:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004f96:	2300      	movs	r3, #0
 8004f98:	61bb      	str	r3, [r7, #24]
 8004f9a:	e018      	b.n	8004fce <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004f9c:	79fb      	ldrb	r3, [r7, #7]
 8004f9e:	031a      	lsls	r2, r3, #12
 8004fa0:	697b      	ldr	r3, [r7, #20]
 8004fa2:	4413      	add	r3, r2
 8004fa4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004fa8:	461a      	mov	r2, r3
 8004faa:	69fb      	ldr	r3, [r7, #28]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004fb0:	69fb      	ldr	r3, [r7, #28]
 8004fb2:	3301      	adds	r3, #1
 8004fb4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004fb6:	69fb      	ldr	r3, [r7, #28]
 8004fb8:	3301      	adds	r3, #1
 8004fba:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004fbc:	69fb      	ldr	r3, [r7, #28]
 8004fbe:	3301      	adds	r3, #1
 8004fc0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004fc2:	69fb      	ldr	r3, [r7, #28]
 8004fc4:	3301      	adds	r3, #1
 8004fc6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004fc8:	69bb      	ldr	r3, [r7, #24]
 8004fca:	3301      	adds	r3, #1
 8004fcc:	61bb      	str	r3, [r7, #24]
 8004fce:	69ba      	ldr	r2, [r7, #24]
 8004fd0:	693b      	ldr	r3, [r7, #16]
 8004fd2:	429a      	cmp	r2, r3
 8004fd4:	d3e2      	bcc.n	8004f9c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004fd6:	2300      	movs	r3, #0
}
 8004fd8:	4618      	mov	r0, r3
 8004fda:	3724      	adds	r7, #36	; 0x24
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe2:	4770      	bx	lr

08004fe4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	b08b      	sub	sp, #44	; 0x2c
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	60f8      	str	r0, [r7, #12]
 8004fec:	60b9      	str	r1, [r7, #8]
 8004fee:	4613      	mov	r3, r2
 8004ff0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004ff6:	68bb      	ldr	r3, [r7, #8]
 8004ff8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004ffa:	88fb      	ldrh	r3, [r7, #6]
 8004ffc:	089b      	lsrs	r3, r3, #2
 8004ffe:	b29b      	uxth	r3, r3
 8005000:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005002:	88fb      	ldrh	r3, [r7, #6]
 8005004:	f003 0303 	and.w	r3, r3, #3
 8005008:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800500a:	2300      	movs	r3, #0
 800500c:	623b      	str	r3, [r7, #32]
 800500e:	e014      	b.n	800503a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005010:	69bb      	ldr	r3, [r7, #24]
 8005012:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005016:	681a      	ldr	r2, [r3, #0]
 8005018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800501a:	601a      	str	r2, [r3, #0]
    pDest++;
 800501c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800501e:	3301      	adds	r3, #1
 8005020:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005024:	3301      	adds	r3, #1
 8005026:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800502a:	3301      	adds	r3, #1
 800502c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800502e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005030:	3301      	adds	r3, #1
 8005032:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005034:	6a3b      	ldr	r3, [r7, #32]
 8005036:	3301      	adds	r3, #1
 8005038:	623b      	str	r3, [r7, #32]
 800503a:	6a3a      	ldr	r2, [r7, #32]
 800503c:	697b      	ldr	r3, [r7, #20]
 800503e:	429a      	cmp	r2, r3
 8005040:	d3e6      	bcc.n	8005010 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005042:	8bfb      	ldrh	r3, [r7, #30]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d01e      	beq.n	8005086 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005048:	2300      	movs	r3, #0
 800504a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800504c:	69bb      	ldr	r3, [r7, #24]
 800504e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005052:	461a      	mov	r2, r3
 8005054:	f107 0310 	add.w	r3, r7, #16
 8005058:	6812      	ldr	r2, [r2, #0]
 800505a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800505c:	693a      	ldr	r2, [r7, #16]
 800505e:	6a3b      	ldr	r3, [r7, #32]
 8005060:	b2db      	uxtb	r3, r3
 8005062:	00db      	lsls	r3, r3, #3
 8005064:	fa22 f303 	lsr.w	r3, r2, r3
 8005068:	b2da      	uxtb	r2, r3
 800506a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800506c:	701a      	strb	r2, [r3, #0]
      i++;
 800506e:	6a3b      	ldr	r3, [r7, #32]
 8005070:	3301      	adds	r3, #1
 8005072:	623b      	str	r3, [r7, #32]
      pDest++;
 8005074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005076:	3301      	adds	r3, #1
 8005078:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800507a:	8bfb      	ldrh	r3, [r7, #30]
 800507c:	3b01      	subs	r3, #1
 800507e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005080:	8bfb      	ldrh	r3, [r7, #30]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d1ea      	bne.n	800505c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005088:	4618      	mov	r0, r3
 800508a:	372c      	adds	r7, #44	; 0x2c
 800508c:	46bd      	mov	sp, r7
 800508e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005092:	4770      	bx	lr

08005094 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005094:	b480      	push	{r7}
 8005096:	b085      	sub	sp, #20
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	695b      	ldr	r3, [r3, #20]
 80050a0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	699b      	ldr	r3, [r3, #24]
 80050a6:	68fa      	ldr	r2, [r7, #12]
 80050a8:	4013      	ands	r3, r2
 80050aa:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80050ac:	68fb      	ldr	r3, [r7, #12]
}
 80050ae:	4618      	mov	r0, r3
 80050b0:	3714      	adds	r7, #20
 80050b2:	46bd      	mov	sp, r7
 80050b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b8:	4770      	bx	lr

080050ba <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80050ba:	b480      	push	{r7}
 80050bc:	b083      	sub	sp, #12
 80050be:	af00      	add	r7, sp, #0
 80050c0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	695b      	ldr	r3, [r3, #20]
 80050c6:	f003 0301 	and.w	r3, r3, #1
}
 80050ca:	4618      	mov	r0, r3
 80050cc:	370c      	adds	r7, #12
 80050ce:	46bd      	mov	sp, r7
 80050d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d4:	4770      	bx	lr
	...

080050d8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80050d8:	b480      	push	{r7}
 80050da:	b085      	sub	sp, #20
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80050e0:	2300      	movs	r3, #0
 80050e2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	3301      	adds	r3, #1
 80050e8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	4a13      	ldr	r2, [pc, #76]	; (800513c <USB_CoreReset+0x64>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d901      	bls.n	80050f6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80050f2:	2303      	movs	r3, #3
 80050f4:	e01b      	b.n	800512e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	691b      	ldr	r3, [r3, #16]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	daf2      	bge.n	80050e4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80050fe:	2300      	movs	r3, #0
 8005100:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	691b      	ldr	r3, [r3, #16]
 8005106:	f043 0201 	orr.w	r2, r3, #1
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	3301      	adds	r3, #1
 8005112:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	4a09      	ldr	r2, [pc, #36]	; (800513c <USB_CoreReset+0x64>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d901      	bls.n	8005120 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800511c:	2303      	movs	r3, #3
 800511e:	e006      	b.n	800512e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	691b      	ldr	r3, [r3, #16]
 8005124:	f003 0301 	and.w	r3, r3, #1
 8005128:	2b01      	cmp	r3, #1
 800512a:	d0f0      	beq.n	800510e <USB_CoreReset+0x36>

  return HAL_OK;
 800512c:	2300      	movs	r3, #0
}
 800512e:	4618      	mov	r0, r3
 8005130:	3714      	adds	r7, #20
 8005132:	46bd      	mov	sp, r7
 8005134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005138:	4770      	bx	lr
 800513a:	bf00      	nop
 800513c:	00030d40 	.word	0x00030d40

08005140 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005140:	b084      	sub	sp, #16
 8005142:	b580      	push	{r7, lr}
 8005144:	b086      	sub	sp, #24
 8005146:	af00      	add	r7, sp, #0
 8005148:	6078      	str	r0, [r7, #4]
 800514a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800514e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005152:	2300      	movs	r3, #0
 8005154:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005160:	461a      	mov	r2, r3
 8005162:	2300      	movs	r3, #0
 8005164:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800516a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005176:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005182:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800518e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005192:	2b00      	cmp	r3, #0
 8005194:	d018      	beq.n	80051c8 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005198:	2b01      	cmp	r3, #1
 800519a:	d10a      	bne.n	80051b2 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	68fa      	ldr	r2, [r7, #12]
 80051a6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80051aa:	f043 0304 	orr.w	r3, r3, #4
 80051ae:	6013      	str	r3, [r2, #0]
 80051b0:	e014      	b.n	80051dc <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	68fa      	ldr	r2, [r7, #12]
 80051bc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80051c0:	f023 0304 	bic.w	r3, r3, #4
 80051c4:	6013      	str	r3, [r2, #0]
 80051c6:	e009      	b.n	80051dc <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	68fa      	ldr	r2, [r7, #12]
 80051d2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80051d6:	f023 0304 	bic.w	r3, r3, #4
 80051da:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80051dc:	2110      	movs	r1, #16
 80051de:	6878      	ldr	r0, [r7, #4]
 80051e0:	f7ff fe5e 	bl	8004ea0 <USB_FlushTxFifo>
 80051e4:	4603      	mov	r3, r0
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d001      	beq.n	80051ee <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 80051ea:	2301      	movs	r3, #1
 80051ec:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80051ee:	6878      	ldr	r0, [r7, #4]
 80051f0:	f7ff fe8a 	bl	8004f08 <USB_FlushRxFifo>
 80051f4:	4603      	mov	r3, r0
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d001      	beq.n	80051fe <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 80051fa:	2301      	movs	r3, #1
 80051fc:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80051fe:	2300      	movs	r3, #0
 8005200:	613b      	str	r3, [r7, #16]
 8005202:	e015      	b.n	8005230 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8005204:	693b      	ldr	r3, [r7, #16]
 8005206:	015a      	lsls	r2, r3, #5
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	4413      	add	r3, r2
 800520c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005210:	461a      	mov	r2, r3
 8005212:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005216:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005218:	693b      	ldr	r3, [r7, #16]
 800521a:	015a      	lsls	r2, r3, #5
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	4413      	add	r3, r2
 8005220:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005224:	461a      	mov	r2, r3
 8005226:	2300      	movs	r3, #0
 8005228:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800522a:	693b      	ldr	r3, [r7, #16]
 800522c:	3301      	adds	r3, #1
 800522e:	613b      	str	r3, [r7, #16]
 8005230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005232:	693a      	ldr	r2, [r7, #16]
 8005234:	429a      	cmp	r2, r3
 8005236:	d3e5      	bcc.n	8005204 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2200      	movs	r2, #0
 800523c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005244:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800524a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800524e:	2b00      	cmp	r3, #0
 8005250:	d00b      	beq.n	800526a <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005258:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	4a13      	ldr	r2, [pc, #76]	; (80052ac <USB_HostInit+0x16c>)
 800525e:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	4a13      	ldr	r2, [pc, #76]	; (80052b0 <USB_HostInit+0x170>)
 8005264:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005268:	e009      	b.n	800527e <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2280      	movs	r2, #128	; 0x80
 800526e:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	4a10      	ldr	r2, [pc, #64]	; (80052b4 <USB_HostInit+0x174>)
 8005274:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	4a0f      	ldr	r2, [pc, #60]	; (80052b8 <USB_HostInit+0x178>)
 800527a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800527e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005280:	2b00      	cmp	r3, #0
 8005282:	d105      	bne.n	8005290 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	699b      	ldr	r3, [r3, #24]
 8005288:	f043 0210 	orr.w	r2, r3, #16
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	699a      	ldr	r2, [r3, #24]
 8005294:	4b09      	ldr	r3, [pc, #36]	; (80052bc <USB_HostInit+0x17c>)
 8005296:	4313      	orrs	r3, r2
 8005298:	687a      	ldr	r2, [r7, #4]
 800529a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800529c:	7dfb      	ldrb	r3, [r7, #23]
}
 800529e:	4618      	mov	r0, r3
 80052a0:	3718      	adds	r7, #24
 80052a2:	46bd      	mov	sp, r7
 80052a4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80052a8:	b004      	add	sp, #16
 80052aa:	4770      	bx	lr
 80052ac:	01000200 	.word	0x01000200
 80052b0:	00e00300 	.word	0x00e00300
 80052b4:	00600080 	.word	0x00600080
 80052b8:	004000e0 	.word	0x004000e0
 80052bc:	a3200008 	.word	0xa3200008

080052c0 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80052c0:	b480      	push	{r7}
 80052c2:	b085      	sub	sp, #20
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
 80052c8:	460b      	mov	r3, r1
 80052ca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	68fa      	ldr	r2, [r7, #12]
 80052da:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80052de:	f023 0303 	bic.w	r3, r3, #3
 80052e2:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80052ea:	681a      	ldr	r2, [r3, #0]
 80052ec:	78fb      	ldrb	r3, [r7, #3]
 80052ee:	f003 0303 	and.w	r3, r3, #3
 80052f2:	68f9      	ldr	r1, [r7, #12]
 80052f4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80052f8:	4313      	orrs	r3, r2
 80052fa:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80052fc:	78fb      	ldrb	r3, [r7, #3]
 80052fe:	2b01      	cmp	r3, #1
 8005300:	d107      	bne.n	8005312 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005308:	461a      	mov	r2, r3
 800530a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800530e:	6053      	str	r3, [r2, #4]
 8005310:	e009      	b.n	8005326 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8005312:	78fb      	ldrb	r3, [r7, #3]
 8005314:	2b02      	cmp	r3, #2
 8005316:	d106      	bne.n	8005326 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800531e:	461a      	mov	r2, r3
 8005320:	f241 7370 	movw	r3, #6000	; 0x1770
 8005324:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8005326:	2300      	movs	r3, #0
}
 8005328:	4618      	mov	r0, r3
 800532a:	3714      	adds	r7, #20
 800532c:	46bd      	mov	sp, r7
 800532e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005332:	4770      	bx	lr

08005334 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005334:	b480      	push	{r7}
 8005336:	b085      	sub	sp, #20
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
 800533c:	460b      	mov	r3, r1
 800533e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005344:	2300      	movs	r3, #0
 8005346:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005352:	68bb      	ldr	r3, [r7, #8]
 8005354:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005358:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800535a:	68bb      	ldr	r3, [r7, #8]
 800535c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005360:	2b00      	cmp	r3, #0
 8005362:	d109      	bne.n	8005378 <USB_DriveVbus+0x44>
 8005364:	78fb      	ldrb	r3, [r7, #3]
 8005366:	2b01      	cmp	r3, #1
 8005368:	d106      	bne.n	8005378 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800536a:	68bb      	ldr	r3, [r7, #8]
 800536c:	68fa      	ldr	r2, [r7, #12]
 800536e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005372:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005376:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005378:	68bb      	ldr	r3, [r7, #8]
 800537a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800537e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005382:	d109      	bne.n	8005398 <USB_DriveVbus+0x64>
 8005384:	78fb      	ldrb	r3, [r7, #3]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d106      	bne.n	8005398 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	68fa      	ldr	r2, [r7, #12]
 800538e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005392:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005396:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005398:	2300      	movs	r3, #0
}
 800539a:	4618      	mov	r0, r3
 800539c:	3714      	adds	r7, #20
 800539e:	46bd      	mov	sp, r7
 80053a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a4:	4770      	bx	lr

080053a6 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80053a6:	b480      	push	{r7}
 80053a8:	b085      	sub	sp, #20
 80053aa:	af00      	add	r7, sp, #0
 80053ac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80053b2:	2300      	movs	r3, #0
 80053b4:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	0c5b      	lsrs	r3, r3, #17
 80053c4:	f003 0303 	and.w	r3, r3, #3
}
 80053c8:	4618      	mov	r0, r3
 80053ca:	3714      	adds	r7, #20
 80053cc:	46bd      	mov	sp, r7
 80053ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d2:	4770      	bx	lr

080053d4 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80053d4:	b480      	push	{r7}
 80053d6:	b085      	sub	sp, #20
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80053e6:	689b      	ldr	r3, [r3, #8]
 80053e8:	b29b      	uxth	r3, r3
}
 80053ea:	4618      	mov	r0, r3
 80053ec:	3714      	adds	r7, #20
 80053ee:	46bd      	mov	sp, r7
 80053f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f4:	4770      	bx	lr
	...

080053f8 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b088      	sub	sp, #32
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
 8005400:	4608      	mov	r0, r1
 8005402:	4611      	mov	r1, r2
 8005404:	461a      	mov	r2, r3
 8005406:	4603      	mov	r3, r0
 8005408:	70fb      	strb	r3, [r7, #3]
 800540a:	460b      	mov	r3, r1
 800540c:	70bb      	strb	r3, [r7, #2]
 800540e:	4613      	mov	r3, r2
 8005410:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005412:	2300      	movs	r3, #0
 8005414:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800541a:	78fb      	ldrb	r3, [r7, #3]
 800541c:	015a      	lsls	r2, r3, #5
 800541e:	693b      	ldr	r3, [r7, #16]
 8005420:	4413      	add	r3, r2
 8005422:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005426:	461a      	mov	r2, r3
 8005428:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800542c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800542e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005432:	2b03      	cmp	r3, #3
 8005434:	d87e      	bhi.n	8005534 <USB_HC_Init+0x13c>
 8005436:	a201      	add	r2, pc, #4	; (adr r2, 800543c <USB_HC_Init+0x44>)
 8005438:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800543c:	0800544d 	.word	0x0800544d
 8005440:	080054f7 	.word	0x080054f7
 8005444:	0800544d 	.word	0x0800544d
 8005448:	080054b9 	.word	0x080054b9
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800544c:	78fb      	ldrb	r3, [r7, #3]
 800544e:	015a      	lsls	r2, r3, #5
 8005450:	693b      	ldr	r3, [r7, #16]
 8005452:	4413      	add	r3, r2
 8005454:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005458:	461a      	mov	r2, r3
 800545a:	f240 439d 	movw	r3, #1181	; 0x49d
 800545e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005460:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005464:	2b00      	cmp	r3, #0
 8005466:	da10      	bge.n	800548a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005468:	78fb      	ldrb	r3, [r7, #3]
 800546a:	015a      	lsls	r2, r3, #5
 800546c:	693b      	ldr	r3, [r7, #16]
 800546e:	4413      	add	r3, r2
 8005470:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005474:	68db      	ldr	r3, [r3, #12]
 8005476:	78fa      	ldrb	r2, [r7, #3]
 8005478:	0151      	lsls	r1, r2, #5
 800547a:	693a      	ldr	r2, [r7, #16]
 800547c:	440a      	add	r2, r1
 800547e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005482:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005486:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8005488:	e057      	b.n	800553a <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800548e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005492:	2b00      	cmp	r3, #0
 8005494:	d051      	beq.n	800553a <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8005496:	78fb      	ldrb	r3, [r7, #3]
 8005498:	015a      	lsls	r2, r3, #5
 800549a:	693b      	ldr	r3, [r7, #16]
 800549c:	4413      	add	r3, r2
 800549e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054a2:	68db      	ldr	r3, [r3, #12]
 80054a4:	78fa      	ldrb	r2, [r7, #3]
 80054a6:	0151      	lsls	r1, r2, #5
 80054a8:	693a      	ldr	r2, [r7, #16]
 80054aa:	440a      	add	r2, r1
 80054ac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80054b0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80054b4:	60d3      	str	r3, [r2, #12]
      break;
 80054b6:	e040      	b.n	800553a <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80054b8:	78fb      	ldrb	r3, [r7, #3]
 80054ba:	015a      	lsls	r2, r3, #5
 80054bc:	693b      	ldr	r3, [r7, #16]
 80054be:	4413      	add	r3, r2
 80054c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054c4:	461a      	mov	r2, r3
 80054c6:	f240 639d 	movw	r3, #1693	; 0x69d
 80054ca:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80054cc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	da34      	bge.n	800553e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80054d4:	78fb      	ldrb	r3, [r7, #3]
 80054d6:	015a      	lsls	r2, r3, #5
 80054d8:	693b      	ldr	r3, [r7, #16]
 80054da:	4413      	add	r3, r2
 80054dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054e0:	68db      	ldr	r3, [r3, #12]
 80054e2:	78fa      	ldrb	r2, [r7, #3]
 80054e4:	0151      	lsls	r1, r2, #5
 80054e6:	693a      	ldr	r2, [r7, #16]
 80054e8:	440a      	add	r2, r1
 80054ea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80054ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054f2:	60d3      	str	r3, [r2, #12]
      }

      break;
 80054f4:	e023      	b.n	800553e <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80054f6:	78fb      	ldrb	r3, [r7, #3]
 80054f8:	015a      	lsls	r2, r3, #5
 80054fa:	693b      	ldr	r3, [r7, #16]
 80054fc:	4413      	add	r3, r2
 80054fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005502:	461a      	mov	r2, r3
 8005504:	f240 2325 	movw	r3, #549	; 0x225
 8005508:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800550a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800550e:	2b00      	cmp	r3, #0
 8005510:	da17      	bge.n	8005542 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005512:	78fb      	ldrb	r3, [r7, #3]
 8005514:	015a      	lsls	r2, r3, #5
 8005516:	693b      	ldr	r3, [r7, #16]
 8005518:	4413      	add	r3, r2
 800551a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800551e:	68db      	ldr	r3, [r3, #12]
 8005520:	78fa      	ldrb	r2, [r7, #3]
 8005522:	0151      	lsls	r1, r2, #5
 8005524:	693a      	ldr	r2, [r7, #16]
 8005526:	440a      	add	r2, r1
 8005528:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800552c:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8005530:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005532:	e006      	b.n	8005542 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8005534:	2301      	movs	r3, #1
 8005536:	77fb      	strb	r3, [r7, #31]
      break;
 8005538:	e004      	b.n	8005544 <USB_HC_Init+0x14c>
      break;
 800553a:	bf00      	nop
 800553c:	e002      	b.n	8005544 <USB_HC_Init+0x14c>
      break;
 800553e:	bf00      	nop
 8005540:	e000      	b.n	8005544 <USB_HC_Init+0x14c>
      break;
 8005542:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8005544:	78fb      	ldrb	r3, [r7, #3]
 8005546:	015a      	lsls	r2, r3, #5
 8005548:	693b      	ldr	r3, [r7, #16]
 800554a:	4413      	add	r3, r2
 800554c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005550:	68db      	ldr	r3, [r3, #12]
 8005552:	78fa      	ldrb	r2, [r7, #3]
 8005554:	0151      	lsls	r1, r2, #5
 8005556:	693a      	ldr	r2, [r7, #16]
 8005558:	440a      	add	r2, r1
 800555a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800555e:	f043 0302 	orr.w	r3, r3, #2
 8005562:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005564:	693b      	ldr	r3, [r7, #16]
 8005566:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800556a:	699a      	ldr	r2, [r3, #24]
 800556c:	78fb      	ldrb	r3, [r7, #3]
 800556e:	f003 030f 	and.w	r3, r3, #15
 8005572:	2101      	movs	r1, #1
 8005574:	fa01 f303 	lsl.w	r3, r1, r3
 8005578:	6939      	ldr	r1, [r7, #16]
 800557a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800557e:	4313      	orrs	r3, r2
 8005580:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	699b      	ldr	r3, [r3, #24]
 8005586:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800558e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005592:	2b00      	cmp	r3, #0
 8005594:	da03      	bge.n	800559e <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8005596:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800559a:	61bb      	str	r3, [r7, #24]
 800559c:	e001      	b.n	80055a2 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 800559e:	2300      	movs	r3, #0
 80055a0:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80055a2:	6878      	ldr	r0, [r7, #4]
 80055a4:	f7ff feff 	bl	80053a6 <USB_GetHostSpeed>
 80055a8:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80055aa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80055ae:	2b02      	cmp	r3, #2
 80055b0:	d106      	bne.n	80055c0 <USB_HC_Init+0x1c8>
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	2b02      	cmp	r3, #2
 80055b6:	d003      	beq.n	80055c0 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80055b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80055bc:	617b      	str	r3, [r7, #20]
 80055be:	e001      	b.n	80055c4 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80055c0:	2300      	movs	r3, #0
 80055c2:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80055c4:	787b      	ldrb	r3, [r7, #1]
 80055c6:	059b      	lsls	r3, r3, #22
 80055c8:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80055cc:	78bb      	ldrb	r3, [r7, #2]
 80055ce:	02db      	lsls	r3, r3, #11
 80055d0:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80055d4:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80055d6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80055da:	049b      	lsls	r3, r3, #18
 80055dc:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80055e0:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80055e2:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80055e4:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80055e8:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80055ea:	69bb      	ldr	r3, [r7, #24]
 80055ec:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80055ee:	78fb      	ldrb	r3, [r7, #3]
 80055f0:	0159      	lsls	r1, r3, #5
 80055f2:	693b      	ldr	r3, [r7, #16]
 80055f4:	440b      	add	r3, r1
 80055f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055fa:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80055fc:	697b      	ldr	r3, [r7, #20]
 80055fe:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005600:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8005602:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005606:	2b03      	cmp	r3, #3
 8005608:	d003      	beq.n	8005612 <USB_HC_Init+0x21a>
 800560a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800560e:	2b01      	cmp	r3, #1
 8005610:	d10f      	bne.n	8005632 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8005612:	78fb      	ldrb	r3, [r7, #3]
 8005614:	015a      	lsls	r2, r3, #5
 8005616:	693b      	ldr	r3, [r7, #16]
 8005618:	4413      	add	r3, r2
 800561a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	78fa      	ldrb	r2, [r7, #3]
 8005622:	0151      	lsls	r1, r2, #5
 8005624:	693a      	ldr	r2, [r7, #16]
 8005626:	440a      	add	r2, r1
 8005628:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800562c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005630:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8005632:	7ffb      	ldrb	r3, [r7, #31]
}
 8005634:	4618      	mov	r0, r3
 8005636:	3720      	adds	r7, #32
 8005638:	46bd      	mov	sp, r7
 800563a:	bd80      	pop	{r7, pc}

0800563c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b08c      	sub	sp, #48	; 0x30
 8005640:	af02      	add	r7, sp, #8
 8005642:	60f8      	str	r0, [r7, #12]
 8005644:	60b9      	str	r1, [r7, #8]
 8005646:	4613      	mov	r3, r2
 8005648:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	785b      	ldrb	r3, [r3, #1]
 8005652:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8005654:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005658:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800565e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005662:	2b00      	cmp	r3, #0
 8005664:	d02d      	beq.n	80056c2 <USB_HC_StartXfer+0x86>
 8005666:	68bb      	ldr	r3, [r7, #8]
 8005668:	791b      	ldrb	r3, [r3, #4]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d129      	bne.n	80056c2 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800566e:	79fb      	ldrb	r3, [r7, #7]
 8005670:	2b01      	cmp	r3, #1
 8005672:	d117      	bne.n	80056a4 <USB_HC_StartXfer+0x68>
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	79db      	ldrb	r3, [r3, #7]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d003      	beq.n	8005684 <USB_HC_StartXfer+0x48>
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	79db      	ldrb	r3, [r3, #7]
 8005680:	2b02      	cmp	r3, #2
 8005682:	d10f      	bne.n	80056a4 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8005684:	69fb      	ldr	r3, [r7, #28]
 8005686:	015a      	lsls	r2, r3, #5
 8005688:	6a3b      	ldr	r3, [r7, #32]
 800568a:	4413      	add	r3, r2
 800568c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005690:	68db      	ldr	r3, [r3, #12]
 8005692:	69fa      	ldr	r2, [r7, #28]
 8005694:	0151      	lsls	r1, r2, #5
 8005696:	6a3a      	ldr	r2, [r7, #32]
 8005698:	440a      	add	r2, r1
 800569a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800569e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056a2:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 80056a4:	79fb      	ldrb	r3, [r7, #7]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d10b      	bne.n	80056c2 <USB_HC_StartXfer+0x86>
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	795b      	ldrb	r3, [r3, #5]
 80056ae:	2b01      	cmp	r3, #1
 80056b0:	d107      	bne.n	80056c2 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80056b2:	68bb      	ldr	r3, [r7, #8]
 80056b4:	785b      	ldrb	r3, [r3, #1]
 80056b6:	4619      	mov	r1, r3
 80056b8:	68f8      	ldr	r0, [r7, #12]
 80056ba:	f000 fa0f 	bl	8005adc <USB_DoPing>
      return HAL_OK;
 80056be:	2300      	movs	r3, #0
 80056c0:	e0f8      	b.n	80058b4 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80056c2:	68bb      	ldr	r3, [r7, #8]
 80056c4:	695b      	ldr	r3, [r3, #20]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d018      	beq.n	80056fc <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80056ca:	68bb      	ldr	r3, [r7, #8]
 80056cc:	695b      	ldr	r3, [r3, #20]
 80056ce:	68ba      	ldr	r2, [r7, #8]
 80056d0:	8912      	ldrh	r2, [r2, #8]
 80056d2:	4413      	add	r3, r2
 80056d4:	3b01      	subs	r3, #1
 80056d6:	68ba      	ldr	r2, [r7, #8]
 80056d8:	8912      	ldrh	r2, [r2, #8]
 80056da:	fbb3 f3f2 	udiv	r3, r3, r2
 80056de:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80056e0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80056e2:	8b7b      	ldrh	r3, [r7, #26]
 80056e4:	429a      	cmp	r2, r3
 80056e6:	d90b      	bls.n	8005700 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 80056e8:	8b7b      	ldrh	r3, [r7, #26]
 80056ea:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80056ec:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80056ee:	68ba      	ldr	r2, [r7, #8]
 80056f0:	8912      	ldrh	r2, [r2, #8]
 80056f2:	fb03 f202 	mul.w	r2, r3, r2
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	611a      	str	r2, [r3, #16]
 80056fa:	e001      	b.n	8005700 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 80056fc:	2301      	movs	r3, #1
 80056fe:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	78db      	ldrb	r3, [r3, #3]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d007      	beq.n	8005718 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005708:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800570a:	68ba      	ldr	r2, [r7, #8]
 800570c:	8912      	ldrh	r2, [r2, #8]
 800570e:	fb03 f202 	mul.w	r2, r3, r2
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	611a      	str	r2, [r3, #16]
 8005716:	e003      	b.n	8005720 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	695a      	ldr	r2, [r3, #20]
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	691b      	ldr	r3, [r3, #16]
 8005724:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005728:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800572a:	04d9      	lsls	r1, r3, #19
 800572c:	4b63      	ldr	r3, [pc, #396]	; (80058bc <USB_HC_StartXfer+0x280>)
 800572e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005730:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	7a9b      	ldrb	r3, [r3, #10]
 8005736:	075b      	lsls	r3, r3, #29
 8005738:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800573c:	69f9      	ldr	r1, [r7, #28]
 800573e:	0148      	lsls	r0, r1, #5
 8005740:	6a39      	ldr	r1, [r7, #32]
 8005742:	4401      	add	r1, r0
 8005744:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005748:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800574a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800574c:	79fb      	ldrb	r3, [r7, #7]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d009      	beq.n	8005766 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	68d9      	ldr	r1, [r3, #12]
 8005756:	69fb      	ldr	r3, [r7, #28]
 8005758:	015a      	lsls	r2, r3, #5
 800575a:	6a3b      	ldr	r3, [r7, #32]
 800575c:	4413      	add	r3, r2
 800575e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005762:	460a      	mov	r2, r1
 8005764:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005766:	6a3b      	ldr	r3, [r7, #32]
 8005768:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800576c:	689b      	ldr	r3, [r3, #8]
 800576e:	f003 0301 	and.w	r3, r3, #1
 8005772:	2b00      	cmp	r3, #0
 8005774:	bf0c      	ite	eq
 8005776:	2301      	moveq	r3, #1
 8005778:	2300      	movne	r3, #0
 800577a:	b2db      	uxtb	r3, r3
 800577c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800577e:	69fb      	ldr	r3, [r7, #28]
 8005780:	015a      	lsls	r2, r3, #5
 8005782:	6a3b      	ldr	r3, [r7, #32]
 8005784:	4413      	add	r3, r2
 8005786:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	69fa      	ldr	r2, [r7, #28]
 800578e:	0151      	lsls	r1, r2, #5
 8005790:	6a3a      	ldr	r2, [r7, #32]
 8005792:	440a      	add	r2, r1
 8005794:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005798:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800579c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800579e:	69fb      	ldr	r3, [r7, #28]
 80057a0:	015a      	lsls	r2, r3, #5
 80057a2:	6a3b      	ldr	r3, [r7, #32]
 80057a4:	4413      	add	r3, r2
 80057a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057aa:	681a      	ldr	r2, [r3, #0]
 80057ac:	7e7b      	ldrb	r3, [r7, #25]
 80057ae:	075b      	lsls	r3, r3, #29
 80057b0:	69f9      	ldr	r1, [r7, #28]
 80057b2:	0148      	lsls	r0, r1, #5
 80057b4:	6a39      	ldr	r1, [r7, #32]
 80057b6:	4401      	add	r1, r0
 80057b8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80057bc:	4313      	orrs	r3, r2
 80057be:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80057c0:	69fb      	ldr	r3, [r7, #28]
 80057c2:	015a      	lsls	r2, r3, #5
 80057c4:	6a3b      	ldr	r3, [r7, #32]
 80057c6:	4413      	add	r3, r2
 80057c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80057d0:	693b      	ldr	r3, [r7, #16]
 80057d2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80057d6:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	78db      	ldrb	r3, [r3, #3]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d004      	beq.n	80057ea <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80057e0:	693b      	ldr	r3, [r7, #16]
 80057e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057e6:	613b      	str	r3, [r7, #16]
 80057e8:	e003      	b.n	80057f2 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80057ea:	693b      	ldr	r3, [r7, #16]
 80057ec:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80057f0:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80057f2:	693b      	ldr	r3, [r7, #16]
 80057f4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80057f8:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80057fa:	69fb      	ldr	r3, [r7, #28]
 80057fc:	015a      	lsls	r2, r3, #5
 80057fe:	6a3b      	ldr	r3, [r7, #32]
 8005800:	4413      	add	r3, r2
 8005802:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005806:	461a      	mov	r2, r3
 8005808:	693b      	ldr	r3, [r7, #16]
 800580a:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800580c:	79fb      	ldrb	r3, [r7, #7]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d001      	beq.n	8005816 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8005812:	2300      	movs	r3, #0
 8005814:	e04e      	b.n	80058b4 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8005816:	68bb      	ldr	r3, [r7, #8]
 8005818:	78db      	ldrb	r3, [r3, #3]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d149      	bne.n	80058b2 <USB_HC_StartXfer+0x276>
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	695b      	ldr	r3, [r3, #20]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d045      	beq.n	80058b2 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	79db      	ldrb	r3, [r3, #7]
 800582a:	2b03      	cmp	r3, #3
 800582c:	d830      	bhi.n	8005890 <USB_HC_StartXfer+0x254>
 800582e:	a201      	add	r2, pc, #4	; (adr r2, 8005834 <USB_HC_StartXfer+0x1f8>)
 8005830:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005834:	08005845 	.word	0x08005845
 8005838:	08005869 	.word	0x08005869
 800583c:	08005845 	.word	0x08005845
 8005840:	08005869 	.word	0x08005869
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	695b      	ldr	r3, [r3, #20]
 8005848:	3303      	adds	r3, #3
 800584a:	089b      	lsrs	r3, r3, #2
 800584c:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800584e:	8afa      	ldrh	r2, [r7, #22]
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005854:	b29b      	uxth	r3, r3
 8005856:	429a      	cmp	r2, r3
 8005858:	d91c      	bls.n	8005894 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	699b      	ldr	r3, [r3, #24]
 800585e:	f043 0220 	orr.w	r2, r3, #32
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	619a      	str	r2, [r3, #24]
        }
        break;
 8005866:	e015      	b.n	8005894 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	695b      	ldr	r3, [r3, #20]
 800586c:	3303      	adds	r3, #3
 800586e:	089b      	lsrs	r3, r3, #2
 8005870:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8005872:	8afa      	ldrh	r2, [r7, #22]
 8005874:	6a3b      	ldr	r3, [r7, #32]
 8005876:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800587a:	691b      	ldr	r3, [r3, #16]
 800587c:	b29b      	uxth	r3, r3
 800587e:	429a      	cmp	r2, r3
 8005880:	d90a      	bls.n	8005898 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	699b      	ldr	r3, [r3, #24]
 8005886:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	619a      	str	r2, [r3, #24]
        }
        break;
 800588e:	e003      	b.n	8005898 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8005890:	bf00      	nop
 8005892:	e002      	b.n	800589a <USB_HC_StartXfer+0x25e>
        break;
 8005894:	bf00      	nop
 8005896:	e000      	b.n	800589a <USB_HC_StartXfer+0x25e>
        break;
 8005898:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	68d9      	ldr	r1, [r3, #12]
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	785a      	ldrb	r2, [r3, #1]
 80058a2:	68bb      	ldr	r3, [r7, #8]
 80058a4:	695b      	ldr	r3, [r3, #20]
 80058a6:	b29b      	uxth	r3, r3
 80058a8:	2000      	movs	r0, #0
 80058aa:	9000      	str	r0, [sp, #0]
 80058ac:	68f8      	ldr	r0, [r7, #12]
 80058ae:	f7ff fb5b 	bl	8004f68 <USB_WritePacket>
  }

  return HAL_OK;
 80058b2:	2300      	movs	r3, #0
}
 80058b4:	4618      	mov	r0, r3
 80058b6:	3728      	adds	r7, #40	; 0x28
 80058b8:	46bd      	mov	sp, r7
 80058ba:	bd80      	pop	{r7, pc}
 80058bc:	1ff80000 	.word	0x1ff80000

080058c0 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80058c0:	b480      	push	{r7}
 80058c2:	b085      	sub	sp, #20
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80058d2:	695b      	ldr	r3, [r3, #20]
 80058d4:	b29b      	uxth	r3, r3
}
 80058d6:	4618      	mov	r0, r3
 80058d8:	3714      	adds	r7, #20
 80058da:	46bd      	mov	sp, r7
 80058dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e0:	4770      	bx	lr

080058e2 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80058e2:	b480      	push	{r7}
 80058e4:	b089      	sub	sp, #36	; 0x24
 80058e6:	af00      	add	r7, sp, #0
 80058e8:	6078      	str	r0, [r7, #4]
 80058ea:	460b      	mov	r3, r1
 80058ec:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80058f2:	78fb      	ldrb	r3, [r7, #3]
 80058f4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80058f6:	2300      	movs	r3, #0
 80058f8:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80058fa:	69bb      	ldr	r3, [r7, #24]
 80058fc:	015a      	lsls	r2, r3, #5
 80058fe:	69fb      	ldr	r3, [r7, #28]
 8005900:	4413      	add	r3, r2
 8005902:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	0c9b      	lsrs	r3, r3, #18
 800590a:	f003 0303 	and.w	r3, r3, #3
 800590e:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8005910:	69bb      	ldr	r3, [r7, #24]
 8005912:	015a      	lsls	r2, r3, #5
 8005914:	69fb      	ldr	r3, [r7, #28]
 8005916:	4413      	add	r3, r2
 8005918:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	0fdb      	lsrs	r3, r3, #31
 8005920:	f003 0301 	and.w	r3, r3, #1
 8005924:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	689b      	ldr	r3, [r3, #8]
 800592a:	f003 0320 	and.w	r3, r3, #32
 800592e:	2b20      	cmp	r3, #32
 8005930:	d104      	bne.n	800593c <USB_HC_Halt+0x5a>
 8005932:	693b      	ldr	r3, [r7, #16]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d101      	bne.n	800593c <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8005938:	2300      	movs	r3, #0
 800593a:	e0c8      	b.n	8005ace <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800593c:	697b      	ldr	r3, [r7, #20]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d002      	beq.n	8005948 <USB_HC_Halt+0x66>
 8005942:	697b      	ldr	r3, [r7, #20]
 8005944:	2b02      	cmp	r3, #2
 8005946:	d163      	bne.n	8005a10 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005948:	69bb      	ldr	r3, [r7, #24]
 800594a:	015a      	lsls	r2, r3, #5
 800594c:	69fb      	ldr	r3, [r7, #28]
 800594e:	4413      	add	r3, r2
 8005950:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	69ba      	ldr	r2, [r7, #24]
 8005958:	0151      	lsls	r1, r2, #5
 800595a:	69fa      	ldr	r2, [r7, #28]
 800595c:	440a      	add	r2, r1
 800595e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005962:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005966:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	689b      	ldr	r3, [r3, #8]
 800596c:	f003 0320 	and.w	r3, r3, #32
 8005970:	2b00      	cmp	r3, #0
 8005972:	f040 80ab 	bne.w	8005acc <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800597a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800597e:	2b00      	cmp	r3, #0
 8005980:	d133      	bne.n	80059ea <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005982:	69bb      	ldr	r3, [r7, #24]
 8005984:	015a      	lsls	r2, r3, #5
 8005986:	69fb      	ldr	r3, [r7, #28]
 8005988:	4413      	add	r3, r2
 800598a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	69ba      	ldr	r2, [r7, #24]
 8005992:	0151      	lsls	r1, r2, #5
 8005994:	69fa      	ldr	r2, [r7, #28]
 8005996:	440a      	add	r2, r1
 8005998:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800599c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80059a0:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80059a2:	69bb      	ldr	r3, [r7, #24]
 80059a4:	015a      	lsls	r2, r3, #5
 80059a6:	69fb      	ldr	r3, [r7, #28]
 80059a8:	4413      	add	r3, r2
 80059aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	69ba      	ldr	r2, [r7, #24]
 80059b2:	0151      	lsls	r1, r2, #5
 80059b4:	69fa      	ldr	r2, [r7, #28]
 80059b6:	440a      	add	r2, r1
 80059b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80059bc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80059c0:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	3301      	adds	r3, #1
 80059c6:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80059ce:	d81d      	bhi.n	8005a0c <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80059d0:	69bb      	ldr	r3, [r7, #24]
 80059d2:	015a      	lsls	r2, r3, #5
 80059d4:	69fb      	ldr	r3, [r7, #28]
 80059d6:	4413      	add	r3, r2
 80059d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80059e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80059e6:	d0ec      	beq.n	80059c2 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80059e8:	e070      	b.n	8005acc <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80059ea:	69bb      	ldr	r3, [r7, #24]
 80059ec:	015a      	lsls	r2, r3, #5
 80059ee:	69fb      	ldr	r3, [r7, #28]
 80059f0:	4413      	add	r3, r2
 80059f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	69ba      	ldr	r2, [r7, #24]
 80059fa:	0151      	lsls	r1, r2, #5
 80059fc:	69fa      	ldr	r2, [r7, #28]
 80059fe:	440a      	add	r2, r1
 8005a00:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a04:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005a08:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005a0a:	e05f      	b.n	8005acc <USB_HC_Halt+0x1ea>
            break;
 8005a0c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005a0e:	e05d      	b.n	8005acc <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005a10:	69bb      	ldr	r3, [r7, #24]
 8005a12:	015a      	lsls	r2, r3, #5
 8005a14:	69fb      	ldr	r3, [r7, #28]
 8005a16:	4413      	add	r3, r2
 8005a18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	69ba      	ldr	r2, [r7, #24]
 8005a20:	0151      	lsls	r1, r2, #5
 8005a22:	69fa      	ldr	r2, [r7, #28]
 8005a24:	440a      	add	r2, r1
 8005a26:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a2a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005a2e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005a30:	69fb      	ldr	r3, [r7, #28]
 8005a32:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a36:	691b      	ldr	r3, [r3, #16]
 8005a38:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d133      	bne.n	8005aa8 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005a40:	69bb      	ldr	r3, [r7, #24]
 8005a42:	015a      	lsls	r2, r3, #5
 8005a44:	69fb      	ldr	r3, [r7, #28]
 8005a46:	4413      	add	r3, r2
 8005a48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	69ba      	ldr	r2, [r7, #24]
 8005a50:	0151      	lsls	r1, r2, #5
 8005a52:	69fa      	ldr	r2, [r7, #28]
 8005a54:	440a      	add	r2, r1
 8005a56:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a5a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005a5e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005a60:	69bb      	ldr	r3, [r7, #24]
 8005a62:	015a      	lsls	r2, r3, #5
 8005a64:	69fb      	ldr	r3, [r7, #28]
 8005a66:	4413      	add	r3, r2
 8005a68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	69ba      	ldr	r2, [r7, #24]
 8005a70:	0151      	lsls	r1, r2, #5
 8005a72:	69fa      	ldr	r2, [r7, #28]
 8005a74:	440a      	add	r2, r1
 8005a76:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005a7e:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	3301      	adds	r3, #1
 8005a84:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005a8c:	d81d      	bhi.n	8005aca <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005a8e:	69bb      	ldr	r3, [r7, #24]
 8005a90:	015a      	lsls	r2, r3, #5
 8005a92:	69fb      	ldr	r3, [r7, #28]
 8005a94:	4413      	add	r3, r2
 8005a96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005aa0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005aa4:	d0ec      	beq.n	8005a80 <USB_HC_Halt+0x19e>
 8005aa6:	e011      	b.n	8005acc <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005aa8:	69bb      	ldr	r3, [r7, #24]
 8005aaa:	015a      	lsls	r2, r3, #5
 8005aac:	69fb      	ldr	r3, [r7, #28]
 8005aae:	4413      	add	r3, r2
 8005ab0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	69ba      	ldr	r2, [r7, #24]
 8005ab8:	0151      	lsls	r1, r2, #5
 8005aba:	69fa      	ldr	r2, [r7, #28]
 8005abc:	440a      	add	r2, r1
 8005abe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ac2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005ac6:	6013      	str	r3, [r2, #0]
 8005ac8:	e000      	b.n	8005acc <USB_HC_Halt+0x1ea>
          break;
 8005aca:	bf00      	nop
    }
  }

  return HAL_OK;
 8005acc:	2300      	movs	r3, #0
}
 8005ace:	4618      	mov	r0, r3
 8005ad0:	3724      	adds	r7, #36	; 0x24
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad8:	4770      	bx	lr
	...

08005adc <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8005adc:	b480      	push	{r7}
 8005ade:	b087      	sub	sp, #28
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
 8005ae4:	460b      	mov	r3, r1
 8005ae6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8005aec:	78fb      	ldrb	r3, [r7, #3]
 8005aee:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8005af0:	2301      	movs	r3, #1
 8005af2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	04da      	lsls	r2, r3, #19
 8005af8:	4b15      	ldr	r3, [pc, #84]	; (8005b50 <USB_DoPing+0x74>)
 8005afa:	4013      	ands	r3, r2
 8005afc:	693a      	ldr	r2, [r7, #16]
 8005afe:	0151      	lsls	r1, r2, #5
 8005b00:	697a      	ldr	r2, [r7, #20]
 8005b02:	440a      	add	r2, r1
 8005b04:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b08:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005b0c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8005b0e:	693b      	ldr	r3, [r7, #16]
 8005b10:	015a      	lsls	r2, r3, #5
 8005b12:	697b      	ldr	r3, [r7, #20]
 8005b14:	4413      	add	r3, r2
 8005b16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005b1e:	68bb      	ldr	r3, [r7, #8]
 8005b20:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005b24:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005b2c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8005b2e:	693b      	ldr	r3, [r7, #16]
 8005b30:	015a      	lsls	r2, r3, #5
 8005b32:	697b      	ldr	r3, [r7, #20]
 8005b34:	4413      	add	r3, r2
 8005b36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b3a:	461a      	mov	r2, r3
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8005b40:	2300      	movs	r3, #0
}
 8005b42:	4618      	mov	r0, r3
 8005b44:	371c      	adds	r7, #28
 8005b46:	46bd      	mov	sp, r7
 8005b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4c:	4770      	bx	lr
 8005b4e:	bf00      	nop
 8005b50:	1ff80000 	.word	0x1ff80000

08005b54 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b088      	sub	sp, #32
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8005b64:	2300      	movs	r3, #0
 8005b66:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8005b68:	6878      	ldr	r0, [r7, #4]
 8005b6a:	f7ff f93c 	bl	8004de6 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005b6e:	2110      	movs	r1, #16
 8005b70:	6878      	ldr	r0, [r7, #4]
 8005b72:	f7ff f995 	bl	8004ea0 <USB_FlushTxFifo>
 8005b76:	4603      	mov	r3, r0
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d001      	beq.n	8005b80 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005b80:	6878      	ldr	r0, [r7, #4]
 8005b82:	f7ff f9c1 	bl	8004f08 <USB_FlushRxFifo>
 8005b86:	4603      	mov	r3, r0
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d001      	beq.n	8005b90 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8005b90:	2300      	movs	r3, #0
 8005b92:	61bb      	str	r3, [r7, #24]
 8005b94:	e01f      	b.n	8005bd6 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8005b96:	69bb      	ldr	r3, [r7, #24]
 8005b98:	015a      	lsls	r2, r3, #5
 8005b9a:	697b      	ldr	r3, [r7, #20]
 8005b9c:	4413      	add	r3, r2
 8005b9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8005ba6:	693b      	ldr	r3, [r7, #16]
 8005ba8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005bac:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8005bae:	693b      	ldr	r3, [r7, #16]
 8005bb0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005bb4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005bb6:	693b      	ldr	r3, [r7, #16]
 8005bb8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005bbc:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8005bbe:	69bb      	ldr	r3, [r7, #24]
 8005bc0:	015a      	lsls	r2, r3, #5
 8005bc2:	697b      	ldr	r3, [r7, #20]
 8005bc4:	4413      	add	r3, r2
 8005bc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bca:	461a      	mov	r2, r3
 8005bcc:	693b      	ldr	r3, [r7, #16]
 8005bce:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8005bd0:	69bb      	ldr	r3, [r7, #24]
 8005bd2:	3301      	adds	r3, #1
 8005bd4:	61bb      	str	r3, [r7, #24]
 8005bd6:	69bb      	ldr	r3, [r7, #24]
 8005bd8:	2b0f      	cmp	r3, #15
 8005bda:	d9dc      	bls.n	8005b96 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8005bdc:	2300      	movs	r3, #0
 8005bde:	61bb      	str	r3, [r7, #24]
 8005be0:	e034      	b.n	8005c4c <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8005be2:	69bb      	ldr	r3, [r7, #24]
 8005be4:	015a      	lsls	r2, r3, #5
 8005be6:	697b      	ldr	r3, [r7, #20]
 8005be8:	4413      	add	r3, r2
 8005bea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8005bf2:	693b      	ldr	r3, [r7, #16]
 8005bf4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005bf8:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8005bfa:	693b      	ldr	r3, [r7, #16]
 8005bfc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005c00:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005c02:	693b      	ldr	r3, [r7, #16]
 8005c04:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005c08:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8005c0a:	69bb      	ldr	r3, [r7, #24]
 8005c0c:	015a      	lsls	r2, r3, #5
 8005c0e:	697b      	ldr	r3, [r7, #20]
 8005c10:	4413      	add	r3, r2
 8005c12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c16:	461a      	mov	r2, r3
 8005c18:	693b      	ldr	r3, [r7, #16]
 8005c1a:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	3301      	adds	r3, #1
 8005c20:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005c28:	d80c      	bhi.n	8005c44 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005c2a:	69bb      	ldr	r3, [r7, #24]
 8005c2c:	015a      	lsls	r2, r3, #5
 8005c2e:	697b      	ldr	r3, [r7, #20]
 8005c30:	4413      	add	r3, r2
 8005c32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005c3c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c40:	d0ec      	beq.n	8005c1c <USB_StopHost+0xc8>
 8005c42:	e000      	b.n	8005c46 <USB_StopHost+0xf2>
        break;
 8005c44:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8005c46:	69bb      	ldr	r3, [r7, #24]
 8005c48:	3301      	adds	r3, #1
 8005c4a:	61bb      	str	r3, [r7, #24]
 8005c4c:	69bb      	ldr	r3, [r7, #24]
 8005c4e:	2b0f      	cmp	r3, #15
 8005c50:	d9c7      	bls.n	8005be2 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8005c52:	697b      	ldr	r3, [r7, #20]
 8005c54:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c58:	461a      	mov	r2, r3
 8005c5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005c5e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005c66:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8005c68:	6878      	ldr	r0, [r7, #4]
 8005c6a:	f7ff f8ab 	bl	8004dc4 <USB_EnableGlobalInt>

  return ret;
 8005c6e:	7ffb      	ldrb	r3, [r7, #31]
}
 8005c70:	4618      	mov	r0, r3
 8005c72:	3720      	adds	r7, #32
 8005c74:	46bd      	mov	sp, r7
 8005c76:	bd80      	pop	{r7, pc}

08005c78 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8005c78:	b590      	push	{r4, r7, lr}
 8005c7a:	b089      	sub	sp, #36	; 0x24
 8005c7c:	af04      	add	r7, sp, #16
 8005c7e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8005c80:	2301      	movs	r3, #1
 8005c82:	2202      	movs	r2, #2
 8005c84:	2102      	movs	r1, #2
 8005c86:	6878      	ldr	r0, [r7, #4]
 8005c88:	f000 fc66 	bl	8006558 <USBH_FindInterface>
 8005c8c:	4603      	mov	r3, r0
 8005c8e:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8005c90:	7bfb      	ldrb	r3, [r7, #15]
 8005c92:	2bff      	cmp	r3, #255	; 0xff
 8005c94:	d002      	beq.n	8005c9c <USBH_CDC_InterfaceInit+0x24>
 8005c96:	7bfb      	ldrb	r3, [r7, #15]
 8005c98:	2b01      	cmp	r3, #1
 8005c9a:	d901      	bls.n	8005ca0 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005c9c:	2302      	movs	r3, #2
 8005c9e:	e13d      	b.n	8005f1c <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8005ca0:	7bfb      	ldrb	r3, [r7, #15]
 8005ca2:	4619      	mov	r1, r3
 8005ca4:	6878      	ldr	r0, [r7, #4]
 8005ca6:	f000 fc3b 	bl	8006520 <USBH_SelectInterface>
 8005caa:	4603      	mov	r3, r0
 8005cac:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8005cae:	7bbb      	ldrb	r3, [r7, #14]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d001      	beq.n	8005cb8 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8005cb4:	2302      	movs	r3, #2
 8005cb6:	e131      	b.n	8005f1c <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8005cbe:	2050      	movs	r0, #80	; 0x50
 8005cc0:	f001 fae8 	bl	8007294 <malloc>
 8005cc4:	4603      	mov	r3, r0
 8005cc6:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005cce:	69db      	ldr	r3, [r3, #28]
 8005cd0:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8005cd2:	68bb      	ldr	r3, [r7, #8]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d101      	bne.n	8005cdc <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8005cd8:	2302      	movs	r3, #2
 8005cda:	e11f      	b.n	8005f1c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8005cdc:	2250      	movs	r2, #80	; 0x50
 8005cde:	2100      	movs	r1, #0
 8005ce0:	68b8      	ldr	r0, [r7, #8]
 8005ce2:	f001 fb93 	bl	800740c <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8005ce6:	7bfb      	ldrb	r3, [r7, #15]
 8005ce8:	687a      	ldr	r2, [r7, #4]
 8005cea:	211a      	movs	r1, #26
 8005cec:	fb01 f303 	mul.w	r3, r1, r3
 8005cf0:	4413      	add	r3, r2
 8005cf2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005cf6:	781b      	ldrb	r3, [r3, #0]
 8005cf8:	b25b      	sxtb	r3, r3
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	da15      	bge.n	8005d2a <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005cfe:	7bfb      	ldrb	r3, [r7, #15]
 8005d00:	687a      	ldr	r2, [r7, #4]
 8005d02:	211a      	movs	r1, #26
 8005d04:	fb01 f303 	mul.w	r3, r1, r3
 8005d08:	4413      	add	r3, r2
 8005d0a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005d0e:	781a      	ldrb	r2, [r3, #0]
 8005d10:	68bb      	ldr	r3, [r7, #8]
 8005d12:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005d14:	7bfb      	ldrb	r3, [r7, #15]
 8005d16:	687a      	ldr	r2, [r7, #4]
 8005d18:	211a      	movs	r1, #26
 8005d1a:	fb01 f303 	mul.w	r3, r1, r3
 8005d1e:	4413      	add	r3, r2
 8005d20:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005d24:	881a      	ldrh	r2, [r3, #0]
 8005d26:	68bb      	ldr	r3, [r7, #8]
 8005d28:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	785b      	ldrb	r3, [r3, #1]
 8005d2e:	4619      	mov	r1, r3
 8005d30:	6878      	ldr	r0, [r7, #4]
 8005d32:	f000 ff9c 	bl	8006c6e <USBH_AllocPipe>
 8005d36:	4603      	mov	r3, r0
 8005d38:	461a      	mov	r2, r3
 8005d3a:	68bb      	ldr	r3, [r7, #8]
 8005d3c:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	7819      	ldrb	r1, [r3, #0]
 8005d42:	68bb      	ldr	r3, [r7, #8]
 8005d44:	7858      	ldrb	r0, [r3, #1]
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005d52:	68ba      	ldr	r2, [r7, #8]
 8005d54:	8952      	ldrh	r2, [r2, #10]
 8005d56:	9202      	str	r2, [sp, #8]
 8005d58:	2203      	movs	r2, #3
 8005d5a:	9201      	str	r2, [sp, #4]
 8005d5c:	9300      	str	r3, [sp, #0]
 8005d5e:	4623      	mov	r3, r4
 8005d60:	4602      	mov	r2, r0
 8005d62:	6878      	ldr	r0, [r7, #4]
 8005d64:	f000 ff54 	bl	8006c10 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8005d68:	68bb      	ldr	r3, [r7, #8]
 8005d6a:	781b      	ldrb	r3, [r3, #0]
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	4619      	mov	r1, r3
 8005d70:	6878      	ldr	r0, [r7, #4]
 8005d72:	f001 fa17 	bl	80071a4 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8005d76:	2300      	movs	r3, #0
 8005d78:	2200      	movs	r2, #0
 8005d7a:	210a      	movs	r1, #10
 8005d7c:	6878      	ldr	r0, [r7, #4]
 8005d7e:	f000 fbeb 	bl	8006558 <USBH_FindInterface>
 8005d82:	4603      	mov	r3, r0
 8005d84:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8005d86:	7bfb      	ldrb	r3, [r7, #15]
 8005d88:	2bff      	cmp	r3, #255	; 0xff
 8005d8a:	d002      	beq.n	8005d92 <USBH_CDC_InterfaceInit+0x11a>
 8005d8c:	7bfb      	ldrb	r3, [r7, #15]
 8005d8e:	2b01      	cmp	r3, #1
 8005d90:	d901      	bls.n	8005d96 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005d92:	2302      	movs	r3, #2
 8005d94:	e0c2      	b.n	8005f1c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8005d96:	7bfb      	ldrb	r3, [r7, #15]
 8005d98:	687a      	ldr	r2, [r7, #4]
 8005d9a:	211a      	movs	r1, #26
 8005d9c:	fb01 f303 	mul.w	r3, r1, r3
 8005da0:	4413      	add	r3, r2
 8005da2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005da6:	781b      	ldrb	r3, [r3, #0]
 8005da8:	b25b      	sxtb	r3, r3
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	da16      	bge.n	8005ddc <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005dae:	7bfb      	ldrb	r3, [r7, #15]
 8005db0:	687a      	ldr	r2, [r7, #4]
 8005db2:	211a      	movs	r1, #26
 8005db4:	fb01 f303 	mul.w	r3, r1, r3
 8005db8:	4413      	add	r3, r2
 8005dba:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005dbe:	781a      	ldrb	r2, [r3, #0]
 8005dc0:	68bb      	ldr	r3, [r7, #8]
 8005dc2:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005dc4:	7bfb      	ldrb	r3, [r7, #15]
 8005dc6:	687a      	ldr	r2, [r7, #4]
 8005dc8:	211a      	movs	r1, #26
 8005dca:	fb01 f303 	mul.w	r3, r1, r3
 8005dce:	4413      	add	r3, r2
 8005dd0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005dd4:	881a      	ldrh	r2, [r3, #0]
 8005dd6:	68bb      	ldr	r3, [r7, #8]
 8005dd8:	835a      	strh	r2, [r3, #26]
 8005dda:	e015      	b.n	8005e08 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005ddc:	7bfb      	ldrb	r3, [r7, #15]
 8005dde:	687a      	ldr	r2, [r7, #4]
 8005de0:	211a      	movs	r1, #26
 8005de2:	fb01 f303 	mul.w	r3, r1, r3
 8005de6:	4413      	add	r3, r2
 8005de8:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005dec:	781a      	ldrb	r2, [r3, #0]
 8005dee:	68bb      	ldr	r3, [r7, #8]
 8005df0:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005df2:	7bfb      	ldrb	r3, [r7, #15]
 8005df4:	687a      	ldr	r2, [r7, #4]
 8005df6:	211a      	movs	r1, #26
 8005df8:	fb01 f303 	mul.w	r3, r1, r3
 8005dfc:	4413      	add	r3, r2
 8005dfe:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005e02:	881a      	ldrh	r2, [r3, #0]
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8005e08:	7bfb      	ldrb	r3, [r7, #15]
 8005e0a:	687a      	ldr	r2, [r7, #4]
 8005e0c:	211a      	movs	r1, #26
 8005e0e:	fb01 f303 	mul.w	r3, r1, r3
 8005e12:	4413      	add	r3, r2
 8005e14:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005e18:	781b      	ldrb	r3, [r3, #0]
 8005e1a:	b25b      	sxtb	r3, r3
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	da16      	bge.n	8005e4e <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005e20:	7bfb      	ldrb	r3, [r7, #15]
 8005e22:	687a      	ldr	r2, [r7, #4]
 8005e24:	211a      	movs	r1, #26
 8005e26:	fb01 f303 	mul.w	r3, r1, r3
 8005e2a:	4413      	add	r3, r2
 8005e2c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005e30:	781a      	ldrb	r2, [r3, #0]
 8005e32:	68bb      	ldr	r3, [r7, #8]
 8005e34:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005e36:	7bfb      	ldrb	r3, [r7, #15]
 8005e38:	687a      	ldr	r2, [r7, #4]
 8005e3a:	211a      	movs	r1, #26
 8005e3c:	fb01 f303 	mul.w	r3, r1, r3
 8005e40:	4413      	add	r3, r2
 8005e42:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8005e46:	881a      	ldrh	r2, [r3, #0]
 8005e48:	68bb      	ldr	r3, [r7, #8]
 8005e4a:	835a      	strh	r2, [r3, #26]
 8005e4c:	e015      	b.n	8005e7a <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005e4e:	7bfb      	ldrb	r3, [r7, #15]
 8005e50:	687a      	ldr	r2, [r7, #4]
 8005e52:	211a      	movs	r1, #26
 8005e54:	fb01 f303 	mul.w	r3, r1, r3
 8005e58:	4413      	add	r3, r2
 8005e5a:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005e5e:	781a      	ldrb	r2, [r3, #0]
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005e64:	7bfb      	ldrb	r3, [r7, #15]
 8005e66:	687a      	ldr	r2, [r7, #4]
 8005e68:	211a      	movs	r1, #26
 8005e6a:	fb01 f303 	mul.w	r3, r1, r3
 8005e6e:	4413      	add	r3, r2
 8005e70:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8005e74:	881a      	ldrh	r2, [r3, #0]
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8005e7a:	68bb      	ldr	r3, [r7, #8]
 8005e7c:	7b9b      	ldrb	r3, [r3, #14]
 8005e7e:	4619      	mov	r1, r3
 8005e80:	6878      	ldr	r0, [r7, #4]
 8005e82:	f000 fef4 	bl	8006c6e <USBH_AllocPipe>
 8005e86:	4603      	mov	r3, r0
 8005e88:	461a      	mov	r2, r3
 8005e8a:	68bb      	ldr	r3, [r7, #8]
 8005e8c:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8005e8e:	68bb      	ldr	r3, [r7, #8]
 8005e90:	7bdb      	ldrb	r3, [r3, #15]
 8005e92:	4619      	mov	r1, r3
 8005e94:	6878      	ldr	r0, [r7, #4]
 8005e96:	f000 feea 	bl	8006c6e <USBH_AllocPipe>
 8005e9a:	4603      	mov	r3, r0
 8005e9c:	461a      	mov	r2, r3
 8005e9e:	68bb      	ldr	r3, [r7, #8]
 8005ea0:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	7b59      	ldrb	r1, [r3, #13]
 8005ea6:	68bb      	ldr	r3, [r7, #8]
 8005ea8:	7b98      	ldrb	r0, [r3, #14]
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005eb6:	68ba      	ldr	r2, [r7, #8]
 8005eb8:	8b12      	ldrh	r2, [r2, #24]
 8005eba:	9202      	str	r2, [sp, #8]
 8005ebc:	2202      	movs	r2, #2
 8005ebe:	9201      	str	r2, [sp, #4]
 8005ec0:	9300      	str	r3, [sp, #0]
 8005ec2:	4623      	mov	r3, r4
 8005ec4:	4602      	mov	r2, r0
 8005ec6:	6878      	ldr	r0, [r7, #4]
 8005ec8:	f000 fea2 	bl	8006c10 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	7b19      	ldrb	r1, [r3, #12]
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	7bd8      	ldrb	r0, [r3, #15]
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005ee0:	68ba      	ldr	r2, [r7, #8]
 8005ee2:	8b52      	ldrh	r2, [r2, #26]
 8005ee4:	9202      	str	r2, [sp, #8]
 8005ee6:	2202      	movs	r2, #2
 8005ee8:	9201      	str	r2, [sp, #4]
 8005eea:	9300      	str	r3, [sp, #0]
 8005eec:	4623      	mov	r3, r4
 8005eee:	4602      	mov	r2, r0
 8005ef0:	6878      	ldr	r0, [r7, #4]
 8005ef2:	f000 fe8d 	bl	8006c10 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8005ef6:	68bb      	ldr	r3, [r7, #8]
 8005ef8:	2200      	movs	r2, #0
 8005efa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8005efe:	68bb      	ldr	r3, [r7, #8]
 8005f00:	7b5b      	ldrb	r3, [r3, #13]
 8005f02:	2200      	movs	r2, #0
 8005f04:	4619      	mov	r1, r3
 8005f06:	6878      	ldr	r0, [r7, #4]
 8005f08:	f001 f94c 	bl	80071a4 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	7b1b      	ldrb	r3, [r3, #12]
 8005f10:	2200      	movs	r2, #0
 8005f12:	4619      	mov	r1, r3
 8005f14:	6878      	ldr	r0, [r7, #4]
 8005f16:	f001 f945 	bl	80071a4 <USBH_LL_SetToggle>

  return USBH_OK;
 8005f1a:	2300      	movs	r3, #0
}
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	3714      	adds	r7, #20
 8005f20:	46bd      	mov	sp, r7
 8005f22:	bd90      	pop	{r4, r7, pc}

08005f24 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b084      	sub	sp, #16
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005f32:	69db      	ldr	r3, [r3, #28]
 8005f34:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	781b      	ldrb	r3, [r3, #0]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d00e      	beq.n	8005f5c <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	781b      	ldrb	r3, [r3, #0]
 8005f42:	4619      	mov	r1, r3
 8005f44:	6878      	ldr	r0, [r7, #4]
 8005f46:	f000 fe82 	bl	8006c4e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	781b      	ldrb	r3, [r3, #0]
 8005f4e:	4619      	mov	r1, r3
 8005f50:	6878      	ldr	r0, [r7, #4]
 8005f52:	f000 fead 	bl	8006cb0 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	2200      	movs	r2, #0
 8005f5a:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	7b1b      	ldrb	r3, [r3, #12]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d00e      	beq.n	8005f82 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	7b1b      	ldrb	r3, [r3, #12]
 8005f68:	4619      	mov	r1, r3
 8005f6a:	6878      	ldr	r0, [r7, #4]
 8005f6c:	f000 fe6f 	bl	8006c4e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	7b1b      	ldrb	r3, [r3, #12]
 8005f74:	4619      	mov	r1, r3
 8005f76:	6878      	ldr	r0, [r7, #4]
 8005f78:	f000 fe9a 	bl	8006cb0 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	2200      	movs	r2, #0
 8005f80:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	7b5b      	ldrb	r3, [r3, #13]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d00e      	beq.n	8005fa8 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	7b5b      	ldrb	r3, [r3, #13]
 8005f8e:	4619      	mov	r1, r3
 8005f90:	6878      	ldr	r0, [r7, #4]
 8005f92:	f000 fe5c 	bl	8006c4e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	7b5b      	ldrb	r3, [r3, #13]
 8005f9a:	4619      	mov	r1, r3
 8005f9c:	6878      	ldr	r0, [r7, #4]
 8005f9e:	f000 fe87 	bl	8006cb0 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005fae:	69db      	ldr	r3, [r3, #28]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d00b      	beq.n	8005fcc <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005fba:	69db      	ldr	r3, [r3, #28]
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	f001 f971 	bl	80072a4 <free>
    phost->pActiveClass->pData = 0U;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005fc8:	2200      	movs	r2, #0
 8005fca:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8005fcc:	2300      	movs	r3, #0
}
 8005fce:	4618      	mov	r0, r3
 8005fd0:	3710      	adds	r7, #16
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	bd80      	pop	{r7, pc}

08005fd6 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8005fd6:	b580      	push	{r7, lr}
 8005fd8:	b084      	sub	sp, #16
 8005fda:	af00      	add	r7, sp, #0
 8005fdc:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005fe4:	69db      	ldr	r3, [r3, #28]
 8005fe6:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	3340      	adds	r3, #64	; 0x40
 8005fec:	4619      	mov	r1, r3
 8005fee:	6878      	ldr	r0, [r7, #4]
 8005ff0:	f000 f8b1 	bl	8006156 <GetLineCoding>
 8005ff4:	4603      	mov	r3, r0
 8005ff6:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8005ff8:	7afb      	ldrb	r3, [r7, #11]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d105      	bne.n	800600a <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006004:	2102      	movs	r1, #2
 8006006:	6878      	ldr	r0, [r7, #4]
 8006008:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800600a:	7afb      	ldrb	r3, [r7, #11]
}
 800600c:	4618      	mov	r0, r3
 800600e:	3710      	adds	r7, #16
 8006010:	46bd      	mov	sp, r7
 8006012:	bd80      	pop	{r7, pc}

08006014 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006014:	b580      	push	{r7, lr}
 8006016:	b084      	sub	sp, #16
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800601c:	2301      	movs	r3, #1
 800601e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006020:	2300      	movs	r3, #0
 8006022:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800602a:	69db      	ldr	r3, [r3, #28]
 800602c:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800602e:	68bb      	ldr	r3, [r7, #8]
 8006030:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006034:	2b04      	cmp	r3, #4
 8006036:	d877      	bhi.n	8006128 <USBH_CDC_Process+0x114>
 8006038:	a201      	add	r2, pc, #4	; (adr r2, 8006040 <USBH_CDC_Process+0x2c>)
 800603a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800603e:	bf00      	nop
 8006040:	08006055 	.word	0x08006055
 8006044:	0800605b 	.word	0x0800605b
 8006048:	0800608b 	.word	0x0800608b
 800604c:	080060ff 	.word	0x080060ff
 8006050:	0800610d 	.word	0x0800610d
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006054:	2300      	movs	r3, #0
 8006056:	73fb      	strb	r3, [r7, #15]
      break;
 8006058:	e06d      	b.n	8006136 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800605a:	68bb      	ldr	r3, [r7, #8]
 800605c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800605e:	4619      	mov	r1, r3
 8006060:	6878      	ldr	r0, [r7, #4]
 8006062:	f000 f897 	bl	8006194 <SetLineCoding>
 8006066:	4603      	mov	r3, r0
 8006068:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800606a:	7bbb      	ldrb	r3, [r7, #14]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d104      	bne.n	800607a <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006070:	68bb      	ldr	r3, [r7, #8]
 8006072:	2202      	movs	r2, #2
 8006074:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006078:	e058      	b.n	800612c <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800607a:	7bbb      	ldrb	r3, [r7, #14]
 800607c:	2b01      	cmp	r3, #1
 800607e:	d055      	beq.n	800612c <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	2204      	movs	r2, #4
 8006084:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006088:	e050      	b.n	800612c <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800608a:	68bb      	ldr	r3, [r7, #8]
 800608c:	3340      	adds	r3, #64	; 0x40
 800608e:	4619      	mov	r1, r3
 8006090:	6878      	ldr	r0, [r7, #4]
 8006092:	f000 f860 	bl	8006156 <GetLineCoding>
 8006096:	4603      	mov	r3, r0
 8006098:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800609a:	7bbb      	ldrb	r3, [r7, #14]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d126      	bne.n	80060ee <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	2200      	movs	r2, #0
 80060a4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80060a8:	68bb      	ldr	r3, [r7, #8]
 80060aa:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80060ae:	68bb      	ldr	r3, [r7, #8]
 80060b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80060b2:	791b      	ldrb	r3, [r3, #4]
 80060b4:	429a      	cmp	r2, r3
 80060b6:	d13b      	bne.n	8006130 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80060b8:	68bb      	ldr	r3, [r7, #8]
 80060ba:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80060c2:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80060c4:	429a      	cmp	r2, r3
 80060c6:	d133      	bne.n	8006130 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80060ce:	68bb      	ldr	r3, [r7, #8]
 80060d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80060d2:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80060d4:	429a      	cmp	r2, r3
 80060d6:	d12b      	bne.n	8006130 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80060d8:	68bb      	ldr	r3, [r7, #8]
 80060da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80060e0:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80060e2:	429a      	cmp	r2, r3
 80060e4:	d124      	bne.n	8006130 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80060e6:	6878      	ldr	r0, [r7, #4]
 80060e8:	f000 f958 	bl	800639c <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80060ec:	e020      	b.n	8006130 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80060ee:	7bbb      	ldrb	r3, [r7, #14]
 80060f0:	2b01      	cmp	r3, #1
 80060f2:	d01d      	beq.n	8006130 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80060f4:	68bb      	ldr	r3, [r7, #8]
 80060f6:	2204      	movs	r2, #4
 80060f8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80060fc:	e018      	b.n	8006130 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80060fe:	6878      	ldr	r0, [r7, #4]
 8006100:	f000 f867 	bl	80061d2 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006104:	6878      	ldr	r0, [r7, #4]
 8006106:	f000 f8da 	bl	80062be <CDC_ProcessReception>
      break;
 800610a:	e014      	b.n	8006136 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800610c:	2100      	movs	r1, #0
 800610e:	6878      	ldr	r0, [r7, #4]
 8006110:	f000 fb08 	bl	8006724 <USBH_ClrFeature>
 8006114:	4603      	mov	r3, r0
 8006116:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006118:	7bbb      	ldrb	r3, [r7, #14]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d10a      	bne.n	8006134 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800611e:	68bb      	ldr	r3, [r7, #8]
 8006120:	2200      	movs	r2, #0
 8006122:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8006126:	e005      	b.n	8006134 <USBH_CDC_Process+0x120>

    default:
      break;
 8006128:	bf00      	nop
 800612a:	e004      	b.n	8006136 <USBH_CDC_Process+0x122>
      break;
 800612c:	bf00      	nop
 800612e:	e002      	b.n	8006136 <USBH_CDC_Process+0x122>
      break;
 8006130:	bf00      	nop
 8006132:	e000      	b.n	8006136 <USBH_CDC_Process+0x122>
      break;
 8006134:	bf00      	nop

  }

  return status;
 8006136:	7bfb      	ldrb	r3, [r7, #15]
}
 8006138:	4618      	mov	r0, r3
 800613a:	3710      	adds	r7, #16
 800613c:	46bd      	mov	sp, r7
 800613e:	bd80      	pop	{r7, pc}

08006140 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006140:	b480      	push	{r7}
 8006142:	b083      	sub	sp, #12
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006148:	2300      	movs	r3, #0
}
 800614a:	4618      	mov	r0, r3
 800614c:	370c      	adds	r7, #12
 800614e:	46bd      	mov	sp, r7
 8006150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006154:	4770      	bx	lr

08006156 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006156:	b580      	push	{r7, lr}
 8006158:	b082      	sub	sp, #8
 800615a:	af00      	add	r7, sp, #0
 800615c:	6078      	str	r0, [r7, #4]
 800615e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	22a1      	movs	r2, #161	; 0xa1
 8006164:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2221      	movs	r2, #33	; 0x21
 800616a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2200      	movs	r2, #0
 8006170:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2200      	movs	r2, #0
 8006176:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2207      	movs	r2, #7
 800617c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	2207      	movs	r2, #7
 8006182:	4619      	mov	r1, r3
 8006184:	6878      	ldr	r0, [r7, #4]
 8006186:	f000 faf1 	bl	800676c <USBH_CtlReq>
 800618a:	4603      	mov	r3, r0
}
 800618c:	4618      	mov	r0, r3
 800618e:	3708      	adds	r7, #8
 8006190:	46bd      	mov	sp, r7
 8006192:	bd80      	pop	{r7, pc}

08006194 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b082      	sub	sp, #8
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
 800619c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2221      	movs	r2, #33	; 0x21
 80061a2:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2220      	movs	r2, #32
 80061a8:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2200      	movs	r2, #0
 80061ae:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2200      	movs	r2, #0
 80061b4:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2207      	movs	r2, #7
 80061ba:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	2207      	movs	r2, #7
 80061c0:	4619      	mov	r1, r3
 80061c2:	6878      	ldr	r0, [r7, #4]
 80061c4:	f000 fad2 	bl	800676c <USBH_CtlReq>
 80061c8:	4603      	mov	r3, r0
}
 80061ca:	4618      	mov	r0, r3
 80061cc:	3708      	adds	r7, #8
 80061ce:	46bd      	mov	sp, r7
 80061d0:	bd80      	pop	{r7, pc}

080061d2 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80061d2:	b580      	push	{r7, lr}
 80061d4:	b086      	sub	sp, #24
 80061d6:	af02      	add	r7, sp, #8
 80061d8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80061e0:	69db      	ldr	r3, [r3, #28]
 80061e2:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80061e4:	2300      	movs	r3, #0
 80061e6:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80061ee:	2b01      	cmp	r3, #1
 80061f0:	d002      	beq.n	80061f8 <CDC_ProcessTransmission+0x26>
 80061f2:	2b02      	cmp	r3, #2
 80061f4:	d023      	beq.n	800623e <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80061f6:	e05e      	b.n	80062b6 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061fc:	68fa      	ldr	r2, [r7, #12]
 80061fe:	8b12      	ldrh	r2, [r2, #24]
 8006200:	4293      	cmp	r3, r2
 8006202:	d90b      	bls.n	800621c <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	69d9      	ldr	r1, [r3, #28]
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	8b1a      	ldrh	r2, [r3, #24]
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	7b5b      	ldrb	r3, [r3, #13]
 8006210:	2001      	movs	r0, #1
 8006212:	9000      	str	r0, [sp, #0]
 8006214:	6878      	ldr	r0, [r7, #4]
 8006216:	f000 fcb8 	bl	8006b8a <USBH_BulkSendData>
 800621a:	e00b      	b.n	8006234 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8006224:	b29a      	uxth	r2, r3
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	7b5b      	ldrb	r3, [r3, #13]
 800622a:	2001      	movs	r0, #1
 800622c:	9000      	str	r0, [sp, #0]
 800622e:	6878      	ldr	r0, [r7, #4]
 8006230:	f000 fcab 	bl	8006b8a <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	2202      	movs	r2, #2
 8006238:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800623c:	e03b      	b.n	80062b6 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	7b5b      	ldrb	r3, [r3, #13]
 8006242:	4619      	mov	r1, r3
 8006244:	6878      	ldr	r0, [r7, #4]
 8006246:	f000 ff83 	bl	8007150 <USBH_LL_GetURBState>
 800624a:	4603      	mov	r3, r0
 800624c:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800624e:	7afb      	ldrb	r3, [r7, #11]
 8006250:	2b01      	cmp	r3, #1
 8006252:	d128      	bne.n	80062a6 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006258:	68fa      	ldr	r2, [r7, #12]
 800625a:	8b12      	ldrh	r2, [r2, #24]
 800625c:	4293      	cmp	r3, r2
 800625e:	d90e      	bls.n	800627e <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006264:	68fa      	ldr	r2, [r7, #12]
 8006266:	8b12      	ldrh	r2, [r2, #24]
 8006268:	1a9a      	subs	r2, r3, r2
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	69db      	ldr	r3, [r3, #28]
 8006272:	68fa      	ldr	r2, [r7, #12]
 8006274:	8b12      	ldrh	r2, [r2, #24]
 8006276:	441a      	add	r2, r3
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	61da      	str	r2, [r3, #28]
 800627c:	e002      	b.n	8006284 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	2200      	movs	r2, #0
 8006282:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006288:	2b00      	cmp	r3, #0
 800628a:	d004      	beq.n	8006296 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	2201      	movs	r2, #1
 8006290:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006294:	e00e      	b.n	80062b4 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	2200      	movs	r2, #0
 800629a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800629e:	6878      	ldr	r0, [r7, #4]
 80062a0:	f000 f868 	bl	8006374 <USBH_CDC_TransmitCallback>
      break;
 80062a4:	e006      	b.n	80062b4 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 80062a6:	7afb      	ldrb	r3, [r7, #11]
 80062a8:	2b02      	cmp	r3, #2
 80062aa:	d103      	bne.n	80062b4 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	2201      	movs	r2, #1
 80062b0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80062b4:	bf00      	nop
  }
}
 80062b6:	bf00      	nop
 80062b8:	3710      	adds	r7, #16
 80062ba:	46bd      	mov	sp, r7
 80062bc:	bd80      	pop	{r7, pc}

080062be <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80062be:	b580      	push	{r7, lr}
 80062c0:	b086      	sub	sp, #24
 80062c2:	af00      	add	r7, sp, #0
 80062c4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80062cc:	69db      	ldr	r3, [r3, #28]
 80062ce:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80062d0:	2300      	movs	r3, #0
 80062d2:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80062d4:	697b      	ldr	r3, [r7, #20]
 80062d6:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80062da:	2b03      	cmp	r3, #3
 80062dc:	d002      	beq.n	80062e4 <CDC_ProcessReception+0x26>
 80062de:	2b04      	cmp	r3, #4
 80062e0:	d00e      	beq.n	8006300 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 80062e2:	e043      	b.n	800636c <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 80062e4:	697b      	ldr	r3, [r7, #20]
 80062e6:	6a19      	ldr	r1, [r3, #32]
 80062e8:	697b      	ldr	r3, [r7, #20]
 80062ea:	8b5a      	ldrh	r2, [r3, #26]
 80062ec:	697b      	ldr	r3, [r7, #20]
 80062ee:	7b1b      	ldrb	r3, [r3, #12]
 80062f0:	6878      	ldr	r0, [r7, #4]
 80062f2:	f000 fc6f 	bl	8006bd4 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80062f6:	697b      	ldr	r3, [r7, #20]
 80062f8:	2204      	movs	r2, #4
 80062fa:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80062fe:	e035      	b.n	800636c <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8006300:	697b      	ldr	r3, [r7, #20]
 8006302:	7b1b      	ldrb	r3, [r3, #12]
 8006304:	4619      	mov	r1, r3
 8006306:	6878      	ldr	r0, [r7, #4]
 8006308:	f000 ff22 	bl	8007150 <USBH_LL_GetURBState>
 800630c:	4603      	mov	r3, r0
 800630e:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8006310:	7cfb      	ldrb	r3, [r7, #19]
 8006312:	2b01      	cmp	r3, #1
 8006314:	d129      	bne.n	800636a <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8006316:	697b      	ldr	r3, [r7, #20]
 8006318:	7b1b      	ldrb	r3, [r3, #12]
 800631a:	4619      	mov	r1, r3
 800631c:	6878      	ldr	r0, [r7, #4]
 800631e:	f000 fe85 	bl	800702c <USBH_LL_GetLastXferSize>
 8006322:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8006324:	697b      	ldr	r3, [r7, #20]
 8006326:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006328:	68fa      	ldr	r2, [r7, #12]
 800632a:	429a      	cmp	r2, r3
 800632c:	d016      	beq.n	800635c <CDC_ProcessReception+0x9e>
 800632e:	697b      	ldr	r3, [r7, #20]
 8006330:	8b5b      	ldrh	r3, [r3, #26]
 8006332:	461a      	mov	r2, r3
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	4293      	cmp	r3, r2
 8006338:	d910      	bls.n	800635c <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800633a:	697b      	ldr	r3, [r7, #20]
 800633c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	1ad2      	subs	r2, r2, r3
 8006342:	697b      	ldr	r3, [r7, #20]
 8006344:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8006346:	697b      	ldr	r3, [r7, #20]
 8006348:	6a1a      	ldr	r2, [r3, #32]
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	441a      	add	r2, r3
 800634e:	697b      	ldr	r3, [r7, #20]
 8006350:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8006352:	697b      	ldr	r3, [r7, #20]
 8006354:	2203      	movs	r2, #3
 8006356:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800635a:	e006      	b.n	800636a <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800635c:	697b      	ldr	r3, [r7, #20]
 800635e:	2200      	movs	r2, #0
 8006360:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8006364:	6878      	ldr	r0, [r7, #4]
 8006366:	f000 f80f 	bl	8006388 <USBH_CDC_ReceiveCallback>
      break;
 800636a:	bf00      	nop
  }
}
 800636c:	bf00      	nop
 800636e:	3718      	adds	r7, #24
 8006370:	46bd      	mov	sp, r7
 8006372:	bd80      	pop	{r7, pc}

08006374 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006374:	b480      	push	{r7}
 8006376:	b083      	sub	sp, #12
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800637c:	bf00      	nop
 800637e:	370c      	adds	r7, #12
 8006380:	46bd      	mov	sp, r7
 8006382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006386:	4770      	bx	lr

08006388 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006388:	b480      	push	{r7}
 800638a:	b083      	sub	sp, #12
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006390:	bf00      	nop
 8006392:	370c      	adds	r7, #12
 8006394:	46bd      	mov	sp, r7
 8006396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639a:	4770      	bx	lr

0800639c <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800639c:	b480      	push	{r7}
 800639e:	b083      	sub	sp, #12
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80063a4:	bf00      	nop
 80063a6:	370c      	adds	r7, #12
 80063a8:	46bd      	mov	sp, r7
 80063aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ae:	4770      	bx	lr

080063b0 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b084      	sub	sp, #16
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	60f8      	str	r0, [r7, #12]
 80063b8:	60b9      	str	r1, [r7, #8]
 80063ba:	4613      	mov	r3, r2
 80063bc:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d101      	bne.n	80063c8 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80063c4:	2302      	movs	r3, #2
 80063c6:	e029      	b.n	800641c <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	79fa      	ldrb	r2, [r7, #7]
 80063cc:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	2200      	movs	r2, #0
 80063d4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	2200      	movs	r2, #0
 80063dc:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 80063e0:	68f8      	ldr	r0, [r7, #12]
 80063e2:	f000 f81f 	bl	8006424 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	2200      	movs	r2, #0
 80063ea:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	2200      	movs	r2, #0
 80063f2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	2200      	movs	r2, #0
 80063fa:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	2200      	movs	r2, #0
 8006402:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8006406:	68bb      	ldr	r3, [r7, #8]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d003      	beq.n	8006414 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	68ba      	ldr	r2, [r7, #8]
 8006410:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8006414:	68f8      	ldr	r0, [r7, #12]
 8006416:	f000 fd97 	bl	8006f48 <USBH_LL_Init>

  return USBH_OK;
 800641a:	2300      	movs	r3, #0
}
 800641c:	4618      	mov	r0, r3
 800641e:	3710      	adds	r7, #16
 8006420:	46bd      	mov	sp, r7
 8006422:	bd80      	pop	{r7, pc}

08006424 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006424:	b480      	push	{r7}
 8006426:	b085      	sub	sp, #20
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800642c:	2300      	movs	r3, #0
 800642e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006430:	2300      	movs	r3, #0
 8006432:	60fb      	str	r3, [r7, #12]
 8006434:	e009      	b.n	800644a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8006436:	687a      	ldr	r2, [r7, #4]
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	33e0      	adds	r3, #224	; 0xe0
 800643c:	009b      	lsls	r3, r3, #2
 800643e:	4413      	add	r3, r2
 8006440:	2200      	movs	r2, #0
 8006442:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	3301      	adds	r3, #1
 8006448:	60fb      	str	r3, [r7, #12]
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	2b0f      	cmp	r3, #15
 800644e:	d9f2      	bls.n	8006436 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006450:	2300      	movs	r3, #0
 8006452:	60fb      	str	r3, [r7, #12]
 8006454:	e009      	b.n	800646a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8006456:	687a      	ldr	r2, [r7, #4]
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	4413      	add	r3, r2
 800645c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006460:	2200      	movs	r2, #0
 8006462:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	3301      	adds	r3, #1
 8006468:	60fb      	str	r3, [r7, #12]
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006470:	d3f1      	bcc.n	8006456 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2200      	movs	r2, #0
 8006476:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2200      	movs	r2, #0
 800647c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2201      	movs	r2, #1
 8006482:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2200      	movs	r2, #0
 8006488:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2201      	movs	r2, #1
 8006490:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	2240      	movs	r2, #64	; 0x40
 8006496:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2200      	movs	r2, #0
 800649c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2200      	movs	r2, #0
 80064a2:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	2201      	movs	r2, #1
 80064aa:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2200      	movs	r2, #0
 80064b2:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2200      	movs	r2, #0
 80064ba:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 80064be:	2300      	movs	r3, #0
}
 80064c0:	4618      	mov	r0, r3
 80064c2:	3714      	adds	r7, #20
 80064c4:	46bd      	mov	sp, r7
 80064c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ca:	4770      	bx	lr

080064cc <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80064cc:	b480      	push	{r7}
 80064ce:	b085      	sub	sp, #20
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
 80064d4:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80064d6:	2300      	movs	r3, #0
 80064d8:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d016      	beq.n	800650e <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d10e      	bne.n	8006508 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80064f0:	1c59      	adds	r1, r3, #1
 80064f2:	687a      	ldr	r2, [r7, #4]
 80064f4:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 80064f8:	687a      	ldr	r2, [r7, #4]
 80064fa:	33de      	adds	r3, #222	; 0xde
 80064fc:	6839      	ldr	r1, [r7, #0]
 80064fe:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8006502:	2300      	movs	r3, #0
 8006504:	73fb      	strb	r3, [r7, #15]
 8006506:	e004      	b.n	8006512 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8006508:	2302      	movs	r3, #2
 800650a:	73fb      	strb	r3, [r7, #15]
 800650c:	e001      	b.n	8006512 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800650e:	2302      	movs	r3, #2
 8006510:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006512:	7bfb      	ldrb	r3, [r7, #15]
}
 8006514:	4618      	mov	r0, r3
 8006516:	3714      	adds	r7, #20
 8006518:	46bd      	mov	sp, r7
 800651a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651e:	4770      	bx	lr

08006520 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006520:	b480      	push	{r7}
 8006522:	b085      	sub	sp, #20
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
 8006528:	460b      	mov	r3, r1
 800652a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800652c:	2300      	movs	r3, #0
 800652e:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8006536:	78fa      	ldrb	r2, [r7, #3]
 8006538:	429a      	cmp	r2, r3
 800653a:	d204      	bcs.n	8006546 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	78fa      	ldrb	r2, [r7, #3]
 8006540:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8006544:	e001      	b.n	800654a <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8006546:	2302      	movs	r3, #2
 8006548:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800654a:	7bfb      	ldrb	r3, [r7, #15]
}
 800654c:	4618      	mov	r0, r3
 800654e:	3714      	adds	r7, #20
 8006550:	46bd      	mov	sp, r7
 8006552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006556:	4770      	bx	lr

08006558 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006558:	b480      	push	{r7}
 800655a:	b087      	sub	sp, #28
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
 8006560:	4608      	mov	r0, r1
 8006562:	4611      	mov	r1, r2
 8006564:	461a      	mov	r2, r3
 8006566:	4603      	mov	r3, r0
 8006568:	70fb      	strb	r3, [r7, #3]
 800656a:	460b      	mov	r3, r1
 800656c:	70bb      	strb	r3, [r7, #2]
 800656e:	4613      	mov	r3, r2
 8006570:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8006572:	2300      	movs	r3, #0
 8006574:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8006576:	2300      	movs	r3, #0
 8006578:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006580:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006582:	e025      	b.n	80065d0 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006584:	7dfb      	ldrb	r3, [r7, #23]
 8006586:	221a      	movs	r2, #26
 8006588:	fb02 f303 	mul.w	r3, r2, r3
 800658c:	3308      	adds	r3, #8
 800658e:	68fa      	ldr	r2, [r7, #12]
 8006590:	4413      	add	r3, r2
 8006592:	3302      	adds	r3, #2
 8006594:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006596:	693b      	ldr	r3, [r7, #16]
 8006598:	795b      	ldrb	r3, [r3, #5]
 800659a:	78fa      	ldrb	r2, [r7, #3]
 800659c:	429a      	cmp	r2, r3
 800659e:	d002      	beq.n	80065a6 <USBH_FindInterface+0x4e>
 80065a0:	78fb      	ldrb	r3, [r7, #3]
 80065a2:	2bff      	cmp	r3, #255	; 0xff
 80065a4:	d111      	bne.n	80065ca <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80065a6:	693b      	ldr	r3, [r7, #16]
 80065a8:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80065aa:	78ba      	ldrb	r2, [r7, #2]
 80065ac:	429a      	cmp	r2, r3
 80065ae:	d002      	beq.n	80065b6 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80065b0:	78bb      	ldrb	r3, [r7, #2]
 80065b2:	2bff      	cmp	r3, #255	; 0xff
 80065b4:	d109      	bne.n	80065ca <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80065b6:	693b      	ldr	r3, [r7, #16]
 80065b8:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80065ba:	787a      	ldrb	r2, [r7, #1]
 80065bc:	429a      	cmp	r2, r3
 80065be:	d002      	beq.n	80065c6 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80065c0:	787b      	ldrb	r3, [r7, #1]
 80065c2:	2bff      	cmp	r3, #255	; 0xff
 80065c4:	d101      	bne.n	80065ca <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80065c6:	7dfb      	ldrb	r3, [r7, #23]
 80065c8:	e006      	b.n	80065d8 <USBH_FindInterface+0x80>
    }
    if_ix++;
 80065ca:	7dfb      	ldrb	r3, [r7, #23]
 80065cc:	3301      	adds	r3, #1
 80065ce:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80065d0:	7dfb      	ldrb	r3, [r7, #23]
 80065d2:	2b01      	cmp	r3, #1
 80065d4:	d9d6      	bls.n	8006584 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80065d6:	23ff      	movs	r3, #255	; 0xff
}
 80065d8:	4618      	mov	r0, r3
 80065da:	371c      	adds	r7, #28
 80065dc:	46bd      	mov	sp, r7
 80065de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e2:	4770      	bx	lr

080065e4 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b082      	sub	sp, #8
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 80065ec:	6878      	ldr	r0, [r7, #4]
 80065ee:	f000 fce7 	bl	8006fc0 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 80065f2:	2101      	movs	r1, #1
 80065f4:	6878      	ldr	r0, [r7, #4]
 80065f6:	f000 fdbe 	bl	8007176 <USBH_LL_DriverVBUS>

  return USBH_OK;
 80065fa:	2300      	movs	r3, #0
}
 80065fc:	4618      	mov	r0, r3
 80065fe:	3708      	adds	r7, #8
 8006600:	46bd      	mov	sp, r7
 8006602:	bd80      	pop	{r7, pc}

08006604 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8006604:	b480      	push	{r7}
 8006606:	b083      	sub	sp, #12
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
 800660c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	683a      	ldr	r2, [r7, #0]
 8006612:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8006616:	bf00      	nop
 8006618:	370c      	adds	r7, #12
 800661a:	46bd      	mov	sp, r7
 800661c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006620:	4770      	bx	lr

08006622 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8006622:	b580      	push	{r7, lr}
 8006624:	b082      	sub	sp, #8
 8006626:	af00      	add	r7, sp, #0
 8006628:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006630:	1c5a      	adds	r2, r3, #1
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8006638:	6878      	ldr	r0, [r7, #4]
 800663a:	f000 f804 	bl	8006646 <USBH_HandleSof>
}
 800663e:	bf00      	nop
 8006640:	3708      	adds	r7, #8
 8006642:	46bd      	mov	sp, r7
 8006644:	bd80      	pop	{r7, pc}

08006646 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8006646:	b580      	push	{r7, lr}
 8006648:	b082      	sub	sp, #8
 800664a:	af00      	add	r7, sp, #0
 800664c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	781b      	ldrb	r3, [r3, #0]
 8006652:	b2db      	uxtb	r3, r3
 8006654:	2b0b      	cmp	r3, #11
 8006656:	d10a      	bne.n	800666e <USBH_HandleSof+0x28>
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800665e:	2b00      	cmp	r3, #0
 8006660:	d005      	beq.n	800666e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006668:	699b      	ldr	r3, [r3, #24]
 800666a:	6878      	ldr	r0, [r7, #4]
 800666c:	4798      	blx	r3
  }
}
 800666e:	bf00      	nop
 8006670:	3708      	adds	r7, #8
 8006672:	46bd      	mov	sp, r7
 8006674:	bd80      	pop	{r7, pc}

08006676 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8006676:	b480      	push	{r7}
 8006678:	b083      	sub	sp, #12
 800667a:	af00      	add	r7, sp, #0
 800667c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2201      	movs	r2, #1
 8006682:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8006686:	bf00      	nop
}
 8006688:	370c      	adds	r7, #12
 800668a:	46bd      	mov	sp, r7
 800668c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006690:	4770      	bx	lr

08006692 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8006692:	b480      	push	{r7}
 8006694:	b083      	sub	sp, #12
 8006696:	af00      	add	r7, sp, #0
 8006698:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2200      	movs	r2, #0
 800669e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 80066a2:	bf00      	nop
}
 80066a4:	370c      	adds	r7, #12
 80066a6:	46bd      	mov	sp, r7
 80066a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ac:	4770      	bx	lr

080066ae <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80066ae:	b480      	push	{r7}
 80066b0:	b083      	sub	sp, #12
 80066b2:	af00      	add	r7, sp, #0
 80066b4:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2201      	movs	r2, #1
 80066ba:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2200      	movs	r2, #0
 80066c2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2200      	movs	r2, #0
 80066ca:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80066ce:	2300      	movs	r3, #0
}
 80066d0:	4618      	mov	r0, r3
 80066d2:	370c      	adds	r7, #12
 80066d4:	46bd      	mov	sp, r7
 80066d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066da:	4770      	bx	lr

080066dc <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80066dc:	b580      	push	{r7, lr}
 80066de:	b082      	sub	sp, #8
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2201      	movs	r2, #1
 80066e8:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2200      	movs	r2, #0
 80066f0:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2200      	movs	r2, #0
 80066f8:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 80066fc:	6878      	ldr	r0, [r7, #4]
 80066fe:	f000 fc7a 	bl	8006ff6 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	791b      	ldrb	r3, [r3, #4]
 8006706:	4619      	mov	r1, r3
 8006708:	6878      	ldr	r0, [r7, #4]
 800670a:	f000 fad1 	bl	8006cb0 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	795b      	ldrb	r3, [r3, #5]
 8006712:	4619      	mov	r1, r3
 8006714:	6878      	ldr	r0, [r7, #4]
 8006716:	f000 facb 	bl	8006cb0 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800671a:	2300      	movs	r3, #0
}
 800671c:	4618      	mov	r0, r3
 800671e:	3708      	adds	r7, #8
 8006720:	46bd      	mov	sp, r7
 8006722:	bd80      	pop	{r7, pc}

08006724 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b082      	sub	sp, #8
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
 800672c:	460b      	mov	r3, r1
 800672e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	789b      	ldrb	r3, [r3, #2]
 8006734:	2b01      	cmp	r3, #1
 8006736:	d10f      	bne.n	8006758 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2202      	movs	r2, #2
 800673c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2201      	movs	r2, #1
 8006742:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2200      	movs	r2, #0
 8006748:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800674a:	78fb      	ldrb	r3, [r7, #3]
 800674c:	b29a      	uxth	r2, r3
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2200      	movs	r2, #0
 8006756:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8006758:	2200      	movs	r2, #0
 800675a:	2100      	movs	r1, #0
 800675c:	6878      	ldr	r0, [r7, #4]
 800675e:	f000 f805 	bl	800676c <USBH_CtlReq>
 8006762:	4603      	mov	r3, r0
}
 8006764:	4618      	mov	r0, r3
 8006766:	3708      	adds	r7, #8
 8006768:	46bd      	mov	sp, r7
 800676a:	bd80      	pop	{r7, pc}

0800676c <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b086      	sub	sp, #24
 8006770:	af00      	add	r7, sp, #0
 8006772:	60f8      	str	r0, [r7, #12]
 8006774:	60b9      	str	r1, [r7, #8]
 8006776:	4613      	mov	r3, r2
 8006778:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800677a:	2301      	movs	r3, #1
 800677c:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	789b      	ldrb	r3, [r3, #2]
 8006782:	2b01      	cmp	r3, #1
 8006784:	d002      	beq.n	800678c <USBH_CtlReq+0x20>
 8006786:	2b02      	cmp	r3, #2
 8006788:	d00f      	beq.n	80067aa <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800678a:	e027      	b.n	80067dc <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	68ba      	ldr	r2, [r7, #8]
 8006790:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	88fa      	ldrh	r2, [r7, #6]
 8006796:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	2201      	movs	r2, #1
 800679c:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	2202      	movs	r2, #2
 80067a2:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80067a4:	2301      	movs	r3, #1
 80067a6:	75fb      	strb	r3, [r7, #23]
      break;
 80067a8:	e018      	b.n	80067dc <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 80067aa:	68f8      	ldr	r0, [r7, #12]
 80067ac:	f000 f81c 	bl	80067e8 <USBH_HandleControl>
 80067b0:	4603      	mov	r3, r0
 80067b2:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80067b4:	7dfb      	ldrb	r3, [r7, #23]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d002      	beq.n	80067c0 <USBH_CtlReq+0x54>
 80067ba:	7dfb      	ldrb	r3, [r7, #23]
 80067bc:	2b03      	cmp	r3, #3
 80067be:	d106      	bne.n	80067ce <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	2201      	movs	r2, #1
 80067c4:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	2200      	movs	r2, #0
 80067ca:	761a      	strb	r2, [r3, #24]
      break;
 80067cc:	e005      	b.n	80067da <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 80067ce:	7dfb      	ldrb	r3, [r7, #23]
 80067d0:	2b02      	cmp	r3, #2
 80067d2:	d102      	bne.n	80067da <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	2201      	movs	r2, #1
 80067d8:	709a      	strb	r2, [r3, #2]
      break;
 80067da:	bf00      	nop
  }
  return status;
 80067dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80067de:	4618      	mov	r0, r3
 80067e0:	3718      	adds	r7, #24
 80067e2:	46bd      	mov	sp, r7
 80067e4:	bd80      	pop	{r7, pc}
	...

080067e8 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b086      	sub	sp, #24
 80067ec:	af02      	add	r7, sp, #8
 80067ee:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80067f0:	2301      	movs	r3, #1
 80067f2:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80067f4:	2300      	movs	r3, #0
 80067f6:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	7e1b      	ldrb	r3, [r3, #24]
 80067fc:	3b01      	subs	r3, #1
 80067fe:	2b0a      	cmp	r3, #10
 8006800:	f200 8156 	bhi.w	8006ab0 <USBH_HandleControl+0x2c8>
 8006804:	a201      	add	r2, pc, #4	; (adr r2, 800680c <USBH_HandleControl+0x24>)
 8006806:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800680a:	bf00      	nop
 800680c:	08006839 	.word	0x08006839
 8006810:	08006853 	.word	0x08006853
 8006814:	080068bd 	.word	0x080068bd
 8006818:	080068e3 	.word	0x080068e3
 800681c:	0800691b 	.word	0x0800691b
 8006820:	08006945 	.word	0x08006945
 8006824:	08006997 	.word	0x08006997
 8006828:	080069b9 	.word	0x080069b9
 800682c:	080069f5 	.word	0x080069f5
 8006830:	08006a1b 	.word	0x08006a1b
 8006834:	08006a59 	.word	0x08006a59
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	f103 0110 	add.w	r1, r3, #16
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	795b      	ldrb	r3, [r3, #5]
 8006842:	461a      	mov	r2, r3
 8006844:	6878      	ldr	r0, [r7, #4]
 8006846:	f000 f943 	bl	8006ad0 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2202      	movs	r2, #2
 800684e:	761a      	strb	r2, [r3, #24]
      break;
 8006850:	e139      	b.n	8006ac6 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	795b      	ldrb	r3, [r3, #5]
 8006856:	4619      	mov	r1, r3
 8006858:	6878      	ldr	r0, [r7, #4]
 800685a:	f000 fc79 	bl	8007150 <USBH_LL_GetURBState>
 800685e:	4603      	mov	r3, r0
 8006860:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8006862:	7bbb      	ldrb	r3, [r7, #14]
 8006864:	2b01      	cmp	r3, #1
 8006866:	d11e      	bne.n	80068a6 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	7c1b      	ldrb	r3, [r3, #16]
 800686c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006870:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	8adb      	ldrh	r3, [r3, #22]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d00a      	beq.n	8006890 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800687a:	7b7b      	ldrb	r3, [r7, #13]
 800687c:	2b80      	cmp	r3, #128	; 0x80
 800687e:	d103      	bne.n	8006888 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2203      	movs	r2, #3
 8006884:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8006886:	e115      	b.n	8006ab4 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2205      	movs	r2, #5
 800688c:	761a      	strb	r2, [r3, #24]
      break;
 800688e:	e111      	b.n	8006ab4 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8006890:	7b7b      	ldrb	r3, [r7, #13]
 8006892:	2b80      	cmp	r3, #128	; 0x80
 8006894:	d103      	bne.n	800689e <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2209      	movs	r2, #9
 800689a:	761a      	strb	r2, [r3, #24]
      break;
 800689c:	e10a      	b.n	8006ab4 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2207      	movs	r2, #7
 80068a2:	761a      	strb	r2, [r3, #24]
      break;
 80068a4:	e106      	b.n	8006ab4 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80068a6:	7bbb      	ldrb	r3, [r7, #14]
 80068a8:	2b04      	cmp	r3, #4
 80068aa:	d003      	beq.n	80068b4 <USBH_HandleControl+0xcc>
 80068ac:	7bbb      	ldrb	r3, [r7, #14]
 80068ae:	2b02      	cmp	r3, #2
 80068b0:	f040 8100 	bne.w	8006ab4 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	220b      	movs	r2, #11
 80068b8:	761a      	strb	r2, [r3, #24]
      break;
 80068ba:	e0fb      	b.n	8006ab4 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80068c2:	b29a      	uxth	r2, r3
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	6899      	ldr	r1, [r3, #8]
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	899a      	ldrh	r2, [r3, #12]
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	791b      	ldrb	r3, [r3, #4]
 80068d4:	6878      	ldr	r0, [r7, #4]
 80068d6:	f000 f93a 	bl	8006b4e <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2204      	movs	r2, #4
 80068de:	761a      	strb	r2, [r3, #24]
      break;
 80068e0:	e0f1      	b.n	8006ac6 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	791b      	ldrb	r3, [r3, #4]
 80068e6:	4619      	mov	r1, r3
 80068e8:	6878      	ldr	r0, [r7, #4]
 80068ea:	f000 fc31 	bl	8007150 <USBH_LL_GetURBState>
 80068ee:	4603      	mov	r3, r0
 80068f0:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80068f2:	7bbb      	ldrb	r3, [r7, #14]
 80068f4:	2b01      	cmp	r3, #1
 80068f6:	d102      	bne.n	80068fe <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2209      	movs	r2, #9
 80068fc:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80068fe:	7bbb      	ldrb	r3, [r7, #14]
 8006900:	2b05      	cmp	r3, #5
 8006902:	d102      	bne.n	800690a <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8006904:	2303      	movs	r3, #3
 8006906:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8006908:	e0d6      	b.n	8006ab8 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800690a:	7bbb      	ldrb	r3, [r7, #14]
 800690c:	2b04      	cmp	r3, #4
 800690e:	f040 80d3 	bne.w	8006ab8 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	220b      	movs	r2, #11
 8006916:	761a      	strb	r2, [r3, #24]
      break;
 8006918:	e0ce      	b.n	8006ab8 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6899      	ldr	r1, [r3, #8]
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	899a      	ldrh	r2, [r3, #12]
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	795b      	ldrb	r3, [r3, #5]
 8006926:	2001      	movs	r0, #1
 8006928:	9000      	str	r0, [sp, #0]
 800692a:	6878      	ldr	r0, [r7, #4]
 800692c:	f000 f8ea 	bl	8006b04 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006936:	b29a      	uxth	r2, r3
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2206      	movs	r2, #6
 8006940:	761a      	strb	r2, [r3, #24]
      break;
 8006942:	e0c0      	b.n	8006ac6 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	795b      	ldrb	r3, [r3, #5]
 8006948:	4619      	mov	r1, r3
 800694a:	6878      	ldr	r0, [r7, #4]
 800694c:	f000 fc00 	bl	8007150 <USBH_LL_GetURBState>
 8006950:	4603      	mov	r3, r0
 8006952:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8006954:	7bbb      	ldrb	r3, [r7, #14]
 8006956:	2b01      	cmp	r3, #1
 8006958:	d103      	bne.n	8006962 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	2207      	movs	r2, #7
 800695e:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8006960:	e0ac      	b.n	8006abc <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8006962:	7bbb      	ldrb	r3, [r7, #14]
 8006964:	2b05      	cmp	r3, #5
 8006966:	d105      	bne.n	8006974 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	220c      	movs	r2, #12
 800696c:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800696e:	2303      	movs	r3, #3
 8006970:	73fb      	strb	r3, [r7, #15]
      break;
 8006972:	e0a3      	b.n	8006abc <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8006974:	7bbb      	ldrb	r3, [r7, #14]
 8006976:	2b02      	cmp	r3, #2
 8006978:	d103      	bne.n	8006982 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2205      	movs	r2, #5
 800697e:	761a      	strb	r2, [r3, #24]
      break;
 8006980:	e09c      	b.n	8006abc <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8006982:	7bbb      	ldrb	r3, [r7, #14]
 8006984:	2b04      	cmp	r3, #4
 8006986:	f040 8099 	bne.w	8006abc <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	220b      	movs	r2, #11
 800698e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8006990:	2302      	movs	r3, #2
 8006992:	73fb      	strb	r3, [r7, #15]
      break;
 8006994:	e092      	b.n	8006abc <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	791b      	ldrb	r3, [r3, #4]
 800699a:	2200      	movs	r2, #0
 800699c:	2100      	movs	r1, #0
 800699e:	6878      	ldr	r0, [r7, #4]
 80069a0:	f000 f8d5 	bl	8006b4e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80069aa:	b29a      	uxth	r2, r3
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2208      	movs	r2, #8
 80069b4:	761a      	strb	r2, [r3, #24]

      break;
 80069b6:	e086      	b.n	8006ac6 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	791b      	ldrb	r3, [r3, #4]
 80069bc:	4619      	mov	r1, r3
 80069be:	6878      	ldr	r0, [r7, #4]
 80069c0:	f000 fbc6 	bl	8007150 <USBH_LL_GetURBState>
 80069c4:	4603      	mov	r3, r0
 80069c6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80069c8:	7bbb      	ldrb	r3, [r7, #14]
 80069ca:	2b01      	cmp	r3, #1
 80069cc:	d105      	bne.n	80069da <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	220d      	movs	r2, #13
 80069d2:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80069d4:	2300      	movs	r3, #0
 80069d6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80069d8:	e072      	b.n	8006ac0 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 80069da:	7bbb      	ldrb	r3, [r7, #14]
 80069dc:	2b04      	cmp	r3, #4
 80069de:	d103      	bne.n	80069e8 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	220b      	movs	r2, #11
 80069e4:	761a      	strb	r2, [r3, #24]
      break;
 80069e6:	e06b      	b.n	8006ac0 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 80069e8:	7bbb      	ldrb	r3, [r7, #14]
 80069ea:	2b05      	cmp	r3, #5
 80069ec:	d168      	bne.n	8006ac0 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 80069ee:	2303      	movs	r3, #3
 80069f0:	73fb      	strb	r3, [r7, #15]
      break;
 80069f2:	e065      	b.n	8006ac0 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	795b      	ldrb	r3, [r3, #5]
 80069f8:	2201      	movs	r2, #1
 80069fa:	9200      	str	r2, [sp, #0]
 80069fc:	2200      	movs	r2, #0
 80069fe:	2100      	movs	r1, #0
 8006a00:	6878      	ldr	r0, [r7, #4]
 8006a02:	f000 f87f 	bl	8006b04 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006a0c:	b29a      	uxth	r2, r3
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	220a      	movs	r2, #10
 8006a16:	761a      	strb	r2, [r3, #24]
      break;
 8006a18:	e055      	b.n	8006ac6 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	795b      	ldrb	r3, [r3, #5]
 8006a1e:	4619      	mov	r1, r3
 8006a20:	6878      	ldr	r0, [r7, #4]
 8006a22:	f000 fb95 	bl	8007150 <USBH_LL_GetURBState>
 8006a26:	4603      	mov	r3, r0
 8006a28:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8006a2a:	7bbb      	ldrb	r3, [r7, #14]
 8006a2c:	2b01      	cmp	r3, #1
 8006a2e:	d105      	bne.n	8006a3c <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8006a30:	2300      	movs	r3, #0
 8006a32:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	220d      	movs	r2, #13
 8006a38:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8006a3a:	e043      	b.n	8006ac4 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8006a3c:	7bbb      	ldrb	r3, [r7, #14]
 8006a3e:	2b02      	cmp	r3, #2
 8006a40:	d103      	bne.n	8006a4a <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2209      	movs	r2, #9
 8006a46:	761a      	strb	r2, [r3, #24]
      break;
 8006a48:	e03c      	b.n	8006ac4 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8006a4a:	7bbb      	ldrb	r3, [r7, #14]
 8006a4c:	2b04      	cmp	r3, #4
 8006a4e:	d139      	bne.n	8006ac4 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	220b      	movs	r2, #11
 8006a54:	761a      	strb	r2, [r3, #24]
      break;
 8006a56:	e035      	b.n	8006ac4 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	7e5b      	ldrb	r3, [r3, #25]
 8006a5c:	3301      	adds	r3, #1
 8006a5e:	b2da      	uxtb	r2, r3
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	765a      	strb	r2, [r3, #25]
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	7e5b      	ldrb	r3, [r3, #25]
 8006a68:	2b02      	cmp	r3, #2
 8006a6a:	d806      	bhi.n	8006a7a <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2201      	movs	r2, #1
 8006a70:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2201      	movs	r2, #1
 8006a76:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8006a78:	e025      	b.n	8006ac6 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006a80:	2106      	movs	r1, #6
 8006a82:	6878      	ldr	r0, [r7, #4]
 8006a84:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2200      	movs	r2, #0
 8006a8a:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	795b      	ldrb	r3, [r3, #5]
 8006a90:	4619      	mov	r1, r3
 8006a92:	6878      	ldr	r0, [r7, #4]
 8006a94:	f000 f90c 	bl	8006cb0 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	791b      	ldrb	r3, [r3, #4]
 8006a9c:	4619      	mov	r1, r3
 8006a9e:	6878      	ldr	r0, [r7, #4]
 8006aa0:	f000 f906 	bl	8006cb0 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8006aaa:	2302      	movs	r3, #2
 8006aac:	73fb      	strb	r3, [r7, #15]
      break;
 8006aae:	e00a      	b.n	8006ac6 <USBH_HandleControl+0x2de>

    default:
      break;
 8006ab0:	bf00      	nop
 8006ab2:	e008      	b.n	8006ac6 <USBH_HandleControl+0x2de>
      break;
 8006ab4:	bf00      	nop
 8006ab6:	e006      	b.n	8006ac6 <USBH_HandleControl+0x2de>
      break;
 8006ab8:	bf00      	nop
 8006aba:	e004      	b.n	8006ac6 <USBH_HandleControl+0x2de>
      break;
 8006abc:	bf00      	nop
 8006abe:	e002      	b.n	8006ac6 <USBH_HandleControl+0x2de>
      break;
 8006ac0:	bf00      	nop
 8006ac2:	e000      	b.n	8006ac6 <USBH_HandleControl+0x2de>
      break;
 8006ac4:	bf00      	nop
  }

  return status;
 8006ac6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ac8:	4618      	mov	r0, r3
 8006aca:	3710      	adds	r7, #16
 8006acc:	46bd      	mov	sp, r7
 8006ace:	bd80      	pop	{r7, pc}

08006ad0 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b088      	sub	sp, #32
 8006ad4:	af04      	add	r7, sp, #16
 8006ad6:	60f8      	str	r0, [r7, #12]
 8006ad8:	60b9      	str	r1, [r7, #8]
 8006ada:	4613      	mov	r3, r2
 8006adc:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8006ade:	79f9      	ldrb	r1, [r7, #7]
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	9303      	str	r3, [sp, #12]
 8006ae4:	2308      	movs	r3, #8
 8006ae6:	9302      	str	r3, [sp, #8]
 8006ae8:	68bb      	ldr	r3, [r7, #8]
 8006aea:	9301      	str	r3, [sp, #4]
 8006aec:	2300      	movs	r3, #0
 8006aee:	9300      	str	r3, [sp, #0]
 8006af0:	2300      	movs	r3, #0
 8006af2:	2200      	movs	r2, #0
 8006af4:	68f8      	ldr	r0, [r7, #12]
 8006af6:	f000 fafa 	bl	80070ee <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8006afa:	2300      	movs	r3, #0
}
 8006afc:	4618      	mov	r0, r3
 8006afe:	3710      	adds	r7, #16
 8006b00:	46bd      	mov	sp, r7
 8006b02:	bd80      	pop	{r7, pc}

08006b04 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b088      	sub	sp, #32
 8006b08:	af04      	add	r7, sp, #16
 8006b0a:	60f8      	str	r0, [r7, #12]
 8006b0c:	60b9      	str	r1, [r7, #8]
 8006b0e:	4611      	mov	r1, r2
 8006b10:	461a      	mov	r2, r3
 8006b12:	460b      	mov	r3, r1
 8006b14:	80fb      	strh	r3, [r7, #6]
 8006b16:	4613      	mov	r3, r2
 8006b18:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d001      	beq.n	8006b28 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8006b24:	2300      	movs	r3, #0
 8006b26:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8006b28:	7979      	ldrb	r1, [r7, #5]
 8006b2a:	7e3b      	ldrb	r3, [r7, #24]
 8006b2c:	9303      	str	r3, [sp, #12]
 8006b2e:	88fb      	ldrh	r3, [r7, #6]
 8006b30:	9302      	str	r3, [sp, #8]
 8006b32:	68bb      	ldr	r3, [r7, #8]
 8006b34:	9301      	str	r3, [sp, #4]
 8006b36:	2301      	movs	r3, #1
 8006b38:	9300      	str	r3, [sp, #0]
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	68f8      	ldr	r0, [r7, #12]
 8006b40:	f000 fad5 	bl	80070ee <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8006b44:	2300      	movs	r3, #0
}
 8006b46:	4618      	mov	r0, r3
 8006b48:	3710      	adds	r7, #16
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	bd80      	pop	{r7, pc}

08006b4e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8006b4e:	b580      	push	{r7, lr}
 8006b50:	b088      	sub	sp, #32
 8006b52:	af04      	add	r7, sp, #16
 8006b54:	60f8      	str	r0, [r7, #12]
 8006b56:	60b9      	str	r1, [r7, #8]
 8006b58:	4611      	mov	r1, r2
 8006b5a:	461a      	mov	r2, r3
 8006b5c:	460b      	mov	r3, r1
 8006b5e:	80fb      	strh	r3, [r7, #6]
 8006b60:	4613      	mov	r3, r2
 8006b62:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8006b64:	7979      	ldrb	r1, [r7, #5]
 8006b66:	2300      	movs	r3, #0
 8006b68:	9303      	str	r3, [sp, #12]
 8006b6a:	88fb      	ldrh	r3, [r7, #6]
 8006b6c:	9302      	str	r3, [sp, #8]
 8006b6e:	68bb      	ldr	r3, [r7, #8]
 8006b70:	9301      	str	r3, [sp, #4]
 8006b72:	2301      	movs	r3, #1
 8006b74:	9300      	str	r3, [sp, #0]
 8006b76:	2300      	movs	r3, #0
 8006b78:	2201      	movs	r2, #1
 8006b7a:	68f8      	ldr	r0, [r7, #12]
 8006b7c:	f000 fab7 	bl	80070ee <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8006b80:	2300      	movs	r3, #0

}
 8006b82:	4618      	mov	r0, r3
 8006b84:	3710      	adds	r7, #16
 8006b86:	46bd      	mov	sp, r7
 8006b88:	bd80      	pop	{r7, pc}

08006b8a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8006b8a:	b580      	push	{r7, lr}
 8006b8c:	b088      	sub	sp, #32
 8006b8e:	af04      	add	r7, sp, #16
 8006b90:	60f8      	str	r0, [r7, #12]
 8006b92:	60b9      	str	r1, [r7, #8]
 8006b94:	4611      	mov	r1, r2
 8006b96:	461a      	mov	r2, r3
 8006b98:	460b      	mov	r3, r1
 8006b9a:	80fb      	strh	r3, [r7, #6]
 8006b9c:	4613      	mov	r3, r2
 8006b9e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d001      	beq.n	8006bae <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8006baa:	2300      	movs	r3, #0
 8006bac:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8006bae:	7979      	ldrb	r1, [r7, #5]
 8006bb0:	7e3b      	ldrb	r3, [r7, #24]
 8006bb2:	9303      	str	r3, [sp, #12]
 8006bb4:	88fb      	ldrh	r3, [r7, #6]
 8006bb6:	9302      	str	r3, [sp, #8]
 8006bb8:	68bb      	ldr	r3, [r7, #8]
 8006bba:	9301      	str	r3, [sp, #4]
 8006bbc:	2301      	movs	r3, #1
 8006bbe:	9300      	str	r3, [sp, #0]
 8006bc0:	2302      	movs	r3, #2
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	68f8      	ldr	r0, [r7, #12]
 8006bc6:	f000 fa92 	bl	80070ee <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8006bca:	2300      	movs	r3, #0
}
 8006bcc:	4618      	mov	r0, r3
 8006bce:	3710      	adds	r7, #16
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	bd80      	pop	{r7, pc}

08006bd4 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b088      	sub	sp, #32
 8006bd8:	af04      	add	r7, sp, #16
 8006bda:	60f8      	str	r0, [r7, #12]
 8006bdc:	60b9      	str	r1, [r7, #8]
 8006bde:	4611      	mov	r1, r2
 8006be0:	461a      	mov	r2, r3
 8006be2:	460b      	mov	r3, r1
 8006be4:	80fb      	strh	r3, [r7, #6]
 8006be6:	4613      	mov	r3, r2
 8006be8:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8006bea:	7979      	ldrb	r1, [r7, #5]
 8006bec:	2300      	movs	r3, #0
 8006bee:	9303      	str	r3, [sp, #12]
 8006bf0:	88fb      	ldrh	r3, [r7, #6]
 8006bf2:	9302      	str	r3, [sp, #8]
 8006bf4:	68bb      	ldr	r3, [r7, #8]
 8006bf6:	9301      	str	r3, [sp, #4]
 8006bf8:	2301      	movs	r3, #1
 8006bfa:	9300      	str	r3, [sp, #0]
 8006bfc:	2302      	movs	r3, #2
 8006bfe:	2201      	movs	r2, #1
 8006c00:	68f8      	ldr	r0, [r7, #12]
 8006c02:	f000 fa74 	bl	80070ee <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8006c06:	2300      	movs	r3, #0
}
 8006c08:	4618      	mov	r0, r3
 8006c0a:	3710      	adds	r7, #16
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	bd80      	pop	{r7, pc}

08006c10 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b086      	sub	sp, #24
 8006c14:	af04      	add	r7, sp, #16
 8006c16:	6078      	str	r0, [r7, #4]
 8006c18:	4608      	mov	r0, r1
 8006c1a:	4611      	mov	r1, r2
 8006c1c:	461a      	mov	r2, r3
 8006c1e:	4603      	mov	r3, r0
 8006c20:	70fb      	strb	r3, [r7, #3]
 8006c22:	460b      	mov	r3, r1
 8006c24:	70bb      	strb	r3, [r7, #2]
 8006c26:	4613      	mov	r3, r2
 8006c28:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8006c2a:	7878      	ldrb	r0, [r7, #1]
 8006c2c:	78ba      	ldrb	r2, [r7, #2]
 8006c2e:	78f9      	ldrb	r1, [r7, #3]
 8006c30:	8b3b      	ldrh	r3, [r7, #24]
 8006c32:	9302      	str	r3, [sp, #8]
 8006c34:	7d3b      	ldrb	r3, [r7, #20]
 8006c36:	9301      	str	r3, [sp, #4]
 8006c38:	7c3b      	ldrb	r3, [r7, #16]
 8006c3a:	9300      	str	r3, [sp, #0]
 8006c3c:	4603      	mov	r3, r0
 8006c3e:	6878      	ldr	r0, [r7, #4]
 8006c40:	f000 fa07 	bl	8007052 <USBH_LL_OpenPipe>

  return USBH_OK;
 8006c44:	2300      	movs	r3, #0
}
 8006c46:	4618      	mov	r0, r3
 8006c48:	3708      	adds	r7, #8
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	bd80      	pop	{r7, pc}

08006c4e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8006c4e:	b580      	push	{r7, lr}
 8006c50:	b082      	sub	sp, #8
 8006c52:	af00      	add	r7, sp, #0
 8006c54:	6078      	str	r0, [r7, #4]
 8006c56:	460b      	mov	r3, r1
 8006c58:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8006c5a:	78fb      	ldrb	r3, [r7, #3]
 8006c5c:	4619      	mov	r1, r3
 8006c5e:	6878      	ldr	r0, [r7, #4]
 8006c60:	f000 fa26 	bl	80070b0 <USBH_LL_ClosePipe>

  return USBH_OK;
 8006c64:	2300      	movs	r3, #0
}
 8006c66:	4618      	mov	r0, r3
 8006c68:	3708      	adds	r7, #8
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	bd80      	pop	{r7, pc}

08006c6e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8006c6e:	b580      	push	{r7, lr}
 8006c70:	b084      	sub	sp, #16
 8006c72:	af00      	add	r7, sp, #0
 8006c74:	6078      	str	r0, [r7, #4]
 8006c76:	460b      	mov	r3, r1
 8006c78:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8006c7a:	6878      	ldr	r0, [r7, #4]
 8006c7c:	f000 f836 	bl	8006cec <USBH_GetFreePipe>
 8006c80:	4603      	mov	r3, r0
 8006c82:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8006c84:	89fb      	ldrh	r3, [r7, #14]
 8006c86:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006c8a:	4293      	cmp	r3, r2
 8006c8c:	d00a      	beq.n	8006ca4 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8006c8e:	78fa      	ldrb	r2, [r7, #3]
 8006c90:	89fb      	ldrh	r3, [r7, #14]
 8006c92:	f003 030f 	and.w	r3, r3, #15
 8006c96:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006c9a:	6879      	ldr	r1, [r7, #4]
 8006c9c:	33e0      	adds	r3, #224	; 0xe0
 8006c9e:	009b      	lsls	r3, r3, #2
 8006ca0:	440b      	add	r3, r1
 8006ca2:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8006ca4:	89fb      	ldrh	r3, [r7, #14]
 8006ca6:	b2db      	uxtb	r3, r3
}
 8006ca8:	4618      	mov	r0, r3
 8006caa:	3710      	adds	r7, #16
 8006cac:	46bd      	mov	sp, r7
 8006cae:	bd80      	pop	{r7, pc}

08006cb0 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8006cb0:	b480      	push	{r7}
 8006cb2:	b083      	sub	sp, #12
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
 8006cb8:	460b      	mov	r3, r1
 8006cba:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8006cbc:	78fb      	ldrb	r3, [r7, #3]
 8006cbe:	2b0f      	cmp	r3, #15
 8006cc0:	d80d      	bhi.n	8006cde <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8006cc2:	78fb      	ldrb	r3, [r7, #3]
 8006cc4:	687a      	ldr	r2, [r7, #4]
 8006cc6:	33e0      	adds	r3, #224	; 0xe0
 8006cc8:	009b      	lsls	r3, r3, #2
 8006cca:	4413      	add	r3, r2
 8006ccc:	685a      	ldr	r2, [r3, #4]
 8006cce:	78fb      	ldrb	r3, [r7, #3]
 8006cd0:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8006cd4:	6879      	ldr	r1, [r7, #4]
 8006cd6:	33e0      	adds	r3, #224	; 0xe0
 8006cd8:	009b      	lsls	r3, r3, #2
 8006cda:	440b      	add	r3, r1
 8006cdc:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8006cde:	2300      	movs	r3, #0
}
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	370c      	adds	r7, #12
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cea:	4770      	bx	lr

08006cec <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8006cec:	b480      	push	{r7}
 8006cee:	b085      	sub	sp, #20
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	73fb      	strb	r3, [r7, #15]
 8006cfc:	e00f      	b.n	8006d1e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8006cfe:	7bfb      	ldrb	r3, [r7, #15]
 8006d00:	687a      	ldr	r2, [r7, #4]
 8006d02:	33e0      	adds	r3, #224	; 0xe0
 8006d04:	009b      	lsls	r3, r3, #2
 8006d06:	4413      	add	r3, r2
 8006d08:	685b      	ldr	r3, [r3, #4]
 8006d0a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d102      	bne.n	8006d18 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8006d12:	7bfb      	ldrb	r3, [r7, #15]
 8006d14:	b29b      	uxth	r3, r3
 8006d16:	e007      	b.n	8006d28 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8006d18:	7bfb      	ldrb	r3, [r7, #15]
 8006d1a:	3301      	adds	r3, #1
 8006d1c:	73fb      	strb	r3, [r7, #15]
 8006d1e:	7bfb      	ldrb	r3, [r7, #15]
 8006d20:	2b0f      	cmp	r3, #15
 8006d22:	d9ec      	bls.n	8006cfe <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8006d24:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8006d28:	4618      	mov	r0, r3
 8006d2a:	3714      	adds	r7, #20
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d32:	4770      	bx	lr

08006d34 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8006d38:	2201      	movs	r2, #1
 8006d3a:	490e      	ldr	r1, [pc, #56]	; (8006d74 <MX_USB_HOST_Init+0x40>)
 8006d3c:	480e      	ldr	r0, [pc, #56]	; (8006d78 <MX_USB_HOST_Init+0x44>)
 8006d3e:	f7ff fb37 	bl	80063b0 <USBH_Init>
 8006d42:	4603      	mov	r3, r0
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d001      	beq.n	8006d4c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8006d48:	f7f9 fe36 	bl	80009b8 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8006d4c:	490b      	ldr	r1, [pc, #44]	; (8006d7c <MX_USB_HOST_Init+0x48>)
 8006d4e:	480a      	ldr	r0, [pc, #40]	; (8006d78 <MX_USB_HOST_Init+0x44>)
 8006d50:	f7ff fbbc 	bl	80064cc <USBH_RegisterClass>
 8006d54:	4603      	mov	r3, r0
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d001      	beq.n	8006d5e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8006d5a:	f7f9 fe2d 	bl	80009b8 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8006d5e:	4806      	ldr	r0, [pc, #24]	; (8006d78 <MX_USB_HOST_Init+0x44>)
 8006d60:	f7ff fc40 	bl	80065e4 <USBH_Start>
 8006d64:	4603      	mov	r3, r0
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d001      	beq.n	8006d6e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8006d6a:	f7f9 fe25 	bl	80009b8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8006d6e:	bf00      	nop
 8006d70:	bd80      	pop	{r7, pc}
 8006d72:	bf00      	nop
 8006d74:	08006d81 	.word	0x08006d81
 8006d78:	200001e0 	.word	0x200001e0
 8006d7c:	2000000c 	.word	0x2000000c

08006d80 <USBH_UserProcess>:
}
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8006d80:	b480      	push	{r7}
 8006d82:	b083      	sub	sp, #12
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
 8006d88:	460b      	mov	r3, r1
 8006d8a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8006d8c:	78fb      	ldrb	r3, [r7, #3]
 8006d8e:	3b01      	subs	r3, #1
 8006d90:	2b04      	cmp	r3, #4
 8006d92:	d819      	bhi.n	8006dc8 <USBH_UserProcess+0x48>
 8006d94:	a201      	add	r2, pc, #4	; (adr r2, 8006d9c <USBH_UserProcess+0x1c>)
 8006d96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d9a:	bf00      	nop
 8006d9c:	08006dc9 	.word	0x08006dc9
 8006da0:	08006db9 	.word	0x08006db9
 8006da4:	08006dc9 	.word	0x08006dc9
 8006da8:	08006dc1 	.word	0x08006dc1
 8006dac:	08006db1 	.word	0x08006db1
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8006db0:	4b09      	ldr	r3, [pc, #36]	; (8006dd8 <USBH_UserProcess+0x58>)
 8006db2:	2203      	movs	r2, #3
 8006db4:	701a      	strb	r2, [r3, #0]
  break;
 8006db6:	e008      	b.n	8006dca <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8006db8:	4b07      	ldr	r3, [pc, #28]	; (8006dd8 <USBH_UserProcess+0x58>)
 8006dba:	2202      	movs	r2, #2
 8006dbc:	701a      	strb	r2, [r3, #0]
  break;
 8006dbe:	e004      	b.n	8006dca <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8006dc0:	4b05      	ldr	r3, [pc, #20]	; (8006dd8 <USBH_UserProcess+0x58>)
 8006dc2:	2201      	movs	r2, #1
 8006dc4:	701a      	strb	r2, [r3, #0]
  break;
 8006dc6:	e000      	b.n	8006dca <USBH_UserProcess+0x4a>

  default:
  break;
 8006dc8:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8006dca:	bf00      	nop
 8006dcc:	370c      	adds	r7, #12
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd4:	4770      	bx	lr
 8006dd6:	bf00      	nop
 8006dd8:	200005b8 	.word	0x200005b8

08006ddc <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b08a      	sub	sp, #40	; 0x28
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006de4:	f107 0314 	add.w	r3, r7, #20
 8006de8:	2200      	movs	r2, #0
 8006dea:	601a      	str	r2, [r3, #0]
 8006dec:	605a      	str	r2, [r3, #4]
 8006dee:	609a      	str	r2, [r3, #8]
 8006df0:	60da      	str	r2, [r3, #12]
 8006df2:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006dfc:	d147      	bne.n	8006e8e <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006dfe:	2300      	movs	r3, #0
 8006e00:	613b      	str	r3, [r7, #16]
 8006e02:	4b25      	ldr	r3, [pc, #148]	; (8006e98 <HAL_HCD_MspInit+0xbc>)
 8006e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e06:	4a24      	ldr	r2, [pc, #144]	; (8006e98 <HAL_HCD_MspInit+0xbc>)
 8006e08:	f043 0301 	orr.w	r3, r3, #1
 8006e0c:	6313      	str	r3, [r2, #48]	; 0x30
 8006e0e:	4b22      	ldr	r3, [pc, #136]	; (8006e98 <HAL_HCD_MspInit+0xbc>)
 8006e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e12:	f003 0301 	and.w	r3, r3, #1
 8006e16:	613b      	str	r3, [r7, #16]
 8006e18:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8006e1a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006e1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006e20:	2300      	movs	r3, #0
 8006e22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e24:	2300      	movs	r3, #0
 8006e26:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8006e28:	f107 0314 	add.w	r3, r7, #20
 8006e2c:	4619      	mov	r1, r3
 8006e2e:	481b      	ldr	r0, [pc, #108]	; (8006e9c <HAL_HCD_MspInit+0xc0>)
 8006e30:	f7fa fd92 	bl	8001958 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8006e34:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8006e38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006e3a:	2302      	movs	r3, #2
 8006e3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e3e:	2300      	movs	r3, #0
 8006e40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006e42:	2300      	movs	r3, #0
 8006e44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006e46:	230a      	movs	r3, #10
 8006e48:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006e4a:	f107 0314 	add.w	r3, r7, #20
 8006e4e:	4619      	mov	r1, r3
 8006e50:	4812      	ldr	r0, [pc, #72]	; (8006e9c <HAL_HCD_MspInit+0xc0>)
 8006e52:	f7fa fd81 	bl	8001958 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006e56:	4b10      	ldr	r3, [pc, #64]	; (8006e98 <HAL_HCD_MspInit+0xbc>)
 8006e58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e5a:	4a0f      	ldr	r2, [pc, #60]	; (8006e98 <HAL_HCD_MspInit+0xbc>)
 8006e5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e60:	6353      	str	r3, [r2, #52]	; 0x34
 8006e62:	2300      	movs	r3, #0
 8006e64:	60fb      	str	r3, [r7, #12]
 8006e66:	4b0c      	ldr	r3, [pc, #48]	; (8006e98 <HAL_HCD_MspInit+0xbc>)
 8006e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e6a:	4a0b      	ldr	r2, [pc, #44]	; (8006e98 <HAL_HCD_MspInit+0xbc>)
 8006e6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006e70:	6453      	str	r3, [r2, #68]	; 0x44
 8006e72:	4b09      	ldr	r3, [pc, #36]	; (8006e98 <HAL_HCD_MspInit+0xbc>)
 8006e74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006e7a:	60fb      	str	r3, [r7, #12]
 8006e7c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006e7e:	2200      	movs	r2, #0
 8006e80:	2100      	movs	r1, #0
 8006e82:	2043      	movs	r0, #67	; 0x43
 8006e84:	f7fa fd31 	bl	80018ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006e88:	2043      	movs	r0, #67	; 0x43
 8006e8a:	f7fa fd4a 	bl	8001922 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006e8e:	bf00      	nop
 8006e90:	3728      	adds	r7, #40	; 0x28
 8006e92:	46bd      	mov	sp, r7
 8006e94:	bd80      	pop	{r7, pc}
 8006e96:	bf00      	nop
 8006e98:	40023800 	.word	0x40023800
 8006e9c:	40020000 	.word	0x40020000

08006ea0 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b082      	sub	sp, #8
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8006eae:	4618      	mov	r0, r3
 8006eb0:	f7ff fbb7 	bl	8006622 <USBH_LL_IncTimer>
}
 8006eb4:	bf00      	nop
 8006eb6:	3708      	adds	r7, #8
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	bd80      	pop	{r7, pc}

08006ebc <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b082      	sub	sp, #8
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8006eca:	4618      	mov	r0, r3
 8006ecc:	f7ff fbef 	bl	80066ae <USBH_LL_Connect>
}
 8006ed0:	bf00      	nop
 8006ed2:	3708      	adds	r7, #8
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	bd80      	pop	{r7, pc}

08006ed8 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b082      	sub	sp, #8
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	f7ff fbf8 	bl	80066dc <USBH_LL_Disconnect>
}
 8006eec:	bf00      	nop
 8006eee:	3708      	adds	r7, #8
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	bd80      	pop	{r7, pc}

08006ef4 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8006ef4:	b480      	push	{r7}
 8006ef6:	b083      	sub	sp, #12
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
 8006efc:	460b      	mov	r3, r1
 8006efe:	70fb      	strb	r3, [r7, #3]
 8006f00:	4613      	mov	r3, r2
 8006f02:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8006f04:	bf00      	nop
 8006f06:	370c      	adds	r7, #12
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0e:	4770      	bx	lr

08006f10 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b082      	sub	sp, #8
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8006f1e:	4618      	mov	r0, r3
 8006f20:	f7ff fba9 	bl	8006676 <USBH_LL_PortEnabled>
}
 8006f24:	bf00      	nop
 8006f26:	3708      	adds	r7, #8
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	bd80      	pop	{r7, pc}

08006f2c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b082      	sub	sp, #8
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	f7ff fba9 	bl	8006692 <USBH_LL_PortDisabled>
}
 8006f40:	bf00      	nop
 8006f42:	3708      	adds	r7, #8
 8006f44:	46bd      	mov	sp, r7
 8006f46:	bd80      	pop	{r7, pc}

08006f48 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b082      	sub	sp, #8
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8006f56:	2b01      	cmp	r3, #1
 8006f58:	d12a      	bne.n	8006fb0 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8006f5a:	4a18      	ldr	r2, [pc, #96]	; (8006fbc <USBH_LL_Init+0x74>)
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	4a15      	ldr	r2, [pc, #84]	; (8006fbc <USBH_LL_Init+0x74>)
 8006f66:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006f6a:	4b14      	ldr	r3, [pc, #80]	; (8006fbc <USBH_LL_Init+0x74>)
 8006f6c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8006f70:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8006f72:	4b12      	ldr	r3, [pc, #72]	; (8006fbc <USBH_LL_Init+0x74>)
 8006f74:	2208      	movs	r2, #8
 8006f76:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8006f78:	4b10      	ldr	r3, [pc, #64]	; (8006fbc <USBH_LL_Init+0x74>)
 8006f7a:	2201      	movs	r2, #1
 8006f7c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8006f7e:	4b0f      	ldr	r3, [pc, #60]	; (8006fbc <USBH_LL_Init+0x74>)
 8006f80:	2200      	movs	r2, #0
 8006f82:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8006f84:	4b0d      	ldr	r3, [pc, #52]	; (8006fbc <USBH_LL_Init+0x74>)
 8006f86:	2202      	movs	r2, #2
 8006f88:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8006f8a:	4b0c      	ldr	r3, [pc, #48]	; (8006fbc <USBH_LL_Init+0x74>)
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8006f90:	480a      	ldr	r0, [pc, #40]	; (8006fbc <USBH_LL_Init+0x74>)
 8006f92:	f7fa fe96 	bl	8001cc2 <HAL_HCD_Init>
 8006f96:	4603      	mov	r3, r0
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d001      	beq.n	8006fa0 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8006f9c:	f7f9 fd0c 	bl	80009b8 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8006fa0:	4806      	ldr	r0, [pc, #24]	; (8006fbc <USBH_LL_Init+0x74>)
 8006fa2:	f7fb fa6c 	bl	800247e <HAL_HCD_GetCurrentFrame>
 8006fa6:	4603      	mov	r3, r0
 8006fa8:	4619      	mov	r1, r3
 8006faa:	6878      	ldr	r0, [r7, #4]
 8006fac:	f7ff fb2a 	bl	8006604 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8006fb0:	2300      	movs	r3, #0
}
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	3708      	adds	r7, #8
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	bd80      	pop	{r7, pc}
 8006fba:	bf00      	nop
 8006fbc:	200005bc 	.word	0x200005bc

08006fc0 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b084      	sub	sp, #16
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006fc8:	2300      	movs	r3, #0
 8006fca:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006fcc:	2300      	movs	r3, #0
 8006fce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	f7fb f9e9 	bl	80023ae <HAL_HCD_Start>
 8006fdc:	4603      	mov	r3, r0
 8006fde:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8006fe0:	7bfb      	ldrb	r3, [r7, #15]
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	f000 f90e 	bl	8007204 <USBH_Get_USB_Status>
 8006fe8:	4603      	mov	r3, r0
 8006fea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006fec:	7bbb      	ldrb	r3, [r7, #14]
}
 8006fee:	4618      	mov	r0, r3
 8006ff0:	3710      	adds	r7, #16
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	bd80      	pop	{r7, pc}

08006ff6 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8006ff6:	b580      	push	{r7, lr}
 8006ff8:	b084      	sub	sp, #16
 8006ffa:	af00      	add	r7, sp, #0
 8006ffc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006ffe:	2300      	movs	r3, #0
 8007000:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007002:	2300      	movs	r3, #0
 8007004:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800700c:	4618      	mov	r0, r3
 800700e:	f7fb f9f1 	bl	80023f4 <HAL_HCD_Stop>
 8007012:	4603      	mov	r3, r0
 8007014:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007016:	7bfb      	ldrb	r3, [r7, #15]
 8007018:	4618      	mov	r0, r3
 800701a:	f000 f8f3 	bl	8007204 <USBH_Get_USB_Status>
 800701e:	4603      	mov	r3, r0
 8007020:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007022:	7bbb      	ldrb	r3, [r7, #14]
}
 8007024:	4618      	mov	r0, r3
 8007026:	3710      	adds	r7, #16
 8007028:	46bd      	mov	sp, r7
 800702a:	bd80      	pop	{r7, pc}

0800702c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800702c:	b580      	push	{r7, lr}
 800702e:	b082      	sub	sp, #8
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
 8007034:	460b      	mov	r3, r1
 8007036:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800703e:	78fa      	ldrb	r2, [r7, #3]
 8007040:	4611      	mov	r1, r2
 8007042:	4618      	mov	r0, r3
 8007044:	f7fb fa07 	bl	8002456 <HAL_HCD_HC_GetXferCount>
 8007048:	4603      	mov	r3, r0
}
 800704a:	4618      	mov	r0, r3
 800704c:	3708      	adds	r7, #8
 800704e:	46bd      	mov	sp, r7
 8007050:	bd80      	pop	{r7, pc}

08007052 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007052:	b590      	push	{r4, r7, lr}
 8007054:	b089      	sub	sp, #36	; 0x24
 8007056:	af04      	add	r7, sp, #16
 8007058:	6078      	str	r0, [r7, #4]
 800705a:	4608      	mov	r0, r1
 800705c:	4611      	mov	r1, r2
 800705e:	461a      	mov	r2, r3
 8007060:	4603      	mov	r3, r0
 8007062:	70fb      	strb	r3, [r7, #3]
 8007064:	460b      	mov	r3, r1
 8007066:	70bb      	strb	r3, [r7, #2]
 8007068:	4613      	mov	r3, r2
 800706a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800706c:	2300      	movs	r3, #0
 800706e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007070:	2300      	movs	r3, #0
 8007072:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800707a:	787c      	ldrb	r4, [r7, #1]
 800707c:	78ba      	ldrb	r2, [r7, #2]
 800707e:	78f9      	ldrb	r1, [r7, #3]
 8007080:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007082:	9302      	str	r3, [sp, #8]
 8007084:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007088:	9301      	str	r3, [sp, #4]
 800708a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800708e:	9300      	str	r3, [sp, #0]
 8007090:	4623      	mov	r3, r4
 8007092:	f7fa fe78 	bl	8001d86 <HAL_HCD_HC_Init>
 8007096:	4603      	mov	r3, r0
 8007098:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800709a:	7bfb      	ldrb	r3, [r7, #15]
 800709c:	4618      	mov	r0, r3
 800709e:	f000 f8b1 	bl	8007204 <USBH_Get_USB_Status>
 80070a2:	4603      	mov	r3, r0
 80070a4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80070a6:	7bbb      	ldrb	r3, [r7, #14]
}
 80070a8:	4618      	mov	r0, r3
 80070aa:	3714      	adds	r7, #20
 80070ac:	46bd      	mov	sp, r7
 80070ae:	bd90      	pop	{r4, r7, pc}

080070b0 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b084      	sub	sp, #16
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
 80070b8:	460b      	mov	r3, r1
 80070ba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80070bc:	2300      	movs	r3, #0
 80070be:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80070c0:	2300      	movs	r3, #0
 80070c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80070ca:	78fa      	ldrb	r2, [r7, #3]
 80070cc:	4611      	mov	r1, r2
 80070ce:	4618      	mov	r0, r3
 80070d0:	f7fa fee8 	bl	8001ea4 <HAL_HCD_HC_Halt>
 80070d4:	4603      	mov	r3, r0
 80070d6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80070d8:	7bfb      	ldrb	r3, [r7, #15]
 80070da:	4618      	mov	r0, r3
 80070dc:	f000 f892 	bl	8007204 <USBH_Get_USB_Status>
 80070e0:	4603      	mov	r3, r0
 80070e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80070e4:	7bbb      	ldrb	r3, [r7, #14]
}
 80070e6:	4618      	mov	r0, r3
 80070e8:	3710      	adds	r7, #16
 80070ea:	46bd      	mov	sp, r7
 80070ec:	bd80      	pop	{r7, pc}

080070ee <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80070ee:	b590      	push	{r4, r7, lr}
 80070f0:	b089      	sub	sp, #36	; 0x24
 80070f2:	af04      	add	r7, sp, #16
 80070f4:	6078      	str	r0, [r7, #4]
 80070f6:	4608      	mov	r0, r1
 80070f8:	4611      	mov	r1, r2
 80070fa:	461a      	mov	r2, r3
 80070fc:	4603      	mov	r3, r0
 80070fe:	70fb      	strb	r3, [r7, #3]
 8007100:	460b      	mov	r3, r1
 8007102:	70bb      	strb	r3, [r7, #2]
 8007104:	4613      	mov	r3, r2
 8007106:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007108:	2300      	movs	r3, #0
 800710a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800710c:	2300      	movs	r3, #0
 800710e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8007116:	787c      	ldrb	r4, [r7, #1]
 8007118:	78ba      	ldrb	r2, [r7, #2]
 800711a:	78f9      	ldrb	r1, [r7, #3]
 800711c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007120:	9303      	str	r3, [sp, #12]
 8007122:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007124:	9302      	str	r3, [sp, #8]
 8007126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007128:	9301      	str	r3, [sp, #4]
 800712a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800712e:	9300      	str	r3, [sp, #0]
 8007130:	4623      	mov	r3, r4
 8007132:	f7fa fedb 	bl	8001eec <HAL_HCD_HC_SubmitRequest>
 8007136:	4603      	mov	r3, r0
 8007138:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800713a:	7bfb      	ldrb	r3, [r7, #15]
 800713c:	4618      	mov	r0, r3
 800713e:	f000 f861 	bl	8007204 <USBH_Get_USB_Status>
 8007142:	4603      	mov	r3, r0
 8007144:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007146:	7bbb      	ldrb	r3, [r7, #14]
}
 8007148:	4618      	mov	r0, r3
 800714a:	3714      	adds	r7, #20
 800714c:	46bd      	mov	sp, r7
 800714e:	bd90      	pop	{r4, r7, pc}

08007150 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007150:	b580      	push	{r7, lr}
 8007152:	b082      	sub	sp, #8
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
 8007158:	460b      	mov	r3, r1
 800715a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007162:	78fa      	ldrb	r2, [r7, #3]
 8007164:	4611      	mov	r1, r2
 8007166:	4618      	mov	r0, r3
 8007168:	f7fb f961 	bl	800242e <HAL_HCD_HC_GetURBState>
 800716c:	4603      	mov	r3, r0
}
 800716e:	4618      	mov	r0, r3
 8007170:	3708      	adds	r7, #8
 8007172:	46bd      	mov	sp, r7
 8007174:	bd80      	pop	{r7, pc}

08007176 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8007176:	b580      	push	{r7, lr}
 8007178:	b082      	sub	sp, #8
 800717a:	af00      	add	r7, sp, #0
 800717c:	6078      	str	r0, [r7, #4]
 800717e:	460b      	mov	r3, r1
 8007180:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8007188:	2b01      	cmp	r3, #1
 800718a:	d103      	bne.n	8007194 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800718c:	78fb      	ldrb	r3, [r7, #3]
 800718e:	4618      	mov	r0, r3
 8007190:	f000 f864 	bl	800725c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8007194:	20c8      	movs	r0, #200	; 0xc8
 8007196:	f7f9 fea9 	bl	8000eec <HAL_Delay>
  return USBH_OK;
 800719a:	2300      	movs	r3, #0
}
 800719c:	4618      	mov	r0, r3
 800719e:	3708      	adds	r7, #8
 80071a0:	46bd      	mov	sp, r7
 80071a2:	bd80      	pop	{r7, pc}

080071a4 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80071a4:	b480      	push	{r7}
 80071a6:	b085      	sub	sp, #20
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
 80071ac:	460b      	mov	r3, r1
 80071ae:	70fb      	strb	r3, [r7, #3]
 80071b0:	4613      	mov	r3, r2
 80071b2:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80071ba:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80071bc:	78fb      	ldrb	r3, [r7, #3]
 80071be:	68fa      	ldr	r2, [r7, #12]
 80071c0:	212c      	movs	r1, #44	; 0x2c
 80071c2:	fb01 f303 	mul.w	r3, r1, r3
 80071c6:	4413      	add	r3, r2
 80071c8:	333b      	adds	r3, #59	; 0x3b
 80071ca:	781b      	ldrb	r3, [r3, #0]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d009      	beq.n	80071e4 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80071d0:	78fb      	ldrb	r3, [r7, #3]
 80071d2:	68fa      	ldr	r2, [r7, #12]
 80071d4:	212c      	movs	r1, #44	; 0x2c
 80071d6:	fb01 f303 	mul.w	r3, r1, r3
 80071da:	4413      	add	r3, r2
 80071dc:	3354      	adds	r3, #84	; 0x54
 80071de:	78ba      	ldrb	r2, [r7, #2]
 80071e0:	701a      	strb	r2, [r3, #0]
 80071e2:	e008      	b.n	80071f6 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80071e4:	78fb      	ldrb	r3, [r7, #3]
 80071e6:	68fa      	ldr	r2, [r7, #12]
 80071e8:	212c      	movs	r1, #44	; 0x2c
 80071ea:	fb01 f303 	mul.w	r3, r1, r3
 80071ee:	4413      	add	r3, r2
 80071f0:	3355      	adds	r3, #85	; 0x55
 80071f2:	78ba      	ldrb	r2, [r7, #2]
 80071f4:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80071f6:	2300      	movs	r3, #0
}
 80071f8:	4618      	mov	r0, r3
 80071fa:	3714      	adds	r7, #20
 80071fc:	46bd      	mov	sp, r7
 80071fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007202:	4770      	bx	lr

08007204 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007204:	b480      	push	{r7}
 8007206:	b085      	sub	sp, #20
 8007208:	af00      	add	r7, sp, #0
 800720a:	4603      	mov	r3, r0
 800720c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800720e:	2300      	movs	r3, #0
 8007210:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007212:	79fb      	ldrb	r3, [r7, #7]
 8007214:	2b03      	cmp	r3, #3
 8007216:	d817      	bhi.n	8007248 <USBH_Get_USB_Status+0x44>
 8007218:	a201      	add	r2, pc, #4	; (adr r2, 8007220 <USBH_Get_USB_Status+0x1c>)
 800721a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800721e:	bf00      	nop
 8007220:	08007231 	.word	0x08007231
 8007224:	08007237 	.word	0x08007237
 8007228:	0800723d 	.word	0x0800723d
 800722c:	08007243 	.word	0x08007243
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8007230:	2300      	movs	r3, #0
 8007232:	73fb      	strb	r3, [r7, #15]
    break;
 8007234:	e00b      	b.n	800724e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8007236:	2302      	movs	r3, #2
 8007238:	73fb      	strb	r3, [r7, #15]
    break;
 800723a:	e008      	b.n	800724e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800723c:	2301      	movs	r3, #1
 800723e:	73fb      	strb	r3, [r7, #15]
    break;
 8007240:	e005      	b.n	800724e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8007242:	2302      	movs	r3, #2
 8007244:	73fb      	strb	r3, [r7, #15]
    break;
 8007246:	e002      	b.n	800724e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8007248:	2302      	movs	r3, #2
 800724a:	73fb      	strb	r3, [r7, #15]
    break;
 800724c:	bf00      	nop
  }
  return usb_status;
 800724e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007250:	4618      	mov	r0, r3
 8007252:	3714      	adds	r7, #20
 8007254:	46bd      	mov	sp, r7
 8007256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725a:	4770      	bx	lr

0800725c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800725c:	b580      	push	{r7, lr}
 800725e:	b084      	sub	sp, #16
 8007260:	af00      	add	r7, sp, #0
 8007262:	4603      	mov	r3, r0
 8007264:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8007266:	79fb      	ldrb	r3, [r7, #7]
 8007268:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800726a:	79fb      	ldrb	r3, [r7, #7]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d102      	bne.n	8007276 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8007270:	2300      	movs	r3, #0
 8007272:	73fb      	strb	r3, [r7, #15]
 8007274:	e001      	b.n	800727a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8007276:	2301      	movs	r3, #1
 8007278:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800727a:	7bfb      	ldrb	r3, [r7, #15]
 800727c:	461a      	mov	r2, r3
 800727e:	2101      	movs	r1, #1
 8007280:	4803      	ldr	r0, [pc, #12]	; (8007290 <MX_DriverVbusFS+0x34>)
 8007282:	f7fa fd05 	bl	8001c90 <HAL_GPIO_WritePin>
}
 8007286:	bf00      	nop
 8007288:	3710      	adds	r7, #16
 800728a:	46bd      	mov	sp, r7
 800728c:	bd80      	pop	{r7, pc}
 800728e:	bf00      	nop
 8007290:	40020800 	.word	0x40020800

08007294 <malloc>:
 8007294:	4b02      	ldr	r3, [pc, #8]	; (80072a0 <malloc+0xc>)
 8007296:	4601      	mov	r1, r0
 8007298:	6818      	ldr	r0, [r3, #0]
 800729a:	f000 b82b 	b.w	80072f4 <_malloc_r>
 800729e:	bf00      	nop
 80072a0:	20000078 	.word	0x20000078

080072a4 <free>:
 80072a4:	4b02      	ldr	r3, [pc, #8]	; (80072b0 <free+0xc>)
 80072a6:	4601      	mov	r1, r0
 80072a8:	6818      	ldr	r0, [r3, #0]
 80072aa:	f000 b8f3 	b.w	8007494 <_free_r>
 80072ae:	bf00      	nop
 80072b0:	20000078 	.word	0x20000078

080072b4 <sbrk_aligned>:
 80072b4:	b570      	push	{r4, r5, r6, lr}
 80072b6:	4e0e      	ldr	r6, [pc, #56]	; (80072f0 <sbrk_aligned+0x3c>)
 80072b8:	460c      	mov	r4, r1
 80072ba:	6831      	ldr	r1, [r6, #0]
 80072bc:	4605      	mov	r5, r0
 80072be:	b911      	cbnz	r1, 80072c6 <sbrk_aligned+0x12>
 80072c0:	f000 f8ac 	bl	800741c <_sbrk_r>
 80072c4:	6030      	str	r0, [r6, #0]
 80072c6:	4621      	mov	r1, r4
 80072c8:	4628      	mov	r0, r5
 80072ca:	f000 f8a7 	bl	800741c <_sbrk_r>
 80072ce:	1c43      	adds	r3, r0, #1
 80072d0:	d00a      	beq.n	80072e8 <sbrk_aligned+0x34>
 80072d2:	1cc4      	adds	r4, r0, #3
 80072d4:	f024 0403 	bic.w	r4, r4, #3
 80072d8:	42a0      	cmp	r0, r4
 80072da:	d007      	beq.n	80072ec <sbrk_aligned+0x38>
 80072dc:	1a21      	subs	r1, r4, r0
 80072de:	4628      	mov	r0, r5
 80072e0:	f000 f89c 	bl	800741c <_sbrk_r>
 80072e4:	3001      	adds	r0, #1
 80072e6:	d101      	bne.n	80072ec <sbrk_aligned+0x38>
 80072e8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80072ec:	4620      	mov	r0, r4
 80072ee:	bd70      	pop	{r4, r5, r6, pc}
 80072f0:	200008c4 	.word	0x200008c4

080072f4 <_malloc_r>:
 80072f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80072f8:	1ccd      	adds	r5, r1, #3
 80072fa:	f025 0503 	bic.w	r5, r5, #3
 80072fe:	3508      	adds	r5, #8
 8007300:	2d0c      	cmp	r5, #12
 8007302:	bf38      	it	cc
 8007304:	250c      	movcc	r5, #12
 8007306:	2d00      	cmp	r5, #0
 8007308:	4607      	mov	r7, r0
 800730a:	db01      	blt.n	8007310 <_malloc_r+0x1c>
 800730c:	42a9      	cmp	r1, r5
 800730e:	d905      	bls.n	800731c <_malloc_r+0x28>
 8007310:	230c      	movs	r3, #12
 8007312:	603b      	str	r3, [r7, #0]
 8007314:	2600      	movs	r6, #0
 8007316:	4630      	mov	r0, r6
 8007318:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800731c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80073f0 <_malloc_r+0xfc>
 8007320:	f000 f868 	bl	80073f4 <__malloc_lock>
 8007324:	f8d8 3000 	ldr.w	r3, [r8]
 8007328:	461c      	mov	r4, r3
 800732a:	bb5c      	cbnz	r4, 8007384 <_malloc_r+0x90>
 800732c:	4629      	mov	r1, r5
 800732e:	4638      	mov	r0, r7
 8007330:	f7ff ffc0 	bl	80072b4 <sbrk_aligned>
 8007334:	1c43      	adds	r3, r0, #1
 8007336:	4604      	mov	r4, r0
 8007338:	d155      	bne.n	80073e6 <_malloc_r+0xf2>
 800733a:	f8d8 4000 	ldr.w	r4, [r8]
 800733e:	4626      	mov	r6, r4
 8007340:	2e00      	cmp	r6, #0
 8007342:	d145      	bne.n	80073d0 <_malloc_r+0xdc>
 8007344:	2c00      	cmp	r4, #0
 8007346:	d048      	beq.n	80073da <_malloc_r+0xe6>
 8007348:	6823      	ldr	r3, [r4, #0]
 800734a:	4631      	mov	r1, r6
 800734c:	4638      	mov	r0, r7
 800734e:	eb04 0903 	add.w	r9, r4, r3
 8007352:	f000 f863 	bl	800741c <_sbrk_r>
 8007356:	4581      	cmp	r9, r0
 8007358:	d13f      	bne.n	80073da <_malloc_r+0xe6>
 800735a:	6821      	ldr	r1, [r4, #0]
 800735c:	1a6d      	subs	r5, r5, r1
 800735e:	4629      	mov	r1, r5
 8007360:	4638      	mov	r0, r7
 8007362:	f7ff ffa7 	bl	80072b4 <sbrk_aligned>
 8007366:	3001      	adds	r0, #1
 8007368:	d037      	beq.n	80073da <_malloc_r+0xe6>
 800736a:	6823      	ldr	r3, [r4, #0]
 800736c:	442b      	add	r3, r5
 800736e:	6023      	str	r3, [r4, #0]
 8007370:	f8d8 3000 	ldr.w	r3, [r8]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d038      	beq.n	80073ea <_malloc_r+0xf6>
 8007378:	685a      	ldr	r2, [r3, #4]
 800737a:	42a2      	cmp	r2, r4
 800737c:	d12b      	bne.n	80073d6 <_malloc_r+0xe2>
 800737e:	2200      	movs	r2, #0
 8007380:	605a      	str	r2, [r3, #4]
 8007382:	e00f      	b.n	80073a4 <_malloc_r+0xb0>
 8007384:	6822      	ldr	r2, [r4, #0]
 8007386:	1b52      	subs	r2, r2, r5
 8007388:	d41f      	bmi.n	80073ca <_malloc_r+0xd6>
 800738a:	2a0b      	cmp	r2, #11
 800738c:	d917      	bls.n	80073be <_malloc_r+0xca>
 800738e:	1961      	adds	r1, r4, r5
 8007390:	42a3      	cmp	r3, r4
 8007392:	6025      	str	r5, [r4, #0]
 8007394:	bf18      	it	ne
 8007396:	6059      	strne	r1, [r3, #4]
 8007398:	6863      	ldr	r3, [r4, #4]
 800739a:	bf08      	it	eq
 800739c:	f8c8 1000 	streq.w	r1, [r8]
 80073a0:	5162      	str	r2, [r4, r5]
 80073a2:	604b      	str	r3, [r1, #4]
 80073a4:	4638      	mov	r0, r7
 80073a6:	f104 060b 	add.w	r6, r4, #11
 80073aa:	f000 f829 	bl	8007400 <__malloc_unlock>
 80073ae:	f026 0607 	bic.w	r6, r6, #7
 80073b2:	1d23      	adds	r3, r4, #4
 80073b4:	1af2      	subs	r2, r6, r3
 80073b6:	d0ae      	beq.n	8007316 <_malloc_r+0x22>
 80073b8:	1b9b      	subs	r3, r3, r6
 80073ba:	50a3      	str	r3, [r4, r2]
 80073bc:	e7ab      	b.n	8007316 <_malloc_r+0x22>
 80073be:	42a3      	cmp	r3, r4
 80073c0:	6862      	ldr	r2, [r4, #4]
 80073c2:	d1dd      	bne.n	8007380 <_malloc_r+0x8c>
 80073c4:	f8c8 2000 	str.w	r2, [r8]
 80073c8:	e7ec      	b.n	80073a4 <_malloc_r+0xb0>
 80073ca:	4623      	mov	r3, r4
 80073cc:	6864      	ldr	r4, [r4, #4]
 80073ce:	e7ac      	b.n	800732a <_malloc_r+0x36>
 80073d0:	4634      	mov	r4, r6
 80073d2:	6876      	ldr	r6, [r6, #4]
 80073d4:	e7b4      	b.n	8007340 <_malloc_r+0x4c>
 80073d6:	4613      	mov	r3, r2
 80073d8:	e7cc      	b.n	8007374 <_malloc_r+0x80>
 80073da:	230c      	movs	r3, #12
 80073dc:	603b      	str	r3, [r7, #0]
 80073de:	4638      	mov	r0, r7
 80073e0:	f000 f80e 	bl	8007400 <__malloc_unlock>
 80073e4:	e797      	b.n	8007316 <_malloc_r+0x22>
 80073e6:	6025      	str	r5, [r4, #0]
 80073e8:	e7dc      	b.n	80073a4 <_malloc_r+0xb0>
 80073ea:	605b      	str	r3, [r3, #4]
 80073ec:	deff      	udf	#255	; 0xff
 80073ee:	bf00      	nop
 80073f0:	200008c0 	.word	0x200008c0

080073f4 <__malloc_lock>:
 80073f4:	4801      	ldr	r0, [pc, #4]	; (80073fc <__malloc_lock+0x8>)
 80073f6:	f000 b84b 	b.w	8007490 <__retarget_lock_acquire_recursive>
 80073fa:	bf00      	nop
 80073fc:	20000a00 	.word	0x20000a00

08007400 <__malloc_unlock>:
 8007400:	4801      	ldr	r0, [pc, #4]	; (8007408 <__malloc_unlock+0x8>)
 8007402:	f000 b846 	b.w	8007492 <__retarget_lock_release_recursive>
 8007406:	bf00      	nop
 8007408:	20000a00 	.word	0x20000a00

0800740c <memset>:
 800740c:	4402      	add	r2, r0
 800740e:	4603      	mov	r3, r0
 8007410:	4293      	cmp	r3, r2
 8007412:	d100      	bne.n	8007416 <memset+0xa>
 8007414:	4770      	bx	lr
 8007416:	f803 1b01 	strb.w	r1, [r3], #1
 800741a:	e7f9      	b.n	8007410 <memset+0x4>

0800741c <_sbrk_r>:
 800741c:	b538      	push	{r3, r4, r5, lr}
 800741e:	4d06      	ldr	r5, [pc, #24]	; (8007438 <_sbrk_r+0x1c>)
 8007420:	2300      	movs	r3, #0
 8007422:	4604      	mov	r4, r0
 8007424:	4608      	mov	r0, r1
 8007426:	602b      	str	r3, [r5, #0]
 8007428:	f7f9 fc7c 	bl	8000d24 <_sbrk>
 800742c:	1c43      	adds	r3, r0, #1
 800742e:	d102      	bne.n	8007436 <_sbrk_r+0x1a>
 8007430:	682b      	ldr	r3, [r5, #0]
 8007432:	b103      	cbz	r3, 8007436 <_sbrk_r+0x1a>
 8007434:	6023      	str	r3, [r4, #0]
 8007436:	bd38      	pop	{r3, r4, r5, pc}
 8007438:	20000a04 	.word	0x20000a04

0800743c <__errno>:
 800743c:	4b01      	ldr	r3, [pc, #4]	; (8007444 <__errno+0x8>)
 800743e:	6818      	ldr	r0, [r3, #0]
 8007440:	4770      	bx	lr
 8007442:	bf00      	nop
 8007444:	20000078 	.word	0x20000078

08007448 <__libc_init_array>:
 8007448:	b570      	push	{r4, r5, r6, lr}
 800744a:	4d0d      	ldr	r5, [pc, #52]	; (8007480 <__libc_init_array+0x38>)
 800744c:	4c0d      	ldr	r4, [pc, #52]	; (8007484 <__libc_init_array+0x3c>)
 800744e:	1b64      	subs	r4, r4, r5
 8007450:	10a4      	asrs	r4, r4, #2
 8007452:	2600      	movs	r6, #0
 8007454:	42a6      	cmp	r6, r4
 8007456:	d109      	bne.n	800746c <__libc_init_array+0x24>
 8007458:	4d0b      	ldr	r5, [pc, #44]	; (8007488 <__libc_init_array+0x40>)
 800745a:	4c0c      	ldr	r4, [pc, #48]	; (800748c <__libc_init_array+0x44>)
 800745c:	f000 f866 	bl	800752c <_init>
 8007460:	1b64      	subs	r4, r4, r5
 8007462:	10a4      	asrs	r4, r4, #2
 8007464:	2600      	movs	r6, #0
 8007466:	42a6      	cmp	r6, r4
 8007468:	d105      	bne.n	8007476 <__libc_init_array+0x2e>
 800746a:	bd70      	pop	{r4, r5, r6, pc}
 800746c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007470:	4798      	blx	r3
 8007472:	3601      	adds	r6, #1
 8007474:	e7ee      	b.n	8007454 <__libc_init_array+0xc>
 8007476:	f855 3b04 	ldr.w	r3, [r5], #4
 800747a:	4798      	blx	r3
 800747c:	3601      	adds	r6, #1
 800747e:	e7f2      	b.n	8007466 <__libc_init_array+0x1e>
 8007480:	08007568 	.word	0x08007568
 8007484:	08007568 	.word	0x08007568
 8007488:	08007568 	.word	0x08007568
 800748c:	0800756c 	.word	0x0800756c

08007490 <__retarget_lock_acquire_recursive>:
 8007490:	4770      	bx	lr

08007492 <__retarget_lock_release_recursive>:
 8007492:	4770      	bx	lr

08007494 <_free_r>:
 8007494:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007496:	2900      	cmp	r1, #0
 8007498:	d044      	beq.n	8007524 <_free_r+0x90>
 800749a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800749e:	9001      	str	r0, [sp, #4]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	f1a1 0404 	sub.w	r4, r1, #4
 80074a6:	bfb8      	it	lt
 80074a8:	18e4      	addlt	r4, r4, r3
 80074aa:	f7ff ffa3 	bl	80073f4 <__malloc_lock>
 80074ae:	4a1e      	ldr	r2, [pc, #120]	; (8007528 <_free_r+0x94>)
 80074b0:	9801      	ldr	r0, [sp, #4]
 80074b2:	6813      	ldr	r3, [r2, #0]
 80074b4:	b933      	cbnz	r3, 80074c4 <_free_r+0x30>
 80074b6:	6063      	str	r3, [r4, #4]
 80074b8:	6014      	str	r4, [r2, #0]
 80074ba:	b003      	add	sp, #12
 80074bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80074c0:	f7ff bf9e 	b.w	8007400 <__malloc_unlock>
 80074c4:	42a3      	cmp	r3, r4
 80074c6:	d908      	bls.n	80074da <_free_r+0x46>
 80074c8:	6825      	ldr	r5, [r4, #0]
 80074ca:	1961      	adds	r1, r4, r5
 80074cc:	428b      	cmp	r3, r1
 80074ce:	bf01      	itttt	eq
 80074d0:	6819      	ldreq	r1, [r3, #0]
 80074d2:	685b      	ldreq	r3, [r3, #4]
 80074d4:	1949      	addeq	r1, r1, r5
 80074d6:	6021      	streq	r1, [r4, #0]
 80074d8:	e7ed      	b.n	80074b6 <_free_r+0x22>
 80074da:	461a      	mov	r2, r3
 80074dc:	685b      	ldr	r3, [r3, #4]
 80074de:	b10b      	cbz	r3, 80074e4 <_free_r+0x50>
 80074e0:	42a3      	cmp	r3, r4
 80074e2:	d9fa      	bls.n	80074da <_free_r+0x46>
 80074e4:	6811      	ldr	r1, [r2, #0]
 80074e6:	1855      	adds	r5, r2, r1
 80074e8:	42a5      	cmp	r5, r4
 80074ea:	d10b      	bne.n	8007504 <_free_r+0x70>
 80074ec:	6824      	ldr	r4, [r4, #0]
 80074ee:	4421      	add	r1, r4
 80074f0:	1854      	adds	r4, r2, r1
 80074f2:	42a3      	cmp	r3, r4
 80074f4:	6011      	str	r1, [r2, #0]
 80074f6:	d1e0      	bne.n	80074ba <_free_r+0x26>
 80074f8:	681c      	ldr	r4, [r3, #0]
 80074fa:	685b      	ldr	r3, [r3, #4]
 80074fc:	6053      	str	r3, [r2, #4]
 80074fe:	440c      	add	r4, r1
 8007500:	6014      	str	r4, [r2, #0]
 8007502:	e7da      	b.n	80074ba <_free_r+0x26>
 8007504:	d902      	bls.n	800750c <_free_r+0x78>
 8007506:	230c      	movs	r3, #12
 8007508:	6003      	str	r3, [r0, #0]
 800750a:	e7d6      	b.n	80074ba <_free_r+0x26>
 800750c:	6825      	ldr	r5, [r4, #0]
 800750e:	1961      	adds	r1, r4, r5
 8007510:	428b      	cmp	r3, r1
 8007512:	bf04      	itt	eq
 8007514:	6819      	ldreq	r1, [r3, #0]
 8007516:	685b      	ldreq	r3, [r3, #4]
 8007518:	6063      	str	r3, [r4, #4]
 800751a:	bf04      	itt	eq
 800751c:	1949      	addeq	r1, r1, r5
 800751e:	6021      	streq	r1, [r4, #0]
 8007520:	6054      	str	r4, [r2, #4]
 8007522:	e7ca      	b.n	80074ba <_free_r+0x26>
 8007524:	b003      	add	sp, #12
 8007526:	bd30      	pop	{r4, r5, pc}
 8007528:	200008c0 	.word	0x200008c0

0800752c <_init>:
 800752c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800752e:	bf00      	nop
 8007530:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007532:	bc08      	pop	{r3}
 8007534:	469e      	mov	lr, r3
 8007536:	4770      	bx	lr

08007538 <_fini>:
 8007538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800753a:	bf00      	nop
 800753c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800753e:	bc08      	pop	{r3}
 8007540:	469e      	mov	lr, r3
 8007542:	4770      	bx	lr
