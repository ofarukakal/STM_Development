
STM_Uart_Communication.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000730c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08007494  08007494  00017494  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080074c0  080074c0  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  080074c0  080074c0  000174c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080074c8  080074c8  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080074c8  080074c8  000174c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080074cc  080074cc  000174cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  080074d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002007c  2**0
                  CONTENTS
 10 .bss          00000984  2000007c  2000007c  0002007c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000a00  20000a00  0002007c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 14 .debug_info   00017bd5  00000000  00000000  000200ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003b6f  00000000  00000000  00037cc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001328  00000000  00000000  0003b838  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000ec4  00000000  00000000  0003cb60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00024103  00000000  00000000  0003da24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00019f88  00000000  00000000  00061b27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000cd51d  00000000  00000000  0007baaf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005374  00000000  00000000  00148fcc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000071  00000000  00000000  0014e340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000007c 	.word	0x2000007c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800747c 	.word	0x0800747c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000080 	.word	0x20000080
 80001c4:	0800747c 	.word	0x0800747c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c8:	f000 fc70 	bl	8000dac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004cc:	f000 f81c 	bl	8000508 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d0:	f000 f942 	bl	8000758 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004d4:	f000 f882 	bl	80005dc <MX_I2C1_Init>
  MX_I2S3_Init();
 80004d8:	f000 f8ae 	bl	8000638 <MX_I2S3_Init>
  MX_SPI1_Init();
 80004dc:	f000 f8dc 	bl	8000698 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80004e0:	f006 fbd0 	bl	8006c84 <MX_USB_HOST_Init>
  MX_USART2_UART_Init();
 80004e4:	f000 f90e 	bl	8000704 <MX_USART2_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_UART_Transmit(&huart2, "Hello World \r\n", strlen("Hello World \r\n"),1000);
 80004e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004ec:	220e      	movs	r2, #14
 80004ee:	4904      	ldr	r1, [pc, #16]	; (8000500 <main+0x3c>)
 80004f0:	4804      	ldr	r0, [pc, #16]	; (8000504 <main+0x40>)
 80004f2:	f004 f839 	bl	8004568 <HAL_UART_Transmit>
	  HAL_Delay(1000);
 80004f6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004fa:	f000 fcc9 	bl	8000e90 <HAL_Delay>
	  HAL_UART_Transmit(&huart2, "Hello World \r\n", strlen("Hello World \r\n"),1000);
 80004fe:	e7f3      	b.n	80004e8 <main+0x24>
 8000500:	08007494 	.word	0x08007494
 8000504:	2000018c 	.word	0x2000018c

08000508 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b094      	sub	sp, #80	; 0x50
 800050c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800050e:	f107 0320 	add.w	r3, r7, #32
 8000512:	2230      	movs	r2, #48	; 0x30
 8000514:	2100      	movs	r1, #0
 8000516:	4618      	mov	r0, r3
 8000518:	f006 ff20 	bl	800735c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800051c:	f107 030c 	add.w	r3, r7, #12
 8000520:	2200      	movs	r2, #0
 8000522:	601a      	str	r2, [r3, #0]
 8000524:	605a      	str	r2, [r3, #4]
 8000526:	609a      	str	r2, [r3, #8]
 8000528:	60da      	str	r2, [r3, #12]
 800052a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800052c:	2300      	movs	r3, #0
 800052e:	60bb      	str	r3, [r7, #8]
 8000530:	4b28      	ldr	r3, [pc, #160]	; (80005d4 <SystemClock_Config+0xcc>)
 8000532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000534:	4a27      	ldr	r2, [pc, #156]	; (80005d4 <SystemClock_Config+0xcc>)
 8000536:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800053a:	6413      	str	r3, [r2, #64]	; 0x40
 800053c:	4b25      	ldr	r3, [pc, #148]	; (80005d4 <SystemClock_Config+0xcc>)
 800053e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000540:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000544:	60bb      	str	r3, [r7, #8]
 8000546:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000548:	2300      	movs	r3, #0
 800054a:	607b      	str	r3, [r7, #4]
 800054c:	4b22      	ldr	r3, [pc, #136]	; (80005d8 <SystemClock_Config+0xd0>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	4a21      	ldr	r2, [pc, #132]	; (80005d8 <SystemClock_Config+0xd0>)
 8000552:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000556:	6013      	str	r3, [r2, #0]
 8000558:	4b1f      	ldr	r3, [pc, #124]	; (80005d8 <SystemClock_Config+0xd0>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000560:	607b      	str	r3, [r7, #4]
 8000562:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000564:	2301      	movs	r3, #1
 8000566:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000568:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800056c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800056e:	2302      	movs	r3, #2
 8000570:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000572:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000576:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000578:	2308      	movs	r3, #8
 800057a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800057c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000580:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000582:	2302      	movs	r3, #2
 8000584:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000586:	2307      	movs	r3, #7
 8000588:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800058a:	f107 0320 	add.w	r3, r7, #32
 800058e:	4618      	mov	r0, r3
 8000590:	f003 f93c 	bl	800380c <HAL_RCC_OscConfig>
 8000594:	4603      	mov	r3, r0
 8000596:	2b00      	cmp	r3, #0
 8000598:	d001      	beq.n	800059e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800059a:	f000 f9db 	bl	8000954 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800059e:	230f      	movs	r3, #15
 80005a0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005a2:	2302      	movs	r3, #2
 80005a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005a6:	2300      	movs	r3, #0
 80005a8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005aa:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005ae:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005b4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005b6:	f107 030c 	add.w	r3, r7, #12
 80005ba:	2105      	movs	r1, #5
 80005bc:	4618      	mov	r0, r3
 80005be:	f003 fb9d 	bl	8003cfc <HAL_RCC_ClockConfig>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d001      	beq.n	80005cc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80005c8:	f000 f9c4 	bl	8000954 <Error_Handler>
  }
}
 80005cc:	bf00      	nop
 80005ce:	3750      	adds	r7, #80	; 0x50
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	40023800 	.word	0x40023800
 80005d8:	40007000 	.word	0x40007000

080005dc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005e0:	4b12      	ldr	r3, [pc, #72]	; (800062c <MX_I2C1_Init+0x50>)
 80005e2:	4a13      	ldr	r2, [pc, #76]	; (8000630 <MX_I2C1_Init+0x54>)
 80005e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80005e6:	4b11      	ldr	r3, [pc, #68]	; (800062c <MX_I2C1_Init+0x50>)
 80005e8:	4a12      	ldr	r2, [pc, #72]	; (8000634 <MX_I2C1_Init+0x58>)
 80005ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80005ec:	4b0f      	ldr	r3, [pc, #60]	; (800062c <MX_I2C1_Init+0x50>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80005f2:	4b0e      	ldr	r3, [pc, #56]	; (800062c <MX_I2C1_Init+0x50>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005f8:	4b0c      	ldr	r3, [pc, #48]	; (800062c <MX_I2C1_Init+0x50>)
 80005fa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80005fe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000600:	4b0a      	ldr	r3, [pc, #40]	; (800062c <MX_I2C1_Init+0x50>)
 8000602:	2200      	movs	r2, #0
 8000604:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000606:	4b09      	ldr	r3, [pc, #36]	; (800062c <MX_I2C1_Init+0x50>)
 8000608:	2200      	movs	r2, #0
 800060a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800060c:	4b07      	ldr	r3, [pc, #28]	; (800062c <MX_I2C1_Init+0x50>)
 800060e:	2200      	movs	r2, #0
 8000610:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000612:	4b06      	ldr	r3, [pc, #24]	; (800062c <MX_I2C1_Init+0x50>)
 8000614:	2200      	movs	r2, #0
 8000616:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000618:	4804      	ldr	r0, [pc, #16]	; (800062c <MX_I2C1_Init+0x50>)
 800061a:	f002 fb13 	bl	8002c44 <HAL_I2C_Init>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000624:	f000 f996 	bl	8000954 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000628:	bf00      	nop
 800062a:	bd80      	pop	{r7, pc}
 800062c:	20000098 	.word	0x20000098
 8000630:	40005400 	.word	0x40005400
 8000634:	000186a0 	.word	0x000186a0

08000638 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 800063c:	4b13      	ldr	r3, [pc, #76]	; (800068c <MX_I2S3_Init+0x54>)
 800063e:	4a14      	ldr	r2, [pc, #80]	; (8000690 <MX_I2S3_Init+0x58>)
 8000640:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000642:	4b12      	ldr	r3, [pc, #72]	; (800068c <MX_I2S3_Init+0x54>)
 8000644:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000648:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800064a:	4b10      	ldr	r3, [pc, #64]	; (800068c <MX_I2S3_Init+0x54>)
 800064c:	2200      	movs	r2, #0
 800064e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000650:	4b0e      	ldr	r3, [pc, #56]	; (800068c <MX_I2S3_Init+0x54>)
 8000652:	2200      	movs	r2, #0
 8000654:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000656:	4b0d      	ldr	r3, [pc, #52]	; (800068c <MX_I2S3_Init+0x54>)
 8000658:	f44f 7200 	mov.w	r2, #512	; 0x200
 800065c:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800065e:	4b0b      	ldr	r3, [pc, #44]	; (800068c <MX_I2S3_Init+0x54>)
 8000660:	4a0c      	ldr	r2, [pc, #48]	; (8000694 <MX_I2S3_Init+0x5c>)
 8000662:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000664:	4b09      	ldr	r3, [pc, #36]	; (800068c <MX_I2S3_Init+0x54>)
 8000666:	2200      	movs	r2, #0
 8000668:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800066a:	4b08      	ldr	r3, [pc, #32]	; (800068c <MX_I2S3_Init+0x54>)
 800066c:	2200      	movs	r2, #0
 800066e:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000670:	4b06      	ldr	r3, [pc, #24]	; (800068c <MX_I2S3_Init+0x54>)
 8000672:	2200      	movs	r2, #0
 8000674:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000676:	4805      	ldr	r0, [pc, #20]	; (800068c <MX_I2S3_Init+0x54>)
 8000678:	f002 fc28 	bl	8002ecc <HAL_I2S_Init>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000682:	f000 f967 	bl	8000954 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000686:	bf00      	nop
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	200000ec 	.word	0x200000ec
 8000690:	40003c00 	.word	0x40003c00
 8000694:	00017700 	.word	0x00017700

08000698 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800069c:	4b17      	ldr	r3, [pc, #92]	; (80006fc <MX_SPI1_Init+0x64>)
 800069e:	4a18      	ldr	r2, [pc, #96]	; (8000700 <MX_SPI1_Init+0x68>)
 80006a0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006a2:	4b16      	ldr	r3, [pc, #88]	; (80006fc <MX_SPI1_Init+0x64>)
 80006a4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006a8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006aa:	4b14      	ldr	r3, [pc, #80]	; (80006fc <MX_SPI1_Init+0x64>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006b0:	4b12      	ldr	r3, [pc, #72]	; (80006fc <MX_SPI1_Init+0x64>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006b6:	4b11      	ldr	r3, [pc, #68]	; (80006fc <MX_SPI1_Init+0x64>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006bc:	4b0f      	ldr	r3, [pc, #60]	; (80006fc <MX_SPI1_Init+0x64>)
 80006be:	2200      	movs	r2, #0
 80006c0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006c2:	4b0e      	ldr	r3, [pc, #56]	; (80006fc <MX_SPI1_Init+0x64>)
 80006c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006c8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80006ca:	4b0c      	ldr	r3, [pc, #48]	; (80006fc <MX_SPI1_Init+0x64>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006d0:	4b0a      	ldr	r3, [pc, #40]	; (80006fc <MX_SPI1_Init+0x64>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006d6:	4b09      	ldr	r3, [pc, #36]	; (80006fc <MX_SPI1_Init+0x64>)
 80006d8:	2200      	movs	r2, #0
 80006da:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006dc:	4b07      	ldr	r3, [pc, #28]	; (80006fc <MX_SPI1_Init+0x64>)
 80006de:	2200      	movs	r2, #0
 80006e0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80006e2:	4b06      	ldr	r3, [pc, #24]	; (80006fc <MX_SPI1_Init+0x64>)
 80006e4:	220a      	movs	r2, #10
 80006e6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80006e8:	4804      	ldr	r0, [pc, #16]	; (80006fc <MX_SPI1_Init+0x64>)
 80006ea:	f003 fe67 	bl	80043bc <HAL_SPI_Init>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80006f4:	f000 f92e 	bl	8000954 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80006f8:	bf00      	nop
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	20000134 	.word	0x20000134
 8000700:	40013000 	.word	0x40013000

08000704 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000708:	4b11      	ldr	r3, [pc, #68]	; (8000750 <MX_USART2_UART_Init+0x4c>)
 800070a:	4a12      	ldr	r2, [pc, #72]	; (8000754 <MX_USART2_UART_Init+0x50>)
 800070c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800070e:	4b10      	ldr	r3, [pc, #64]	; (8000750 <MX_USART2_UART_Init+0x4c>)
 8000710:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000714:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000716:	4b0e      	ldr	r3, [pc, #56]	; (8000750 <MX_USART2_UART_Init+0x4c>)
 8000718:	2200      	movs	r2, #0
 800071a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800071c:	4b0c      	ldr	r3, [pc, #48]	; (8000750 <MX_USART2_UART_Init+0x4c>)
 800071e:	2200      	movs	r2, #0
 8000720:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000722:	4b0b      	ldr	r3, [pc, #44]	; (8000750 <MX_USART2_UART_Init+0x4c>)
 8000724:	2200      	movs	r2, #0
 8000726:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000728:	4b09      	ldr	r3, [pc, #36]	; (8000750 <MX_USART2_UART_Init+0x4c>)
 800072a:	220c      	movs	r2, #12
 800072c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800072e:	4b08      	ldr	r3, [pc, #32]	; (8000750 <MX_USART2_UART_Init+0x4c>)
 8000730:	2200      	movs	r2, #0
 8000732:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000734:	4b06      	ldr	r3, [pc, #24]	; (8000750 <MX_USART2_UART_Init+0x4c>)
 8000736:	2200      	movs	r2, #0
 8000738:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800073a:	4805      	ldr	r0, [pc, #20]	; (8000750 <MX_USART2_UART_Init+0x4c>)
 800073c:	f003 fec7 	bl	80044ce <HAL_UART_Init>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000746:	f000 f905 	bl	8000954 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800074a:	bf00      	nop
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	2000018c 	.word	0x2000018c
 8000754:	40004400 	.word	0x40004400

08000758 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b08c      	sub	sp, #48	; 0x30
 800075c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800075e:	f107 031c 	add.w	r3, r7, #28
 8000762:	2200      	movs	r2, #0
 8000764:	601a      	str	r2, [r3, #0]
 8000766:	605a      	str	r2, [r3, #4]
 8000768:	609a      	str	r2, [r3, #8]
 800076a:	60da      	str	r2, [r3, #12]
 800076c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800076e:	2300      	movs	r3, #0
 8000770:	61bb      	str	r3, [r7, #24]
 8000772:	4b72      	ldr	r3, [pc, #456]	; (800093c <MX_GPIO_Init+0x1e4>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	4a71      	ldr	r2, [pc, #452]	; (800093c <MX_GPIO_Init+0x1e4>)
 8000778:	f043 0310 	orr.w	r3, r3, #16
 800077c:	6313      	str	r3, [r2, #48]	; 0x30
 800077e:	4b6f      	ldr	r3, [pc, #444]	; (800093c <MX_GPIO_Init+0x1e4>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	f003 0310 	and.w	r3, r3, #16
 8000786:	61bb      	str	r3, [r7, #24]
 8000788:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800078a:	2300      	movs	r3, #0
 800078c:	617b      	str	r3, [r7, #20]
 800078e:	4b6b      	ldr	r3, [pc, #428]	; (800093c <MX_GPIO_Init+0x1e4>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	4a6a      	ldr	r2, [pc, #424]	; (800093c <MX_GPIO_Init+0x1e4>)
 8000794:	f043 0304 	orr.w	r3, r3, #4
 8000798:	6313      	str	r3, [r2, #48]	; 0x30
 800079a:	4b68      	ldr	r3, [pc, #416]	; (800093c <MX_GPIO_Init+0x1e4>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	f003 0304 	and.w	r3, r3, #4
 80007a2:	617b      	str	r3, [r7, #20]
 80007a4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007a6:	2300      	movs	r3, #0
 80007a8:	613b      	str	r3, [r7, #16]
 80007aa:	4b64      	ldr	r3, [pc, #400]	; (800093c <MX_GPIO_Init+0x1e4>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	4a63      	ldr	r2, [pc, #396]	; (800093c <MX_GPIO_Init+0x1e4>)
 80007b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007b4:	6313      	str	r3, [r2, #48]	; 0x30
 80007b6:	4b61      	ldr	r3, [pc, #388]	; (800093c <MX_GPIO_Init+0x1e4>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007be:	613b      	str	r3, [r7, #16]
 80007c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	60fb      	str	r3, [r7, #12]
 80007c6:	4b5d      	ldr	r3, [pc, #372]	; (800093c <MX_GPIO_Init+0x1e4>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	4a5c      	ldr	r2, [pc, #368]	; (800093c <MX_GPIO_Init+0x1e4>)
 80007cc:	f043 0301 	orr.w	r3, r3, #1
 80007d0:	6313      	str	r3, [r2, #48]	; 0x30
 80007d2:	4b5a      	ldr	r3, [pc, #360]	; (800093c <MX_GPIO_Init+0x1e4>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	f003 0301 	and.w	r3, r3, #1
 80007da:	60fb      	str	r3, [r7, #12]
 80007dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	60bb      	str	r3, [r7, #8]
 80007e2:	4b56      	ldr	r3, [pc, #344]	; (800093c <MX_GPIO_Init+0x1e4>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	4a55      	ldr	r2, [pc, #340]	; (800093c <MX_GPIO_Init+0x1e4>)
 80007e8:	f043 0302 	orr.w	r3, r3, #2
 80007ec:	6313      	str	r3, [r2, #48]	; 0x30
 80007ee:	4b53      	ldr	r3, [pc, #332]	; (800093c <MX_GPIO_Init+0x1e4>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	f003 0302 	and.w	r3, r3, #2
 80007f6:	60bb      	str	r3, [r7, #8]
 80007f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007fa:	2300      	movs	r3, #0
 80007fc:	607b      	str	r3, [r7, #4]
 80007fe:	4b4f      	ldr	r3, [pc, #316]	; (800093c <MX_GPIO_Init+0x1e4>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	4a4e      	ldr	r2, [pc, #312]	; (800093c <MX_GPIO_Init+0x1e4>)
 8000804:	f043 0308 	orr.w	r3, r3, #8
 8000808:	6313      	str	r3, [r2, #48]	; 0x30
 800080a:	4b4c      	ldr	r3, [pc, #304]	; (800093c <MX_GPIO_Init+0x1e4>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	f003 0308 	and.w	r3, r3, #8
 8000812:	607b      	str	r3, [r7, #4]
 8000814:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000816:	2200      	movs	r2, #0
 8000818:	2108      	movs	r1, #8
 800081a:	4849      	ldr	r0, [pc, #292]	; (8000940 <MX_GPIO_Init+0x1e8>)
 800081c:	f000 fe0a 	bl	8001434 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000820:	2201      	movs	r2, #1
 8000822:	2101      	movs	r1, #1
 8000824:	4847      	ldr	r0, [pc, #284]	; (8000944 <MX_GPIO_Init+0x1ec>)
 8000826:	f000 fe05 	bl	8001434 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800082a:	2200      	movs	r2, #0
 800082c:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000830:	4845      	ldr	r0, [pc, #276]	; (8000948 <MX_GPIO_Init+0x1f0>)
 8000832:	f000 fdff 	bl	8001434 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000836:	2308      	movs	r3, #8
 8000838:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800083a:	2301      	movs	r3, #1
 800083c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083e:	2300      	movs	r3, #0
 8000840:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000842:	2300      	movs	r3, #0
 8000844:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000846:	f107 031c 	add.w	r3, r7, #28
 800084a:	4619      	mov	r1, r3
 800084c:	483c      	ldr	r0, [pc, #240]	; (8000940 <MX_GPIO_Init+0x1e8>)
 800084e:	f000 fc55 	bl	80010fc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000852:	2301      	movs	r3, #1
 8000854:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000856:	2301      	movs	r3, #1
 8000858:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085a:	2300      	movs	r3, #0
 800085c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800085e:	2300      	movs	r3, #0
 8000860:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000862:	f107 031c 	add.w	r3, r7, #28
 8000866:	4619      	mov	r1, r3
 8000868:	4836      	ldr	r0, [pc, #216]	; (8000944 <MX_GPIO_Init+0x1ec>)
 800086a:	f000 fc47 	bl	80010fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800086e:	2308      	movs	r3, #8
 8000870:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000872:	2302      	movs	r3, #2
 8000874:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000876:	2300      	movs	r3, #0
 8000878:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087a:	2300      	movs	r3, #0
 800087c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800087e:	2305      	movs	r3, #5
 8000880:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000882:	f107 031c 	add.w	r3, r7, #28
 8000886:	4619      	mov	r1, r3
 8000888:	482e      	ldr	r0, [pc, #184]	; (8000944 <MX_GPIO_Init+0x1ec>)
 800088a:	f000 fc37 	bl	80010fc <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800088e:	2301      	movs	r3, #1
 8000890:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000892:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000896:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000898:	2300      	movs	r3, #0
 800089a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800089c:	f107 031c 	add.w	r3, r7, #28
 80008a0:	4619      	mov	r1, r3
 80008a2:	482a      	ldr	r0, [pc, #168]	; (800094c <MX_GPIO_Init+0x1f4>)
 80008a4:	f000 fc2a 	bl	80010fc <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80008a8:	2304      	movs	r3, #4
 80008aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008ac:	2300      	movs	r3, #0
 80008ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b0:	2300      	movs	r3, #0
 80008b2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80008b4:	f107 031c 	add.w	r3, r7, #28
 80008b8:	4619      	mov	r1, r3
 80008ba:	4825      	ldr	r0, [pc, #148]	; (8000950 <MX_GPIO_Init+0x1f8>)
 80008bc:	f000 fc1e 	bl	80010fc <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80008c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c6:	2302      	movs	r3, #2
 80008c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ca:	2300      	movs	r3, #0
 80008cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ce:	2300      	movs	r3, #0
 80008d0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008d2:	2305      	movs	r3, #5
 80008d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80008d6:	f107 031c 	add.w	r3, r7, #28
 80008da:	4619      	mov	r1, r3
 80008dc:	481c      	ldr	r0, [pc, #112]	; (8000950 <MX_GPIO_Init+0x1f8>)
 80008de:	f000 fc0d 	bl	80010fc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008e2:	f24f 0310 	movw	r3, #61456	; 0xf010
 80008e6:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e8:	2301      	movs	r3, #1
 80008ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ec:	2300      	movs	r3, #0
 80008ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f0:	2300      	movs	r3, #0
 80008f2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008f4:	f107 031c 	add.w	r3, r7, #28
 80008f8:	4619      	mov	r1, r3
 80008fa:	4813      	ldr	r0, [pc, #76]	; (8000948 <MX_GPIO_Init+0x1f0>)
 80008fc:	f000 fbfe 	bl	80010fc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000900:	2320      	movs	r3, #32
 8000902:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000904:	2300      	movs	r3, #0
 8000906:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000908:	2300      	movs	r3, #0
 800090a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800090c:	f107 031c 	add.w	r3, r7, #28
 8000910:	4619      	mov	r1, r3
 8000912:	480d      	ldr	r0, [pc, #52]	; (8000948 <MX_GPIO_Init+0x1f0>)
 8000914:	f000 fbf2 	bl	80010fc <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000918:	2302      	movs	r3, #2
 800091a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800091c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000920:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000922:	2300      	movs	r3, #0
 8000924:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000926:	f107 031c 	add.w	r3, r7, #28
 800092a:	4619      	mov	r1, r3
 800092c:	4804      	ldr	r0, [pc, #16]	; (8000940 <MX_GPIO_Init+0x1e8>)
 800092e:	f000 fbe5 	bl	80010fc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000932:	bf00      	nop
 8000934:	3730      	adds	r7, #48	; 0x30
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	40023800 	.word	0x40023800
 8000940:	40021000 	.word	0x40021000
 8000944:	40020800 	.word	0x40020800
 8000948:	40020c00 	.word	0x40020c00
 800094c:	40020000 	.word	0x40020000
 8000950:	40020400 	.word	0x40020400

08000954 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000958:	b672      	cpsid	i
}
 800095a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800095c:	e7fe      	b.n	800095c <Error_Handler+0x8>
	...

08000960 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000966:	2300      	movs	r3, #0
 8000968:	607b      	str	r3, [r7, #4]
 800096a:	4b10      	ldr	r3, [pc, #64]	; (80009ac <HAL_MspInit+0x4c>)
 800096c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800096e:	4a0f      	ldr	r2, [pc, #60]	; (80009ac <HAL_MspInit+0x4c>)
 8000970:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000974:	6453      	str	r3, [r2, #68]	; 0x44
 8000976:	4b0d      	ldr	r3, [pc, #52]	; (80009ac <HAL_MspInit+0x4c>)
 8000978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800097a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800097e:	607b      	str	r3, [r7, #4]
 8000980:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000982:	2300      	movs	r3, #0
 8000984:	603b      	str	r3, [r7, #0]
 8000986:	4b09      	ldr	r3, [pc, #36]	; (80009ac <HAL_MspInit+0x4c>)
 8000988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800098a:	4a08      	ldr	r2, [pc, #32]	; (80009ac <HAL_MspInit+0x4c>)
 800098c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000990:	6413      	str	r3, [r2, #64]	; 0x40
 8000992:	4b06      	ldr	r3, [pc, #24]	; (80009ac <HAL_MspInit+0x4c>)
 8000994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000996:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800099a:	603b      	str	r3, [r7, #0]
 800099c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800099e:	2007      	movs	r0, #7
 80009a0:	f000 fb6a 	bl	8001078 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009a4:	bf00      	nop
 80009a6:	3708      	adds	r7, #8
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	40023800 	.word	0x40023800

080009b0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b08a      	sub	sp, #40	; 0x28
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b8:	f107 0314 	add.w	r3, r7, #20
 80009bc:	2200      	movs	r2, #0
 80009be:	601a      	str	r2, [r3, #0]
 80009c0:	605a      	str	r2, [r3, #4]
 80009c2:	609a      	str	r2, [r3, #8]
 80009c4:	60da      	str	r2, [r3, #12]
 80009c6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	4a19      	ldr	r2, [pc, #100]	; (8000a34 <HAL_I2C_MspInit+0x84>)
 80009ce:	4293      	cmp	r3, r2
 80009d0:	d12c      	bne.n	8000a2c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009d2:	2300      	movs	r3, #0
 80009d4:	613b      	str	r3, [r7, #16]
 80009d6:	4b18      	ldr	r3, [pc, #96]	; (8000a38 <HAL_I2C_MspInit+0x88>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009da:	4a17      	ldr	r2, [pc, #92]	; (8000a38 <HAL_I2C_MspInit+0x88>)
 80009dc:	f043 0302 	orr.w	r3, r3, #2
 80009e0:	6313      	str	r3, [r2, #48]	; 0x30
 80009e2:	4b15      	ldr	r3, [pc, #84]	; (8000a38 <HAL_I2C_MspInit+0x88>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e6:	f003 0302 	and.w	r3, r3, #2
 80009ea:	613b      	str	r3, [r7, #16]
 80009ec:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80009ee:	f44f 7310 	mov.w	r3, #576	; 0x240
 80009f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009f4:	2312      	movs	r3, #18
 80009f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009f8:	2301      	movs	r3, #1
 80009fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009fc:	2300      	movs	r3, #0
 80009fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a00:	2304      	movs	r3, #4
 8000a02:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a04:	f107 0314 	add.w	r3, r7, #20
 8000a08:	4619      	mov	r1, r3
 8000a0a:	480c      	ldr	r0, [pc, #48]	; (8000a3c <HAL_I2C_MspInit+0x8c>)
 8000a0c:	f000 fb76 	bl	80010fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a10:	2300      	movs	r3, #0
 8000a12:	60fb      	str	r3, [r7, #12]
 8000a14:	4b08      	ldr	r3, [pc, #32]	; (8000a38 <HAL_I2C_MspInit+0x88>)
 8000a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a18:	4a07      	ldr	r2, [pc, #28]	; (8000a38 <HAL_I2C_MspInit+0x88>)
 8000a1a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a1e:	6413      	str	r3, [r2, #64]	; 0x40
 8000a20:	4b05      	ldr	r3, [pc, #20]	; (8000a38 <HAL_I2C_MspInit+0x88>)
 8000a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a28:	60fb      	str	r3, [r7, #12]
 8000a2a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000a2c:	bf00      	nop
 8000a2e:	3728      	adds	r7, #40	; 0x28
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	40005400 	.word	0x40005400
 8000a38:	40023800 	.word	0x40023800
 8000a3c:	40020400 	.word	0x40020400

08000a40 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b08e      	sub	sp, #56	; 0x38
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	601a      	str	r2, [r3, #0]
 8000a50:	605a      	str	r2, [r3, #4]
 8000a52:	609a      	str	r2, [r3, #8]
 8000a54:	60da      	str	r2, [r3, #12]
 8000a56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a58:	f107 0314 	add.w	r3, r7, #20
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	601a      	str	r2, [r3, #0]
 8000a60:	605a      	str	r2, [r3, #4]
 8000a62:	609a      	str	r2, [r3, #8]
 8000a64:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	4a31      	ldr	r2, [pc, #196]	; (8000b30 <HAL_I2S_MspInit+0xf0>)
 8000a6c:	4293      	cmp	r3, r2
 8000a6e:	d15a      	bne.n	8000b26 <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000a70:	2301      	movs	r3, #1
 8000a72:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000a74:	23c0      	movs	r3, #192	; 0xc0
 8000a76:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000a78:	2302      	movs	r3, #2
 8000a7a:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a7c:	f107 0314 	add.w	r3, r7, #20
 8000a80:	4618      	mov	r0, r3
 8000a82:	f003 fb5b 	bl	800413c <HAL_RCCEx_PeriphCLKConfig>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000a8c:	f7ff ff62 	bl	8000954 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000a90:	2300      	movs	r3, #0
 8000a92:	613b      	str	r3, [r7, #16]
 8000a94:	4b27      	ldr	r3, [pc, #156]	; (8000b34 <HAL_I2S_MspInit+0xf4>)
 8000a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a98:	4a26      	ldr	r2, [pc, #152]	; (8000b34 <HAL_I2S_MspInit+0xf4>)
 8000a9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a9e:	6413      	str	r3, [r2, #64]	; 0x40
 8000aa0:	4b24      	ldr	r3, [pc, #144]	; (8000b34 <HAL_I2S_MspInit+0xf4>)
 8000aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000aa8:	613b      	str	r3, [r7, #16]
 8000aaa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aac:	2300      	movs	r3, #0
 8000aae:	60fb      	str	r3, [r7, #12]
 8000ab0:	4b20      	ldr	r3, [pc, #128]	; (8000b34 <HAL_I2S_MspInit+0xf4>)
 8000ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab4:	4a1f      	ldr	r2, [pc, #124]	; (8000b34 <HAL_I2S_MspInit+0xf4>)
 8000ab6:	f043 0301 	orr.w	r3, r3, #1
 8000aba:	6313      	str	r3, [r2, #48]	; 0x30
 8000abc:	4b1d      	ldr	r3, [pc, #116]	; (8000b34 <HAL_I2S_MspInit+0xf4>)
 8000abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac0:	f003 0301 	and.w	r3, r3, #1
 8000ac4:	60fb      	str	r3, [r7, #12]
 8000ac6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ac8:	2300      	movs	r3, #0
 8000aca:	60bb      	str	r3, [r7, #8]
 8000acc:	4b19      	ldr	r3, [pc, #100]	; (8000b34 <HAL_I2S_MspInit+0xf4>)
 8000ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad0:	4a18      	ldr	r2, [pc, #96]	; (8000b34 <HAL_I2S_MspInit+0xf4>)
 8000ad2:	f043 0304 	orr.w	r3, r3, #4
 8000ad6:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad8:	4b16      	ldr	r3, [pc, #88]	; (8000b34 <HAL_I2S_MspInit+0xf4>)
 8000ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000adc:	f003 0304 	and.w	r3, r3, #4
 8000ae0:	60bb      	str	r3, [r7, #8]
 8000ae2:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000ae4:	2310      	movs	r3, #16
 8000ae6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae8:	2302      	movs	r3, #2
 8000aea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aec:	2300      	movs	r3, #0
 8000aee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af0:	2300      	movs	r3, #0
 8000af2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000af4:	2306      	movs	r3, #6
 8000af6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000af8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000afc:	4619      	mov	r1, r3
 8000afe:	480e      	ldr	r0, [pc, #56]	; (8000b38 <HAL_I2S_MspInit+0xf8>)
 8000b00:	f000 fafc 	bl	80010fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000b04:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000b08:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b0a:	2302      	movs	r3, #2
 8000b0c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b12:	2300      	movs	r3, #0
 8000b14:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b16:	2306      	movs	r3, #6
 8000b18:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b1e:	4619      	mov	r1, r3
 8000b20:	4806      	ldr	r0, [pc, #24]	; (8000b3c <HAL_I2S_MspInit+0xfc>)
 8000b22:	f000 faeb 	bl	80010fc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000b26:	bf00      	nop
 8000b28:	3738      	adds	r7, #56	; 0x38
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	40003c00 	.word	0x40003c00
 8000b34:	40023800 	.word	0x40023800
 8000b38:	40020000 	.word	0x40020000
 8000b3c:	40020800 	.word	0x40020800

08000b40 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b08a      	sub	sp, #40	; 0x28
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b48:	f107 0314 	add.w	r3, r7, #20
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	601a      	str	r2, [r3, #0]
 8000b50:	605a      	str	r2, [r3, #4]
 8000b52:	609a      	str	r2, [r3, #8]
 8000b54:	60da      	str	r2, [r3, #12]
 8000b56:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a19      	ldr	r2, [pc, #100]	; (8000bc4 <HAL_SPI_MspInit+0x84>)
 8000b5e:	4293      	cmp	r3, r2
 8000b60:	d12b      	bne.n	8000bba <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b62:	2300      	movs	r3, #0
 8000b64:	613b      	str	r3, [r7, #16]
 8000b66:	4b18      	ldr	r3, [pc, #96]	; (8000bc8 <HAL_SPI_MspInit+0x88>)
 8000b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b6a:	4a17      	ldr	r2, [pc, #92]	; (8000bc8 <HAL_SPI_MspInit+0x88>)
 8000b6c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b70:	6453      	str	r3, [r2, #68]	; 0x44
 8000b72:	4b15      	ldr	r3, [pc, #84]	; (8000bc8 <HAL_SPI_MspInit+0x88>)
 8000b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b76:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b7a:	613b      	str	r3, [r7, #16]
 8000b7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b7e:	2300      	movs	r3, #0
 8000b80:	60fb      	str	r3, [r7, #12]
 8000b82:	4b11      	ldr	r3, [pc, #68]	; (8000bc8 <HAL_SPI_MspInit+0x88>)
 8000b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b86:	4a10      	ldr	r2, [pc, #64]	; (8000bc8 <HAL_SPI_MspInit+0x88>)
 8000b88:	f043 0301 	orr.w	r3, r3, #1
 8000b8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b8e:	4b0e      	ldr	r3, [pc, #56]	; (8000bc8 <HAL_SPI_MspInit+0x88>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b92:	f003 0301 	and.w	r3, r3, #1
 8000b96:	60fb      	str	r3, [r7, #12]
 8000b98:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000b9a:	23e0      	movs	r3, #224	; 0xe0
 8000b9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b9e:	2302      	movs	r3, #2
 8000ba0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000baa:	2305      	movs	r3, #5
 8000bac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bae:	f107 0314 	add.w	r3, r7, #20
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	4805      	ldr	r0, [pc, #20]	; (8000bcc <HAL_SPI_MspInit+0x8c>)
 8000bb6:	f000 faa1 	bl	80010fc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000bba:	bf00      	nop
 8000bbc:	3728      	adds	r7, #40	; 0x28
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	40013000 	.word	0x40013000
 8000bc8:	40023800 	.word	0x40023800
 8000bcc:	40020000 	.word	0x40020000

08000bd0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b08a      	sub	sp, #40	; 0x28
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd8:	f107 0314 	add.w	r3, r7, #20
 8000bdc:	2200      	movs	r2, #0
 8000bde:	601a      	str	r2, [r3, #0]
 8000be0:	605a      	str	r2, [r3, #4]
 8000be2:	609a      	str	r2, [r3, #8]
 8000be4:	60da      	str	r2, [r3, #12]
 8000be6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4a19      	ldr	r2, [pc, #100]	; (8000c54 <HAL_UART_MspInit+0x84>)
 8000bee:	4293      	cmp	r3, r2
 8000bf0:	d12b      	bne.n	8000c4a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	613b      	str	r3, [r7, #16]
 8000bf6:	4b18      	ldr	r3, [pc, #96]	; (8000c58 <HAL_UART_MspInit+0x88>)
 8000bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bfa:	4a17      	ldr	r2, [pc, #92]	; (8000c58 <HAL_UART_MspInit+0x88>)
 8000bfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c00:	6413      	str	r3, [r2, #64]	; 0x40
 8000c02:	4b15      	ldr	r3, [pc, #84]	; (8000c58 <HAL_UART_MspInit+0x88>)
 8000c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c0a:	613b      	str	r3, [r7, #16]
 8000c0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c0e:	2300      	movs	r3, #0
 8000c10:	60fb      	str	r3, [r7, #12]
 8000c12:	4b11      	ldr	r3, [pc, #68]	; (8000c58 <HAL_UART_MspInit+0x88>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c16:	4a10      	ldr	r2, [pc, #64]	; (8000c58 <HAL_UART_MspInit+0x88>)
 8000c18:	f043 0301 	orr.w	r3, r3, #1
 8000c1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c1e:	4b0e      	ldr	r3, [pc, #56]	; (8000c58 <HAL_UART_MspInit+0x88>)
 8000c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c22:	f003 0301 	and.w	r3, r3, #1
 8000c26:	60fb      	str	r3, [r7, #12]
 8000c28:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000c2a:	230c      	movs	r3, #12
 8000c2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c2e:	2302      	movs	r3, #2
 8000c30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c32:	2300      	movs	r3, #0
 8000c34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c36:	2303      	movs	r3, #3
 8000c38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c3a:	2307      	movs	r3, #7
 8000c3c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c3e:	f107 0314 	add.w	r3, r7, #20
 8000c42:	4619      	mov	r1, r3
 8000c44:	4805      	ldr	r0, [pc, #20]	; (8000c5c <HAL_UART_MspInit+0x8c>)
 8000c46:	f000 fa59 	bl	80010fc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c4a:	bf00      	nop
 8000c4c:	3728      	adds	r7, #40	; 0x28
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	40004400 	.word	0x40004400
 8000c58:	40023800 	.word	0x40023800
 8000c5c:	40020000 	.word	0x40020000

08000c60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c64:	e7fe      	b.n	8000c64 <NMI_Handler+0x4>

08000c66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c66:	b480      	push	{r7}
 8000c68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c6a:	e7fe      	b.n	8000c6a <HardFault_Handler+0x4>

08000c6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c70:	e7fe      	b.n	8000c70 <MemManage_Handler+0x4>

08000c72 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c72:	b480      	push	{r7}
 8000c74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c76:	e7fe      	b.n	8000c76 <BusFault_Handler+0x4>

08000c78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c7c:	e7fe      	b.n	8000c7c <UsageFault_Handler+0x4>

08000c7e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c7e:	b480      	push	{r7}
 8000c80:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c82:	bf00      	nop
 8000c84:	46bd      	mov	sp, r7
 8000c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8a:	4770      	bx	lr

08000c8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c90:	bf00      	nop
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr

08000c9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c9a:	b480      	push	{r7}
 8000c9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c9e:	bf00      	nop
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr

08000ca8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cac:	f000 f8d0 	bl	8000e50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cb0:	bf00      	nop
 8000cb2:	bd80      	pop	{r7, pc}

08000cb4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000cb8:	4802      	ldr	r0, [pc, #8]	; (8000cc4 <OTG_FS_IRQHandler+0x10>)
 8000cba:	f000 fe3f 	bl	800193c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000cbe:	bf00      	nop
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	200005b4 	.word	0x200005b4

08000cc8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b086      	sub	sp, #24
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cd0:	4a14      	ldr	r2, [pc, #80]	; (8000d24 <_sbrk+0x5c>)
 8000cd2:	4b15      	ldr	r3, [pc, #84]	; (8000d28 <_sbrk+0x60>)
 8000cd4:	1ad3      	subs	r3, r2, r3
 8000cd6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cd8:	697b      	ldr	r3, [r7, #20]
 8000cda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cdc:	4b13      	ldr	r3, [pc, #76]	; (8000d2c <_sbrk+0x64>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d102      	bne.n	8000cea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ce4:	4b11      	ldr	r3, [pc, #68]	; (8000d2c <_sbrk+0x64>)
 8000ce6:	4a12      	ldr	r2, [pc, #72]	; (8000d30 <_sbrk+0x68>)
 8000ce8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cea:	4b10      	ldr	r3, [pc, #64]	; (8000d2c <_sbrk+0x64>)
 8000cec:	681a      	ldr	r2, [r3, #0]
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	4413      	add	r3, r2
 8000cf2:	693a      	ldr	r2, [r7, #16]
 8000cf4:	429a      	cmp	r2, r3
 8000cf6:	d207      	bcs.n	8000d08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cf8:	f006 fb48 	bl	800738c <__errno>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	220c      	movs	r2, #12
 8000d00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d06:	e009      	b.n	8000d1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d08:	4b08      	ldr	r3, [pc, #32]	; (8000d2c <_sbrk+0x64>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d0e:	4b07      	ldr	r3, [pc, #28]	; (8000d2c <_sbrk+0x64>)
 8000d10:	681a      	ldr	r2, [r3, #0]
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	4413      	add	r3, r2
 8000d16:	4a05      	ldr	r2, [pc, #20]	; (8000d2c <_sbrk+0x64>)
 8000d18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d1a:	68fb      	ldr	r3, [r7, #12]
}
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	3718      	adds	r7, #24
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	20020000 	.word	0x20020000
 8000d28:	00000400 	.word	0x00000400
 8000d2c:	200001d0 	.word	0x200001d0
 8000d30:	20000a00 	.word	0x20000a00

08000d34 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d38:	4b06      	ldr	r3, [pc, #24]	; (8000d54 <SystemInit+0x20>)
 8000d3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d3e:	4a05      	ldr	r2, [pc, #20]	; (8000d54 <SystemInit+0x20>)
 8000d40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d48:	bf00      	nop
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop
 8000d54:	e000ed00 	.word	0xe000ed00

08000d58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000d58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d90 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d5c:	480d      	ldr	r0, [pc, #52]	; (8000d94 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d5e:	490e      	ldr	r1, [pc, #56]	; (8000d98 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d60:	4a0e      	ldr	r2, [pc, #56]	; (8000d9c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d64:	e002      	b.n	8000d6c <LoopCopyDataInit>

08000d66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d6a:	3304      	adds	r3, #4

08000d6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d70:	d3f9      	bcc.n	8000d66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d72:	4a0b      	ldr	r2, [pc, #44]	; (8000da0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d74:	4c0b      	ldr	r4, [pc, #44]	; (8000da4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d78:	e001      	b.n	8000d7e <LoopFillZerobss>

08000d7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d7c:	3204      	adds	r2, #4

08000d7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d80:	d3fb      	bcc.n	8000d7a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d82:	f7ff ffd7 	bl	8000d34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d86:	f006 fb07 	bl	8007398 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d8a:	f7ff fb9b 	bl	80004c4 <main>
  bx  lr    
 8000d8e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000d90:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d98:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000d9c:	080074d0 	.word	0x080074d0
  ldr r2, =_sbss
 8000da0:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000da4:	20000a00 	.word	0x20000a00

08000da8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000da8:	e7fe      	b.n	8000da8 <ADC_IRQHandler>
	...

08000dac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000db0:	4b0e      	ldr	r3, [pc, #56]	; (8000dec <HAL_Init+0x40>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4a0d      	ldr	r2, [pc, #52]	; (8000dec <HAL_Init+0x40>)
 8000db6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000dbc:	4b0b      	ldr	r3, [pc, #44]	; (8000dec <HAL_Init+0x40>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a0a      	ldr	r2, [pc, #40]	; (8000dec <HAL_Init+0x40>)
 8000dc2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000dc6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dc8:	4b08      	ldr	r3, [pc, #32]	; (8000dec <HAL_Init+0x40>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a07      	ldr	r2, [pc, #28]	; (8000dec <HAL_Init+0x40>)
 8000dce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dd2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dd4:	2003      	movs	r0, #3
 8000dd6:	f000 f94f 	bl	8001078 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dda:	2000      	movs	r0, #0
 8000ddc:	f000 f808 	bl	8000df0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000de0:	f7ff fdbe 	bl	8000960 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000de4:	2300      	movs	r3, #0
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	40023c00 	.word	0x40023c00

08000df0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b082      	sub	sp, #8
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000df8:	4b12      	ldr	r3, [pc, #72]	; (8000e44 <HAL_InitTick+0x54>)
 8000dfa:	681a      	ldr	r2, [r3, #0]
 8000dfc:	4b12      	ldr	r3, [pc, #72]	; (8000e48 <HAL_InitTick+0x58>)
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	4619      	mov	r1, r3
 8000e02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e06:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f000 f967 	bl	80010e2 <HAL_SYSTICK_Config>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	e00e      	b.n	8000e3c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	2b0f      	cmp	r3, #15
 8000e22:	d80a      	bhi.n	8000e3a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e24:	2200      	movs	r2, #0
 8000e26:	6879      	ldr	r1, [r7, #4]
 8000e28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e2c:	f000 f92f 	bl	800108e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e30:	4a06      	ldr	r2, [pc, #24]	; (8000e4c <HAL_InitTick+0x5c>)
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e36:	2300      	movs	r3, #0
 8000e38:	e000      	b.n	8000e3c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e3a:	2301      	movs	r3, #1
}
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	3708      	adds	r7, #8
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	20000000 	.word	0x20000000
 8000e48:	20000008 	.word	0x20000008
 8000e4c:	20000004 	.word	0x20000004

08000e50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e54:	4b06      	ldr	r3, [pc, #24]	; (8000e70 <HAL_IncTick+0x20>)
 8000e56:	781b      	ldrb	r3, [r3, #0]
 8000e58:	461a      	mov	r2, r3
 8000e5a:	4b06      	ldr	r3, [pc, #24]	; (8000e74 <HAL_IncTick+0x24>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	4413      	add	r3, r2
 8000e60:	4a04      	ldr	r2, [pc, #16]	; (8000e74 <HAL_IncTick+0x24>)
 8000e62:	6013      	str	r3, [r2, #0]
}
 8000e64:	bf00      	nop
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop
 8000e70:	20000008 	.word	0x20000008
 8000e74:	200001d4 	.word	0x200001d4

08000e78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e7c:	4b03      	ldr	r3, [pc, #12]	; (8000e8c <HAL_GetTick+0x14>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
}
 8000e80:	4618      	mov	r0, r3
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop
 8000e8c:	200001d4 	.word	0x200001d4

08000e90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b084      	sub	sp, #16
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e98:	f7ff ffee 	bl	8000e78 <HAL_GetTick>
 8000e9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000ea8:	d005      	beq.n	8000eb6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000eaa:	4b0a      	ldr	r3, [pc, #40]	; (8000ed4 <HAL_Delay+0x44>)
 8000eac:	781b      	ldrb	r3, [r3, #0]
 8000eae:	461a      	mov	r2, r3
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	4413      	add	r3, r2
 8000eb4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000eb6:	bf00      	nop
 8000eb8:	f7ff ffde 	bl	8000e78 <HAL_GetTick>
 8000ebc:	4602      	mov	r2, r0
 8000ebe:	68bb      	ldr	r3, [r7, #8]
 8000ec0:	1ad3      	subs	r3, r2, r3
 8000ec2:	68fa      	ldr	r2, [r7, #12]
 8000ec4:	429a      	cmp	r2, r3
 8000ec6:	d8f7      	bhi.n	8000eb8 <HAL_Delay+0x28>
  {
  }
}
 8000ec8:	bf00      	nop
 8000eca:	bf00      	nop
 8000ecc:	3710      	adds	r7, #16
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	20000008 	.word	0x20000008

08000ed8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b085      	sub	sp, #20
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	f003 0307 	and.w	r3, r3, #7
 8000ee6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ee8:	4b0c      	ldr	r3, [pc, #48]	; (8000f1c <__NVIC_SetPriorityGrouping+0x44>)
 8000eea:	68db      	ldr	r3, [r3, #12]
 8000eec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eee:	68ba      	ldr	r2, [r7, #8]
 8000ef0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000efc:	68bb      	ldr	r3, [r7, #8]
 8000efe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f00:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f0a:	4a04      	ldr	r2, [pc, #16]	; (8000f1c <__NVIC_SetPriorityGrouping+0x44>)
 8000f0c:	68bb      	ldr	r3, [r7, #8]
 8000f0e:	60d3      	str	r3, [r2, #12]
}
 8000f10:	bf00      	nop
 8000f12:	3714      	adds	r7, #20
 8000f14:	46bd      	mov	sp, r7
 8000f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1a:	4770      	bx	lr
 8000f1c:	e000ed00 	.word	0xe000ed00

08000f20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f24:	4b04      	ldr	r3, [pc, #16]	; (8000f38 <__NVIC_GetPriorityGrouping+0x18>)
 8000f26:	68db      	ldr	r3, [r3, #12]
 8000f28:	0a1b      	lsrs	r3, r3, #8
 8000f2a:	f003 0307 	and.w	r3, r3, #7
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	46bd      	mov	sp, r7
 8000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f36:	4770      	bx	lr
 8000f38:	e000ed00 	.word	0xe000ed00

08000f3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b083      	sub	sp, #12
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	4603      	mov	r3, r0
 8000f44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	db0b      	blt.n	8000f66 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f4e:	79fb      	ldrb	r3, [r7, #7]
 8000f50:	f003 021f 	and.w	r2, r3, #31
 8000f54:	4907      	ldr	r1, [pc, #28]	; (8000f74 <__NVIC_EnableIRQ+0x38>)
 8000f56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f5a:	095b      	lsrs	r3, r3, #5
 8000f5c:	2001      	movs	r0, #1
 8000f5e:	fa00 f202 	lsl.w	r2, r0, r2
 8000f62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f66:	bf00      	nop
 8000f68:	370c      	adds	r7, #12
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop
 8000f74:	e000e100 	.word	0xe000e100

08000f78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b083      	sub	sp, #12
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	4603      	mov	r3, r0
 8000f80:	6039      	str	r1, [r7, #0]
 8000f82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	db0a      	blt.n	8000fa2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	b2da      	uxtb	r2, r3
 8000f90:	490c      	ldr	r1, [pc, #48]	; (8000fc4 <__NVIC_SetPriority+0x4c>)
 8000f92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f96:	0112      	lsls	r2, r2, #4
 8000f98:	b2d2      	uxtb	r2, r2
 8000f9a:	440b      	add	r3, r1
 8000f9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fa0:	e00a      	b.n	8000fb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	b2da      	uxtb	r2, r3
 8000fa6:	4908      	ldr	r1, [pc, #32]	; (8000fc8 <__NVIC_SetPriority+0x50>)
 8000fa8:	79fb      	ldrb	r3, [r7, #7]
 8000faa:	f003 030f 	and.w	r3, r3, #15
 8000fae:	3b04      	subs	r3, #4
 8000fb0:	0112      	lsls	r2, r2, #4
 8000fb2:	b2d2      	uxtb	r2, r2
 8000fb4:	440b      	add	r3, r1
 8000fb6:	761a      	strb	r2, [r3, #24]
}
 8000fb8:	bf00      	nop
 8000fba:	370c      	adds	r7, #12
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr
 8000fc4:	e000e100 	.word	0xe000e100
 8000fc8:	e000ed00 	.word	0xe000ed00

08000fcc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b089      	sub	sp, #36	; 0x24
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	60f8      	str	r0, [r7, #12]
 8000fd4:	60b9      	str	r1, [r7, #8]
 8000fd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	f003 0307 	and.w	r3, r3, #7
 8000fde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fe0:	69fb      	ldr	r3, [r7, #28]
 8000fe2:	f1c3 0307 	rsb	r3, r3, #7
 8000fe6:	2b04      	cmp	r3, #4
 8000fe8:	bf28      	it	cs
 8000fea:	2304      	movcs	r3, #4
 8000fec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fee:	69fb      	ldr	r3, [r7, #28]
 8000ff0:	3304      	adds	r3, #4
 8000ff2:	2b06      	cmp	r3, #6
 8000ff4:	d902      	bls.n	8000ffc <NVIC_EncodePriority+0x30>
 8000ff6:	69fb      	ldr	r3, [r7, #28]
 8000ff8:	3b03      	subs	r3, #3
 8000ffa:	e000      	b.n	8000ffe <NVIC_EncodePriority+0x32>
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001000:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001004:	69bb      	ldr	r3, [r7, #24]
 8001006:	fa02 f303 	lsl.w	r3, r2, r3
 800100a:	43da      	mvns	r2, r3
 800100c:	68bb      	ldr	r3, [r7, #8]
 800100e:	401a      	ands	r2, r3
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001014:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	fa01 f303 	lsl.w	r3, r1, r3
 800101e:	43d9      	mvns	r1, r3
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001024:	4313      	orrs	r3, r2
         );
}
 8001026:	4618      	mov	r0, r3
 8001028:	3724      	adds	r7, #36	; 0x24
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr
	...

08001034 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	3b01      	subs	r3, #1
 8001040:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001044:	d301      	bcc.n	800104a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001046:	2301      	movs	r3, #1
 8001048:	e00f      	b.n	800106a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800104a:	4a0a      	ldr	r2, [pc, #40]	; (8001074 <SysTick_Config+0x40>)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	3b01      	subs	r3, #1
 8001050:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001052:	210f      	movs	r1, #15
 8001054:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001058:	f7ff ff8e 	bl	8000f78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800105c:	4b05      	ldr	r3, [pc, #20]	; (8001074 <SysTick_Config+0x40>)
 800105e:	2200      	movs	r2, #0
 8001060:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001062:	4b04      	ldr	r3, [pc, #16]	; (8001074 <SysTick_Config+0x40>)
 8001064:	2207      	movs	r2, #7
 8001066:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001068:	2300      	movs	r3, #0
}
 800106a:	4618      	mov	r0, r3
 800106c:	3708      	adds	r7, #8
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	e000e010 	.word	0xe000e010

08001078 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001080:	6878      	ldr	r0, [r7, #4]
 8001082:	f7ff ff29 	bl	8000ed8 <__NVIC_SetPriorityGrouping>
}
 8001086:	bf00      	nop
 8001088:	3708      	adds	r7, #8
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}

0800108e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800108e:	b580      	push	{r7, lr}
 8001090:	b086      	sub	sp, #24
 8001092:	af00      	add	r7, sp, #0
 8001094:	4603      	mov	r3, r0
 8001096:	60b9      	str	r1, [r7, #8]
 8001098:	607a      	str	r2, [r7, #4]
 800109a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800109c:	2300      	movs	r3, #0
 800109e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010a0:	f7ff ff3e 	bl	8000f20 <__NVIC_GetPriorityGrouping>
 80010a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010a6:	687a      	ldr	r2, [r7, #4]
 80010a8:	68b9      	ldr	r1, [r7, #8]
 80010aa:	6978      	ldr	r0, [r7, #20]
 80010ac:	f7ff ff8e 	bl	8000fcc <NVIC_EncodePriority>
 80010b0:	4602      	mov	r2, r0
 80010b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010b6:	4611      	mov	r1, r2
 80010b8:	4618      	mov	r0, r3
 80010ba:	f7ff ff5d 	bl	8000f78 <__NVIC_SetPriority>
}
 80010be:	bf00      	nop
 80010c0:	3718      	adds	r7, #24
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}

080010c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010c6:	b580      	push	{r7, lr}
 80010c8:	b082      	sub	sp, #8
 80010ca:	af00      	add	r7, sp, #0
 80010cc:	4603      	mov	r3, r0
 80010ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d4:	4618      	mov	r0, r3
 80010d6:	f7ff ff31 	bl	8000f3c <__NVIC_EnableIRQ>
}
 80010da:	bf00      	nop
 80010dc:	3708      	adds	r7, #8
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}

080010e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010e2:	b580      	push	{r7, lr}
 80010e4:	b082      	sub	sp, #8
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010ea:	6878      	ldr	r0, [r7, #4]
 80010ec:	f7ff ffa2 	bl	8001034 <SysTick_Config>
 80010f0:	4603      	mov	r3, r0
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	3708      	adds	r7, #8
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
	...

080010fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b089      	sub	sp, #36	; 0x24
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
 8001104:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001106:	2300      	movs	r3, #0
 8001108:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800110a:	2300      	movs	r3, #0
 800110c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800110e:	2300      	movs	r3, #0
 8001110:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001112:	2300      	movs	r3, #0
 8001114:	61fb      	str	r3, [r7, #28]
 8001116:	e16b      	b.n	80013f0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001118:	2201      	movs	r2, #1
 800111a:	69fb      	ldr	r3, [r7, #28]
 800111c:	fa02 f303 	lsl.w	r3, r2, r3
 8001120:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	697a      	ldr	r2, [r7, #20]
 8001128:	4013      	ands	r3, r2
 800112a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800112c:	693a      	ldr	r2, [r7, #16]
 800112e:	697b      	ldr	r3, [r7, #20]
 8001130:	429a      	cmp	r2, r3
 8001132:	f040 815a 	bne.w	80013ea <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	f003 0303 	and.w	r3, r3, #3
 800113e:	2b01      	cmp	r3, #1
 8001140:	d005      	beq.n	800114e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800114a:	2b02      	cmp	r3, #2
 800114c:	d130      	bne.n	80011b0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	689b      	ldr	r3, [r3, #8]
 8001152:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001154:	69fb      	ldr	r3, [r7, #28]
 8001156:	005b      	lsls	r3, r3, #1
 8001158:	2203      	movs	r2, #3
 800115a:	fa02 f303 	lsl.w	r3, r2, r3
 800115e:	43db      	mvns	r3, r3
 8001160:	69ba      	ldr	r2, [r7, #24]
 8001162:	4013      	ands	r3, r2
 8001164:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	68da      	ldr	r2, [r3, #12]
 800116a:	69fb      	ldr	r3, [r7, #28]
 800116c:	005b      	lsls	r3, r3, #1
 800116e:	fa02 f303 	lsl.w	r3, r2, r3
 8001172:	69ba      	ldr	r2, [r7, #24]
 8001174:	4313      	orrs	r3, r2
 8001176:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	69ba      	ldr	r2, [r7, #24]
 800117c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001184:	2201      	movs	r2, #1
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	fa02 f303 	lsl.w	r3, r2, r3
 800118c:	43db      	mvns	r3, r3
 800118e:	69ba      	ldr	r2, [r7, #24]
 8001190:	4013      	ands	r3, r2
 8001192:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	091b      	lsrs	r3, r3, #4
 800119a:	f003 0201 	and.w	r2, r3, #1
 800119e:	69fb      	ldr	r3, [r7, #28]
 80011a0:	fa02 f303 	lsl.w	r3, r2, r3
 80011a4:	69ba      	ldr	r2, [r7, #24]
 80011a6:	4313      	orrs	r3, r2
 80011a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	69ba      	ldr	r2, [r7, #24]
 80011ae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	f003 0303 	and.w	r3, r3, #3
 80011b8:	2b03      	cmp	r3, #3
 80011ba:	d017      	beq.n	80011ec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	68db      	ldr	r3, [r3, #12]
 80011c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011c2:	69fb      	ldr	r3, [r7, #28]
 80011c4:	005b      	lsls	r3, r3, #1
 80011c6:	2203      	movs	r2, #3
 80011c8:	fa02 f303 	lsl.w	r3, r2, r3
 80011cc:	43db      	mvns	r3, r3
 80011ce:	69ba      	ldr	r2, [r7, #24]
 80011d0:	4013      	ands	r3, r2
 80011d2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	689a      	ldr	r2, [r3, #8]
 80011d8:	69fb      	ldr	r3, [r7, #28]
 80011da:	005b      	lsls	r3, r3, #1
 80011dc:	fa02 f303 	lsl.w	r3, r2, r3
 80011e0:	69ba      	ldr	r2, [r7, #24]
 80011e2:	4313      	orrs	r3, r2
 80011e4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	69ba      	ldr	r2, [r7, #24]
 80011ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	f003 0303 	and.w	r3, r3, #3
 80011f4:	2b02      	cmp	r3, #2
 80011f6:	d123      	bne.n	8001240 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011f8:	69fb      	ldr	r3, [r7, #28]
 80011fa:	08da      	lsrs	r2, r3, #3
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	3208      	adds	r2, #8
 8001200:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001204:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001206:	69fb      	ldr	r3, [r7, #28]
 8001208:	f003 0307 	and.w	r3, r3, #7
 800120c:	009b      	lsls	r3, r3, #2
 800120e:	220f      	movs	r2, #15
 8001210:	fa02 f303 	lsl.w	r3, r2, r3
 8001214:	43db      	mvns	r3, r3
 8001216:	69ba      	ldr	r2, [r7, #24]
 8001218:	4013      	ands	r3, r2
 800121a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	691a      	ldr	r2, [r3, #16]
 8001220:	69fb      	ldr	r3, [r7, #28]
 8001222:	f003 0307 	and.w	r3, r3, #7
 8001226:	009b      	lsls	r3, r3, #2
 8001228:	fa02 f303 	lsl.w	r3, r2, r3
 800122c:	69ba      	ldr	r2, [r7, #24]
 800122e:	4313      	orrs	r3, r2
 8001230:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001232:	69fb      	ldr	r3, [r7, #28]
 8001234:	08da      	lsrs	r2, r3, #3
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	3208      	adds	r2, #8
 800123a:	69b9      	ldr	r1, [r7, #24]
 800123c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	005b      	lsls	r3, r3, #1
 800124a:	2203      	movs	r2, #3
 800124c:	fa02 f303 	lsl.w	r3, r2, r3
 8001250:	43db      	mvns	r3, r3
 8001252:	69ba      	ldr	r2, [r7, #24]
 8001254:	4013      	ands	r3, r2
 8001256:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	f003 0203 	and.w	r2, r3, #3
 8001260:	69fb      	ldr	r3, [r7, #28]
 8001262:	005b      	lsls	r3, r3, #1
 8001264:	fa02 f303 	lsl.w	r3, r2, r3
 8001268:	69ba      	ldr	r2, [r7, #24]
 800126a:	4313      	orrs	r3, r2
 800126c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	69ba      	ldr	r2, [r7, #24]
 8001272:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800127c:	2b00      	cmp	r3, #0
 800127e:	f000 80b4 	beq.w	80013ea <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001282:	2300      	movs	r3, #0
 8001284:	60fb      	str	r3, [r7, #12]
 8001286:	4b60      	ldr	r3, [pc, #384]	; (8001408 <HAL_GPIO_Init+0x30c>)
 8001288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800128a:	4a5f      	ldr	r2, [pc, #380]	; (8001408 <HAL_GPIO_Init+0x30c>)
 800128c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001290:	6453      	str	r3, [r2, #68]	; 0x44
 8001292:	4b5d      	ldr	r3, [pc, #372]	; (8001408 <HAL_GPIO_Init+0x30c>)
 8001294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001296:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800129a:	60fb      	str	r3, [r7, #12]
 800129c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800129e:	4a5b      	ldr	r2, [pc, #364]	; (800140c <HAL_GPIO_Init+0x310>)
 80012a0:	69fb      	ldr	r3, [r7, #28]
 80012a2:	089b      	lsrs	r3, r3, #2
 80012a4:	3302      	adds	r3, #2
 80012a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012ac:	69fb      	ldr	r3, [r7, #28]
 80012ae:	f003 0303 	and.w	r3, r3, #3
 80012b2:	009b      	lsls	r3, r3, #2
 80012b4:	220f      	movs	r2, #15
 80012b6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ba:	43db      	mvns	r3, r3
 80012bc:	69ba      	ldr	r2, [r7, #24]
 80012be:	4013      	ands	r3, r2
 80012c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	4a52      	ldr	r2, [pc, #328]	; (8001410 <HAL_GPIO_Init+0x314>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d02b      	beq.n	8001322 <HAL_GPIO_Init+0x226>
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	4a51      	ldr	r2, [pc, #324]	; (8001414 <HAL_GPIO_Init+0x318>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d025      	beq.n	800131e <HAL_GPIO_Init+0x222>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	4a50      	ldr	r2, [pc, #320]	; (8001418 <HAL_GPIO_Init+0x31c>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d01f      	beq.n	800131a <HAL_GPIO_Init+0x21e>
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	4a4f      	ldr	r2, [pc, #316]	; (800141c <HAL_GPIO_Init+0x320>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d019      	beq.n	8001316 <HAL_GPIO_Init+0x21a>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	4a4e      	ldr	r2, [pc, #312]	; (8001420 <HAL_GPIO_Init+0x324>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d013      	beq.n	8001312 <HAL_GPIO_Init+0x216>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	4a4d      	ldr	r2, [pc, #308]	; (8001424 <HAL_GPIO_Init+0x328>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d00d      	beq.n	800130e <HAL_GPIO_Init+0x212>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	4a4c      	ldr	r2, [pc, #304]	; (8001428 <HAL_GPIO_Init+0x32c>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d007      	beq.n	800130a <HAL_GPIO_Init+0x20e>
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	4a4b      	ldr	r2, [pc, #300]	; (800142c <HAL_GPIO_Init+0x330>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d101      	bne.n	8001306 <HAL_GPIO_Init+0x20a>
 8001302:	2307      	movs	r3, #7
 8001304:	e00e      	b.n	8001324 <HAL_GPIO_Init+0x228>
 8001306:	2308      	movs	r3, #8
 8001308:	e00c      	b.n	8001324 <HAL_GPIO_Init+0x228>
 800130a:	2306      	movs	r3, #6
 800130c:	e00a      	b.n	8001324 <HAL_GPIO_Init+0x228>
 800130e:	2305      	movs	r3, #5
 8001310:	e008      	b.n	8001324 <HAL_GPIO_Init+0x228>
 8001312:	2304      	movs	r3, #4
 8001314:	e006      	b.n	8001324 <HAL_GPIO_Init+0x228>
 8001316:	2303      	movs	r3, #3
 8001318:	e004      	b.n	8001324 <HAL_GPIO_Init+0x228>
 800131a:	2302      	movs	r3, #2
 800131c:	e002      	b.n	8001324 <HAL_GPIO_Init+0x228>
 800131e:	2301      	movs	r3, #1
 8001320:	e000      	b.n	8001324 <HAL_GPIO_Init+0x228>
 8001322:	2300      	movs	r3, #0
 8001324:	69fa      	ldr	r2, [r7, #28]
 8001326:	f002 0203 	and.w	r2, r2, #3
 800132a:	0092      	lsls	r2, r2, #2
 800132c:	4093      	lsls	r3, r2
 800132e:	69ba      	ldr	r2, [r7, #24]
 8001330:	4313      	orrs	r3, r2
 8001332:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001334:	4935      	ldr	r1, [pc, #212]	; (800140c <HAL_GPIO_Init+0x310>)
 8001336:	69fb      	ldr	r3, [r7, #28]
 8001338:	089b      	lsrs	r3, r3, #2
 800133a:	3302      	adds	r3, #2
 800133c:	69ba      	ldr	r2, [r7, #24]
 800133e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001342:	4b3b      	ldr	r3, [pc, #236]	; (8001430 <HAL_GPIO_Init+0x334>)
 8001344:	689b      	ldr	r3, [r3, #8]
 8001346:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001348:	693b      	ldr	r3, [r7, #16]
 800134a:	43db      	mvns	r3, r3
 800134c:	69ba      	ldr	r2, [r7, #24]
 800134e:	4013      	ands	r3, r2
 8001350:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800135a:	2b00      	cmp	r3, #0
 800135c:	d003      	beq.n	8001366 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800135e:	69ba      	ldr	r2, [r7, #24]
 8001360:	693b      	ldr	r3, [r7, #16]
 8001362:	4313      	orrs	r3, r2
 8001364:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001366:	4a32      	ldr	r2, [pc, #200]	; (8001430 <HAL_GPIO_Init+0x334>)
 8001368:	69bb      	ldr	r3, [r7, #24]
 800136a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800136c:	4b30      	ldr	r3, [pc, #192]	; (8001430 <HAL_GPIO_Init+0x334>)
 800136e:	68db      	ldr	r3, [r3, #12]
 8001370:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001372:	693b      	ldr	r3, [r7, #16]
 8001374:	43db      	mvns	r3, r3
 8001376:	69ba      	ldr	r2, [r7, #24]
 8001378:	4013      	ands	r3, r2
 800137a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001384:	2b00      	cmp	r3, #0
 8001386:	d003      	beq.n	8001390 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001388:	69ba      	ldr	r2, [r7, #24]
 800138a:	693b      	ldr	r3, [r7, #16]
 800138c:	4313      	orrs	r3, r2
 800138e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001390:	4a27      	ldr	r2, [pc, #156]	; (8001430 <HAL_GPIO_Init+0x334>)
 8001392:	69bb      	ldr	r3, [r7, #24]
 8001394:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001396:	4b26      	ldr	r3, [pc, #152]	; (8001430 <HAL_GPIO_Init+0x334>)
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800139c:	693b      	ldr	r3, [r7, #16]
 800139e:	43db      	mvns	r3, r3
 80013a0:	69ba      	ldr	r2, [r7, #24]
 80013a2:	4013      	ands	r3, r2
 80013a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d003      	beq.n	80013ba <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80013b2:	69ba      	ldr	r2, [r7, #24]
 80013b4:	693b      	ldr	r3, [r7, #16]
 80013b6:	4313      	orrs	r3, r2
 80013b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013ba:	4a1d      	ldr	r2, [pc, #116]	; (8001430 <HAL_GPIO_Init+0x334>)
 80013bc:	69bb      	ldr	r3, [r7, #24]
 80013be:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013c0:	4b1b      	ldr	r3, [pc, #108]	; (8001430 <HAL_GPIO_Init+0x334>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013c6:	693b      	ldr	r3, [r7, #16]
 80013c8:	43db      	mvns	r3, r3
 80013ca:	69ba      	ldr	r2, [r7, #24]
 80013cc:	4013      	ands	r3, r2
 80013ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d003      	beq.n	80013e4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80013dc:	69ba      	ldr	r2, [r7, #24]
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	4313      	orrs	r3, r2
 80013e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013e4:	4a12      	ldr	r2, [pc, #72]	; (8001430 <HAL_GPIO_Init+0x334>)
 80013e6:	69bb      	ldr	r3, [r7, #24]
 80013e8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013ea:	69fb      	ldr	r3, [r7, #28]
 80013ec:	3301      	adds	r3, #1
 80013ee:	61fb      	str	r3, [r7, #28]
 80013f0:	69fb      	ldr	r3, [r7, #28]
 80013f2:	2b0f      	cmp	r3, #15
 80013f4:	f67f ae90 	bls.w	8001118 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80013f8:	bf00      	nop
 80013fa:	bf00      	nop
 80013fc:	3724      	adds	r7, #36	; 0x24
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr
 8001406:	bf00      	nop
 8001408:	40023800 	.word	0x40023800
 800140c:	40013800 	.word	0x40013800
 8001410:	40020000 	.word	0x40020000
 8001414:	40020400 	.word	0x40020400
 8001418:	40020800 	.word	0x40020800
 800141c:	40020c00 	.word	0x40020c00
 8001420:	40021000 	.word	0x40021000
 8001424:	40021400 	.word	0x40021400
 8001428:	40021800 	.word	0x40021800
 800142c:	40021c00 	.word	0x40021c00
 8001430:	40013c00 	.word	0x40013c00

08001434 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001434:	b480      	push	{r7}
 8001436:	b083      	sub	sp, #12
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
 800143c:	460b      	mov	r3, r1
 800143e:	807b      	strh	r3, [r7, #2]
 8001440:	4613      	mov	r3, r2
 8001442:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001444:	787b      	ldrb	r3, [r7, #1]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d003      	beq.n	8001452 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800144a:	887a      	ldrh	r2, [r7, #2]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001450:	e003      	b.n	800145a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001452:	887b      	ldrh	r3, [r7, #2]
 8001454:	041a      	lsls	r2, r3, #16
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	619a      	str	r2, [r3, #24]
}
 800145a:	bf00      	nop
 800145c:	370c      	adds	r7, #12
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr

08001466 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001466:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001468:	b08f      	sub	sp, #60	; 0x3c
 800146a:	af0a      	add	r7, sp, #40	; 0x28
 800146c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d101      	bne.n	8001478 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001474:	2301      	movs	r3, #1
 8001476:	e054      	b.n	8001522 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001484:	b2db      	uxtb	r3, r3
 8001486:	2b00      	cmp	r3, #0
 8001488:	d106      	bne.n	8001498 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	2200      	movs	r2, #0
 800148e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001492:	6878      	ldr	r0, [r7, #4]
 8001494:	f005 fc4a 	bl	8006d2c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2203      	movs	r2, #3
 800149c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d102      	bne.n	80014b2 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2200      	movs	r2, #0
 80014b0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4618      	mov	r0, r3
 80014b8:	f003 fc3c 	bl	8004d34 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	603b      	str	r3, [r7, #0]
 80014c2:	687e      	ldr	r6, [r7, #4]
 80014c4:	466d      	mov	r5, sp
 80014c6:	f106 0410 	add.w	r4, r6, #16
 80014ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014d2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80014d6:	e885 0003 	stmia.w	r5, {r0, r1}
 80014da:	1d33      	adds	r3, r6, #4
 80014dc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014de:	6838      	ldr	r0, [r7, #0]
 80014e0:	f003 fbb6 	bl	8004c50 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	2101      	movs	r1, #1
 80014ea:	4618      	mov	r0, r3
 80014ec:	f003 fc33 	bl	8004d56 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	603b      	str	r3, [r7, #0]
 80014f6:	687e      	ldr	r6, [r7, #4]
 80014f8:	466d      	mov	r5, sp
 80014fa:	f106 0410 	add.w	r4, r6, #16
 80014fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001500:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001502:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001504:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001506:	e894 0003 	ldmia.w	r4, {r0, r1}
 800150a:	e885 0003 	stmia.w	r5, {r0, r1}
 800150e:	1d33      	adds	r3, r6, #4
 8001510:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001512:	6838      	ldr	r0, [r7, #0]
 8001514:	f003 fdbc 	bl	8005090 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2201      	movs	r2, #1
 800151c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8001520:	2300      	movs	r3, #0
}
 8001522:	4618      	mov	r0, r3
 8001524:	3714      	adds	r7, #20
 8001526:	46bd      	mov	sp, r7
 8001528:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800152a <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800152a:	b590      	push	{r4, r7, lr}
 800152c:	b089      	sub	sp, #36	; 0x24
 800152e:	af04      	add	r7, sp, #16
 8001530:	6078      	str	r0, [r7, #4]
 8001532:	4608      	mov	r0, r1
 8001534:	4611      	mov	r1, r2
 8001536:	461a      	mov	r2, r3
 8001538:	4603      	mov	r3, r0
 800153a:	70fb      	strb	r3, [r7, #3]
 800153c:	460b      	mov	r3, r1
 800153e:	70bb      	strb	r3, [r7, #2]
 8001540:	4613      	mov	r3, r2
 8001542:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800154a:	2b01      	cmp	r3, #1
 800154c:	d101      	bne.n	8001552 <HAL_HCD_HC_Init+0x28>
 800154e:	2302      	movs	r3, #2
 8001550:	e076      	b.n	8001640 <HAL_HCD_HC_Init+0x116>
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2201      	movs	r2, #1
 8001556:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 800155a:	78fb      	ldrb	r3, [r7, #3]
 800155c:	687a      	ldr	r2, [r7, #4]
 800155e:	212c      	movs	r1, #44	; 0x2c
 8001560:	fb01 f303 	mul.w	r3, r1, r3
 8001564:	4413      	add	r3, r2
 8001566:	333d      	adds	r3, #61	; 0x3d
 8001568:	2200      	movs	r2, #0
 800156a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800156c:	78fb      	ldrb	r3, [r7, #3]
 800156e:	687a      	ldr	r2, [r7, #4]
 8001570:	212c      	movs	r1, #44	; 0x2c
 8001572:	fb01 f303 	mul.w	r3, r1, r3
 8001576:	4413      	add	r3, r2
 8001578:	3338      	adds	r3, #56	; 0x38
 800157a:	787a      	ldrb	r2, [r7, #1]
 800157c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800157e:	78fb      	ldrb	r3, [r7, #3]
 8001580:	687a      	ldr	r2, [r7, #4]
 8001582:	212c      	movs	r1, #44	; 0x2c
 8001584:	fb01 f303 	mul.w	r3, r1, r3
 8001588:	4413      	add	r3, r2
 800158a:	3340      	adds	r3, #64	; 0x40
 800158c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800158e:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001590:	78fb      	ldrb	r3, [r7, #3]
 8001592:	687a      	ldr	r2, [r7, #4]
 8001594:	212c      	movs	r1, #44	; 0x2c
 8001596:	fb01 f303 	mul.w	r3, r1, r3
 800159a:	4413      	add	r3, r2
 800159c:	3339      	adds	r3, #57	; 0x39
 800159e:	78fa      	ldrb	r2, [r7, #3]
 80015a0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80015a2:	78fb      	ldrb	r3, [r7, #3]
 80015a4:	687a      	ldr	r2, [r7, #4]
 80015a6:	212c      	movs	r1, #44	; 0x2c
 80015a8:	fb01 f303 	mul.w	r3, r1, r3
 80015ac:	4413      	add	r3, r2
 80015ae:	333f      	adds	r3, #63	; 0x3f
 80015b0:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80015b4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80015b6:	78fb      	ldrb	r3, [r7, #3]
 80015b8:	78ba      	ldrb	r2, [r7, #2]
 80015ba:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80015be:	b2d0      	uxtb	r0, r2
 80015c0:	687a      	ldr	r2, [r7, #4]
 80015c2:	212c      	movs	r1, #44	; 0x2c
 80015c4:	fb01 f303 	mul.w	r3, r1, r3
 80015c8:	4413      	add	r3, r2
 80015ca:	333a      	adds	r3, #58	; 0x3a
 80015cc:	4602      	mov	r2, r0
 80015ce:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80015d0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	da09      	bge.n	80015ec <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80015d8:	78fb      	ldrb	r3, [r7, #3]
 80015da:	687a      	ldr	r2, [r7, #4]
 80015dc:	212c      	movs	r1, #44	; 0x2c
 80015de:	fb01 f303 	mul.w	r3, r1, r3
 80015e2:	4413      	add	r3, r2
 80015e4:	333b      	adds	r3, #59	; 0x3b
 80015e6:	2201      	movs	r2, #1
 80015e8:	701a      	strb	r2, [r3, #0]
 80015ea:	e008      	b.n	80015fe <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80015ec:	78fb      	ldrb	r3, [r7, #3]
 80015ee:	687a      	ldr	r2, [r7, #4]
 80015f0:	212c      	movs	r1, #44	; 0x2c
 80015f2:	fb01 f303 	mul.w	r3, r1, r3
 80015f6:	4413      	add	r3, r2
 80015f8:	333b      	adds	r3, #59	; 0x3b
 80015fa:	2200      	movs	r2, #0
 80015fc:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80015fe:	78fb      	ldrb	r3, [r7, #3]
 8001600:	687a      	ldr	r2, [r7, #4]
 8001602:	212c      	movs	r1, #44	; 0x2c
 8001604:	fb01 f303 	mul.w	r3, r1, r3
 8001608:	4413      	add	r3, r2
 800160a:	333c      	adds	r3, #60	; 0x3c
 800160c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001610:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6818      	ldr	r0, [r3, #0]
 8001616:	787c      	ldrb	r4, [r7, #1]
 8001618:	78ba      	ldrb	r2, [r7, #2]
 800161a:	78f9      	ldrb	r1, [r7, #3]
 800161c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800161e:	9302      	str	r3, [sp, #8]
 8001620:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001624:	9301      	str	r3, [sp, #4]
 8001626:	f897 3020 	ldrb.w	r3, [r7, #32]
 800162a:	9300      	str	r3, [sp, #0]
 800162c:	4623      	mov	r3, r4
 800162e:	f003 fe8b 	bl	8005348 <USB_HC_Init>
 8001632:	4603      	mov	r3, r0
 8001634:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2200      	movs	r2, #0
 800163a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800163e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001640:	4618      	mov	r0, r3
 8001642:	3714      	adds	r7, #20
 8001644:	46bd      	mov	sp, r7
 8001646:	bd90      	pop	{r4, r7, pc}

08001648 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b084      	sub	sp, #16
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
 8001650:	460b      	mov	r3, r1
 8001652:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001654:	2300      	movs	r3, #0
 8001656:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800165e:	2b01      	cmp	r3, #1
 8001660:	d101      	bne.n	8001666 <HAL_HCD_HC_Halt+0x1e>
 8001662:	2302      	movs	r3, #2
 8001664:	e00f      	b.n	8001686 <HAL_HCD_HC_Halt+0x3e>
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2201      	movs	r2, #1
 800166a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	78fa      	ldrb	r2, [r7, #3]
 8001674:	4611      	mov	r1, r2
 8001676:	4618      	mov	r0, r3
 8001678:	f004 f8db 	bl	8005832 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2200      	movs	r2, #0
 8001680:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001684:	7bfb      	ldrb	r3, [r7, #15]
}
 8001686:	4618      	mov	r0, r3
 8001688:	3710      	adds	r7, #16
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
	...

08001690 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b082      	sub	sp, #8
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
 8001698:	4608      	mov	r0, r1
 800169a:	4611      	mov	r1, r2
 800169c:	461a      	mov	r2, r3
 800169e:	4603      	mov	r3, r0
 80016a0:	70fb      	strb	r3, [r7, #3]
 80016a2:	460b      	mov	r3, r1
 80016a4:	70bb      	strb	r3, [r7, #2]
 80016a6:	4613      	mov	r3, r2
 80016a8:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80016aa:	78fb      	ldrb	r3, [r7, #3]
 80016ac:	687a      	ldr	r2, [r7, #4]
 80016ae:	212c      	movs	r1, #44	; 0x2c
 80016b0:	fb01 f303 	mul.w	r3, r1, r3
 80016b4:	4413      	add	r3, r2
 80016b6:	333b      	adds	r3, #59	; 0x3b
 80016b8:	78ba      	ldrb	r2, [r7, #2]
 80016ba:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80016bc:	78fb      	ldrb	r3, [r7, #3]
 80016be:	687a      	ldr	r2, [r7, #4]
 80016c0:	212c      	movs	r1, #44	; 0x2c
 80016c2:	fb01 f303 	mul.w	r3, r1, r3
 80016c6:	4413      	add	r3, r2
 80016c8:	333f      	adds	r3, #63	; 0x3f
 80016ca:	787a      	ldrb	r2, [r7, #1]
 80016cc:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80016ce:	7c3b      	ldrb	r3, [r7, #16]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d112      	bne.n	80016fa <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80016d4:	78fb      	ldrb	r3, [r7, #3]
 80016d6:	687a      	ldr	r2, [r7, #4]
 80016d8:	212c      	movs	r1, #44	; 0x2c
 80016da:	fb01 f303 	mul.w	r3, r1, r3
 80016de:	4413      	add	r3, r2
 80016e0:	3342      	adds	r3, #66	; 0x42
 80016e2:	2203      	movs	r2, #3
 80016e4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80016e6:	78fb      	ldrb	r3, [r7, #3]
 80016e8:	687a      	ldr	r2, [r7, #4]
 80016ea:	212c      	movs	r1, #44	; 0x2c
 80016ec:	fb01 f303 	mul.w	r3, r1, r3
 80016f0:	4413      	add	r3, r2
 80016f2:	333d      	adds	r3, #61	; 0x3d
 80016f4:	7f3a      	ldrb	r2, [r7, #28]
 80016f6:	701a      	strb	r2, [r3, #0]
 80016f8:	e008      	b.n	800170c <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80016fa:	78fb      	ldrb	r3, [r7, #3]
 80016fc:	687a      	ldr	r2, [r7, #4]
 80016fe:	212c      	movs	r1, #44	; 0x2c
 8001700:	fb01 f303 	mul.w	r3, r1, r3
 8001704:	4413      	add	r3, r2
 8001706:	3342      	adds	r3, #66	; 0x42
 8001708:	2202      	movs	r2, #2
 800170a:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800170c:	787b      	ldrb	r3, [r7, #1]
 800170e:	2b03      	cmp	r3, #3
 8001710:	f200 80c6 	bhi.w	80018a0 <HAL_HCD_HC_SubmitRequest+0x210>
 8001714:	a201      	add	r2, pc, #4	; (adr r2, 800171c <HAL_HCD_HC_SubmitRequest+0x8c>)
 8001716:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800171a:	bf00      	nop
 800171c:	0800172d 	.word	0x0800172d
 8001720:	0800188d 	.word	0x0800188d
 8001724:	08001791 	.word	0x08001791
 8001728:	0800180f 	.word	0x0800180f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 800172c:	7c3b      	ldrb	r3, [r7, #16]
 800172e:	2b01      	cmp	r3, #1
 8001730:	f040 80b8 	bne.w	80018a4 <HAL_HCD_HC_SubmitRequest+0x214>
 8001734:	78bb      	ldrb	r3, [r7, #2]
 8001736:	2b00      	cmp	r3, #0
 8001738:	f040 80b4 	bne.w	80018a4 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 800173c:	8b3b      	ldrh	r3, [r7, #24]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d108      	bne.n	8001754 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001742:	78fb      	ldrb	r3, [r7, #3]
 8001744:	687a      	ldr	r2, [r7, #4]
 8001746:	212c      	movs	r1, #44	; 0x2c
 8001748:	fb01 f303 	mul.w	r3, r1, r3
 800174c:	4413      	add	r3, r2
 800174e:	3355      	adds	r3, #85	; 0x55
 8001750:	2201      	movs	r2, #1
 8001752:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001754:	78fb      	ldrb	r3, [r7, #3]
 8001756:	687a      	ldr	r2, [r7, #4]
 8001758:	212c      	movs	r1, #44	; 0x2c
 800175a:	fb01 f303 	mul.w	r3, r1, r3
 800175e:	4413      	add	r3, r2
 8001760:	3355      	adds	r3, #85	; 0x55
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d109      	bne.n	800177c <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001768:	78fb      	ldrb	r3, [r7, #3]
 800176a:	687a      	ldr	r2, [r7, #4]
 800176c:	212c      	movs	r1, #44	; 0x2c
 800176e:	fb01 f303 	mul.w	r3, r1, r3
 8001772:	4413      	add	r3, r2
 8001774:	3342      	adds	r3, #66	; 0x42
 8001776:	2200      	movs	r2, #0
 8001778:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800177a:	e093      	b.n	80018a4 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800177c:	78fb      	ldrb	r3, [r7, #3]
 800177e:	687a      	ldr	r2, [r7, #4]
 8001780:	212c      	movs	r1, #44	; 0x2c
 8001782:	fb01 f303 	mul.w	r3, r1, r3
 8001786:	4413      	add	r3, r2
 8001788:	3342      	adds	r3, #66	; 0x42
 800178a:	2202      	movs	r2, #2
 800178c:	701a      	strb	r2, [r3, #0]
      break;
 800178e:	e089      	b.n	80018a4 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001790:	78bb      	ldrb	r3, [r7, #2]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d11d      	bne.n	80017d2 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001796:	78fb      	ldrb	r3, [r7, #3]
 8001798:	687a      	ldr	r2, [r7, #4]
 800179a:	212c      	movs	r1, #44	; 0x2c
 800179c:	fb01 f303 	mul.w	r3, r1, r3
 80017a0:	4413      	add	r3, r2
 80017a2:	3355      	adds	r3, #85	; 0x55
 80017a4:	781b      	ldrb	r3, [r3, #0]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d109      	bne.n	80017be <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80017aa:	78fb      	ldrb	r3, [r7, #3]
 80017ac:	687a      	ldr	r2, [r7, #4]
 80017ae:	212c      	movs	r1, #44	; 0x2c
 80017b0:	fb01 f303 	mul.w	r3, r1, r3
 80017b4:	4413      	add	r3, r2
 80017b6:	3342      	adds	r3, #66	; 0x42
 80017b8:	2200      	movs	r2, #0
 80017ba:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80017bc:	e073      	b.n	80018a6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80017be:	78fb      	ldrb	r3, [r7, #3]
 80017c0:	687a      	ldr	r2, [r7, #4]
 80017c2:	212c      	movs	r1, #44	; 0x2c
 80017c4:	fb01 f303 	mul.w	r3, r1, r3
 80017c8:	4413      	add	r3, r2
 80017ca:	3342      	adds	r3, #66	; 0x42
 80017cc:	2202      	movs	r2, #2
 80017ce:	701a      	strb	r2, [r3, #0]
      break;
 80017d0:	e069      	b.n	80018a6 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80017d2:	78fb      	ldrb	r3, [r7, #3]
 80017d4:	687a      	ldr	r2, [r7, #4]
 80017d6:	212c      	movs	r1, #44	; 0x2c
 80017d8:	fb01 f303 	mul.w	r3, r1, r3
 80017dc:	4413      	add	r3, r2
 80017de:	3354      	adds	r3, #84	; 0x54
 80017e0:	781b      	ldrb	r3, [r3, #0]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d109      	bne.n	80017fa <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80017e6:	78fb      	ldrb	r3, [r7, #3]
 80017e8:	687a      	ldr	r2, [r7, #4]
 80017ea:	212c      	movs	r1, #44	; 0x2c
 80017ec:	fb01 f303 	mul.w	r3, r1, r3
 80017f0:	4413      	add	r3, r2
 80017f2:	3342      	adds	r3, #66	; 0x42
 80017f4:	2200      	movs	r2, #0
 80017f6:	701a      	strb	r2, [r3, #0]
      break;
 80017f8:	e055      	b.n	80018a6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80017fa:	78fb      	ldrb	r3, [r7, #3]
 80017fc:	687a      	ldr	r2, [r7, #4]
 80017fe:	212c      	movs	r1, #44	; 0x2c
 8001800:	fb01 f303 	mul.w	r3, r1, r3
 8001804:	4413      	add	r3, r2
 8001806:	3342      	adds	r3, #66	; 0x42
 8001808:	2202      	movs	r2, #2
 800180a:	701a      	strb	r2, [r3, #0]
      break;
 800180c:	e04b      	b.n	80018a6 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800180e:	78bb      	ldrb	r3, [r7, #2]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d11d      	bne.n	8001850 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001814:	78fb      	ldrb	r3, [r7, #3]
 8001816:	687a      	ldr	r2, [r7, #4]
 8001818:	212c      	movs	r1, #44	; 0x2c
 800181a:	fb01 f303 	mul.w	r3, r1, r3
 800181e:	4413      	add	r3, r2
 8001820:	3355      	adds	r3, #85	; 0x55
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d109      	bne.n	800183c <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001828:	78fb      	ldrb	r3, [r7, #3]
 800182a:	687a      	ldr	r2, [r7, #4]
 800182c:	212c      	movs	r1, #44	; 0x2c
 800182e:	fb01 f303 	mul.w	r3, r1, r3
 8001832:	4413      	add	r3, r2
 8001834:	3342      	adds	r3, #66	; 0x42
 8001836:	2200      	movs	r2, #0
 8001838:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800183a:	e034      	b.n	80018a6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800183c:	78fb      	ldrb	r3, [r7, #3]
 800183e:	687a      	ldr	r2, [r7, #4]
 8001840:	212c      	movs	r1, #44	; 0x2c
 8001842:	fb01 f303 	mul.w	r3, r1, r3
 8001846:	4413      	add	r3, r2
 8001848:	3342      	adds	r3, #66	; 0x42
 800184a:	2202      	movs	r2, #2
 800184c:	701a      	strb	r2, [r3, #0]
      break;
 800184e:	e02a      	b.n	80018a6 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001850:	78fb      	ldrb	r3, [r7, #3]
 8001852:	687a      	ldr	r2, [r7, #4]
 8001854:	212c      	movs	r1, #44	; 0x2c
 8001856:	fb01 f303 	mul.w	r3, r1, r3
 800185a:	4413      	add	r3, r2
 800185c:	3354      	adds	r3, #84	; 0x54
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d109      	bne.n	8001878 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001864:	78fb      	ldrb	r3, [r7, #3]
 8001866:	687a      	ldr	r2, [r7, #4]
 8001868:	212c      	movs	r1, #44	; 0x2c
 800186a:	fb01 f303 	mul.w	r3, r1, r3
 800186e:	4413      	add	r3, r2
 8001870:	3342      	adds	r3, #66	; 0x42
 8001872:	2200      	movs	r2, #0
 8001874:	701a      	strb	r2, [r3, #0]
      break;
 8001876:	e016      	b.n	80018a6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001878:	78fb      	ldrb	r3, [r7, #3]
 800187a:	687a      	ldr	r2, [r7, #4]
 800187c:	212c      	movs	r1, #44	; 0x2c
 800187e:	fb01 f303 	mul.w	r3, r1, r3
 8001882:	4413      	add	r3, r2
 8001884:	3342      	adds	r3, #66	; 0x42
 8001886:	2202      	movs	r2, #2
 8001888:	701a      	strb	r2, [r3, #0]
      break;
 800188a:	e00c      	b.n	80018a6 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800188c:	78fb      	ldrb	r3, [r7, #3]
 800188e:	687a      	ldr	r2, [r7, #4]
 8001890:	212c      	movs	r1, #44	; 0x2c
 8001892:	fb01 f303 	mul.w	r3, r1, r3
 8001896:	4413      	add	r3, r2
 8001898:	3342      	adds	r3, #66	; 0x42
 800189a:	2200      	movs	r2, #0
 800189c:	701a      	strb	r2, [r3, #0]
      break;
 800189e:	e002      	b.n	80018a6 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 80018a0:	bf00      	nop
 80018a2:	e000      	b.n	80018a6 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 80018a4:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80018a6:	78fb      	ldrb	r3, [r7, #3]
 80018a8:	687a      	ldr	r2, [r7, #4]
 80018aa:	212c      	movs	r1, #44	; 0x2c
 80018ac:	fb01 f303 	mul.w	r3, r1, r3
 80018b0:	4413      	add	r3, r2
 80018b2:	3344      	adds	r3, #68	; 0x44
 80018b4:	697a      	ldr	r2, [r7, #20]
 80018b6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80018b8:	78fb      	ldrb	r3, [r7, #3]
 80018ba:	8b3a      	ldrh	r2, [r7, #24]
 80018bc:	6879      	ldr	r1, [r7, #4]
 80018be:	202c      	movs	r0, #44	; 0x2c
 80018c0:	fb00 f303 	mul.w	r3, r0, r3
 80018c4:	440b      	add	r3, r1
 80018c6:	334c      	adds	r3, #76	; 0x4c
 80018c8:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80018ca:	78fb      	ldrb	r3, [r7, #3]
 80018cc:	687a      	ldr	r2, [r7, #4]
 80018ce:	212c      	movs	r1, #44	; 0x2c
 80018d0:	fb01 f303 	mul.w	r3, r1, r3
 80018d4:	4413      	add	r3, r2
 80018d6:	3360      	adds	r3, #96	; 0x60
 80018d8:	2200      	movs	r2, #0
 80018da:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80018dc:	78fb      	ldrb	r3, [r7, #3]
 80018de:	687a      	ldr	r2, [r7, #4]
 80018e0:	212c      	movs	r1, #44	; 0x2c
 80018e2:	fb01 f303 	mul.w	r3, r1, r3
 80018e6:	4413      	add	r3, r2
 80018e8:	3350      	adds	r3, #80	; 0x50
 80018ea:	2200      	movs	r2, #0
 80018ec:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80018ee:	78fb      	ldrb	r3, [r7, #3]
 80018f0:	687a      	ldr	r2, [r7, #4]
 80018f2:	212c      	movs	r1, #44	; 0x2c
 80018f4:	fb01 f303 	mul.w	r3, r1, r3
 80018f8:	4413      	add	r3, r2
 80018fa:	3339      	adds	r3, #57	; 0x39
 80018fc:	78fa      	ldrb	r2, [r7, #3]
 80018fe:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001900:	78fb      	ldrb	r3, [r7, #3]
 8001902:	687a      	ldr	r2, [r7, #4]
 8001904:	212c      	movs	r1, #44	; 0x2c
 8001906:	fb01 f303 	mul.w	r3, r1, r3
 800190a:	4413      	add	r3, r2
 800190c:	3361      	adds	r3, #97	; 0x61
 800190e:	2200      	movs	r2, #0
 8001910:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6818      	ldr	r0, [r3, #0]
 8001916:	78fb      	ldrb	r3, [r7, #3]
 8001918:	222c      	movs	r2, #44	; 0x2c
 800191a:	fb02 f303 	mul.w	r3, r2, r3
 800191e:	3338      	adds	r3, #56	; 0x38
 8001920:	687a      	ldr	r2, [r7, #4]
 8001922:	18d1      	adds	r1, r2, r3
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	691b      	ldr	r3, [r3, #16]
 8001928:	b2db      	uxtb	r3, r3
 800192a:	461a      	mov	r2, r3
 800192c:	f003 fe2e 	bl	800558c <USB_HC_StartXfer>
 8001930:	4603      	mov	r3, r0
}
 8001932:	4618      	mov	r0, r3
 8001934:	3708      	adds	r7, #8
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop

0800193c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b086      	sub	sp, #24
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4618      	mov	r0, r3
 8001954:	f003 fb59 	bl	800500a <USB_GetMode>
 8001958:	4603      	mov	r3, r0
 800195a:	2b01      	cmp	r3, #1
 800195c:	f040 80f6 	bne.w	8001b4c <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4618      	mov	r0, r3
 8001966:	f003 fb3d 	bl	8004fe4 <USB_ReadInterrupts>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	f000 80ec 	beq.w	8001b4a <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4618      	mov	r0, r3
 8001978:	f003 fb34 	bl	8004fe4 <USB_ReadInterrupts>
 800197c:	4603      	mov	r3, r0
 800197e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001982:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001986:	d104      	bne.n	8001992 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001990:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4618      	mov	r0, r3
 8001998:	f003 fb24 	bl	8004fe4 <USB_ReadInterrupts>
 800199c:	4603      	mov	r3, r0
 800199e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80019a6:	d104      	bne.n	80019b2 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80019b0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4618      	mov	r0, r3
 80019b8:	f003 fb14 	bl	8004fe4 <USB_ReadInterrupts>
 80019bc:	4603      	mov	r3, r0
 80019be:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80019c2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80019c6:	d104      	bne.n	80019d2 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80019d0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4618      	mov	r0, r3
 80019d8:	f003 fb04 	bl	8004fe4 <USB_ReadInterrupts>
 80019dc:	4603      	mov	r3, r0
 80019de:	f003 0302 	and.w	r3, r3, #2
 80019e2:	2b02      	cmp	r3, #2
 80019e4:	d103      	bne.n	80019ee <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	2202      	movs	r2, #2
 80019ec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4618      	mov	r0, r3
 80019f4:	f003 faf6 	bl	8004fe4 <USB_ReadInterrupts>
 80019f8:	4603      	mov	r3, r0
 80019fa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80019fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001a02:	d11c      	bne.n	8001a3e <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001a0c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f003 0301 	and.w	r3, r3, #1
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d10f      	bne.n	8001a3e <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001a1e:	2110      	movs	r1, #16
 8001a20:	6938      	ldr	r0, [r7, #16]
 8001a22:	f003 f9e5 	bl	8004df0 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001a26:	6938      	ldr	r0, [r7, #16]
 8001a28:	f003 fa16 	bl	8004e58 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	2101      	movs	r1, #1
 8001a32:	4618      	mov	r0, r3
 8001a34:	f003 fbec 	bl	8005210 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001a38:	6878      	ldr	r0, [r7, #4]
 8001a3a:	f005 f9f5 	bl	8006e28 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4618      	mov	r0, r3
 8001a44:	f003 face 	bl	8004fe4 <USB_ReadInterrupts>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a4e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a52:	d102      	bne.n	8001a5a <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001a54:	6878      	ldr	r0, [r7, #4]
 8001a56:	f001 f882 	bl	8002b5e <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f003 fac0 	bl	8004fe4 <USB_ReadInterrupts>
 8001a64:	4603      	mov	r3, r0
 8001a66:	f003 0308 	and.w	r3, r3, #8
 8001a6a:	2b08      	cmp	r3, #8
 8001a6c:	d106      	bne.n	8001a7c <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001a6e:	6878      	ldr	r0, [r7, #4]
 8001a70:	f005 f9be 	bl	8006df0 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	2208      	movs	r2, #8
 8001a7a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4618      	mov	r0, r3
 8001a82:	f003 faaf 	bl	8004fe4 <USB_ReadInterrupts>
 8001a86:	4603      	mov	r3, r0
 8001a88:	f003 0310 	and.w	r3, r3, #16
 8001a8c:	2b10      	cmp	r3, #16
 8001a8e:	d101      	bne.n	8001a94 <HAL_HCD_IRQHandler+0x158>
 8001a90:	2301      	movs	r3, #1
 8001a92:	e000      	b.n	8001a96 <HAL_HCD_IRQHandler+0x15a>
 8001a94:	2300      	movs	r3, #0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d012      	beq.n	8001ac0 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	699a      	ldr	r2, [r3, #24]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f022 0210 	bic.w	r2, r2, #16
 8001aa8:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001aaa:	6878      	ldr	r0, [r7, #4]
 8001aac:	f000 ff85 	bl	80029ba <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	699a      	ldr	r2, [r3, #24]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f042 0210 	orr.w	r2, r2, #16
 8001abe:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f003 fa8d 	bl	8004fe4 <USB_ReadInterrupts>
 8001aca:	4603      	mov	r3, r0
 8001acc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ad0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001ad4:	d13a      	bne.n	8001b4c <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4618      	mov	r0, r3
 8001adc:	f003 fe98 	bl	8005810 <USB_HC_ReadInterrupt>
 8001ae0:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	617b      	str	r3, [r7, #20]
 8001ae6:	e025      	b.n	8001b34 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	f003 030f 	and.w	r3, r3, #15
 8001aee:	68ba      	ldr	r2, [r7, #8]
 8001af0:	fa22 f303 	lsr.w	r3, r2, r3
 8001af4:	f003 0301 	and.w	r3, r3, #1
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d018      	beq.n	8001b2e <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	015a      	lsls	r2, r3, #5
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	4413      	add	r3, r2
 8001b04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b12:	d106      	bne.n	8001b22 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	b2db      	uxtb	r3, r3
 8001b18:	4619      	mov	r1, r3
 8001b1a:	6878      	ldr	r0, [r7, #4]
 8001b1c:	f000 f88f 	bl	8001c3e <HCD_HC_IN_IRQHandler>
 8001b20:	e005      	b.n	8001b2e <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	b2db      	uxtb	r3, r3
 8001b26:	4619      	mov	r1, r3
 8001b28:	6878      	ldr	r0, [r7, #4]
 8001b2a:	f000 fbdd 	bl	80022e8 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	3301      	adds	r3, #1
 8001b32:	617b      	str	r3, [r7, #20]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	697a      	ldr	r2, [r7, #20]
 8001b3a:	429a      	cmp	r2, r3
 8001b3c:	d3d4      	bcc.n	8001ae8 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b46:	615a      	str	r2, [r3, #20]
 8001b48:	e000      	b.n	8001b4c <HAL_HCD_IRQHandler+0x210>
      return;
 8001b4a:	bf00      	nop
    }
  }
}
 8001b4c:	3718      	adds	r7, #24
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}

08001b52 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001b52:	b580      	push	{r7, lr}
 8001b54:	b082      	sub	sp, #8
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	d101      	bne.n	8001b68 <HAL_HCD_Start+0x16>
 8001b64:	2302      	movs	r3, #2
 8001b66:	e013      	b.n	8001b90 <HAL_HCD_Start+0x3e>
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	2101      	movs	r1, #1
 8001b76:	4618      	mov	r0, r3
 8001b78:	f003 fb84 	bl	8005284 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4618      	mov	r0, r3
 8001b82:	f003 f8c6 	bl	8004d12 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2200      	movs	r2, #0
 8001b8a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001b8e:	2300      	movs	r3, #0
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	3708      	adds	r7, #8
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}

08001b98 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b082      	sub	sp, #8
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001ba6:	2b01      	cmp	r3, #1
 8001ba8:	d101      	bne.n	8001bae <HAL_HCD_Stop+0x16>
 8001baa:	2302      	movs	r3, #2
 8001bac:	e00d      	b.n	8001bca <HAL_HCD_Stop+0x32>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f003 ff72 	bl	8005aa4 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001bc8:	2300      	movs	r3, #0
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	3708      	adds	r7, #8
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}

08001bd2 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001bd2:	b480      	push	{r7}
 8001bd4:	b083      	sub	sp, #12
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	6078      	str	r0, [r7, #4]
 8001bda:	460b      	mov	r3, r1
 8001bdc:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001bde:	78fb      	ldrb	r3, [r7, #3]
 8001be0:	687a      	ldr	r2, [r7, #4]
 8001be2:	212c      	movs	r1, #44	; 0x2c
 8001be4:	fb01 f303 	mul.w	r3, r1, r3
 8001be8:	4413      	add	r3, r2
 8001bea:	3360      	adds	r3, #96	; 0x60
 8001bec:	781b      	ldrb	r3, [r3, #0]
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	370c      	adds	r7, #12
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr

08001bfa <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001bfa:	b480      	push	{r7}
 8001bfc:	b083      	sub	sp, #12
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	6078      	str	r0, [r7, #4]
 8001c02:	460b      	mov	r3, r1
 8001c04:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001c06:	78fb      	ldrb	r3, [r7, #3]
 8001c08:	687a      	ldr	r2, [r7, #4]
 8001c0a:	212c      	movs	r1, #44	; 0x2c
 8001c0c:	fb01 f303 	mul.w	r3, r1, r3
 8001c10:	4413      	add	r3, r2
 8001c12:	3350      	adds	r3, #80	; 0x50
 8001c14:	681b      	ldr	r3, [r3, #0]
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	370c      	adds	r7, #12
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr

08001c22 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001c22:	b580      	push	{r7, lr}
 8001c24:	b082      	sub	sp, #8
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f003 fb78 	bl	8005324 <USB_GetCurrentFrame>
 8001c34:	4603      	mov	r3, r0
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3708      	adds	r7, #8
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}

08001c3e <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001c3e:	b580      	push	{r7, lr}
 8001c40:	b086      	sub	sp, #24
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	6078      	str	r0, [r7, #4]
 8001c46:	460b      	mov	r3, r1
 8001c48:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001c54:	78fb      	ldrb	r3, [r7, #3]
 8001c56:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	015a      	lsls	r2, r3, #5
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	4413      	add	r3, r2
 8001c60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c64:	689b      	ldr	r3, [r3, #8]
 8001c66:	f003 0304 	and.w	r3, r3, #4
 8001c6a:	2b04      	cmp	r3, #4
 8001c6c:	d11a      	bne.n	8001ca4 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	015a      	lsls	r2, r3, #5
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	4413      	add	r3, r2
 8001c76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c7a:	461a      	mov	r2, r3
 8001c7c:	2304      	movs	r3, #4
 8001c7e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001c80:	687a      	ldr	r2, [r7, #4]
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	212c      	movs	r1, #44	; 0x2c
 8001c86:	fb01 f303 	mul.w	r3, r1, r3
 8001c8a:	4413      	add	r3, r2
 8001c8c:	3361      	adds	r3, #97	; 0x61
 8001c8e:	2206      	movs	r2, #6
 8001c90:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	68fa      	ldr	r2, [r7, #12]
 8001c98:	b2d2      	uxtb	r2, r2
 8001c9a:	4611      	mov	r1, r2
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f003 fdc8 	bl	8005832 <USB_HC_Halt>
 8001ca2:	e0af      	b.n	8001e04 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	015a      	lsls	r2, r3, #5
 8001ca8:	693b      	ldr	r3, [r7, #16]
 8001caa:	4413      	add	r3, r2
 8001cac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001cba:	d11b      	bne.n	8001cf4 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	015a      	lsls	r2, r3, #5
 8001cc0:	693b      	ldr	r3, [r7, #16]
 8001cc2:	4413      	add	r3, r2
 8001cc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cc8:	461a      	mov	r2, r3
 8001cca:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001cce:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001cd0:	687a      	ldr	r2, [r7, #4]
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	212c      	movs	r1, #44	; 0x2c
 8001cd6:	fb01 f303 	mul.w	r3, r1, r3
 8001cda:	4413      	add	r3, r2
 8001cdc:	3361      	adds	r3, #97	; 0x61
 8001cde:	2207      	movs	r2, #7
 8001ce0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	68fa      	ldr	r2, [r7, #12]
 8001ce8:	b2d2      	uxtb	r2, r2
 8001cea:	4611      	mov	r1, r2
 8001cec:	4618      	mov	r0, r3
 8001cee:	f003 fda0 	bl	8005832 <USB_HC_Halt>
 8001cf2:	e087      	b.n	8001e04 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	015a      	lsls	r2, r3, #5
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	4413      	add	r3, r2
 8001cfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d00:	689b      	ldr	r3, [r3, #8]
 8001d02:	f003 0320 	and.w	r3, r3, #32
 8001d06:	2b20      	cmp	r3, #32
 8001d08:	d109      	bne.n	8001d1e <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	015a      	lsls	r2, r3, #5
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	4413      	add	r3, r2
 8001d12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d16:	461a      	mov	r2, r3
 8001d18:	2320      	movs	r3, #32
 8001d1a:	6093      	str	r3, [r2, #8]
 8001d1c:	e072      	b.n	8001e04 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	015a      	lsls	r2, r3, #5
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	4413      	add	r3, r2
 8001d26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	f003 0308 	and.w	r3, r3, #8
 8001d30:	2b08      	cmp	r3, #8
 8001d32:	d11a      	bne.n	8001d6a <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	015a      	lsls	r2, r3, #5
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	4413      	add	r3, r2
 8001d3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d40:	461a      	mov	r2, r3
 8001d42:	2308      	movs	r3, #8
 8001d44:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8001d46:	687a      	ldr	r2, [r7, #4]
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	212c      	movs	r1, #44	; 0x2c
 8001d4c:	fb01 f303 	mul.w	r3, r1, r3
 8001d50:	4413      	add	r3, r2
 8001d52:	3361      	adds	r3, #97	; 0x61
 8001d54:	2205      	movs	r2, #5
 8001d56:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	68fa      	ldr	r2, [r7, #12]
 8001d5e:	b2d2      	uxtb	r2, r2
 8001d60:	4611      	mov	r1, r2
 8001d62:	4618      	mov	r0, r3
 8001d64:	f003 fd65 	bl	8005832 <USB_HC_Halt>
 8001d68:	e04c      	b.n	8001e04 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	015a      	lsls	r2, r3, #5
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	4413      	add	r3, r2
 8001d72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d76:	689b      	ldr	r3, [r3, #8]
 8001d78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d80:	d11b      	bne.n	8001dba <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	015a      	lsls	r2, r3, #5
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	4413      	add	r3, r2
 8001d8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d8e:	461a      	mov	r2, r3
 8001d90:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d94:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001d96:	687a      	ldr	r2, [r7, #4]
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	212c      	movs	r1, #44	; 0x2c
 8001d9c:	fb01 f303 	mul.w	r3, r1, r3
 8001da0:	4413      	add	r3, r2
 8001da2:	3361      	adds	r3, #97	; 0x61
 8001da4:	2208      	movs	r2, #8
 8001da6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	68fa      	ldr	r2, [r7, #12]
 8001dae:	b2d2      	uxtb	r2, r2
 8001db0:	4611      	mov	r1, r2
 8001db2:	4618      	mov	r0, r3
 8001db4:	f003 fd3d 	bl	8005832 <USB_HC_Halt>
 8001db8:	e024      	b.n	8001e04 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	015a      	lsls	r2, r3, #5
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	4413      	add	r3, r2
 8001dc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dcc:	2b80      	cmp	r3, #128	; 0x80
 8001dce:	d119      	bne.n	8001e04 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	015a      	lsls	r2, r3, #5
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	4413      	add	r3, r2
 8001dd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ddc:	461a      	mov	r2, r3
 8001dde:	2380      	movs	r3, #128	; 0x80
 8001de0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001de2:	687a      	ldr	r2, [r7, #4]
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	212c      	movs	r1, #44	; 0x2c
 8001de8:	fb01 f303 	mul.w	r3, r1, r3
 8001dec:	4413      	add	r3, r2
 8001dee:	3361      	adds	r3, #97	; 0x61
 8001df0:	2206      	movs	r2, #6
 8001df2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	68fa      	ldr	r2, [r7, #12]
 8001dfa:	b2d2      	uxtb	r2, r2
 8001dfc:	4611      	mov	r1, r2
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f003 fd17 	bl	8005832 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	015a      	lsls	r2, r3, #5
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	4413      	add	r3, r2
 8001e0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e16:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e1a:	d112      	bne.n	8001e42 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	68fa      	ldr	r2, [r7, #12]
 8001e22:	b2d2      	uxtb	r2, r2
 8001e24:	4611      	mov	r1, r2
 8001e26:	4618      	mov	r0, r3
 8001e28:	f003 fd03 	bl	8005832 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	015a      	lsls	r2, r3, #5
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	4413      	add	r3, r2
 8001e34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e38:	461a      	mov	r2, r3
 8001e3a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e3e:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001e40:	e24e      	b.n	80022e0 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	015a      	lsls	r2, r3, #5
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	4413      	add	r3, r2
 8001e4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	f003 0301 	and.w	r3, r3, #1
 8001e54:	2b01      	cmp	r3, #1
 8001e56:	f040 80df 	bne.w	8002018 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	691b      	ldr	r3, [r3, #16]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d019      	beq.n	8001e96 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001e62:	687a      	ldr	r2, [r7, #4]
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	212c      	movs	r1, #44	; 0x2c
 8001e68:	fb01 f303 	mul.w	r3, r1, r3
 8001e6c:	4413      	add	r3, r2
 8001e6e:	3348      	adds	r3, #72	; 0x48
 8001e70:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	0159      	lsls	r1, r3, #5
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	440b      	add	r3, r1
 8001e7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e7e:	691b      	ldr	r3, [r3, #16]
 8001e80:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001e84:	1ad2      	subs	r2, r2, r3
 8001e86:	6879      	ldr	r1, [r7, #4]
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	202c      	movs	r0, #44	; 0x2c
 8001e8c:	fb00 f303 	mul.w	r3, r0, r3
 8001e90:	440b      	add	r3, r1
 8001e92:	3350      	adds	r3, #80	; 0x50
 8001e94:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001e96:	687a      	ldr	r2, [r7, #4]
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	212c      	movs	r1, #44	; 0x2c
 8001e9c:	fb01 f303 	mul.w	r3, r1, r3
 8001ea0:	4413      	add	r3, r2
 8001ea2:	3361      	adds	r3, #97	; 0x61
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001ea8:	687a      	ldr	r2, [r7, #4]
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	212c      	movs	r1, #44	; 0x2c
 8001eae:	fb01 f303 	mul.w	r3, r1, r3
 8001eb2:	4413      	add	r3, r2
 8001eb4:	335c      	adds	r3, #92	; 0x5c
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	015a      	lsls	r2, r3, #5
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	4413      	add	r3, r2
 8001ec2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ec6:	461a      	mov	r2, r3
 8001ec8:	2301      	movs	r3, #1
 8001eca:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001ecc:	687a      	ldr	r2, [r7, #4]
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	212c      	movs	r1, #44	; 0x2c
 8001ed2:	fb01 f303 	mul.w	r3, r1, r3
 8001ed6:	4413      	add	r3, r2
 8001ed8:	333f      	adds	r3, #63	; 0x3f
 8001eda:	781b      	ldrb	r3, [r3, #0]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d009      	beq.n	8001ef4 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001ee0:	687a      	ldr	r2, [r7, #4]
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	212c      	movs	r1, #44	; 0x2c
 8001ee6:	fb01 f303 	mul.w	r3, r1, r3
 8001eea:	4413      	add	r3, r2
 8001eec:	333f      	adds	r3, #63	; 0x3f
 8001eee:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001ef0:	2b02      	cmp	r3, #2
 8001ef2:	d111      	bne.n	8001f18 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	68fa      	ldr	r2, [r7, #12]
 8001efa:	b2d2      	uxtb	r2, r2
 8001efc:	4611      	mov	r1, r2
 8001efe:	4618      	mov	r0, r3
 8001f00:	f003 fc97 	bl	8005832 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	015a      	lsls	r2, r3, #5
 8001f08:	693b      	ldr	r3, [r7, #16]
 8001f0a:	4413      	add	r3, r2
 8001f0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f10:	461a      	mov	r2, r3
 8001f12:	2310      	movs	r3, #16
 8001f14:	6093      	str	r3, [r2, #8]
 8001f16:	e03a      	b.n	8001f8e <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8001f18:	687a      	ldr	r2, [r7, #4]
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	212c      	movs	r1, #44	; 0x2c
 8001f1e:	fb01 f303 	mul.w	r3, r1, r3
 8001f22:	4413      	add	r3, r2
 8001f24:	333f      	adds	r3, #63	; 0x3f
 8001f26:	781b      	ldrb	r3, [r3, #0]
 8001f28:	2b03      	cmp	r3, #3
 8001f2a:	d009      	beq.n	8001f40 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8001f2c:	687a      	ldr	r2, [r7, #4]
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	212c      	movs	r1, #44	; 0x2c
 8001f32:	fb01 f303 	mul.w	r3, r1, r3
 8001f36:	4413      	add	r3, r2
 8001f38:	333f      	adds	r3, #63	; 0x3f
 8001f3a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8001f3c:	2b01      	cmp	r3, #1
 8001f3e:	d126      	bne.n	8001f8e <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	015a      	lsls	r2, r3, #5
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	4413      	add	r3, r2
 8001f48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	68fa      	ldr	r2, [r7, #12]
 8001f50:	0151      	lsls	r1, r2, #5
 8001f52:	693a      	ldr	r2, [r7, #16]
 8001f54:	440a      	add	r2, r1
 8001f56:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f5a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001f5e:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001f60:	687a      	ldr	r2, [r7, #4]
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	212c      	movs	r1, #44	; 0x2c
 8001f66:	fb01 f303 	mul.w	r3, r1, r3
 8001f6a:	4413      	add	r3, r2
 8001f6c:	3360      	adds	r3, #96	; 0x60
 8001f6e:	2201      	movs	r2, #1
 8001f70:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	b2d9      	uxtb	r1, r3
 8001f76:	687a      	ldr	r2, [r7, #4]
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	202c      	movs	r0, #44	; 0x2c
 8001f7c:	fb00 f303 	mul.w	r3, r0, r3
 8001f80:	4413      	add	r3, r2
 8001f82:	3360      	adds	r3, #96	; 0x60
 8001f84:	781b      	ldrb	r3, [r3, #0]
 8001f86:	461a      	mov	r2, r3
 8001f88:	6878      	ldr	r0, [r7, #4]
 8001f8a:	f004 ff5b 	bl	8006e44 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	691b      	ldr	r3, [r3, #16]
 8001f92:	2b01      	cmp	r3, #1
 8001f94:	d12b      	bne.n	8001fee <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8001f96:	687a      	ldr	r2, [r7, #4]
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	212c      	movs	r1, #44	; 0x2c
 8001f9c:	fb01 f303 	mul.w	r3, r1, r3
 8001fa0:	4413      	add	r3, r2
 8001fa2:	3348      	adds	r3, #72	; 0x48
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	6879      	ldr	r1, [r7, #4]
 8001fa8:	68fa      	ldr	r2, [r7, #12]
 8001faa:	202c      	movs	r0, #44	; 0x2c
 8001fac:	fb00 f202 	mul.w	r2, r0, r2
 8001fb0:	440a      	add	r2, r1
 8001fb2:	3240      	adds	r2, #64	; 0x40
 8001fb4:	8812      	ldrh	r2, [r2, #0]
 8001fb6:	fbb3 f3f2 	udiv	r3, r3, r2
 8001fba:	f003 0301 	and.w	r3, r3, #1
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	f000 818e 	beq.w	80022e0 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8001fc4:	687a      	ldr	r2, [r7, #4]
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	212c      	movs	r1, #44	; 0x2c
 8001fca:	fb01 f303 	mul.w	r3, r1, r3
 8001fce:	4413      	add	r3, r2
 8001fd0:	3354      	adds	r3, #84	; 0x54
 8001fd2:	781b      	ldrb	r3, [r3, #0]
 8001fd4:	f083 0301 	eor.w	r3, r3, #1
 8001fd8:	b2d8      	uxtb	r0, r3
 8001fda:	687a      	ldr	r2, [r7, #4]
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	212c      	movs	r1, #44	; 0x2c
 8001fe0:	fb01 f303 	mul.w	r3, r1, r3
 8001fe4:	4413      	add	r3, r2
 8001fe6:	3354      	adds	r3, #84	; 0x54
 8001fe8:	4602      	mov	r2, r0
 8001fea:	701a      	strb	r2, [r3, #0]
}
 8001fec:	e178      	b.n	80022e0 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8001fee:	687a      	ldr	r2, [r7, #4]
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	212c      	movs	r1, #44	; 0x2c
 8001ff4:	fb01 f303 	mul.w	r3, r1, r3
 8001ff8:	4413      	add	r3, r2
 8001ffa:	3354      	adds	r3, #84	; 0x54
 8001ffc:	781b      	ldrb	r3, [r3, #0]
 8001ffe:	f083 0301 	eor.w	r3, r3, #1
 8002002:	b2d8      	uxtb	r0, r3
 8002004:	687a      	ldr	r2, [r7, #4]
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	212c      	movs	r1, #44	; 0x2c
 800200a:	fb01 f303 	mul.w	r3, r1, r3
 800200e:	4413      	add	r3, r2
 8002010:	3354      	adds	r3, #84	; 0x54
 8002012:	4602      	mov	r2, r0
 8002014:	701a      	strb	r2, [r3, #0]
}
 8002016:	e163      	b.n	80022e0 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	015a      	lsls	r2, r3, #5
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	4413      	add	r3, r2
 8002020:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002024:	689b      	ldr	r3, [r3, #8]
 8002026:	f003 0302 	and.w	r3, r3, #2
 800202a:	2b02      	cmp	r3, #2
 800202c:	f040 80f6 	bne.w	800221c <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002030:	687a      	ldr	r2, [r7, #4]
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	212c      	movs	r1, #44	; 0x2c
 8002036:	fb01 f303 	mul.w	r3, r1, r3
 800203a:	4413      	add	r3, r2
 800203c:	3361      	adds	r3, #97	; 0x61
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	2b01      	cmp	r3, #1
 8002042:	d109      	bne.n	8002058 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002044:	687a      	ldr	r2, [r7, #4]
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	212c      	movs	r1, #44	; 0x2c
 800204a:	fb01 f303 	mul.w	r3, r1, r3
 800204e:	4413      	add	r3, r2
 8002050:	3360      	adds	r3, #96	; 0x60
 8002052:	2201      	movs	r2, #1
 8002054:	701a      	strb	r2, [r3, #0]
 8002056:	e0c9      	b.n	80021ec <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002058:	687a      	ldr	r2, [r7, #4]
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	212c      	movs	r1, #44	; 0x2c
 800205e:	fb01 f303 	mul.w	r3, r1, r3
 8002062:	4413      	add	r3, r2
 8002064:	3361      	adds	r3, #97	; 0x61
 8002066:	781b      	ldrb	r3, [r3, #0]
 8002068:	2b05      	cmp	r3, #5
 800206a:	d109      	bne.n	8002080 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 800206c:	687a      	ldr	r2, [r7, #4]
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	212c      	movs	r1, #44	; 0x2c
 8002072:	fb01 f303 	mul.w	r3, r1, r3
 8002076:	4413      	add	r3, r2
 8002078:	3360      	adds	r3, #96	; 0x60
 800207a:	2205      	movs	r2, #5
 800207c:	701a      	strb	r2, [r3, #0]
 800207e:	e0b5      	b.n	80021ec <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002080:	687a      	ldr	r2, [r7, #4]
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	212c      	movs	r1, #44	; 0x2c
 8002086:	fb01 f303 	mul.w	r3, r1, r3
 800208a:	4413      	add	r3, r2
 800208c:	3361      	adds	r3, #97	; 0x61
 800208e:	781b      	ldrb	r3, [r3, #0]
 8002090:	2b06      	cmp	r3, #6
 8002092:	d009      	beq.n	80020a8 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002094:	687a      	ldr	r2, [r7, #4]
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	212c      	movs	r1, #44	; 0x2c
 800209a:	fb01 f303 	mul.w	r3, r1, r3
 800209e:	4413      	add	r3, r2
 80020a0:	3361      	adds	r3, #97	; 0x61
 80020a2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80020a4:	2b08      	cmp	r3, #8
 80020a6:	d150      	bne.n	800214a <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 80020a8:	687a      	ldr	r2, [r7, #4]
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	212c      	movs	r1, #44	; 0x2c
 80020ae:	fb01 f303 	mul.w	r3, r1, r3
 80020b2:	4413      	add	r3, r2
 80020b4:	335c      	adds	r3, #92	; 0x5c
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	1c5a      	adds	r2, r3, #1
 80020ba:	6879      	ldr	r1, [r7, #4]
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	202c      	movs	r0, #44	; 0x2c
 80020c0:	fb00 f303 	mul.w	r3, r0, r3
 80020c4:	440b      	add	r3, r1
 80020c6:	335c      	adds	r3, #92	; 0x5c
 80020c8:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80020ca:	687a      	ldr	r2, [r7, #4]
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	212c      	movs	r1, #44	; 0x2c
 80020d0:	fb01 f303 	mul.w	r3, r1, r3
 80020d4:	4413      	add	r3, r2
 80020d6:	335c      	adds	r3, #92	; 0x5c
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	2b02      	cmp	r3, #2
 80020dc:	d912      	bls.n	8002104 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80020de:	687a      	ldr	r2, [r7, #4]
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	212c      	movs	r1, #44	; 0x2c
 80020e4:	fb01 f303 	mul.w	r3, r1, r3
 80020e8:	4413      	add	r3, r2
 80020ea:	335c      	adds	r3, #92	; 0x5c
 80020ec:	2200      	movs	r2, #0
 80020ee:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80020f0:	687a      	ldr	r2, [r7, #4]
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	212c      	movs	r1, #44	; 0x2c
 80020f6:	fb01 f303 	mul.w	r3, r1, r3
 80020fa:	4413      	add	r3, r2
 80020fc:	3360      	adds	r3, #96	; 0x60
 80020fe:	2204      	movs	r2, #4
 8002100:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002102:	e073      	b.n	80021ec <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002104:	687a      	ldr	r2, [r7, #4]
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	212c      	movs	r1, #44	; 0x2c
 800210a:	fb01 f303 	mul.w	r3, r1, r3
 800210e:	4413      	add	r3, r2
 8002110:	3360      	adds	r3, #96	; 0x60
 8002112:	2202      	movs	r2, #2
 8002114:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	015a      	lsls	r2, r3, #5
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	4413      	add	r3, r2
 800211e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800212c:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800212e:	68bb      	ldr	r3, [r7, #8]
 8002130:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002134:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	015a      	lsls	r2, r3, #5
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	4413      	add	r3, r2
 800213e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002142:	461a      	mov	r2, r3
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002148:	e050      	b.n	80021ec <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800214a:	687a      	ldr	r2, [r7, #4]
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	212c      	movs	r1, #44	; 0x2c
 8002150:	fb01 f303 	mul.w	r3, r1, r3
 8002154:	4413      	add	r3, r2
 8002156:	3361      	adds	r3, #97	; 0x61
 8002158:	781b      	ldrb	r3, [r3, #0]
 800215a:	2b03      	cmp	r3, #3
 800215c:	d122      	bne.n	80021a4 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800215e:	687a      	ldr	r2, [r7, #4]
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	212c      	movs	r1, #44	; 0x2c
 8002164:	fb01 f303 	mul.w	r3, r1, r3
 8002168:	4413      	add	r3, r2
 800216a:	3360      	adds	r3, #96	; 0x60
 800216c:	2202      	movs	r2, #2
 800216e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	015a      	lsls	r2, r3, #5
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	4413      	add	r3, r2
 8002178:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002186:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800218e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	015a      	lsls	r2, r3, #5
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	4413      	add	r3, r2
 8002198:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800219c:	461a      	mov	r2, r3
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	6013      	str	r3, [r2, #0]
 80021a2:	e023      	b.n	80021ec <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80021a4:	687a      	ldr	r2, [r7, #4]
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	212c      	movs	r1, #44	; 0x2c
 80021aa:	fb01 f303 	mul.w	r3, r1, r3
 80021ae:	4413      	add	r3, r2
 80021b0:	3361      	adds	r3, #97	; 0x61
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	2b07      	cmp	r3, #7
 80021b6:	d119      	bne.n	80021ec <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 80021b8:	687a      	ldr	r2, [r7, #4]
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	212c      	movs	r1, #44	; 0x2c
 80021be:	fb01 f303 	mul.w	r3, r1, r3
 80021c2:	4413      	add	r3, r2
 80021c4:	335c      	adds	r3, #92	; 0x5c
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	1c5a      	adds	r2, r3, #1
 80021ca:	6879      	ldr	r1, [r7, #4]
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	202c      	movs	r0, #44	; 0x2c
 80021d0:	fb00 f303 	mul.w	r3, r0, r3
 80021d4:	440b      	add	r3, r1
 80021d6:	335c      	adds	r3, #92	; 0x5c
 80021d8:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80021da:	687a      	ldr	r2, [r7, #4]
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	212c      	movs	r1, #44	; 0x2c
 80021e0:	fb01 f303 	mul.w	r3, r1, r3
 80021e4:	4413      	add	r3, r2
 80021e6:	3360      	adds	r3, #96	; 0x60
 80021e8:	2204      	movs	r2, #4
 80021ea:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	015a      	lsls	r2, r3, #5
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	4413      	add	r3, r2
 80021f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021f8:	461a      	mov	r2, r3
 80021fa:	2302      	movs	r3, #2
 80021fc:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	b2d9      	uxtb	r1, r3
 8002202:	687a      	ldr	r2, [r7, #4]
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	202c      	movs	r0, #44	; 0x2c
 8002208:	fb00 f303 	mul.w	r3, r0, r3
 800220c:	4413      	add	r3, r2
 800220e:	3360      	adds	r3, #96	; 0x60
 8002210:	781b      	ldrb	r3, [r3, #0]
 8002212:	461a      	mov	r2, r3
 8002214:	6878      	ldr	r0, [r7, #4]
 8002216:	f004 fe15 	bl	8006e44 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800221a:	e061      	b.n	80022e0 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	015a      	lsls	r2, r3, #5
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	4413      	add	r3, r2
 8002224:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	f003 0310 	and.w	r3, r3, #16
 800222e:	2b10      	cmp	r3, #16
 8002230:	d156      	bne.n	80022e0 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002232:	687a      	ldr	r2, [r7, #4]
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	212c      	movs	r1, #44	; 0x2c
 8002238:	fb01 f303 	mul.w	r3, r1, r3
 800223c:	4413      	add	r3, r2
 800223e:	333f      	adds	r3, #63	; 0x3f
 8002240:	781b      	ldrb	r3, [r3, #0]
 8002242:	2b03      	cmp	r3, #3
 8002244:	d111      	bne.n	800226a <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002246:	687a      	ldr	r2, [r7, #4]
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	212c      	movs	r1, #44	; 0x2c
 800224c:	fb01 f303 	mul.w	r3, r1, r3
 8002250:	4413      	add	r3, r2
 8002252:	335c      	adds	r3, #92	; 0x5c
 8002254:	2200      	movs	r2, #0
 8002256:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	68fa      	ldr	r2, [r7, #12]
 800225e:	b2d2      	uxtb	r2, r2
 8002260:	4611      	mov	r1, r2
 8002262:	4618      	mov	r0, r3
 8002264:	f003 fae5 	bl	8005832 <USB_HC_Halt>
 8002268:	e031      	b.n	80022ce <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800226a:	687a      	ldr	r2, [r7, #4]
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	212c      	movs	r1, #44	; 0x2c
 8002270:	fb01 f303 	mul.w	r3, r1, r3
 8002274:	4413      	add	r3, r2
 8002276:	333f      	adds	r3, #63	; 0x3f
 8002278:	781b      	ldrb	r3, [r3, #0]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d009      	beq.n	8002292 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800227e:	687a      	ldr	r2, [r7, #4]
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	212c      	movs	r1, #44	; 0x2c
 8002284:	fb01 f303 	mul.w	r3, r1, r3
 8002288:	4413      	add	r3, r2
 800228a:	333f      	adds	r3, #63	; 0x3f
 800228c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800228e:	2b02      	cmp	r3, #2
 8002290:	d11d      	bne.n	80022ce <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002292:	687a      	ldr	r2, [r7, #4]
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	212c      	movs	r1, #44	; 0x2c
 8002298:	fb01 f303 	mul.w	r3, r1, r3
 800229c:	4413      	add	r3, r2
 800229e:	335c      	adds	r3, #92	; 0x5c
 80022a0:	2200      	movs	r2, #0
 80022a2:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	691b      	ldr	r3, [r3, #16]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d110      	bne.n	80022ce <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 80022ac:	687a      	ldr	r2, [r7, #4]
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	212c      	movs	r1, #44	; 0x2c
 80022b2:	fb01 f303 	mul.w	r3, r1, r3
 80022b6:	4413      	add	r3, r2
 80022b8:	3361      	adds	r3, #97	; 0x61
 80022ba:	2203      	movs	r2, #3
 80022bc:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	68fa      	ldr	r2, [r7, #12]
 80022c4:	b2d2      	uxtb	r2, r2
 80022c6:	4611      	mov	r1, r2
 80022c8:	4618      	mov	r0, r3
 80022ca:	f003 fab2 	bl	8005832 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	015a      	lsls	r2, r3, #5
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	4413      	add	r3, r2
 80022d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022da:	461a      	mov	r2, r3
 80022dc:	2310      	movs	r3, #16
 80022de:	6093      	str	r3, [r2, #8]
}
 80022e0:	bf00      	nop
 80022e2:	3718      	adds	r7, #24
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}

080022e8 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b088      	sub	sp, #32
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
 80022f0:	460b      	mov	r3, r1
 80022f2:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80022fa:	69fb      	ldr	r3, [r7, #28]
 80022fc:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80022fe:	78fb      	ldrb	r3, [r7, #3]
 8002300:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	015a      	lsls	r2, r3, #5
 8002306:	69bb      	ldr	r3, [r7, #24]
 8002308:	4413      	add	r3, r2
 800230a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	f003 0304 	and.w	r3, r3, #4
 8002314:	2b04      	cmp	r3, #4
 8002316:	d11a      	bne.n	800234e <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	015a      	lsls	r2, r3, #5
 800231c:	69bb      	ldr	r3, [r7, #24]
 800231e:	4413      	add	r3, r2
 8002320:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002324:	461a      	mov	r2, r3
 8002326:	2304      	movs	r3, #4
 8002328:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800232a:	687a      	ldr	r2, [r7, #4]
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	212c      	movs	r1, #44	; 0x2c
 8002330:	fb01 f303 	mul.w	r3, r1, r3
 8002334:	4413      	add	r3, r2
 8002336:	3361      	adds	r3, #97	; 0x61
 8002338:	2206      	movs	r2, #6
 800233a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	697a      	ldr	r2, [r7, #20]
 8002342:	b2d2      	uxtb	r2, r2
 8002344:	4611      	mov	r1, r2
 8002346:	4618      	mov	r0, r3
 8002348:	f003 fa73 	bl	8005832 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 800234c:	e331      	b.n	80029b2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	015a      	lsls	r2, r3, #5
 8002352:	69bb      	ldr	r3, [r7, #24]
 8002354:	4413      	add	r3, r2
 8002356:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	f003 0320 	and.w	r3, r3, #32
 8002360:	2b20      	cmp	r3, #32
 8002362:	d12e      	bne.n	80023c2 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	015a      	lsls	r2, r3, #5
 8002368:	69bb      	ldr	r3, [r7, #24]
 800236a:	4413      	add	r3, r2
 800236c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002370:	461a      	mov	r2, r3
 8002372:	2320      	movs	r3, #32
 8002374:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002376:	687a      	ldr	r2, [r7, #4]
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	212c      	movs	r1, #44	; 0x2c
 800237c:	fb01 f303 	mul.w	r3, r1, r3
 8002380:	4413      	add	r3, r2
 8002382:	333d      	adds	r3, #61	; 0x3d
 8002384:	781b      	ldrb	r3, [r3, #0]
 8002386:	2b01      	cmp	r3, #1
 8002388:	f040 8313 	bne.w	80029b2 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 800238c:	687a      	ldr	r2, [r7, #4]
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	212c      	movs	r1, #44	; 0x2c
 8002392:	fb01 f303 	mul.w	r3, r1, r3
 8002396:	4413      	add	r3, r2
 8002398:	333d      	adds	r3, #61	; 0x3d
 800239a:	2200      	movs	r2, #0
 800239c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800239e:	687a      	ldr	r2, [r7, #4]
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	212c      	movs	r1, #44	; 0x2c
 80023a4:	fb01 f303 	mul.w	r3, r1, r3
 80023a8:	4413      	add	r3, r2
 80023aa:	3360      	adds	r3, #96	; 0x60
 80023ac:	2202      	movs	r2, #2
 80023ae:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	697a      	ldr	r2, [r7, #20]
 80023b6:	b2d2      	uxtb	r2, r2
 80023b8:	4611      	mov	r1, r2
 80023ba:	4618      	mov	r0, r3
 80023bc:	f003 fa39 	bl	8005832 <USB_HC_Halt>
}
 80023c0:	e2f7      	b.n	80029b2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	015a      	lsls	r2, r3, #5
 80023c6:	69bb      	ldr	r3, [r7, #24]
 80023c8:	4413      	add	r3, r2
 80023ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023d8:	d112      	bne.n	8002400 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	015a      	lsls	r2, r3, #5
 80023de:	69bb      	ldr	r3, [r7, #24]
 80023e0:	4413      	add	r3, r2
 80023e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023e6:	461a      	mov	r2, r3
 80023e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80023ec:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	697a      	ldr	r2, [r7, #20]
 80023f4:	b2d2      	uxtb	r2, r2
 80023f6:	4611      	mov	r1, r2
 80023f8:	4618      	mov	r0, r3
 80023fa:	f003 fa1a 	bl	8005832 <USB_HC_Halt>
}
 80023fe:	e2d8      	b.n	80029b2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002400:	697b      	ldr	r3, [r7, #20]
 8002402:	015a      	lsls	r2, r3, #5
 8002404:	69bb      	ldr	r3, [r7, #24]
 8002406:	4413      	add	r3, r2
 8002408:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	f003 0301 	and.w	r3, r3, #1
 8002412:	2b01      	cmp	r3, #1
 8002414:	d140      	bne.n	8002498 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002416:	687a      	ldr	r2, [r7, #4]
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	212c      	movs	r1, #44	; 0x2c
 800241c:	fb01 f303 	mul.w	r3, r1, r3
 8002420:	4413      	add	r3, r2
 8002422:	335c      	adds	r3, #92	; 0x5c
 8002424:	2200      	movs	r2, #0
 8002426:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	015a      	lsls	r2, r3, #5
 800242c:	69bb      	ldr	r3, [r7, #24]
 800242e:	4413      	add	r3, r2
 8002430:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800243a:	2b40      	cmp	r3, #64	; 0x40
 800243c:	d111      	bne.n	8002462 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 800243e:	687a      	ldr	r2, [r7, #4]
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	212c      	movs	r1, #44	; 0x2c
 8002444:	fb01 f303 	mul.w	r3, r1, r3
 8002448:	4413      	add	r3, r2
 800244a:	333d      	adds	r3, #61	; 0x3d
 800244c:	2201      	movs	r2, #1
 800244e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	015a      	lsls	r2, r3, #5
 8002454:	69bb      	ldr	r3, [r7, #24]
 8002456:	4413      	add	r3, r2
 8002458:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800245c:	461a      	mov	r2, r3
 800245e:	2340      	movs	r3, #64	; 0x40
 8002460:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	015a      	lsls	r2, r3, #5
 8002466:	69bb      	ldr	r3, [r7, #24]
 8002468:	4413      	add	r3, r2
 800246a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800246e:	461a      	mov	r2, r3
 8002470:	2301      	movs	r3, #1
 8002472:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002474:	687a      	ldr	r2, [r7, #4]
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	212c      	movs	r1, #44	; 0x2c
 800247a:	fb01 f303 	mul.w	r3, r1, r3
 800247e:	4413      	add	r3, r2
 8002480:	3361      	adds	r3, #97	; 0x61
 8002482:	2201      	movs	r2, #1
 8002484:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	697a      	ldr	r2, [r7, #20]
 800248c:	b2d2      	uxtb	r2, r2
 800248e:	4611      	mov	r1, r2
 8002490:	4618      	mov	r0, r3
 8002492:	f003 f9ce 	bl	8005832 <USB_HC_Halt>
}
 8002496:	e28c      	b.n	80029b2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	015a      	lsls	r2, r3, #5
 800249c:	69bb      	ldr	r3, [r7, #24]
 800249e:	4413      	add	r3, r2
 80024a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024aa:	2b40      	cmp	r3, #64	; 0x40
 80024ac:	d12c      	bne.n	8002508 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 80024ae:	687a      	ldr	r2, [r7, #4]
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	212c      	movs	r1, #44	; 0x2c
 80024b4:	fb01 f303 	mul.w	r3, r1, r3
 80024b8:	4413      	add	r3, r2
 80024ba:	3361      	adds	r3, #97	; 0x61
 80024bc:	2204      	movs	r2, #4
 80024be:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80024c0:	687a      	ldr	r2, [r7, #4]
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	212c      	movs	r1, #44	; 0x2c
 80024c6:	fb01 f303 	mul.w	r3, r1, r3
 80024ca:	4413      	add	r3, r2
 80024cc:	333d      	adds	r3, #61	; 0x3d
 80024ce:	2201      	movs	r2, #1
 80024d0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80024d2:	687a      	ldr	r2, [r7, #4]
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	212c      	movs	r1, #44	; 0x2c
 80024d8:	fb01 f303 	mul.w	r3, r1, r3
 80024dc:	4413      	add	r3, r2
 80024de:	335c      	adds	r3, #92	; 0x5c
 80024e0:	2200      	movs	r2, #0
 80024e2:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	697a      	ldr	r2, [r7, #20]
 80024ea:	b2d2      	uxtb	r2, r2
 80024ec:	4611      	mov	r1, r2
 80024ee:	4618      	mov	r0, r3
 80024f0:	f003 f99f 	bl	8005832 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	015a      	lsls	r2, r3, #5
 80024f8:	69bb      	ldr	r3, [r7, #24]
 80024fa:	4413      	add	r3, r2
 80024fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002500:	461a      	mov	r2, r3
 8002502:	2340      	movs	r3, #64	; 0x40
 8002504:	6093      	str	r3, [r2, #8]
}
 8002506:	e254      	b.n	80029b2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	015a      	lsls	r2, r3, #5
 800250c:	69bb      	ldr	r3, [r7, #24]
 800250e:	4413      	add	r3, r2
 8002510:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	f003 0308 	and.w	r3, r3, #8
 800251a:	2b08      	cmp	r3, #8
 800251c:	d11a      	bne.n	8002554 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	015a      	lsls	r2, r3, #5
 8002522:	69bb      	ldr	r3, [r7, #24]
 8002524:	4413      	add	r3, r2
 8002526:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800252a:	461a      	mov	r2, r3
 800252c:	2308      	movs	r3, #8
 800252e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002530:	687a      	ldr	r2, [r7, #4]
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	212c      	movs	r1, #44	; 0x2c
 8002536:	fb01 f303 	mul.w	r3, r1, r3
 800253a:	4413      	add	r3, r2
 800253c:	3361      	adds	r3, #97	; 0x61
 800253e:	2205      	movs	r2, #5
 8002540:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	697a      	ldr	r2, [r7, #20]
 8002548:	b2d2      	uxtb	r2, r2
 800254a:	4611      	mov	r1, r2
 800254c:	4618      	mov	r0, r3
 800254e:	f003 f970 	bl	8005832 <USB_HC_Halt>
}
 8002552:	e22e      	b.n	80029b2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	015a      	lsls	r2, r3, #5
 8002558:	69bb      	ldr	r3, [r7, #24]
 800255a:	4413      	add	r3, r2
 800255c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	f003 0310 	and.w	r3, r3, #16
 8002566:	2b10      	cmp	r3, #16
 8002568:	d140      	bne.n	80025ec <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800256a:	687a      	ldr	r2, [r7, #4]
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	212c      	movs	r1, #44	; 0x2c
 8002570:	fb01 f303 	mul.w	r3, r1, r3
 8002574:	4413      	add	r3, r2
 8002576:	335c      	adds	r3, #92	; 0x5c
 8002578:	2200      	movs	r2, #0
 800257a:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800257c:	687a      	ldr	r2, [r7, #4]
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	212c      	movs	r1, #44	; 0x2c
 8002582:	fb01 f303 	mul.w	r3, r1, r3
 8002586:	4413      	add	r3, r2
 8002588:	3361      	adds	r3, #97	; 0x61
 800258a:	2203      	movs	r2, #3
 800258c:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800258e:	687a      	ldr	r2, [r7, #4]
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	212c      	movs	r1, #44	; 0x2c
 8002594:	fb01 f303 	mul.w	r3, r1, r3
 8002598:	4413      	add	r3, r2
 800259a:	333d      	adds	r3, #61	; 0x3d
 800259c:	781b      	ldrb	r3, [r3, #0]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d112      	bne.n	80025c8 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80025a2:	687a      	ldr	r2, [r7, #4]
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	212c      	movs	r1, #44	; 0x2c
 80025a8:	fb01 f303 	mul.w	r3, r1, r3
 80025ac:	4413      	add	r3, r2
 80025ae:	333c      	adds	r3, #60	; 0x3c
 80025b0:	781b      	ldrb	r3, [r3, #0]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d108      	bne.n	80025c8 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 80025b6:	687a      	ldr	r2, [r7, #4]
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	212c      	movs	r1, #44	; 0x2c
 80025bc:	fb01 f303 	mul.w	r3, r1, r3
 80025c0:	4413      	add	r3, r2
 80025c2:	333d      	adds	r3, #61	; 0x3d
 80025c4:	2201      	movs	r2, #1
 80025c6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	697a      	ldr	r2, [r7, #20]
 80025ce:	b2d2      	uxtb	r2, r2
 80025d0:	4611      	mov	r1, r2
 80025d2:	4618      	mov	r0, r3
 80025d4:	f003 f92d 	bl	8005832 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	015a      	lsls	r2, r3, #5
 80025dc:	69bb      	ldr	r3, [r7, #24]
 80025de:	4413      	add	r3, r2
 80025e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025e4:	461a      	mov	r2, r3
 80025e6:	2310      	movs	r3, #16
 80025e8:	6093      	str	r3, [r2, #8]
}
 80025ea:	e1e2      	b.n	80029b2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	015a      	lsls	r2, r3, #5
 80025f0:	69bb      	ldr	r3, [r7, #24]
 80025f2:	4413      	add	r3, r2
 80025f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025fe:	2b80      	cmp	r3, #128	; 0x80
 8002600:	d164      	bne.n	80026cc <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	691b      	ldr	r3, [r3, #16]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d111      	bne.n	800262e <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 800260a:	687a      	ldr	r2, [r7, #4]
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	212c      	movs	r1, #44	; 0x2c
 8002610:	fb01 f303 	mul.w	r3, r1, r3
 8002614:	4413      	add	r3, r2
 8002616:	3361      	adds	r3, #97	; 0x61
 8002618:	2206      	movs	r2, #6
 800261a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	697a      	ldr	r2, [r7, #20]
 8002622:	b2d2      	uxtb	r2, r2
 8002624:	4611      	mov	r1, r2
 8002626:	4618      	mov	r0, r3
 8002628:	f003 f903 	bl	8005832 <USB_HC_Halt>
 800262c:	e044      	b.n	80026b8 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 800262e:	687a      	ldr	r2, [r7, #4]
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	212c      	movs	r1, #44	; 0x2c
 8002634:	fb01 f303 	mul.w	r3, r1, r3
 8002638:	4413      	add	r3, r2
 800263a:	335c      	adds	r3, #92	; 0x5c
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	1c5a      	adds	r2, r3, #1
 8002640:	6879      	ldr	r1, [r7, #4]
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	202c      	movs	r0, #44	; 0x2c
 8002646:	fb00 f303 	mul.w	r3, r0, r3
 800264a:	440b      	add	r3, r1
 800264c:	335c      	adds	r3, #92	; 0x5c
 800264e:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002650:	687a      	ldr	r2, [r7, #4]
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	212c      	movs	r1, #44	; 0x2c
 8002656:	fb01 f303 	mul.w	r3, r1, r3
 800265a:	4413      	add	r3, r2
 800265c:	335c      	adds	r3, #92	; 0x5c
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	2b02      	cmp	r3, #2
 8002662:	d920      	bls.n	80026a6 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002664:	687a      	ldr	r2, [r7, #4]
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	212c      	movs	r1, #44	; 0x2c
 800266a:	fb01 f303 	mul.w	r3, r1, r3
 800266e:	4413      	add	r3, r2
 8002670:	335c      	adds	r3, #92	; 0x5c
 8002672:	2200      	movs	r2, #0
 8002674:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002676:	687a      	ldr	r2, [r7, #4]
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	212c      	movs	r1, #44	; 0x2c
 800267c:	fb01 f303 	mul.w	r3, r1, r3
 8002680:	4413      	add	r3, r2
 8002682:	3360      	adds	r3, #96	; 0x60
 8002684:	2204      	movs	r2, #4
 8002686:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	b2d9      	uxtb	r1, r3
 800268c:	687a      	ldr	r2, [r7, #4]
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	202c      	movs	r0, #44	; 0x2c
 8002692:	fb00 f303 	mul.w	r3, r0, r3
 8002696:	4413      	add	r3, r2
 8002698:	3360      	adds	r3, #96	; 0x60
 800269a:	781b      	ldrb	r3, [r3, #0]
 800269c:	461a      	mov	r2, r3
 800269e:	6878      	ldr	r0, [r7, #4]
 80026a0:	f004 fbd0 	bl	8006e44 <HAL_HCD_HC_NotifyURBChange_Callback>
 80026a4:	e008      	b.n	80026b8 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80026a6:	687a      	ldr	r2, [r7, #4]
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	212c      	movs	r1, #44	; 0x2c
 80026ac:	fb01 f303 	mul.w	r3, r1, r3
 80026b0:	4413      	add	r3, r2
 80026b2:	3360      	adds	r3, #96	; 0x60
 80026b4:	2202      	movs	r2, #2
 80026b6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	015a      	lsls	r2, r3, #5
 80026bc:	69bb      	ldr	r3, [r7, #24]
 80026be:	4413      	add	r3, r2
 80026c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026c4:	461a      	mov	r2, r3
 80026c6:	2380      	movs	r3, #128	; 0x80
 80026c8:	6093      	str	r3, [r2, #8]
}
 80026ca:	e172      	b.n	80029b2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	015a      	lsls	r2, r3, #5
 80026d0:	69bb      	ldr	r3, [r7, #24]
 80026d2:	4413      	add	r3, r2
 80026d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026e2:	d11b      	bne.n	800271c <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80026e4:	687a      	ldr	r2, [r7, #4]
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	212c      	movs	r1, #44	; 0x2c
 80026ea:	fb01 f303 	mul.w	r3, r1, r3
 80026ee:	4413      	add	r3, r2
 80026f0:	3361      	adds	r3, #97	; 0x61
 80026f2:	2208      	movs	r2, #8
 80026f4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	697a      	ldr	r2, [r7, #20]
 80026fc:	b2d2      	uxtb	r2, r2
 80026fe:	4611      	mov	r1, r2
 8002700:	4618      	mov	r0, r3
 8002702:	f003 f896 	bl	8005832 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	015a      	lsls	r2, r3, #5
 800270a:	69bb      	ldr	r3, [r7, #24]
 800270c:	4413      	add	r3, r2
 800270e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002712:	461a      	mov	r2, r3
 8002714:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002718:	6093      	str	r3, [r2, #8]
}
 800271a:	e14a      	b.n	80029b2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	015a      	lsls	r2, r3, #5
 8002720:	69bb      	ldr	r3, [r7, #24]
 8002722:	4413      	add	r3, r2
 8002724:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	f003 0302 	and.w	r3, r3, #2
 800272e:	2b02      	cmp	r3, #2
 8002730:	f040 813f 	bne.w	80029b2 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002734:	687a      	ldr	r2, [r7, #4]
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	212c      	movs	r1, #44	; 0x2c
 800273a:	fb01 f303 	mul.w	r3, r1, r3
 800273e:	4413      	add	r3, r2
 8002740:	3361      	adds	r3, #97	; 0x61
 8002742:	781b      	ldrb	r3, [r3, #0]
 8002744:	2b01      	cmp	r3, #1
 8002746:	d17d      	bne.n	8002844 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002748:	687a      	ldr	r2, [r7, #4]
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	212c      	movs	r1, #44	; 0x2c
 800274e:	fb01 f303 	mul.w	r3, r1, r3
 8002752:	4413      	add	r3, r2
 8002754:	3360      	adds	r3, #96	; 0x60
 8002756:	2201      	movs	r2, #1
 8002758:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800275a:	687a      	ldr	r2, [r7, #4]
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	212c      	movs	r1, #44	; 0x2c
 8002760:	fb01 f303 	mul.w	r3, r1, r3
 8002764:	4413      	add	r3, r2
 8002766:	333f      	adds	r3, #63	; 0x3f
 8002768:	781b      	ldrb	r3, [r3, #0]
 800276a:	2b02      	cmp	r3, #2
 800276c:	d00a      	beq.n	8002784 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800276e:	687a      	ldr	r2, [r7, #4]
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	212c      	movs	r1, #44	; 0x2c
 8002774:	fb01 f303 	mul.w	r3, r1, r3
 8002778:	4413      	add	r3, r2
 800277a:	333f      	adds	r3, #63	; 0x3f
 800277c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800277e:	2b03      	cmp	r3, #3
 8002780:	f040 8100 	bne.w	8002984 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	691b      	ldr	r3, [r3, #16]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d113      	bne.n	80027b4 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 800278c:	687a      	ldr	r2, [r7, #4]
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	212c      	movs	r1, #44	; 0x2c
 8002792:	fb01 f303 	mul.w	r3, r1, r3
 8002796:	4413      	add	r3, r2
 8002798:	3355      	adds	r3, #85	; 0x55
 800279a:	781b      	ldrb	r3, [r3, #0]
 800279c:	f083 0301 	eor.w	r3, r3, #1
 80027a0:	b2d8      	uxtb	r0, r3
 80027a2:	687a      	ldr	r2, [r7, #4]
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	212c      	movs	r1, #44	; 0x2c
 80027a8:	fb01 f303 	mul.w	r3, r1, r3
 80027ac:	4413      	add	r3, r2
 80027ae:	3355      	adds	r3, #85	; 0x55
 80027b0:	4602      	mov	r2, r0
 80027b2:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	691b      	ldr	r3, [r3, #16]
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	f040 80e3 	bne.w	8002984 <HCD_HC_OUT_IRQHandler+0x69c>
 80027be:	687a      	ldr	r2, [r7, #4]
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	212c      	movs	r1, #44	; 0x2c
 80027c4:	fb01 f303 	mul.w	r3, r1, r3
 80027c8:	4413      	add	r3, r2
 80027ca:	334c      	adds	r3, #76	; 0x4c
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	f000 80d8 	beq.w	8002984 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80027d4:	687a      	ldr	r2, [r7, #4]
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	212c      	movs	r1, #44	; 0x2c
 80027da:	fb01 f303 	mul.w	r3, r1, r3
 80027de:	4413      	add	r3, r2
 80027e0:	334c      	adds	r3, #76	; 0x4c
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	6879      	ldr	r1, [r7, #4]
 80027e6:	697a      	ldr	r2, [r7, #20]
 80027e8:	202c      	movs	r0, #44	; 0x2c
 80027ea:	fb00 f202 	mul.w	r2, r0, r2
 80027ee:	440a      	add	r2, r1
 80027f0:	3240      	adds	r2, #64	; 0x40
 80027f2:	8812      	ldrh	r2, [r2, #0]
 80027f4:	4413      	add	r3, r2
 80027f6:	3b01      	subs	r3, #1
 80027f8:	6879      	ldr	r1, [r7, #4]
 80027fa:	697a      	ldr	r2, [r7, #20]
 80027fc:	202c      	movs	r0, #44	; 0x2c
 80027fe:	fb00 f202 	mul.w	r2, r0, r2
 8002802:	440a      	add	r2, r1
 8002804:	3240      	adds	r2, #64	; 0x40
 8002806:	8812      	ldrh	r2, [r2, #0]
 8002808:	fbb3 f3f2 	udiv	r3, r3, r2
 800280c:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	f003 0301 	and.w	r3, r3, #1
 8002814:	2b00      	cmp	r3, #0
 8002816:	f000 80b5 	beq.w	8002984 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 800281a:	687a      	ldr	r2, [r7, #4]
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	212c      	movs	r1, #44	; 0x2c
 8002820:	fb01 f303 	mul.w	r3, r1, r3
 8002824:	4413      	add	r3, r2
 8002826:	3355      	adds	r3, #85	; 0x55
 8002828:	781b      	ldrb	r3, [r3, #0]
 800282a:	f083 0301 	eor.w	r3, r3, #1
 800282e:	b2d8      	uxtb	r0, r3
 8002830:	687a      	ldr	r2, [r7, #4]
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	212c      	movs	r1, #44	; 0x2c
 8002836:	fb01 f303 	mul.w	r3, r1, r3
 800283a:	4413      	add	r3, r2
 800283c:	3355      	adds	r3, #85	; 0x55
 800283e:	4602      	mov	r2, r0
 8002840:	701a      	strb	r2, [r3, #0]
 8002842:	e09f      	b.n	8002984 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002844:	687a      	ldr	r2, [r7, #4]
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	212c      	movs	r1, #44	; 0x2c
 800284a:	fb01 f303 	mul.w	r3, r1, r3
 800284e:	4413      	add	r3, r2
 8002850:	3361      	adds	r3, #97	; 0x61
 8002852:	781b      	ldrb	r3, [r3, #0]
 8002854:	2b03      	cmp	r3, #3
 8002856:	d109      	bne.n	800286c <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002858:	687a      	ldr	r2, [r7, #4]
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	212c      	movs	r1, #44	; 0x2c
 800285e:	fb01 f303 	mul.w	r3, r1, r3
 8002862:	4413      	add	r3, r2
 8002864:	3360      	adds	r3, #96	; 0x60
 8002866:	2202      	movs	r2, #2
 8002868:	701a      	strb	r2, [r3, #0]
 800286a:	e08b      	b.n	8002984 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800286c:	687a      	ldr	r2, [r7, #4]
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	212c      	movs	r1, #44	; 0x2c
 8002872:	fb01 f303 	mul.w	r3, r1, r3
 8002876:	4413      	add	r3, r2
 8002878:	3361      	adds	r3, #97	; 0x61
 800287a:	781b      	ldrb	r3, [r3, #0]
 800287c:	2b04      	cmp	r3, #4
 800287e:	d109      	bne.n	8002894 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002880:	687a      	ldr	r2, [r7, #4]
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	212c      	movs	r1, #44	; 0x2c
 8002886:	fb01 f303 	mul.w	r3, r1, r3
 800288a:	4413      	add	r3, r2
 800288c:	3360      	adds	r3, #96	; 0x60
 800288e:	2202      	movs	r2, #2
 8002890:	701a      	strb	r2, [r3, #0]
 8002892:	e077      	b.n	8002984 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002894:	687a      	ldr	r2, [r7, #4]
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	212c      	movs	r1, #44	; 0x2c
 800289a:	fb01 f303 	mul.w	r3, r1, r3
 800289e:	4413      	add	r3, r2
 80028a0:	3361      	adds	r3, #97	; 0x61
 80028a2:	781b      	ldrb	r3, [r3, #0]
 80028a4:	2b05      	cmp	r3, #5
 80028a6:	d109      	bne.n	80028bc <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80028a8:	687a      	ldr	r2, [r7, #4]
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	212c      	movs	r1, #44	; 0x2c
 80028ae:	fb01 f303 	mul.w	r3, r1, r3
 80028b2:	4413      	add	r3, r2
 80028b4:	3360      	adds	r3, #96	; 0x60
 80028b6:	2205      	movs	r2, #5
 80028b8:	701a      	strb	r2, [r3, #0]
 80028ba:	e063      	b.n	8002984 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80028bc:	687a      	ldr	r2, [r7, #4]
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	212c      	movs	r1, #44	; 0x2c
 80028c2:	fb01 f303 	mul.w	r3, r1, r3
 80028c6:	4413      	add	r3, r2
 80028c8:	3361      	adds	r3, #97	; 0x61
 80028ca:	781b      	ldrb	r3, [r3, #0]
 80028cc:	2b06      	cmp	r3, #6
 80028ce:	d009      	beq.n	80028e4 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80028d0:	687a      	ldr	r2, [r7, #4]
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	212c      	movs	r1, #44	; 0x2c
 80028d6:	fb01 f303 	mul.w	r3, r1, r3
 80028da:	4413      	add	r3, r2
 80028dc:	3361      	adds	r3, #97	; 0x61
 80028de:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80028e0:	2b08      	cmp	r3, #8
 80028e2:	d14f      	bne.n	8002984 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 80028e4:	687a      	ldr	r2, [r7, #4]
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	212c      	movs	r1, #44	; 0x2c
 80028ea:	fb01 f303 	mul.w	r3, r1, r3
 80028ee:	4413      	add	r3, r2
 80028f0:	335c      	adds	r3, #92	; 0x5c
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	1c5a      	adds	r2, r3, #1
 80028f6:	6879      	ldr	r1, [r7, #4]
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	202c      	movs	r0, #44	; 0x2c
 80028fc:	fb00 f303 	mul.w	r3, r0, r3
 8002900:	440b      	add	r3, r1
 8002902:	335c      	adds	r3, #92	; 0x5c
 8002904:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002906:	687a      	ldr	r2, [r7, #4]
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	212c      	movs	r1, #44	; 0x2c
 800290c:	fb01 f303 	mul.w	r3, r1, r3
 8002910:	4413      	add	r3, r2
 8002912:	335c      	adds	r3, #92	; 0x5c
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	2b02      	cmp	r3, #2
 8002918:	d912      	bls.n	8002940 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800291a:	687a      	ldr	r2, [r7, #4]
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	212c      	movs	r1, #44	; 0x2c
 8002920:	fb01 f303 	mul.w	r3, r1, r3
 8002924:	4413      	add	r3, r2
 8002926:	335c      	adds	r3, #92	; 0x5c
 8002928:	2200      	movs	r2, #0
 800292a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800292c:	687a      	ldr	r2, [r7, #4]
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	212c      	movs	r1, #44	; 0x2c
 8002932:	fb01 f303 	mul.w	r3, r1, r3
 8002936:	4413      	add	r3, r2
 8002938:	3360      	adds	r3, #96	; 0x60
 800293a:	2204      	movs	r2, #4
 800293c:	701a      	strb	r2, [r3, #0]
 800293e:	e021      	b.n	8002984 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002940:	687a      	ldr	r2, [r7, #4]
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	212c      	movs	r1, #44	; 0x2c
 8002946:	fb01 f303 	mul.w	r3, r1, r3
 800294a:	4413      	add	r3, r2
 800294c:	3360      	adds	r3, #96	; 0x60
 800294e:	2202      	movs	r2, #2
 8002950:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	015a      	lsls	r2, r3, #5
 8002956:	69bb      	ldr	r3, [r7, #24]
 8002958:	4413      	add	r3, r2
 800295a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002968:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002970:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	015a      	lsls	r2, r3, #5
 8002976:	69bb      	ldr	r3, [r7, #24]
 8002978:	4413      	add	r3, r2
 800297a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800297e:	461a      	mov	r2, r3
 8002980:	693b      	ldr	r3, [r7, #16]
 8002982:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	015a      	lsls	r2, r3, #5
 8002988:	69bb      	ldr	r3, [r7, #24]
 800298a:	4413      	add	r3, r2
 800298c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002990:	461a      	mov	r2, r3
 8002992:	2302      	movs	r3, #2
 8002994:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	b2d9      	uxtb	r1, r3
 800299a:	687a      	ldr	r2, [r7, #4]
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	202c      	movs	r0, #44	; 0x2c
 80029a0:	fb00 f303 	mul.w	r3, r0, r3
 80029a4:	4413      	add	r3, r2
 80029a6:	3360      	adds	r3, #96	; 0x60
 80029a8:	781b      	ldrb	r3, [r3, #0]
 80029aa:	461a      	mov	r2, r3
 80029ac:	6878      	ldr	r0, [r7, #4]
 80029ae:	f004 fa49 	bl	8006e44 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80029b2:	bf00      	nop
 80029b4:	3720      	adds	r7, #32
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}

080029ba <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80029ba:	b580      	push	{r7, lr}
 80029bc:	b08a      	sub	sp, #40	; 0x28
 80029be:	af00      	add	r7, sp, #0
 80029c0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80029c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ca:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	6a1b      	ldr	r3, [r3, #32]
 80029d2:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80029d4:	69fb      	ldr	r3, [r7, #28]
 80029d6:	f003 030f 	and.w	r3, r3, #15
 80029da:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80029dc:	69fb      	ldr	r3, [r7, #28]
 80029de:	0c5b      	lsrs	r3, r3, #17
 80029e0:	f003 030f 	and.w	r3, r3, #15
 80029e4:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80029e6:	69fb      	ldr	r3, [r7, #28]
 80029e8:	091b      	lsrs	r3, r3, #4
 80029ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80029ee:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	2b02      	cmp	r3, #2
 80029f4:	d004      	beq.n	8002a00 <HCD_RXQLVL_IRQHandler+0x46>
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	2b05      	cmp	r3, #5
 80029fa:	f000 80a9 	beq.w	8002b50 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80029fe:	e0aa      	b.n	8002b56 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	f000 80a6 	beq.w	8002b54 <HCD_RXQLVL_IRQHandler+0x19a>
 8002a08:	687a      	ldr	r2, [r7, #4]
 8002a0a:	69bb      	ldr	r3, [r7, #24]
 8002a0c:	212c      	movs	r1, #44	; 0x2c
 8002a0e:	fb01 f303 	mul.w	r3, r1, r3
 8002a12:	4413      	add	r3, r2
 8002a14:	3344      	adds	r3, #68	; 0x44
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	f000 809b 	beq.w	8002b54 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002a1e:	687a      	ldr	r2, [r7, #4]
 8002a20:	69bb      	ldr	r3, [r7, #24]
 8002a22:	212c      	movs	r1, #44	; 0x2c
 8002a24:	fb01 f303 	mul.w	r3, r1, r3
 8002a28:	4413      	add	r3, r2
 8002a2a:	3350      	adds	r3, #80	; 0x50
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	441a      	add	r2, r3
 8002a32:	6879      	ldr	r1, [r7, #4]
 8002a34:	69bb      	ldr	r3, [r7, #24]
 8002a36:	202c      	movs	r0, #44	; 0x2c
 8002a38:	fb00 f303 	mul.w	r3, r0, r3
 8002a3c:	440b      	add	r3, r1
 8002a3e:	334c      	adds	r3, #76	; 0x4c
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	429a      	cmp	r2, r3
 8002a44:	d87a      	bhi.n	8002b3c <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6818      	ldr	r0, [r3, #0]
 8002a4a:	687a      	ldr	r2, [r7, #4]
 8002a4c:	69bb      	ldr	r3, [r7, #24]
 8002a4e:	212c      	movs	r1, #44	; 0x2c
 8002a50:	fb01 f303 	mul.w	r3, r1, r3
 8002a54:	4413      	add	r3, r2
 8002a56:	3344      	adds	r3, #68	; 0x44
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	693a      	ldr	r2, [r7, #16]
 8002a5c:	b292      	uxth	r2, r2
 8002a5e:	4619      	mov	r1, r3
 8002a60:	f002 fa68 	bl	8004f34 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002a64:	687a      	ldr	r2, [r7, #4]
 8002a66:	69bb      	ldr	r3, [r7, #24]
 8002a68:	212c      	movs	r1, #44	; 0x2c
 8002a6a:	fb01 f303 	mul.w	r3, r1, r3
 8002a6e:	4413      	add	r3, r2
 8002a70:	3344      	adds	r3, #68	; 0x44
 8002a72:	681a      	ldr	r2, [r3, #0]
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	441a      	add	r2, r3
 8002a78:	6879      	ldr	r1, [r7, #4]
 8002a7a:	69bb      	ldr	r3, [r7, #24]
 8002a7c:	202c      	movs	r0, #44	; 0x2c
 8002a7e:	fb00 f303 	mul.w	r3, r0, r3
 8002a82:	440b      	add	r3, r1
 8002a84:	3344      	adds	r3, #68	; 0x44
 8002a86:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002a88:	687a      	ldr	r2, [r7, #4]
 8002a8a:	69bb      	ldr	r3, [r7, #24]
 8002a8c:	212c      	movs	r1, #44	; 0x2c
 8002a8e:	fb01 f303 	mul.w	r3, r1, r3
 8002a92:	4413      	add	r3, r2
 8002a94:	3350      	adds	r3, #80	; 0x50
 8002a96:	681a      	ldr	r2, [r3, #0]
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	441a      	add	r2, r3
 8002a9c:	6879      	ldr	r1, [r7, #4]
 8002a9e:	69bb      	ldr	r3, [r7, #24]
 8002aa0:	202c      	movs	r0, #44	; 0x2c
 8002aa2:	fb00 f303 	mul.w	r3, r0, r3
 8002aa6:	440b      	add	r3, r1
 8002aa8:	3350      	adds	r3, #80	; 0x50
 8002aaa:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002aac:	69bb      	ldr	r3, [r7, #24]
 8002aae:	015a      	lsls	r2, r3, #5
 8002ab0:	6a3b      	ldr	r3, [r7, #32]
 8002ab2:	4413      	add	r3, r2
 8002ab4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ab8:	691b      	ldr	r3, [r3, #16]
 8002aba:	0cdb      	lsrs	r3, r3, #19
 8002abc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ac0:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002ac2:	687a      	ldr	r2, [r7, #4]
 8002ac4:	69bb      	ldr	r3, [r7, #24]
 8002ac6:	212c      	movs	r1, #44	; 0x2c
 8002ac8:	fb01 f303 	mul.w	r3, r1, r3
 8002acc:	4413      	add	r3, r2
 8002ace:	3340      	adds	r3, #64	; 0x40
 8002ad0:	881b      	ldrh	r3, [r3, #0]
 8002ad2:	461a      	mov	r2, r3
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d13c      	bne.n	8002b54 <HCD_RXQLVL_IRQHandler+0x19a>
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d039      	beq.n	8002b54 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002ae0:	69bb      	ldr	r3, [r7, #24]
 8002ae2:	015a      	lsls	r2, r3, #5
 8002ae4:	6a3b      	ldr	r3, [r7, #32]
 8002ae6:	4413      	add	r3, r2
 8002ae8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002af6:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002afe:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002b00:	69bb      	ldr	r3, [r7, #24]
 8002b02:	015a      	lsls	r2, r3, #5
 8002b04:	6a3b      	ldr	r3, [r7, #32]
 8002b06:	4413      	add	r3, r2
 8002b08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b0c:	461a      	mov	r2, r3
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8002b12:	687a      	ldr	r2, [r7, #4]
 8002b14:	69bb      	ldr	r3, [r7, #24]
 8002b16:	212c      	movs	r1, #44	; 0x2c
 8002b18:	fb01 f303 	mul.w	r3, r1, r3
 8002b1c:	4413      	add	r3, r2
 8002b1e:	3354      	adds	r3, #84	; 0x54
 8002b20:	781b      	ldrb	r3, [r3, #0]
 8002b22:	f083 0301 	eor.w	r3, r3, #1
 8002b26:	b2d8      	uxtb	r0, r3
 8002b28:	687a      	ldr	r2, [r7, #4]
 8002b2a:	69bb      	ldr	r3, [r7, #24]
 8002b2c:	212c      	movs	r1, #44	; 0x2c
 8002b2e:	fb01 f303 	mul.w	r3, r1, r3
 8002b32:	4413      	add	r3, r2
 8002b34:	3354      	adds	r3, #84	; 0x54
 8002b36:	4602      	mov	r2, r0
 8002b38:	701a      	strb	r2, [r3, #0]
      break;
 8002b3a:	e00b      	b.n	8002b54 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002b3c:	687a      	ldr	r2, [r7, #4]
 8002b3e:	69bb      	ldr	r3, [r7, #24]
 8002b40:	212c      	movs	r1, #44	; 0x2c
 8002b42:	fb01 f303 	mul.w	r3, r1, r3
 8002b46:	4413      	add	r3, r2
 8002b48:	3360      	adds	r3, #96	; 0x60
 8002b4a:	2204      	movs	r2, #4
 8002b4c:	701a      	strb	r2, [r3, #0]
      break;
 8002b4e:	e001      	b.n	8002b54 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8002b50:	bf00      	nop
 8002b52:	e000      	b.n	8002b56 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8002b54:	bf00      	nop
  }
}
 8002b56:	bf00      	nop
 8002b58:	3728      	adds	r7, #40	; 0x28
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}

08002b5e <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002b5e:	b580      	push	{r7, lr}
 8002b60:	b086      	sub	sp, #24
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002b8a:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	f003 0302 	and.w	r3, r3, #2
 8002b92:	2b02      	cmp	r3, #2
 8002b94:	d10b      	bne.n	8002bae <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	f003 0301 	and.w	r3, r3, #1
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	d102      	bne.n	8002ba6 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002ba0:	6878      	ldr	r0, [r7, #4]
 8002ba2:	f004 f933 	bl	8006e0c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	f043 0302 	orr.w	r3, r3, #2
 8002bac:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	f003 0308 	and.w	r3, r3, #8
 8002bb4:	2b08      	cmp	r3, #8
 8002bb6:	d132      	bne.n	8002c1e <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	f043 0308 	orr.w	r3, r3, #8
 8002bbe:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	f003 0304 	and.w	r3, r3, #4
 8002bc6:	2b04      	cmp	r3, #4
 8002bc8:	d126      	bne.n	8002c18 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	699b      	ldr	r3, [r3, #24]
 8002bce:	2b02      	cmp	r3, #2
 8002bd0:	d113      	bne.n	8002bfa <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002bd8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002bdc:	d106      	bne.n	8002bec <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	2102      	movs	r1, #2
 8002be4:	4618      	mov	r0, r3
 8002be6:	f002 fb13 	bl	8005210 <USB_InitFSLSPClkSel>
 8002bea:	e011      	b.n	8002c10 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	2101      	movs	r1, #1
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f002 fb0c 	bl	8005210 <USB_InitFSLSPClkSel>
 8002bf8:	e00a      	b.n	8002c10 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	68db      	ldr	r3, [r3, #12]
 8002bfe:	2b01      	cmp	r3, #1
 8002c00:	d106      	bne.n	8002c10 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002c08:	461a      	mov	r2, r3
 8002c0a:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002c0e:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002c10:	6878      	ldr	r0, [r7, #4]
 8002c12:	f004 f925 	bl	8006e60 <HAL_HCD_PortEnabled_Callback>
 8002c16:	e002      	b.n	8002c1e <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002c18:	6878      	ldr	r0, [r7, #4]
 8002c1a:	f004 f92f 	bl	8006e7c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	f003 0320 	and.w	r3, r3, #32
 8002c24:	2b20      	cmp	r3, #32
 8002c26:	d103      	bne.n	8002c30 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	f043 0320 	orr.w	r3, r3, #32
 8002c2e:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002c36:	461a      	mov	r2, r3
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	6013      	str	r3, [r2, #0]
}
 8002c3c:	bf00      	nop
 8002c3e:	3718      	adds	r7, #24
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}

08002c44 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b084      	sub	sp, #16
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d101      	bne.n	8002c56 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	e12b      	b.n	8002eae <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c5c:	b2db      	uxtb	r3, r3
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d106      	bne.n	8002c70 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2200      	movs	r2, #0
 8002c66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002c6a:	6878      	ldr	r0, [r7, #4]
 8002c6c:	f7fd fea0 	bl	80009b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2224      	movs	r2, #36	; 0x24
 8002c74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f022 0201 	bic.w	r2, r2, #1
 8002c86:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	681a      	ldr	r2, [r3, #0]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c96:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ca6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002ca8:	f001 fa20 	bl	80040ec <HAL_RCC_GetPCLK1Freq>
 8002cac:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	4a81      	ldr	r2, [pc, #516]	; (8002eb8 <HAL_I2C_Init+0x274>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d807      	bhi.n	8002cc8 <HAL_I2C_Init+0x84>
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	4a80      	ldr	r2, [pc, #512]	; (8002ebc <HAL_I2C_Init+0x278>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	bf94      	ite	ls
 8002cc0:	2301      	movls	r3, #1
 8002cc2:	2300      	movhi	r3, #0
 8002cc4:	b2db      	uxtb	r3, r3
 8002cc6:	e006      	b.n	8002cd6 <HAL_I2C_Init+0x92>
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	4a7d      	ldr	r2, [pc, #500]	; (8002ec0 <HAL_I2C_Init+0x27c>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	bf94      	ite	ls
 8002cd0:	2301      	movls	r3, #1
 8002cd2:	2300      	movhi	r3, #0
 8002cd4:	b2db      	uxtb	r3, r3
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d001      	beq.n	8002cde <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e0e7      	b.n	8002eae <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	4a78      	ldr	r2, [pc, #480]	; (8002ec4 <HAL_I2C_Init+0x280>)
 8002ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ce6:	0c9b      	lsrs	r3, r3, #18
 8002ce8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	68ba      	ldr	r2, [r7, #8]
 8002cfa:	430a      	orrs	r2, r1
 8002cfc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	6a1b      	ldr	r3, [r3, #32]
 8002d04:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	4a6a      	ldr	r2, [pc, #424]	; (8002eb8 <HAL_I2C_Init+0x274>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d802      	bhi.n	8002d18 <HAL_I2C_Init+0xd4>
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	3301      	adds	r3, #1
 8002d16:	e009      	b.n	8002d2c <HAL_I2C_Init+0xe8>
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002d1e:	fb02 f303 	mul.w	r3, r2, r3
 8002d22:	4a69      	ldr	r2, [pc, #420]	; (8002ec8 <HAL_I2C_Init+0x284>)
 8002d24:	fba2 2303 	umull	r2, r3, r2, r3
 8002d28:	099b      	lsrs	r3, r3, #6
 8002d2a:	3301      	adds	r3, #1
 8002d2c:	687a      	ldr	r2, [r7, #4]
 8002d2e:	6812      	ldr	r2, [r2, #0]
 8002d30:	430b      	orrs	r3, r1
 8002d32:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	69db      	ldr	r3, [r3, #28]
 8002d3a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002d3e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	495c      	ldr	r1, [pc, #368]	; (8002eb8 <HAL_I2C_Init+0x274>)
 8002d48:	428b      	cmp	r3, r1
 8002d4a:	d819      	bhi.n	8002d80 <HAL_I2C_Init+0x13c>
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	1e59      	subs	r1, r3, #1
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	005b      	lsls	r3, r3, #1
 8002d56:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d5a:	1c59      	adds	r1, r3, #1
 8002d5c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002d60:	400b      	ands	r3, r1
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d00a      	beq.n	8002d7c <HAL_I2C_Init+0x138>
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	1e59      	subs	r1, r3, #1
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	005b      	lsls	r3, r3, #1
 8002d70:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d74:	3301      	adds	r3, #1
 8002d76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d7a:	e051      	b.n	8002e20 <HAL_I2C_Init+0x1dc>
 8002d7c:	2304      	movs	r3, #4
 8002d7e:	e04f      	b.n	8002e20 <HAL_I2C_Init+0x1dc>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d111      	bne.n	8002dac <HAL_I2C_Init+0x168>
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	1e58      	subs	r0, r3, #1
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6859      	ldr	r1, [r3, #4]
 8002d90:	460b      	mov	r3, r1
 8002d92:	005b      	lsls	r3, r3, #1
 8002d94:	440b      	add	r3, r1
 8002d96:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d9a:	3301      	adds	r3, #1
 8002d9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	bf0c      	ite	eq
 8002da4:	2301      	moveq	r3, #1
 8002da6:	2300      	movne	r3, #0
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	e012      	b.n	8002dd2 <HAL_I2C_Init+0x18e>
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	1e58      	subs	r0, r3, #1
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6859      	ldr	r1, [r3, #4]
 8002db4:	460b      	mov	r3, r1
 8002db6:	009b      	lsls	r3, r3, #2
 8002db8:	440b      	add	r3, r1
 8002dba:	0099      	lsls	r1, r3, #2
 8002dbc:	440b      	add	r3, r1
 8002dbe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002dc2:	3301      	adds	r3, #1
 8002dc4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	bf0c      	ite	eq
 8002dcc:	2301      	moveq	r3, #1
 8002dce:	2300      	movne	r3, #0
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d001      	beq.n	8002dda <HAL_I2C_Init+0x196>
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e022      	b.n	8002e20 <HAL_I2C_Init+0x1dc>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d10e      	bne.n	8002e00 <HAL_I2C_Init+0x1bc>
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	1e58      	subs	r0, r3, #1
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6859      	ldr	r1, [r3, #4]
 8002dea:	460b      	mov	r3, r1
 8002dec:	005b      	lsls	r3, r3, #1
 8002dee:	440b      	add	r3, r1
 8002df0:	fbb0 f3f3 	udiv	r3, r0, r3
 8002df4:	3301      	adds	r3, #1
 8002df6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dfa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002dfe:	e00f      	b.n	8002e20 <HAL_I2C_Init+0x1dc>
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	1e58      	subs	r0, r3, #1
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6859      	ldr	r1, [r3, #4]
 8002e08:	460b      	mov	r3, r1
 8002e0a:	009b      	lsls	r3, r3, #2
 8002e0c:	440b      	add	r3, r1
 8002e0e:	0099      	lsls	r1, r3, #2
 8002e10:	440b      	add	r3, r1
 8002e12:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e16:	3301      	adds	r3, #1
 8002e18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e1c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e20:	6879      	ldr	r1, [r7, #4]
 8002e22:	6809      	ldr	r1, [r1, #0]
 8002e24:	4313      	orrs	r3, r2
 8002e26:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	69da      	ldr	r2, [r3, #28]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6a1b      	ldr	r3, [r3, #32]
 8002e3a:	431a      	orrs	r2, r3
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	430a      	orrs	r2, r1
 8002e42:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002e4e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002e52:	687a      	ldr	r2, [r7, #4]
 8002e54:	6911      	ldr	r1, [r2, #16]
 8002e56:	687a      	ldr	r2, [r7, #4]
 8002e58:	68d2      	ldr	r2, [r2, #12]
 8002e5a:	4311      	orrs	r1, r2
 8002e5c:	687a      	ldr	r2, [r7, #4]
 8002e5e:	6812      	ldr	r2, [r2, #0]
 8002e60:	430b      	orrs	r3, r1
 8002e62:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	68db      	ldr	r3, [r3, #12]
 8002e6a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	695a      	ldr	r2, [r3, #20]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	699b      	ldr	r3, [r3, #24]
 8002e76:	431a      	orrs	r2, r3
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	430a      	orrs	r2, r1
 8002e7e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	681a      	ldr	r2, [r3, #0]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f042 0201 	orr.w	r2, r2, #1
 8002e8e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2200      	movs	r2, #0
 8002e94:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2220      	movs	r2, #32
 8002e9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002eac:	2300      	movs	r3, #0
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	3710      	adds	r7, #16
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}
 8002eb6:	bf00      	nop
 8002eb8:	000186a0 	.word	0x000186a0
 8002ebc:	001e847f 	.word	0x001e847f
 8002ec0:	003d08ff 	.word	0x003d08ff
 8002ec4:	431bde83 	.word	0x431bde83
 8002ec8:	10624dd3 	.word	0x10624dd3

08002ecc <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b088      	sub	sp, #32
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d101      	bne.n	8002ede <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	e128      	b.n	8003130 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d109      	bne.n	8002efe <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2200      	movs	r2, #0
 8002eee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	4a90      	ldr	r2, [pc, #576]	; (8003138 <HAL_I2S_Init+0x26c>)
 8002ef6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002ef8:	6878      	ldr	r0, [r7, #4]
 8002efa:	f7fd fda1 	bl	8000a40 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2202      	movs	r2, #2
 8002f02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	69db      	ldr	r3, [r3, #28]
 8002f0c:	687a      	ldr	r2, [r7, #4]
 8002f0e:	6812      	ldr	r2, [r2, #0]
 8002f10:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002f14:	f023 030f 	bic.w	r3, r3, #15
 8002f18:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	2202      	movs	r2, #2
 8002f20:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	695b      	ldr	r3, [r3, #20]
 8002f26:	2b02      	cmp	r3, #2
 8002f28:	d060      	beq.n	8002fec <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	68db      	ldr	r3, [r3, #12]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d102      	bne.n	8002f38 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8002f32:	2310      	movs	r3, #16
 8002f34:	617b      	str	r3, [r7, #20]
 8002f36:	e001      	b.n	8002f3c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002f38:	2320      	movs	r3, #32
 8002f3a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	2b20      	cmp	r3, #32
 8002f42:	d802      	bhi.n	8002f4a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002f44:	697b      	ldr	r3, [r7, #20]
 8002f46:	005b      	lsls	r3, r3, #1
 8002f48:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8002f4a:	2001      	movs	r0, #1
 8002f4c:	f001 f9d8 	bl	8004300 <HAL_RCCEx_GetPeriphCLKFreq>
 8002f50:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	691b      	ldr	r3, [r3, #16]
 8002f56:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f5a:	d125      	bne.n	8002fa8 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	68db      	ldr	r3, [r3, #12]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d010      	beq.n	8002f86 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	009b      	lsls	r3, r3, #2
 8002f68:	68fa      	ldr	r2, [r7, #12]
 8002f6a:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f6e:	4613      	mov	r3, r2
 8002f70:	009b      	lsls	r3, r3, #2
 8002f72:	4413      	add	r3, r2
 8002f74:	005b      	lsls	r3, r3, #1
 8002f76:	461a      	mov	r2, r3
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	695b      	ldr	r3, [r3, #20]
 8002f7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f80:	3305      	adds	r3, #5
 8002f82:	613b      	str	r3, [r7, #16]
 8002f84:	e01f      	b.n	8002fc6 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002f86:	697b      	ldr	r3, [r7, #20]
 8002f88:	00db      	lsls	r3, r3, #3
 8002f8a:	68fa      	ldr	r2, [r7, #12]
 8002f8c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f90:	4613      	mov	r3, r2
 8002f92:	009b      	lsls	r3, r3, #2
 8002f94:	4413      	add	r3, r2
 8002f96:	005b      	lsls	r3, r3, #1
 8002f98:	461a      	mov	r2, r3
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	695b      	ldr	r3, [r3, #20]
 8002f9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fa2:	3305      	adds	r3, #5
 8002fa4:	613b      	str	r3, [r7, #16]
 8002fa6:	e00e      	b.n	8002fc6 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002fa8:	68fa      	ldr	r2, [r7, #12]
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	fbb2 f2f3 	udiv	r2, r2, r3
 8002fb0:	4613      	mov	r3, r2
 8002fb2:	009b      	lsls	r3, r3, #2
 8002fb4:	4413      	add	r3, r2
 8002fb6:	005b      	lsls	r3, r3, #1
 8002fb8:	461a      	mov	r2, r3
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	695b      	ldr	r3, [r3, #20]
 8002fbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fc2:	3305      	adds	r3, #5
 8002fc4:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	4a5c      	ldr	r2, [pc, #368]	; (800313c <HAL_I2S_Init+0x270>)
 8002fca:	fba2 2303 	umull	r2, r3, r2, r3
 8002fce:	08db      	lsrs	r3, r3, #3
 8002fd0:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	f003 0301 	and.w	r3, r3, #1
 8002fd8:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8002fda:	693a      	ldr	r2, [r7, #16]
 8002fdc:	69bb      	ldr	r3, [r7, #24]
 8002fde:	1ad3      	subs	r3, r2, r3
 8002fe0:	085b      	lsrs	r3, r3, #1
 8002fe2:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8002fe4:	69bb      	ldr	r3, [r7, #24]
 8002fe6:	021b      	lsls	r3, r3, #8
 8002fe8:	61bb      	str	r3, [r7, #24]
 8002fea:	e003      	b.n	8002ff4 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8002fec:	2302      	movs	r3, #2
 8002fee:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8002ff4:	69fb      	ldr	r3, [r7, #28]
 8002ff6:	2b01      	cmp	r3, #1
 8002ff8:	d902      	bls.n	8003000 <HAL_I2S_Init+0x134>
 8002ffa:	69fb      	ldr	r3, [r7, #28]
 8002ffc:	2bff      	cmp	r3, #255	; 0xff
 8002ffe:	d907      	bls.n	8003010 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003004:	f043 0210 	orr.w	r2, r3, #16
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 800300c:	2301      	movs	r3, #1
 800300e:	e08f      	b.n	8003130 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	691a      	ldr	r2, [r3, #16]
 8003014:	69bb      	ldr	r3, [r7, #24]
 8003016:	ea42 0103 	orr.w	r1, r2, r3
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	69fa      	ldr	r2, [r7, #28]
 8003020:	430a      	orrs	r2, r1
 8003022:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	69db      	ldr	r3, [r3, #28]
 800302a:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800302e:	f023 030f 	bic.w	r3, r3, #15
 8003032:	687a      	ldr	r2, [r7, #4]
 8003034:	6851      	ldr	r1, [r2, #4]
 8003036:	687a      	ldr	r2, [r7, #4]
 8003038:	6892      	ldr	r2, [r2, #8]
 800303a:	4311      	orrs	r1, r2
 800303c:	687a      	ldr	r2, [r7, #4]
 800303e:	68d2      	ldr	r2, [r2, #12]
 8003040:	4311      	orrs	r1, r2
 8003042:	687a      	ldr	r2, [r7, #4]
 8003044:	6992      	ldr	r2, [r2, #24]
 8003046:	430a      	orrs	r2, r1
 8003048:	431a      	orrs	r2, r3
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003052:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6a1b      	ldr	r3, [r3, #32]
 8003058:	2b01      	cmp	r3, #1
 800305a:	d161      	bne.n	8003120 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	4a38      	ldr	r2, [pc, #224]	; (8003140 <HAL_I2S_Init+0x274>)
 8003060:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a37      	ldr	r2, [pc, #220]	; (8003144 <HAL_I2S_Init+0x278>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d101      	bne.n	8003070 <HAL_I2S_Init+0x1a4>
 800306c:	4b36      	ldr	r3, [pc, #216]	; (8003148 <HAL_I2S_Init+0x27c>)
 800306e:	e001      	b.n	8003074 <HAL_I2S_Init+0x1a8>
 8003070:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003074:	69db      	ldr	r3, [r3, #28]
 8003076:	687a      	ldr	r2, [r7, #4]
 8003078:	6812      	ldr	r2, [r2, #0]
 800307a:	4932      	ldr	r1, [pc, #200]	; (8003144 <HAL_I2S_Init+0x278>)
 800307c:	428a      	cmp	r2, r1
 800307e:	d101      	bne.n	8003084 <HAL_I2S_Init+0x1b8>
 8003080:	4a31      	ldr	r2, [pc, #196]	; (8003148 <HAL_I2S_Init+0x27c>)
 8003082:	e001      	b.n	8003088 <HAL_I2S_Init+0x1bc>
 8003084:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003088:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800308c:	f023 030f 	bic.w	r3, r3, #15
 8003090:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a2b      	ldr	r2, [pc, #172]	; (8003144 <HAL_I2S_Init+0x278>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d101      	bne.n	80030a0 <HAL_I2S_Init+0x1d4>
 800309c:	4b2a      	ldr	r3, [pc, #168]	; (8003148 <HAL_I2S_Init+0x27c>)
 800309e:	e001      	b.n	80030a4 <HAL_I2S_Init+0x1d8>
 80030a0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80030a4:	2202      	movs	r2, #2
 80030a6:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a25      	ldr	r2, [pc, #148]	; (8003144 <HAL_I2S_Init+0x278>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d101      	bne.n	80030b6 <HAL_I2S_Init+0x1ea>
 80030b2:	4b25      	ldr	r3, [pc, #148]	; (8003148 <HAL_I2S_Init+0x27c>)
 80030b4:	e001      	b.n	80030ba <HAL_I2S_Init+0x1ee>
 80030b6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80030ba:	69db      	ldr	r3, [r3, #28]
 80030bc:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030c6:	d003      	beq.n	80030d0 <HAL_I2S_Init+0x204>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d103      	bne.n	80030d8 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80030d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80030d4:	613b      	str	r3, [r7, #16]
 80030d6:	e001      	b.n	80030dc <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80030d8:	2300      	movs	r3, #0
 80030da:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80030e6:	4313      	orrs	r3, r2
 80030e8:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	68db      	ldr	r3, [r3, #12]
 80030ee:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80030f0:	4313      	orrs	r3, r2
 80030f2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	699b      	ldr	r3, [r3, #24]
 80030f8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80030fa:	4313      	orrs	r3, r2
 80030fc:	b29a      	uxth	r2, r3
 80030fe:	897b      	ldrh	r3, [r7, #10]
 8003100:	4313      	orrs	r3, r2
 8003102:	b29b      	uxth	r3, r3
 8003104:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003108:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a0d      	ldr	r2, [pc, #52]	; (8003144 <HAL_I2S_Init+0x278>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d101      	bne.n	8003118 <HAL_I2S_Init+0x24c>
 8003114:	4b0c      	ldr	r3, [pc, #48]	; (8003148 <HAL_I2S_Init+0x27c>)
 8003116:	e001      	b.n	800311c <HAL_I2S_Init+0x250>
 8003118:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800311c:	897a      	ldrh	r2, [r7, #10]
 800311e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2200      	movs	r2, #0
 8003124:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2201      	movs	r2, #1
 800312a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800312e:	2300      	movs	r3, #0
}
 8003130:	4618      	mov	r0, r3
 8003132:	3720      	adds	r7, #32
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}
 8003138:	08003243 	.word	0x08003243
 800313c:	cccccccd 	.word	0xcccccccd
 8003140:	08003359 	.word	0x08003359
 8003144:	40003800 	.word	0x40003800
 8003148:	40003400 	.word	0x40003400

0800314c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800314c:	b480      	push	{r7}
 800314e:	b083      	sub	sp, #12
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003154:	bf00      	nop
 8003156:	370c      	adds	r7, #12
 8003158:	46bd      	mov	sp, r7
 800315a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315e:	4770      	bx	lr

08003160 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003160:	b480      	push	{r7}
 8003162:	b083      	sub	sp, #12
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003168:	bf00      	nop
 800316a:	370c      	adds	r7, #12
 800316c:	46bd      	mov	sp, r7
 800316e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003172:	4770      	bx	lr

08003174 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003174:	b480      	push	{r7}
 8003176:	b083      	sub	sp, #12
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 800317c:	bf00      	nop
 800317e:	370c      	adds	r7, #12
 8003180:	46bd      	mov	sp, r7
 8003182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003186:	4770      	bx	lr

08003188 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b082      	sub	sp, #8
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003194:	881a      	ldrh	r2, [r3, #0]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a0:	1c9a      	adds	r2, r3, #2
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031aa:	b29b      	uxth	r3, r3
 80031ac:	3b01      	subs	r3, #1
 80031ae:	b29a      	uxth	r2, r3
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031b8:	b29b      	uxth	r3, r3
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d10e      	bne.n	80031dc <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	685a      	ldr	r2, [r3, #4]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80031cc:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2201      	movs	r2, #1
 80031d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80031d6:	6878      	ldr	r0, [r7, #4]
 80031d8:	f7ff ffb8 	bl	800314c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80031dc:	bf00      	nop
 80031de:	3708      	adds	r7, #8
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}

080031e4 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b082      	sub	sp, #8
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	68da      	ldr	r2, [r3, #12]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031f6:	b292      	uxth	r2, r2
 80031f8:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031fe:	1c9a      	adds	r2, r3, #2
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003208:	b29b      	uxth	r3, r3
 800320a:	3b01      	subs	r3, #1
 800320c:	b29a      	uxth	r2, r3
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003216:	b29b      	uxth	r3, r3
 8003218:	2b00      	cmp	r3, #0
 800321a:	d10e      	bne.n	800323a <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	685a      	ldr	r2, [r3, #4]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800322a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2201      	movs	r2, #1
 8003230:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003234:	6878      	ldr	r0, [r7, #4]
 8003236:	f7ff ff93 	bl	8003160 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800323a:	bf00      	nop
 800323c:	3708      	adds	r7, #8
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}

08003242 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003242:	b580      	push	{r7, lr}
 8003244:	b086      	sub	sp, #24
 8003246:	af00      	add	r7, sp, #0
 8003248:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003258:	b2db      	uxtb	r3, r3
 800325a:	2b04      	cmp	r3, #4
 800325c:	d13a      	bne.n	80032d4 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	f003 0301 	and.w	r3, r3, #1
 8003264:	2b01      	cmp	r3, #1
 8003266:	d109      	bne.n	800327c <I2S_IRQHandler+0x3a>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003272:	2b40      	cmp	r3, #64	; 0x40
 8003274:	d102      	bne.n	800327c <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003276:	6878      	ldr	r0, [r7, #4]
 8003278:	f7ff ffb4 	bl	80031e4 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003282:	2b40      	cmp	r3, #64	; 0x40
 8003284:	d126      	bne.n	80032d4 <I2S_IRQHandler+0x92>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	f003 0320 	and.w	r3, r3, #32
 8003290:	2b20      	cmp	r3, #32
 8003292:	d11f      	bne.n	80032d4 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	685a      	ldr	r2, [r3, #4]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80032a2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80032a4:	2300      	movs	r3, #0
 80032a6:	613b      	str	r3, [r7, #16]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	68db      	ldr	r3, [r3, #12]
 80032ae:	613b      	str	r3, [r7, #16]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	613b      	str	r3, [r7, #16]
 80032b8:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2201      	movs	r2, #1
 80032be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032c6:	f043 0202 	orr.w	r2, r3, #2
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	f7ff ff50 	bl	8003174 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032da:	b2db      	uxtb	r3, r3
 80032dc:	2b03      	cmp	r3, #3
 80032de:	d136      	bne.n	800334e <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	f003 0302 	and.w	r3, r3, #2
 80032e6:	2b02      	cmp	r3, #2
 80032e8:	d109      	bne.n	80032fe <I2S_IRQHandler+0xbc>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032f4:	2b80      	cmp	r3, #128	; 0x80
 80032f6:	d102      	bne.n	80032fe <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80032f8:	6878      	ldr	r0, [r7, #4]
 80032fa:	f7ff ff45 	bl	8003188 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	f003 0308 	and.w	r3, r3, #8
 8003304:	2b08      	cmp	r3, #8
 8003306:	d122      	bne.n	800334e <I2S_IRQHandler+0x10c>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	f003 0320 	and.w	r3, r3, #32
 8003312:	2b20      	cmp	r3, #32
 8003314:	d11b      	bne.n	800334e <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	685a      	ldr	r2, [r3, #4]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003324:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003326:	2300      	movs	r3, #0
 8003328:	60fb      	str	r3, [r7, #12]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	60fb      	str	r3, [r7, #12]
 8003332:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2201      	movs	r2, #1
 8003338:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003340:	f043 0204 	orr.w	r2, r3, #4
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003348:	6878      	ldr	r0, [r7, #4]
 800334a:	f7ff ff13 	bl	8003174 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800334e:	bf00      	nop
 8003350:	3718      	adds	r7, #24
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}
	...

08003358 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b088      	sub	sp, #32
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a92      	ldr	r2, [pc, #584]	; (80035b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d101      	bne.n	8003376 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003372:	4b92      	ldr	r3, [pc, #584]	; (80035bc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003374:	e001      	b.n	800337a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003376:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a8b      	ldr	r2, [pc, #556]	; (80035b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d101      	bne.n	8003394 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003390:	4b8a      	ldr	r3, [pc, #552]	; (80035bc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003392:	e001      	b.n	8003398 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003394:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033a4:	d004      	beq.n	80033b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	f040 8099 	bne.w	80034e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80033b0:	69fb      	ldr	r3, [r7, #28]
 80033b2:	f003 0302 	and.w	r3, r3, #2
 80033b6:	2b02      	cmp	r3, #2
 80033b8:	d107      	bne.n	80033ca <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d002      	beq.n	80033ca <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80033c4:	6878      	ldr	r0, [r7, #4]
 80033c6:	f000 f925 	bl	8003614 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80033ca:	69bb      	ldr	r3, [r7, #24]
 80033cc:	f003 0301 	and.w	r3, r3, #1
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	d107      	bne.n	80033e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d002      	beq.n	80033e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	f000 f9c8 	bl	8003774 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80033e4:	69bb      	ldr	r3, [r7, #24]
 80033e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033ea:	2b40      	cmp	r3, #64	; 0x40
 80033ec:	d13a      	bne.n	8003464 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	f003 0320 	and.w	r3, r3, #32
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d035      	beq.n	8003464 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a6e      	ldr	r2, [pc, #440]	; (80035b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d101      	bne.n	8003406 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003402:	4b6e      	ldr	r3, [pc, #440]	; (80035bc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003404:	e001      	b.n	800340a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003406:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800340a:	685a      	ldr	r2, [r3, #4]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4969      	ldr	r1, [pc, #420]	; (80035b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003412:	428b      	cmp	r3, r1
 8003414:	d101      	bne.n	800341a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003416:	4b69      	ldr	r3, [pc, #420]	; (80035bc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003418:	e001      	b.n	800341e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800341a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800341e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003422:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	685a      	ldr	r2, [r3, #4]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003432:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003434:	2300      	movs	r3, #0
 8003436:	60fb      	str	r3, [r7, #12]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	68db      	ldr	r3, [r3, #12]
 800343e:	60fb      	str	r3, [r7, #12]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	60fb      	str	r3, [r7, #12]
 8003448:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2201      	movs	r2, #1
 800344e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003456:	f043 0202 	orr.w	r2, r3, #2
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	f7ff fe88 	bl	8003174 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003464:	69fb      	ldr	r3, [r7, #28]
 8003466:	f003 0308 	and.w	r3, r3, #8
 800346a:	2b08      	cmp	r3, #8
 800346c:	f040 80c3 	bne.w	80035f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	f003 0320 	and.w	r3, r3, #32
 8003476:	2b00      	cmp	r3, #0
 8003478:	f000 80bd 	beq.w	80035f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	685a      	ldr	r2, [r3, #4]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800348a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a49      	ldr	r2, [pc, #292]	; (80035b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d101      	bne.n	800349a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003496:	4b49      	ldr	r3, [pc, #292]	; (80035bc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003498:	e001      	b.n	800349e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800349a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800349e:	685a      	ldr	r2, [r3, #4]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4944      	ldr	r1, [pc, #272]	; (80035b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80034a6:	428b      	cmp	r3, r1
 80034a8:	d101      	bne.n	80034ae <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80034aa:	4b44      	ldr	r3, [pc, #272]	; (80035bc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80034ac:	e001      	b.n	80034b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80034ae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80034b2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80034b6:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80034b8:	2300      	movs	r3, #0
 80034ba:	60bb      	str	r3, [r7, #8]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	60bb      	str	r3, [r7, #8]
 80034c4:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2201      	movs	r2, #1
 80034ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034d2:	f043 0204 	orr.w	r2, r3, #4
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	f7ff fe4a 	bl	8003174 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80034e0:	e089      	b.n	80035f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80034e2:	69bb      	ldr	r3, [r7, #24]
 80034e4:	f003 0302 	and.w	r3, r3, #2
 80034e8:	2b02      	cmp	r3, #2
 80034ea:	d107      	bne.n	80034fc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d002      	beq.n	80034fc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f000 f8be 	bl	8003678 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80034fc:	69fb      	ldr	r3, [r7, #28]
 80034fe:	f003 0301 	and.w	r3, r3, #1
 8003502:	2b01      	cmp	r3, #1
 8003504:	d107      	bne.n	8003516 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800350c:	2b00      	cmp	r3, #0
 800350e:	d002      	beq.n	8003516 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003510:	6878      	ldr	r0, [r7, #4]
 8003512:	f000 f8fd 	bl	8003710 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003516:	69fb      	ldr	r3, [r7, #28]
 8003518:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800351c:	2b40      	cmp	r3, #64	; 0x40
 800351e:	d12f      	bne.n	8003580 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	f003 0320 	and.w	r3, r3, #32
 8003526:	2b00      	cmp	r3, #0
 8003528:	d02a      	beq.n	8003580 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	685a      	ldr	r2, [r3, #4]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003538:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a1e      	ldr	r2, [pc, #120]	; (80035b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d101      	bne.n	8003548 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003544:	4b1d      	ldr	r3, [pc, #116]	; (80035bc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003546:	e001      	b.n	800354c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003548:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800354c:	685a      	ldr	r2, [r3, #4]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4919      	ldr	r1, [pc, #100]	; (80035b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003554:	428b      	cmp	r3, r1
 8003556:	d101      	bne.n	800355c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003558:	4b18      	ldr	r3, [pc, #96]	; (80035bc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800355a:	e001      	b.n	8003560 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 800355c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003560:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003564:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2201      	movs	r2, #1
 800356a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003572:	f043 0202 	orr.w	r2, r3, #2
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	f7ff fdfa 	bl	8003174 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003580:	69bb      	ldr	r3, [r7, #24]
 8003582:	f003 0308 	and.w	r3, r3, #8
 8003586:	2b08      	cmp	r3, #8
 8003588:	d136      	bne.n	80035f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	f003 0320 	and.w	r3, r3, #32
 8003590:	2b00      	cmp	r3, #0
 8003592:	d031      	beq.n	80035f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a07      	ldr	r2, [pc, #28]	; (80035b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d101      	bne.n	80035a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800359e:	4b07      	ldr	r3, [pc, #28]	; (80035bc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80035a0:	e001      	b.n	80035a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80035a2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80035a6:	685a      	ldr	r2, [r3, #4]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4902      	ldr	r1, [pc, #8]	; (80035b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80035ae:	428b      	cmp	r3, r1
 80035b0:	d106      	bne.n	80035c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80035b2:	4b02      	ldr	r3, [pc, #8]	; (80035bc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80035b4:	e006      	b.n	80035c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80035b6:	bf00      	nop
 80035b8:	40003800 	.word	0x40003800
 80035bc:	40003400 	.word	0x40003400
 80035c0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80035c4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80035c8:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	685a      	ldr	r2, [r3, #4]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80035d8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2201      	movs	r2, #1
 80035de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035e6:	f043 0204 	orr.w	r2, r3, #4
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80035ee:	6878      	ldr	r0, [r7, #4]
 80035f0:	f7ff fdc0 	bl	8003174 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80035f4:	e000      	b.n	80035f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80035f6:	bf00      	nop
}
 80035f8:	bf00      	nop
 80035fa:	3720      	adds	r7, #32
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bd80      	pop	{r7, pc}

08003600 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003600:	b480      	push	{r7}
 8003602:	b083      	sub	sp, #12
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003608:	bf00      	nop
 800360a:	370c      	adds	r7, #12
 800360c:	46bd      	mov	sp, r7
 800360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003612:	4770      	bx	lr

08003614 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b082      	sub	sp, #8
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003620:	1c99      	adds	r1, r3, #2
 8003622:	687a      	ldr	r2, [r7, #4]
 8003624:	6251      	str	r1, [r2, #36]	; 0x24
 8003626:	881a      	ldrh	r2, [r3, #0]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003632:	b29b      	uxth	r3, r3
 8003634:	3b01      	subs	r3, #1
 8003636:	b29a      	uxth	r2, r3
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003640:	b29b      	uxth	r3, r3
 8003642:	2b00      	cmp	r3, #0
 8003644:	d113      	bne.n	800366e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	685a      	ldr	r2, [r3, #4]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003654:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800365a:	b29b      	uxth	r3, r3
 800365c:	2b00      	cmp	r3, #0
 800365e:	d106      	bne.n	800366e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2201      	movs	r2, #1
 8003664:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003668:	6878      	ldr	r0, [r7, #4]
 800366a:	f7ff ffc9 	bl	8003600 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800366e:	bf00      	nop
 8003670:	3708      	adds	r7, #8
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}
	...

08003678 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b082      	sub	sp, #8
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003684:	1c99      	adds	r1, r3, #2
 8003686:	687a      	ldr	r2, [r7, #4]
 8003688:	6251      	str	r1, [r2, #36]	; 0x24
 800368a:	8819      	ldrh	r1, [r3, #0]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a1d      	ldr	r2, [pc, #116]	; (8003708 <I2SEx_TxISR_I2SExt+0x90>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d101      	bne.n	800369a <I2SEx_TxISR_I2SExt+0x22>
 8003696:	4b1d      	ldr	r3, [pc, #116]	; (800370c <I2SEx_TxISR_I2SExt+0x94>)
 8003698:	e001      	b.n	800369e <I2SEx_TxISR_I2SExt+0x26>
 800369a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800369e:	460a      	mov	r2, r1
 80036a0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036a6:	b29b      	uxth	r3, r3
 80036a8:	3b01      	subs	r3, #1
 80036aa:	b29a      	uxth	r2, r3
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036b4:	b29b      	uxth	r3, r3
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d121      	bne.n	80036fe <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a12      	ldr	r2, [pc, #72]	; (8003708 <I2SEx_TxISR_I2SExt+0x90>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d101      	bne.n	80036c8 <I2SEx_TxISR_I2SExt+0x50>
 80036c4:	4b11      	ldr	r3, [pc, #68]	; (800370c <I2SEx_TxISR_I2SExt+0x94>)
 80036c6:	e001      	b.n	80036cc <I2SEx_TxISR_I2SExt+0x54>
 80036c8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036cc:	685a      	ldr	r2, [r3, #4]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	490d      	ldr	r1, [pc, #52]	; (8003708 <I2SEx_TxISR_I2SExt+0x90>)
 80036d4:	428b      	cmp	r3, r1
 80036d6:	d101      	bne.n	80036dc <I2SEx_TxISR_I2SExt+0x64>
 80036d8:	4b0c      	ldr	r3, [pc, #48]	; (800370c <I2SEx_TxISR_I2SExt+0x94>)
 80036da:	e001      	b.n	80036e0 <I2SEx_TxISR_I2SExt+0x68>
 80036dc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036e0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80036e4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80036ea:	b29b      	uxth	r3, r3
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d106      	bne.n	80036fe <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2201      	movs	r2, #1
 80036f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80036f8:	6878      	ldr	r0, [r7, #4]
 80036fa:	f7ff ff81 	bl	8003600 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80036fe:	bf00      	nop
 8003700:	3708      	adds	r7, #8
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}
 8003706:	bf00      	nop
 8003708:	40003800 	.word	0x40003800
 800370c:	40003400 	.word	0x40003400

08003710 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b082      	sub	sp, #8
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	68d8      	ldr	r0, [r3, #12]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003722:	1c99      	adds	r1, r3, #2
 8003724:	687a      	ldr	r2, [r7, #4]
 8003726:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003728:	b282      	uxth	r2, r0
 800372a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003730:	b29b      	uxth	r3, r3
 8003732:	3b01      	subs	r3, #1
 8003734:	b29a      	uxth	r2, r3
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800373e:	b29b      	uxth	r3, r3
 8003740:	2b00      	cmp	r3, #0
 8003742:	d113      	bne.n	800376c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	685a      	ldr	r2, [r3, #4]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003752:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003758:	b29b      	uxth	r3, r3
 800375a:	2b00      	cmp	r3, #0
 800375c:	d106      	bne.n	800376c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2201      	movs	r2, #1
 8003762:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	f7ff ff4a 	bl	8003600 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800376c:	bf00      	nop
 800376e:	3708      	adds	r7, #8
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}

08003774 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b082      	sub	sp, #8
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a20      	ldr	r2, [pc, #128]	; (8003804 <I2SEx_RxISR_I2SExt+0x90>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d101      	bne.n	800378a <I2SEx_RxISR_I2SExt+0x16>
 8003786:	4b20      	ldr	r3, [pc, #128]	; (8003808 <I2SEx_RxISR_I2SExt+0x94>)
 8003788:	e001      	b.n	800378e <I2SEx_RxISR_I2SExt+0x1a>
 800378a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800378e:	68d8      	ldr	r0, [r3, #12]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003794:	1c99      	adds	r1, r3, #2
 8003796:	687a      	ldr	r2, [r7, #4]
 8003798:	62d1      	str	r1, [r2, #44]	; 0x2c
 800379a:	b282      	uxth	r2, r0
 800379c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80037a2:	b29b      	uxth	r3, r3
 80037a4:	3b01      	subs	r3, #1
 80037a6:	b29a      	uxth	r2, r3
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80037b0:	b29b      	uxth	r3, r3
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d121      	bne.n	80037fa <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a12      	ldr	r2, [pc, #72]	; (8003804 <I2SEx_RxISR_I2SExt+0x90>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d101      	bne.n	80037c4 <I2SEx_RxISR_I2SExt+0x50>
 80037c0:	4b11      	ldr	r3, [pc, #68]	; (8003808 <I2SEx_RxISR_I2SExt+0x94>)
 80037c2:	e001      	b.n	80037c8 <I2SEx_RxISR_I2SExt+0x54>
 80037c4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037c8:	685a      	ldr	r2, [r3, #4]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	490d      	ldr	r1, [pc, #52]	; (8003804 <I2SEx_RxISR_I2SExt+0x90>)
 80037d0:	428b      	cmp	r3, r1
 80037d2:	d101      	bne.n	80037d8 <I2SEx_RxISR_I2SExt+0x64>
 80037d4:	4b0c      	ldr	r3, [pc, #48]	; (8003808 <I2SEx_RxISR_I2SExt+0x94>)
 80037d6:	e001      	b.n	80037dc <I2SEx_RxISR_I2SExt+0x68>
 80037d8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037dc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80037e0:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037e6:	b29b      	uxth	r3, r3
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d106      	bne.n	80037fa <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2201      	movs	r2, #1
 80037f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80037f4:	6878      	ldr	r0, [r7, #4]
 80037f6:	f7ff ff03 	bl	8003600 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80037fa:	bf00      	nop
 80037fc:	3708      	adds	r7, #8
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}
 8003802:	bf00      	nop
 8003804:	40003800 	.word	0x40003800
 8003808:	40003400 	.word	0x40003400

0800380c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b086      	sub	sp, #24
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d101      	bne.n	800381e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	e267      	b.n	8003cee <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f003 0301 	and.w	r3, r3, #1
 8003826:	2b00      	cmp	r3, #0
 8003828:	d075      	beq.n	8003916 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800382a:	4b88      	ldr	r3, [pc, #544]	; (8003a4c <HAL_RCC_OscConfig+0x240>)
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	f003 030c 	and.w	r3, r3, #12
 8003832:	2b04      	cmp	r3, #4
 8003834:	d00c      	beq.n	8003850 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003836:	4b85      	ldr	r3, [pc, #532]	; (8003a4c <HAL_RCC_OscConfig+0x240>)
 8003838:	689b      	ldr	r3, [r3, #8]
 800383a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800383e:	2b08      	cmp	r3, #8
 8003840:	d112      	bne.n	8003868 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003842:	4b82      	ldr	r3, [pc, #520]	; (8003a4c <HAL_RCC_OscConfig+0x240>)
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800384a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800384e:	d10b      	bne.n	8003868 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003850:	4b7e      	ldr	r3, [pc, #504]	; (8003a4c <HAL_RCC_OscConfig+0x240>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003858:	2b00      	cmp	r3, #0
 800385a:	d05b      	beq.n	8003914 <HAL_RCC_OscConfig+0x108>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d157      	bne.n	8003914 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003864:	2301      	movs	r3, #1
 8003866:	e242      	b.n	8003cee <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003870:	d106      	bne.n	8003880 <HAL_RCC_OscConfig+0x74>
 8003872:	4b76      	ldr	r3, [pc, #472]	; (8003a4c <HAL_RCC_OscConfig+0x240>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a75      	ldr	r2, [pc, #468]	; (8003a4c <HAL_RCC_OscConfig+0x240>)
 8003878:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800387c:	6013      	str	r3, [r2, #0]
 800387e:	e01d      	b.n	80038bc <HAL_RCC_OscConfig+0xb0>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003888:	d10c      	bne.n	80038a4 <HAL_RCC_OscConfig+0x98>
 800388a:	4b70      	ldr	r3, [pc, #448]	; (8003a4c <HAL_RCC_OscConfig+0x240>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a6f      	ldr	r2, [pc, #444]	; (8003a4c <HAL_RCC_OscConfig+0x240>)
 8003890:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003894:	6013      	str	r3, [r2, #0]
 8003896:	4b6d      	ldr	r3, [pc, #436]	; (8003a4c <HAL_RCC_OscConfig+0x240>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a6c      	ldr	r2, [pc, #432]	; (8003a4c <HAL_RCC_OscConfig+0x240>)
 800389c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038a0:	6013      	str	r3, [r2, #0]
 80038a2:	e00b      	b.n	80038bc <HAL_RCC_OscConfig+0xb0>
 80038a4:	4b69      	ldr	r3, [pc, #420]	; (8003a4c <HAL_RCC_OscConfig+0x240>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a68      	ldr	r2, [pc, #416]	; (8003a4c <HAL_RCC_OscConfig+0x240>)
 80038aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038ae:	6013      	str	r3, [r2, #0]
 80038b0:	4b66      	ldr	r3, [pc, #408]	; (8003a4c <HAL_RCC_OscConfig+0x240>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a65      	ldr	r2, [pc, #404]	; (8003a4c <HAL_RCC_OscConfig+0x240>)
 80038b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d013      	beq.n	80038ec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038c4:	f7fd fad8 	bl	8000e78 <HAL_GetTick>
 80038c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038ca:	e008      	b.n	80038de <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038cc:	f7fd fad4 	bl	8000e78 <HAL_GetTick>
 80038d0:	4602      	mov	r2, r0
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	1ad3      	subs	r3, r2, r3
 80038d6:	2b64      	cmp	r3, #100	; 0x64
 80038d8:	d901      	bls.n	80038de <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80038da:	2303      	movs	r3, #3
 80038dc:	e207      	b.n	8003cee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038de:	4b5b      	ldr	r3, [pc, #364]	; (8003a4c <HAL_RCC_OscConfig+0x240>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d0f0      	beq.n	80038cc <HAL_RCC_OscConfig+0xc0>
 80038ea:	e014      	b.n	8003916 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038ec:	f7fd fac4 	bl	8000e78 <HAL_GetTick>
 80038f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038f2:	e008      	b.n	8003906 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038f4:	f7fd fac0 	bl	8000e78 <HAL_GetTick>
 80038f8:	4602      	mov	r2, r0
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	1ad3      	subs	r3, r2, r3
 80038fe:	2b64      	cmp	r3, #100	; 0x64
 8003900:	d901      	bls.n	8003906 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003902:	2303      	movs	r3, #3
 8003904:	e1f3      	b.n	8003cee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003906:	4b51      	ldr	r3, [pc, #324]	; (8003a4c <HAL_RCC_OscConfig+0x240>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800390e:	2b00      	cmp	r3, #0
 8003910:	d1f0      	bne.n	80038f4 <HAL_RCC_OscConfig+0xe8>
 8003912:	e000      	b.n	8003916 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003914:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f003 0302 	and.w	r3, r3, #2
 800391e:	2b00      	cmp	r3, #0
 8003920:	d063      	beq.n	80039ea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003922:	4b4a      	ldr	r3, [pc, #296]	; (8003a4c <HAL_RCC_OscConfig+0x240>)
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	f003 030c 	and.w	r3, r3, #12
 800392a:	2b00      	cmp	r3, #0
 800392c:	d00b      	beq.n	8003946 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800392e:	4b47      	ldr	r3, [pc, #284]	; (8003a4c <HAL_RCC_OscConfig+0x240>)
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003936:	2b08      	cmp	r3, #8
 8003938:	d11c      	bne.n	8003974 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800393a:	4b44      	ldr	r3, [pc, #272]	; (8003a4c <HAL_RCC_OscConfig+0x240>)
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003942:	2b00      	cmp	r3, #0
 8003944:	d116      	bne.n	8003974 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003946:	4b41      	ldr	r3, [pc, #260]	; (8003a4c <HAL_RCC_OscConfig+0x240>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f003 0302 	and.w	r3, r3, #2
 800394e:	2b00      	cmp	r3, #0
 8003950:	d005      	beq.n	800395e <HAL_RCC_OscConfig+0x152>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	68db      	ldr	r3, [r3, #12]
 8003956:	2b01      	cmp	r3, #1
 8003958:	d001      	beq.n	800395e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	e1c7      	b.n	8003cee <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800395e:	4b3b      	ldr	r3, [pc, #236]	; (8003a4c <HAL_RCC_OscConfig+0x240>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	691b      	ldr	r3, [r3, #16]
 800396a:	00db      	lsls	r3, r3, #3
 800396c:	4937      	ldr	r1, [pc, #220]	; (8003a4c <HAL_RCC_OscConfig+0x240>)
 800396e:	4313      	orrs	r3, r2
 8003970:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003972:	e03a      	b.n	80039ea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	68db      	ldr	r3, [r3, #12]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d020      	beq.n	80039be <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800397c:	4b34      	ldr	r3, [pc, #208]	; (8003a50 <HAL_RCC_OscConfig+0x244>)
 800397e:	2201      	movs	r2, #1
 8003980:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003982:	f7fd fa79 	bl	8000e78 <HAL_GetTick>
 8003986:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003988:	e008      	b.n	800399c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800398a:	f7fd fa75 	bl	8000e78 <HAL_GetTick>
 800398e:	4602      	mov	r2, r0
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	1ad3      	subs	r3, r2, r3
 8003994:	2b02      	cmp	r3, #2
 8003996:	d901      	bls.n	800399c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003998:	2303      	movs	r3, #3
 800399a:	e1a8      	b.n	8003cee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800399c:	4b2b      	ldr	r3, [pc, #172]	; (8003a4c <HAL_RCC_OscConfig+0x240>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f003 0302 	and.w	r3, r3, #2
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d0f0      	beq.n	800398a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039a8:	4b28      	ldr	r3, [pc, #160]	; (8003a4c <HAL_RCC_OscConfig+0x240>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	691b      	ldr	r3, [r3, #16]
 80039b4:	00db      	lsls	r3, r3, #3
 80039b6:	4925      	ldr	r1, [pc, #148]	; (8003a4c <HAL_RCC_OscConfig+0x240>)
 80039b8:	4313      	orrs	r3, r2
 80039ba:	600b      	str	r3, [r1, #0]
 80039bc:	e015      	b.n	80039ea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039be:	4b24      	ldr	r3, [pc, #144]	; (8003a50 <HAL_RCC_OscConfig+0x244>)
 80039c0:	2200      	movs	r2, #0
 80039c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039c4:	f7fd fa58 	bl	8000e78 <HAL_GetTick>
 80039c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039ca:	e008      	b.n	80039de <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80039cc:	f7fd fa54 	bl	8000e78 <HAL_GetTick>
 80039d0:	4602      	mov	r2, r0
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	1ad3      	subs	r3, r2, r3
 80039d6:	2b02      	cmp	r3, #2
 80039d8:	d901      	bls.n	80039de <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80039da:	2303      	movs	r3, #3
 80039dc:	e187      	b.n	8003cee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039de:	4b1b      	ldr	r3, [pc, #108]	; (8003a4c <HAL_RCC_OscConfig+0x240>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f003 0302 	and.w	r3, r3, #2
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d1f0      	bne.n	80039cc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f003 0308 	and.w	r3, r3, #8
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d036      	beq.n	8003a64 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	695b      	ldr	r3, [r3, #20]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d016      	beq.n	8003a2c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039fe:	4b15      	ldr	r3, [pc, #84]	; (8003a54 <HAL_RCC_OscConfig+0x248>)
 8003a00:	2201      	movs	r2, #1
 8003a02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a04:	f7fd fa38 	bl	8000e78 <HAL_GetTick>
 8003a08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a0a:	e008      	b.n	8003a1e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a0c:	f7fd fa34 	bl	8000e78 <HAL_GetTick>
 8003a10:	4602      	mov	r2, r0
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	1ad3      	subs	r3, r2, r3
 8003a16:	2b02      	cmp	r3, #2
 8003a18:	d901      	bls.n	8003a1e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003a1a:	2303      	movs	r3, #3
 8003a1c:	e167      	b.n	8003cee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a1e:	4b0b      	ldr	r3, [pc, #44]	; (8003a4c <HAL_RCC_OscConfig+0x240>)
 8003a20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a22:	f003 0302 	and.w	r3, r3, #2
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d0f0      	beq.n	8003a0c <HAL_RCC_OscConfig+0x200>
 8003a2a:	e01b      	b.n	8003a64 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a2c:	4b09      	ldr	r3, [pc, #36]	; (8003a54 <HAL_RCC_OscConfig+0x248>)
 8003a2e:	2200      	movs	r2, #0
 8003a30:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a32:	f7fd fa21 	bl	8000e78 <HAL_GetTick>
 8003a36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a38:	e00e      	b.n	8003a58 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a3a:	f7fd fa1d 	bl	8000e78 <HAL_GetTick>
 8003a3e:	4602      	mov	r2, r0
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	1ad3      	subs	r3, r2, r3
 8003a44:	2b02      	cmp	r3, #2
 8003a46:	d907      	bls.n	8003a58 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003a48:	2303      	movs	r3, #3
 8003a4a:	e150      	b.n	8003cee <HAL_RCC_OscConfig+0x4e2>
 8003a4c:	40023800 	.word	0x40023800
 8003a50:	42470000 	.word	0x42470000
 8003a54:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a58:	4b88      	ldr	r3, [pc, #544]	; (8003c7c <HAL_RCC_OscConfig+0x470>)
 8003a5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a5c:	f003 0302 	and.w	r3, r3, #2
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d1ea      	bne.n	8003a3a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f003 0304 	and.w	r3, r3, #4
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	f000 8097 	beq.w	8003ba0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a72:	2300      	movs	r3, #0
 8003a74:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a76:	4b81      	ldr	r3, [pc, #516]	; (8003c7c <HAL_RCC_OscConfig+0x470>)
 8003a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d10f      	bne.n	8003aa2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a82:	2300      	movs	r3, #0
 8003a84:	60bb      	str	r3, [r7, #8]
 8003a86:	4b7d      	ldr	r3, [pc, #500]	; (8003c7c <HAL_RCC_OscConfig+0x470>)
 8003a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a8a:	4a7c      	ldr	r2, [pc, #496]	; (8003c7c <HAL_RCC_OscConfig+0x470>)
 8003a8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a90:	6413      	str	r3, [r2, #64]	; 0x40
 8003a92:	4b7a      	ldr	r3, [pc, #488]	; (8003c7c <HAL_RCC_OscConfig+0x470>)
 8003a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a9a:	60bb      	str	r3, [r7, #8]
 8003a9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003aa2:	4b77      	ldr	r3, [pc, #476]	; (8003c80 <HAL_RCC_OscConfig+0x474>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d118      	bne.n	8003ae0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003aae:	4b74      	ldr	r3, [pc, #464]	; (8003c80 <HAL_RCC_OscConfig+0x474>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a73      	ldr	r2, [pc, #460]	; (8003c80 <HAL_RCC_OscConfig+0x474>)
 8003ab4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ab8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003aba:	f7fd f9dd 	bl	8000e78 <HAL_GetTick>
 8003abe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ac0:	e008      	b.n	8003ad4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ac2:	f7fd f9d9 	bl	8000e78 <HAL_GetTick>
 8003ac6:	4602      	mov	r2, r0
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	1ad3      	subs	r3, r2, r3
 8003acc:	2b02      	cmp	r3, #2
 8003ace:	d901      	bls.n	8003ad4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003ad0:	2303      	movs	r3, #3
 8003ad2:	e10c      	b.n	8003cee <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ad4:	4b6a      	ldr	r3, [pc, #424]	; (8003c80 <HAL_RCC_OscConfig+0x474>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d0f0      	beq.n	8003ac2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	2b01      	cmp	r3, #1
 8003ae6:	d106      	bne.n	8003af6 <HAL_RCC_OscConfig+0x2ea>
 8003ae8:	4b64      	ldr	r3, [pc, #400]	; (8003c7c <HAL_RCC_OscConfig+0x470>)
 8003aea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aec:	4a63      	ldr	r2, [pc, #396]	; (8003c7c <HAL_RCC_OscConfig+0x470>)
 8003aee:	f043 0301 	orr.w	r3, r3, #1
 8003af2:	6713      	str	r3, [r2, #112]	; 0x70
 8003af4:	e01c      	b.n	8003b30 <HAL_RCC_OscConfig+0x324>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	689b      	ldr	r3, [r3, #8]
 8003afa:	2b05      	cmp	r3, #5
 8003afc:	d10c      	bne.n	8003b18 <HAL_RCC_OscConfig+0x30c>
 8003afe:	4b5f      	ldr	r3, [pc, #380]	; (8003c7c <HAL_RCC_OscConfig+0x470>)
 8003b00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b02:	4a5e      	ldr	r2, [pc, #376]	; (8003c7c <HAL_RCC_OscConfig+0x470>)
 8003b04:	f043 0304 	orr.w	r3, r3, #4
 8003b08:	6713      	str	r3, [r2, #112]	; 0x70
 8003b0a:	4b5c      	ldr	r3, [pc, #368]	; (8003c7c <HAL_RCC_OscConfig+0x470>)
 8003b0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b0e:	4a5b      	ldr	r2, [pc, #364]	; (8003c7c <HAL_RCC_OscConfig+0x470>)
 8003b10:	f043 0301 	orr.w	r3, r3, #1
 8003b14:	6713      	str	r3, [r2, #112]	; 0x70
 8003b16:	e00b      	b.n	8003b30 <HAL_RCC_OscConfig+0x324>
 8003b18:	4b58      	ldr	r3, [pc, #352]	; (8003c7c <HAL_RCC_OscConfig+0x470>)
 8003b1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b1c:	4a57      	ldr	r2, [pc, #348]	; (8003c7c <HAL_RCC_OscConfig+0x470>)
 8003b1e:	f023 0301 	bic.w	r3, r3, #1
 8003b22:	6713      	str	r3, [r2, #112]	; 0x70
 8003b24:	4b55      	ldr	r3, [pc, #340]	; (8003c7c <HAL_RCC_OscConfig+0x470>)
 8003b26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b28:	4a54      	ldr	r2, [pc, #336]	; (8003c7c <HAL_RCC_OscConfig+0x470>)
 8003b2a:	f023 0304 	bic.w	r3, r3, #4
 8003b2e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d015      	beq.n	8003b64 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b38:	f7fd f99e 	bl	8000e78 <HAL_GetTick>
 8003b3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b3e:	e00a      	b.n	8003b56 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b40:	f7fd f99a 	bl	8000e78 <HAL_GetTick>
 8003b44:	4602      	mov	r2, r0
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	1ad3      	subs	r3, r2, r3
 8003b4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d901      	bls.n	8003b56 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003b52:	2303      	movs	r3, #3
 8003b54:	e0cb      	b.n	8003cee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b56:	4b49      	ldr	r3, [pc, #292]	; (8003c7c <HAL_RCC_OscConfig+0x470>)
 8003b58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b5a:	f003 0302 	and.w	r3, r3, #2
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d0ee      	beq.n	8003b40 <HAL_RCC_OscConfig+0x334>
 8003b62:	e014      	b.n	8003b8e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b64:	f7fd f988 	bl	8000e78 <HAL_GetTick>
 8003b68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b6a:	e00a      	b.n	8003b82 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b6c:	f7fd f984 	bl	8000e78 <HAL_GetTick>
 8003b70:	4602      	mov	r2, r0
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	1ad3      	subs	r3, r2, r3
 8003b76:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d901      	bls.n	8003b82 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003b7e:	2303      	movs	r3, #3
 8003b80:	e0b5      	b.n	8003cee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b82:	4b3e      	ldr	r3, [pc, #248]	; (8003c7c <HAL_RCC_OscConfig+0x470>)
 8003b84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b86:	f003 0302 	and.w	r3, r3, #2
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d1ee      	bne.n	8003b6c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b8e:	7dfb      	ldrb	r3, [r7, #23]
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	d105      	bne.n	8003ba0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b94:	4b39      	ldr	r3, [pc, #228]	; (8003c7c <HAL_RCC_OscConfig+0x470>)
 8003b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b98:	4a38      	ldr	r2, [pc, #224]	; (8003c7c <HAL_RCC_OscConfig+0x470>)
 8003b9a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b9e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	699b      	ldr	r3, [r3, #24]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	f000 80a1 	beq.w	8003cec <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003baa:	4b34      	ldr	r3, [pc, #208]	; (8003c7c <HAL_RCC_OscConfig+0x470>)
 8003bac:	689b      	ldr	r3, [r3, #8]
 8003bae:	f003 030c 	and.w	r3, r3, #12
 8003bb2:	2b08      	cmp	r3, #8
 8003bb4:	d05c      	beq.n	8003c70 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	699b      	ldr	r3, [r3, #24]
 8003bba:	2b02      	cmp	r3, #2
 8003bbc:	d141      	bne.n	8003c42 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bbe:	4b31      	ldr	r3, [pc, #196]	; (8003c84 <HAL_RCC_OscConfig+0x478>)
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bc4:	f7fd f958 	bl	8000e78 <HAL_GetTick>
 8003bc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bca:	e008      	b.n	8003bde <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bcc:	f7fd f954 	bl	8000e78 <HAL_GetTick>
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	1ad3      	subs	r3, r2, r3
 8003bd6:	2b02      	cmp	r3, #2
 8003bd8:	d901      	bls.n	8003bde <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003bda:	2303      	movs	r3, #3
 8003bdc:	e087      	b.n	8003cee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bde:	4b27      	ldr	r3, [pc, #156]	; (8003c7c <HAL_RCC_OscConfig+0x470>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d1f0      	bne.n	8003bcc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	69da      	ldr	r2, [r3, #28]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6a1b      	ldr	r3, [r3, #32]
 8003bf2:	431a      	orrs	r2, r3
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf8:	019b      	lsls	r3, r3, #6
 8003bfa:	431a      	orrs	r2, r3
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c00:	085b      	lsrs	r3, r3, #1
 8003c02:	3b01      	subs	r3, #1
 8003c04:	041b      	lsls	r3, r3, #16
 8003c06:	431a      	orrs	r2, r3
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c0c:	061b      	lsls	r3, r3, #24
 8003c0e:	491b      	ldr	r1, [pc, #108]	; (8003c7c <HAL_RCC_OscConfig+0x470>)
 8003c10:	4313      	orrs	r3, r2
 8003c12:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c14:	4b1b      	ldr	r3, [pc, #108]	; (8003c84 <HAL_RCC_OscConfig+0x478>)
 8003c16:	2201      	movs	r2, #1
 8003c18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c1a:	f7fd f92d 	bl	8000e78 <HAL_GetTick>
 8003c1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c20:	e008      	b.n	8003c34 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c22:	f7fd f929 	bl	8000e78 <HAL_GetTick>
 8003c26:	4602      	mov	r2, r0
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	1ad3      	subs	r3, r2, r3
 8003c2c:	2b02      	cmp	r3, #2
 8003c2e:	d901      	bls.n	8003c34 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003c30:	2303      	movs	r3, #3
 8003c32:	e05c      	b.n	8003cee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c34:	4b11      	ldr	r3, [pc, #68]	; (8003c7c <HAL_RCC_OscConfig+0x470>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d0f0      	beq.n	8003c22 <HAL_RCC_OscConfig+0x416>
 8003c40:	e054      	b.n	8003cec <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c42:	4b10      	ldr	r3, [pc, #64]	; (8003c84 <HAL_RCC_OscConfig+0x478>)
 8003c44:	2200      	movs	r2, #0
 8003c46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c48:	f7fd f916 	bl	8000e78 <HAL_GetTick>
 8003c4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c4e:	e008      	b.n	8003c62 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c50:	f7fd f912 	bl	8000e78 <HAL_GetTick>
 8003c54:	4602      	mov	r2, r0
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	1ad3      	subs	r3, r2, r3
 8003c5a:	2b02      	cmp	r3, #2
 8003c5c:	d901      	bls.n	8003c62 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003c5e:	2303      	movs	r3, #3
 8003c60:	e045      	b.n	8003cee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c62:	4b06      	ldr	r3, [pc, #24]	; (8003c7c <HAL_RCC_OscConfig+0x470>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d1f0      	bne.n	8003c50 <HAL_RCC_OscConfig+0x444>
 8003c6e:	e03d      	b.n	8003cec <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	699b      	ldr	r3, [r3, #24]
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	d107      	bne.n	8003c88 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	e038      	b.n	8003cee <HAL_RCC_OscConfig+0x4e2>
 8003c7c:	40023800 	.word	0x40023800
 8003c80:	40007000 	.word	0x40007000
 8003c84:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003c88:	4b1b      	ldr	r3, [pc, #108]	; (8003cf8 <HAL_RCC_OscConfig+0x4ec>)
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	699b      	ldr	r3, [r3, #24]
 8003c92:	2b01      	cmp	r3, #1
 8003c94:	d028      	beq.n	8003ce8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ca0:	429a      	cmp	r2, r3
 8003ca2:	d121      	bne.n	8003ce8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cae:	429a      	cmp	r2, r3
 8003cb0:	d11a      	bne.n	8003ce8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003cb2:	68fa      	ldr	r2, [r7, #12]
 8003cb4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003cb8:	4013      	ands	r3, r2
 8003cba:	687a      	ldr	r2, [r7, #4]
 8003cbc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003cbe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d111      	bne.n	8003ce8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cce:	085b      	lsrs	r3, r3, #1
 8003cd0:	3b01      	subs	r3, #1
 8003cd2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003cd4:	429a      	cmp	r2, r3
 8003cd6:	d107      	bne.n	8003ce8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ce2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	d001      	beq.n	8003cec <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	e000      	b.n	8003cee <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003cec:	2300      	movs	r3, #0
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	3718      	adds	r7, #24
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}
 8003cf6:	bf00      	nop
 8003cf8:	40023800 	.word	0x40023800

08003cfc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b084      	sub	sp, #16
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
 8003d04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d101      	bne.n	8003d10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	e0cc      	b.n	8003eaa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d10:	4b68      	ldr	r3, [pc, #416]	; (8003eb4 <HAL_RCC_ClockConfig+0x1b8>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f003 0307 	and.w	r3, r3, #7
 8003d18:	683a      	ldr	r2, [r7, #0]
 8003d1a:	429a      	cmp	r2, r3
 8003d1c:	d90c      	bls.n	8003d38 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d1e:	4b65      	ldr	r3, [pc, #404]	; (8003eb4 <HAL_RCC_ClockConfig+0x1b8>)
 8003d20:	683a      	ldr	r2, [r7, #0]
 8003d22:	b2d2      	uxtb	r2, r2
 8003d24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d26:	4b63      	ldr	r3, [pc, #396]	; (8003eb4 <HAL_RCC_ClockConfig+0x1b8>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f003 0307 	and.w	r3, r3, #7
 8003d2e:	683a      	ldr	r2, [r7, #0]
 8003d30:	429a      	cmp	r2, r3
 8003d32:	d001      	beq.n	8003d38 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003d34:	2301      	movs	r3, #1
 8003d36:	e0b8      	b.n	8003eaa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f003 0302 	and.w	r3, r3, #2
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d020      	beq.n	8003d86 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f003 0304 	and.w	r3, r3, #4
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d005      	beq.n	8003d5c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d50:	4b59      	ldr	r3, [pc, #356]	; (8003eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d52:	689b      	ldr	r3, [r3, #8]
 8003d54:	4a58      	ldr	r2, [pc, #352]	; (8003eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d56:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003d5a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f003 0308 	and.w	r3, r3, #8
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d005      	beq.n	8003d74 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d68:	4b53      	ldr	r3, [pc, #332]	; (8003eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d6a:	689b      	ldr	r3, [r3, #8]
 8003d6c:	4a52      	ldr	r2, [pc, #328]	; (8003eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d6e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003d72:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d74:	4b50      	ldr	r3, [pc, #320]	; (8003eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d76:	689b      	ldr	r3, [r3, #8]
 8003d78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	689b      	ldr	r3, [r3, #8]
 8003d80:	494d      	ldr	r1, [pc, #308]	; (8003eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d82:	4313      	orrs	r3, r2
 8003d84:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f003 0301 	and.w	r3, r3, #1
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d044      	beq.n	8003e1c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	2b01      	cmp	r3, #1
 8003d98:	d107      	bne.n	8003daa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d9a:	4b47      	ldr	r3, [pc, #284]	; (8003eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d119      	bne.n	8003dda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	e07f      	b.n	8003eaa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	2b02      	cmp	r3, #2
 8003db0:	d003      	beq.n	8003dba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003db6:	2b03      	cmp	r3, #3
 8003db8:	d107      	bne.n	8003dca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dba:	4b3f      	ldr	r3, [pc, #252]	; (8003eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d109      	bne.n	8003dda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	e06f      	b.n	8003eaa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dca:	4b3b      	ldr	r3, [pc, #236]	; (8003eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f003 0302 	and.w	r3, r3, #2
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d101      	bne.n	8003dda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e067      	b.n	8003eaa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003dda:	4b37      	ldr	r3, [pc, #220]	; (8003eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	f023 0203 	bic.w	r2, r3, #3
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	4934      	ldr	r1, [pc, #208]	; (8003eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003de8:	4313      	orrs	r3, r2
 8003dea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003dec:	f7fd f844 	bl	8000e78 <HAL_GetTick>
 8003df0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003df2:	e00a      	b.n	8003e0a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003df4:	f7fd f840 	bl	8000e78 <HAL_GetTick>
 8003df8:	4602      	mov	r2, r0
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	1ad3      	subs	r3, r2, r3
 8003dfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d901      	bls.n	8003e0a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e06:	2303      	movs	r3, #3
 8003e08:	e04f      	b.n	8003eaa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e0a:	4b2b      	ldr	r3, [pc, #172]	; (8003eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	f003 020c 	and.w	r2, r3, #12
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	009b      	lsls	r3, r3, #2
 8003e18:	429a      	cmp	r2, r3
 8003e1a:	d1eb      	bne.n	8003df4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e1c:	4b25      	ldr	r3, [pc, #148]	; (8003eb4 <HAL_RCC_ClockConfig+0x1b8>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f003 0307 	and.w	r3, r3, #7
 8003e24:	683a      	ldr	r2, [r7, #0]
 8003e26:	429a      	cmp	r2, r3
 8003e28:	d20c      	bcs.n	8003e44 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e2a:	4b22      	ldr	r3, [pc, #136]	; (8003eb4 <HAL_RCC_ClockConfig+0x1b8>)
 8003e2c:	683a      	ldr	r2, [r7, #0]
 8003e2e:	b2d2      	uxtb	r2, r2
 8003e30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e32:	4b20      	ldr	r3, [pc, #128]	; (8003eb4 <HAL_RCC_ClockConfig+0x1b8>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f003 0307 	and.w	r3, r3, #7
 8003e3a:	683a      	ldr	r2, [r7, #0]
 8003e3c:	429a      	cmp	r2, r3
 8003e3e:	d001      	beq.n	8003e44 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003e40:	2301      	movs	r3, #1
 8003e42:	e032      	b.n	8003eaa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f003 0304 	and.w	r3, r3, #4
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d008      	beq.n	8003e62 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e50:	4b19      	ldr	r3, [pc, #100]	; (8003eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	68db      	ldr	r3, [r3, #12]
 8003e5c:	4916      	ldr	r1, [pc, #88]	; (8003eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f003 0308 	and.w	r3, r3, #8
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d009      	beq.n	8003e82 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e6e:	4b12      	ldr	r3, [pc, #72]	; (8003eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	691b      	ldr	r3, [r3, #16]
 8003e7a:	00db      	lsls	r3, r3, #3
 8003e7c:	490e      	ldr	r1, [pc, #56]	; (8003eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003e82:	f000 f821 	bl	8003ec8 <HAL_RCC_GetSysClockFreq>
 8003e86:	4602      	mov	r2, r0
 8003e88:	4b0b      	ldr	r3, [pc, #44]	; (8003eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	091b      	lsrs	r3, r3, #4
 8003e8e:	f003 030f 	and.w	r3, r3, #15
 8003e92:	490a      	ldr	r1, [pc, #40]	; (8003ebc <HAL_RCC_ClockConfig+0x1c0>)
 8003e94:	5ccb      	ldrb	r3, [r1, r3]
 8003e96:	fa22 f303 	lsr.w	r3, r2, r3
 8003e9a:	4a09      	ldr	r2, [pc, #36]	; (8003ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8003e9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003e9e:	4b09      	ldr	r3, [pc, #36]	; (8003ec4 <HAL_RCC_ClockConfig+0x1c8>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f7fc ffa4 	bl	8000df0 <HAL_InitTick>

  return HAL_OK;
 8003ea8:	2300      	movs	r3, #0
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	3710      	adds	r7, #16
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}
 8003eb2:	bf00      	nop
 8003eb4:	40023c00 	.word	0x40023c00
 8003eb8:	40023800 	.word	0x40023800
 8003ebc:	080074a8 	.word	0x080074a8
 8003ec0:	20000000 	.word	0x20000000
 8003ec4:	20000004 	.word	0x20000004

08003ec8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ec8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ecc:	b094      	sub	sp, #80	; 0x50
 8003ece:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	647b      	str	r3, [r7, #68]	; 0x44
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ed8:	2300      	movs	r3, #0
 8003eda:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003edc:	2300      	movs	r3, #0
 8003ede:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ee0:	4b79      	ldr	r3, [pc, #484]	; (80040c8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ee2:	689b      	ldr	r3, [r3, #8]
 8003ee4:	f003 030c 	and.w	r3, r3, #12
 8003ee8:	2b08      	cmp	r3, #8
 8003eea:	d00d      	beq.n	8003f08 <HAL_RCC_GetSysClockFreq+0x40>
 8003eec:	2b08      	cmp	r3, #8
 8003eee:	f200 80e1 	bhi.w	80040b4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d002      	beq.n	8003efc <HAL_RCC_GetSysClockFreq+0x34>
 8003ef6:	2b04      	cmp	r3, #4
 8003ef8:	d003      	beq.n	8003f02 <HAL_RCC_GetSysClockFreq+0x3a>
 8003efa:	e0db      	b.n	80040b4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003efc:	4b73      	ldr	r3, [pc, #460]	; (80040cc <HAL_RCC_GetSysClockFreq+0x204>)
 8003efe:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003f00:	e0db      	b.n	80040ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003f02:	4b73      	ldr	r3, [pc, #460]	; (80040d0 <HAL_RCC_GetSysClockFreq+0x208>)
 8003f04:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003f06:	e0d8      	b.n	80040ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f08:	4b6f      	ldr	r3, [pc, #444]	; (80040c8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f10:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003f12:	4b6d      	ldr	r3, [pc, #436]	; (80040c8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d063      	beq.n	8003fe6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f1e:	4b6a      	ldr	r3, [pc, #424]	; (80040c8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	099b      	lsrs	r3, r3, #6
 8003f24:	2200      	movs	r2, #0
 8003f26:	63bb      	str	r3, [r7, #56]	; 0x38
 8003f28:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003f2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f30:	633b      	str	r3, [r7, #48]	; 0x30
 8003f32:	2300      	movs	r3, #0
 8003f34:	637b      	str	r3, [r7, #52]	; 0x34
 8003f36:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003f3a:	4622      	mov	r2, r4
 8003f3c:	462b      	mov	r3, r5
 8003f3e:	f04f 0000 	mov.w	r0, #0
 8003f42:	f04f 0100 	mov.w	r1, #0
 8003f46:	0159      	lsls	r1, r3, #5
 8003f48:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f4c:	0150      	lsls	r0, r2, #5
 8003f4e:	4602      	mov	r2, r0
 8003f50:	460b      	mov	r3, r1
 8003f52:	4621      	mov	r1, r4
 8003f54:	1a51      	subs	r1, r2, r1
 8003f56:	6139      	str	r1, [r7, #16]
 8003f58:	4629      	mov	r1, r5
 8003f5a:	eb63 0301 	sbc.w	r3, r3, r1
 8003f5e:	617b      	str	r3, [r7, #20]
 8003f60:	f04f 0200 	mov.w	r2, #0
 8003f64:	f04f 0300 	mov.w	r3, #0
 8003f68:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003f6c:	4659      	mov	r1, fp
 8003f6e:	018b      	lsls	r3, r1, #6
 8003f70:	4651      	mov	r1, sl
 8003f72:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003f76:	4651      	mov	r1, sl
 8003f78:	018a      	lsls	r2, r1, #6
 8003f7a:	4651      	mov	r1, sl
 8003f7c:	ebb2 0801 	subs.w	r8, r2, r1
 8003f80:	4659      	mov	r1, fp
 8003f82:	eb63 0901 	sbc.w	r9, r3, r1
 8003f86:	f04f 0200 	mov.w	r2, #0
 8003f8a:	f04f 0300 	mov.w	r3, #0
 8003f8e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003f92:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003f96:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003f9a:	4690      	mov	r8, r2
 8003f9c:	4699      	mov	r9, r3
 8003f9e:	4623      	mov	r3, r4
 8003fa0:	eb18 0303 	adds.w	r3, r8, r3
 8003fa4:	60bb      	str	r3, [r7, #8]
 8003fa6:	462b      	mov	r3, r5
 8003fa8:	eb49 0303 	adc.w	r3, r9, r3
 8003fac:	60fb      	str	r3, [r7, #12]
 8003fae:	f04f 0200 	mov.w	r2, #0
 8003fb2:	f04f 0300 	mov.w	r3, #0
 8003fb6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003fba:	4629      	mov	r1, r5
 8003fbc:	024b      	lsls	r3, r1, #9
 8003fbe:	4621      	mov	r1, r4
 8003fc0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003fc4:	4621      	mov	r1, r4
 8003fc6:	024a      	lsls	r2, r1, #9
 8003fc8:	4610      	mov	r0, r2
 8003fca:	4619      	mov	r1, r3
 8003fcc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003fce:	2200      	movs	r2, #0
 8003fd0:	62bb      	str	r3, [r7, #40]	; 0x28
 8003fd2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003fd4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003fd8:	f7fc f8f6 	bl	80001c8 <__aeabi_uldivmod>
 8003fdc:	4602      	mov	r2, r0
 8003fde:	460b      	mov	r3, r1
 8003fe0:	4613      	mov	r3, r2
 8003fe2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003fe4:	e058      	b.n	8004098 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003fe6:	4b38      	ldr	r3, [pc, #224]	; (80040c8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	099b      	lsrs	r3, r3, #6
 8003fec:	2200      	movs	r2, #0
 8003fee:	4618      	mov	r0, r3
 8003ff0:	4611      	mov	r1, r2
 8003ff2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003ff6:	623b      	str	r3, [r7, #32]
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	627b      	str	r3, [r7, #36]	; 0x24
 8003ffc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004000:	4642      	mov	r2, r8
 8004002:	464b      	mov	r3, r9
 8004004:	f04f 0000 	mov.w	r0, #0
 8004008:	f04f 0100 	mov.w	r1, #0
 800400c:	0159      	lsls	r1, r3, #5
 800400e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004012:	0150      	lsls	r0, r2, #5
 8004014:	4602      	mov	r2, r0
 8004016:	460b      	mov	r3, r1
 8004018:	4641      	mov	r1, r8
 800401a:	ebb2 0a01 	subs.w	sl, r2, r1
 800401e:	4649      	mov	r1, r9
 8004020:	eb63 0b01 	sbc.w	fp, r3, r1
 8004024:	f04f 0200 	mov.w	r2, #0
 8004028:	f04f 0300 	mov.w	r3, #0
 800402c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004030:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004034:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004038:	ebb2 040a 	subs.w	r4, r2, sl
 800403c:	eb63 050b 	sbc.w	r5, r3, fp
 8004040:	f04f 0200 	mov.w	r2, #0
 8004044:	f04f 0300 	mov.w	r3, #0
 8004048:	00eb      	lsls	r3, r5, #3
 800404a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800404e:	00e2      	lsls	r2, r4, #3
 8004050:	4614      	mov	r4, r2
 8004052:	461d      	mov	r5, r3
 8004054:	4643      	mov	r3, r8
 8004056:	18e3      	adds	r3, r4, r3
 8004058:	603b      	str	r3, [r7, #0]
 800405a:	464b      	mov	r3, r9
 800405c:	eb45 0303 	adc.w	r3, r5, r3
 8004060:	607b      	str	r3, [r7, #4]
 8004062:	f04f 0200 	mov.w	r2, #0
 8004066:	f04f 0300 	mov.w	r3, #0
 800406a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800406e:	4629      	mov	r1, r5
 8004070:	028b      	lsls	r3, r1, #10
 8004072:	4621      	mov	r1, r4
 8004074:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004078:	4621      	mov	r1, r4
 800407a:	028a      	lsls	r2, r1, #10
 800407c:	4610      	mov	r0, r2
 800407e:	4619      	mov	r1, r3
 8004080:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004082:	2200      	movs	r2, #0
 8004084:	61bb      	str	r3, [r7, #24]
 8004086:	61fa      	str	r2, [r7, #28]
 8004088:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800408c:	f7fc f89c 	bl	80001c8 <__aeabi_uldivmod>
 8004090:	4602      	mov	r2, r0
 8004092:	460b      	mov	r3, r1
 8004094:	4613      	mov	r3, r2
 8004096:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004098:	4b0b      	ldr	r3, [pc, #44]	; (80040c8 <HAL_RCC_GetSysClockFreq+0x200>)
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	0c1b      	lsrs	r3, r3, #16
 800409e:	f003 0303 	and.w	r3, r3, #3
 80040a2:	3301      	adds	r3, #1
 80040a4:	005b      	lsls	r3, r3, #1
 80040a6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80040a8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80040aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80040b0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80040b2:	e002      	b.n	80040ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80040b4:	4b05      	ldr	r3, [pc, #20]	; (80040cc <HAL_RCC_GetSysClockFreq+0x204>)
 80040b6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80040b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80040ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80040bc:	4618      	mov	r0, r3
 80040be:	3750      	adds	r7, #80	; 0x50
 80040c0:	46bd      	mov	sp, r7
 80040c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80040c6:	bf00      	nop
 80040c8:	40023800 	.word	0x40023800
 80040cc:	00f42400 	.word	0x00f42400
 80040d0:	007a1200 	.word	0x007a1200

080040d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80040d4:	b480      	push	{r7}
 80040d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80040d8:	4b03      	ldr	r3, [pc, #12]	; (80040e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80040da:	681b      	ldr	r3, [r3, #0]
}
 80040dc:	4618      	mov	r0, r3
 80040de:	46bd      	mov	sp, r7
 80040e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e4:	4770      	bx	lr
 80040e6:	bf00      	nop
 80040e8:	20000000 	.word	0x20000000

080040ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80040f0:	f7ff fff0 	bl	80040d4 <HAL_RCC_GetHCLKFreq>
 80040f4:	4602      	mov	r2, r0
 80040f6:	4b05      	ldr	r3, [pc, #20]	; (800410c <HAL_RCC_GetPCLK1Freq+0x20>)
 80040f8:	689b      	ldr	r3, [r3, #8]
 80040fa:	0a9b      	lsrs	r3, r3, #10
 80040fc:	f003 0307 	and.w	r3, r3, #7
 8004100:	4903      	ldr	r1, [pc, #12]	; (8004110 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004102:	5ccb      	ldrb	r3, [r1, r3]
 8004104:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004108:	4618      	mov	r0, r3
 800410a:	bd80      	pop	{r7, pc}
 800410c:	40023800 	.word	0x40023800
 8004110:	080074b8 	.word	0x080074b8

08004114 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004118:	f7ff ffdc 	bl	80040d4 <HAL_RCC_GetHCLKFreq>
 800411c:	4602      	mov	r2, r0
 800411e:	4b05      	ldr	r3, [pc, #20]	; (8004134 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004120:	689b      	ldr	r3, [r3, #8]
 8004122:	0b5b      	lsrs	r3, r3, #13
 8004124:	f003 0307 	and.w	r3, r3, #7
 8004128:	4903      	ldr	r1, [pc, #12]	; (8004138 <HAL_RCC_GetPCLK2Freq+0x24>)
 800412a:	5ccb      	ldrb	r3, [r1, r3]
 800412c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004130:	4618      	mov	r0, r3
 8004132:	bd80      	pop	{r7, pc}
 8004134:	40023800 	.word	0x40023800
 8004138:	080074b8 	.word	0x080074b8

0800413c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b086      	sub	sp, #24
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004144:	2300      	movs	r3, #0
 8004146:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004148:	2300      	movs	r3, #0
 800414a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f003 0301 	and.w	r3, r3, #1
 8004154:	2b00      	cmp	r3, #0
 8004156:	d105      	bne.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004160:	2b00      	cmp	r3, #0
 8004162:	d035      	beq.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004164:	4b62      	ldr	r3, [pc, #392]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004166:	2200      	movs	r2, #0
 8004168:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800416a:	f7fc fe85 	bl	8000e78 <HAL_GetTick>
 800416e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004170:	e008      	b.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004172:	f7fc fe81 	bl	8000e78 <HAL_GetTick>
 8004176:	4602      	mov	r2, r0
 8004178:	697b      	ldr	r3, [r7, #20]
 800417a:	1ad3      	subs	r3, r2, r3
 800417c:	2b02      	cmp	r3, #2
 800417e:	d901      	bls.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004180:	2303      	movs	r3, #3
 8004182:	e0b0      	b.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004184:	4b5b      	ldr	r3, [pc, #364]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800418c:	2b00      	cmp	r3, #0
 800418e:	d1f0      	bne.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	019a      	lsls	r2, r3, #6
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	689b      	ldr	r3, [r3, #8]
 800419a:	071b      	lsls	r3, r3, #28
 800419c:	4955      	ldr	r1, [pc, #340]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800419e:	4313      	orrs	r3, r2
 80041a0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80041a4:	4b52      	ldr	r3, [pc, #328]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80041a6:	2201      	movs	r2, #1
 80041a8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80041aa:	f7fc fe65 	bl	8000e78 <HAL_GetTick>
 80041ae:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80041b0:	e008      	b.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80041b2:	f7fc fe61 	bl	8000e78 <HAL_GetTick>
 80041b6:	4602      	mov	r2, r0
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	1ad3      	subs	r3, r2, r3
 80041bc:	2b02      	cmp	r3, #2
 80041be:	d901      	bls.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80041c0:	2303      	movs	r3, #3
 80041c2:	e090      	b.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80041c4:	4b4b      	ldr	r3, [pc, #300]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d0f0      	beq.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f003 0302 	and.w	r3, r3, #2
 80041d8:	2b00      	cmp	r3, #0
 80041da:	f000 8083 	beq.w	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80041de:	2300      	movs	r3, #0
 80041e0:	60fb      	str	r3, [r7, #12]
 80041e2:	4b44      	ldr	r3, [pc, #272]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80041e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e6:	4a43      	ldr	r2, [pc, #268]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80041e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041ec:	6413      	str	r3, [r2, #64]	; 0x40
 80041ee:	4b41      	ldr	r3, [pc, #260]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80041f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041f6:	60fb      	str	r3, [r7, #12]
 80041f8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80041fa:	4b3f      	ldr	r3, [pc, #252]	; (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a3e      	ldr	r2, [pc, #248]	; (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004200:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004204:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004206:	f7fc fe37 	bl	8000e78 <HAL_GetTick>
 800420a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800420c:	e008      	b.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800420e:	f7fc fe33 	bl	8000e78 <HAL_GetTick>
 8004212:	4602      	mov	r2, r0
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	1ad3      	subs	r3, r2, r3
 8004218:	2b02      	cmp	r3, #2
 800421a:	d901      	bls.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800421c:	2303      	movs	r3, #3
 800421e:	e062      	b.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004220:	4b35      	ldr	r3, [pc, #212]	; (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004228:	2b00      	cmp	r3, #0
 800422a:	d0f0      	beq.n	800420e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800422c:	4b31      	ldr	r3, [pc, #196]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800422e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004230:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004234:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d02f      	beq.n	800429c <HAL_RCCEx_PeriphCLKConfig+0x160>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	68db      	ldr	r3, [r3, #12]
 8004240:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004244:	693a      	ldr	r2, [r7, #16]
 8004246:	429a      	cmp	r2, r3
 8004248:	d028      	beq.n	800429c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800424a:	4b2a      	ldr	r3, [pc, #168]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800424c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800424e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004252:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004254:	4b29      	ldr	r3, [pc, #164]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004256:	2201      	movs	r2, #1
 8004258:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800425a:	4b28      	ldr	r3, [pc, #160]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800425c:	2200      	movs	r2, #0
 800425e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004260:	4a24      	ldr	r2, [pc, #144]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004266:	4b23      	ldr	r3, [pc, #140]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004268:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800426a:	f003 0301 	and.w	r3, r3, #1
 800426e:	2b01      	cmp	r3, #1
 8004270:	d114      	bne.n	800429c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004272:	f7fc fe01 	bl	8000e78 <HAL_GetTick>
 8004276:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004278:	e00a      	b.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800427a:	f7fc fdfd 	bl	8000e78 <HAL_GetTick>
 800427e:	4602      	mov	r2, r0
 8004280:	697b      	ldr	r3, [r7, #20]
 8004282:	1ad3      	subs	r3, r2, r3
 8004284:	f241 3288 	movw	r2, #5000	; 0x1388
 8004288:	4293      	cmp	r3, r2
 800428a:	d901      	bls.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800428c:	2303      	movs	r3, #3
 800428e:	e02a      	b.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004290:	4b18      	ldr	r3, [pc, #96]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004292:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004294:	f003 0302 	and.w	r3, r3, #2
 8004298:	2b00      	cmp	r3, #0
 800429a:	d0ee      	beq.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	68db      	ldr	r3, [r3, #12]
 80042a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80042a8:	d10d      	bne.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80042aa:	4b12      	ldr	r3, [pc, #72]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042ac:	689b      	ldr	r3, [r3, #8]
 80042ae:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	68db      	ldr	r3, [r3, #12]
 80042b6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80042ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042be:	490d      	ldr	r1, [pc, #52]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042c0:	4313      	orrs	r3, r2
 80042c2:	608b      	str	r3, [r1, #8]
 80042c4:	e005      	b.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80042c6:	4b0b      	ldr	r3, [pc, #44]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	4a0a      	ldr	r2, [pc, #40]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042cc:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80042d0:	6093      	str	r3, [r2, #8]
 80042d2:	4b08      	ldr	r3, [pc, #32]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042d4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	68db      	ldr	r3, [r3, #12]
 80042da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042de:	4905      	ldr	r1, [pc, #20]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042e0:	4313      	orrs	r3, r2
 80042e2:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80042e4:	2300      	movs	r3, #0
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	3718      	adds	r7, #24
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}
 80042ee:	bf00      	nop
 80042f0:	42470068 	.word	0x42470068
 80042f4:	40023800 	.word	0x40023800
 80042f8:	40007000 	.word	0x40007000
 80042fc:	42470e40 	.word	0x42470e40

08004300 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004300:	b480      	push	{r7}
 8004302:	b087      	sub	sp, #28
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004308:	2300      	movs	r3, #0
 800430a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 800430c:	2300      	movs	r3, #0
 800430e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004310:	2300      	movs	r3, #0
 8004312:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004314:	2300      	movs	r3, #0
 8004316:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2b01      	cmp	r3, #1
 800431c:	d13e      	bne.n	800439c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800431e:	4b23      	ldr	r3, [pc, #140]	; (80043ac <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004320:	689b      	ldr	r3, [r3, #8]
 8004322:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004326:	60fb      	str	r3, [r7, #12]
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d005      	beq.n	800433a <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	2b01      	cmp	r3, #1
 8004332:	d12f      	bne.n	8004394 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004334:	4b1e      	ldr	r3, [pc, #120]	; (80043b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004336:	617b      	str	r3, [r7, #20]
          break;
 8004338:	e02f      	b.n	800439a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800433a:	4b1c      	ldr	r3, [pc, #112]	; (80043ac <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004342:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004346:	d108      	bne.n	800435a <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004348:	4b18      	ldr	r3, [pc, #96]	; (80043ac <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004350:	4a18      	ldr	r2, [pc, #96]	; (80043b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004352:	fbb2 f3f3 	udiv	r3, r2, r3
 8004356:	613b      	str	r3, [r7, #16]
 8004358:	e007      	b.n	800436a <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800435a:	4b14      	ldr	r3, [pc, #80]	; (80043ac <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004362:	4a15      	ldr	r2, [pc, #84]	; (80043b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004364:	fbb2 f3f3 	udiv	r3, r2, r3
 8004368:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800436a:	4b10      	ldr	r3, [pc, #64]	; (80043ac <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800436c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004370:	099b      	lsrs	r3, r3, #6
 8004372:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	fb02 f303 	mul.w	r3, r2, r3
 800437c:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800437e:	4b0b      	ldr	r3, [pc, #44]	; (80043ac <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004380:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004384:	0f1b      	lsrs	r3, r3, #28
 8004386:	f003 0307 	and.w	r3, r3, #7
 800438a:	68ba      	ldr	r2, [r7, #8]
 800438c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004390:	617b      	str	r3, [r7, #20]
          break;
 8004392:	e002      	b.n	800439a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004394:	2300      	movs	r3, #0
 8004396:	617b      	str	r3, [r7, #20]
          break;
 8004398:	bf00      	nop
        }
      }
      break;
 800439a:	bf00      	nop
    }
  }
  return frequency;
 800439c:	697b      	ldr	r3, [r7, #20]
}
 800439e:	4618      	mov	r0, r3
 80043a0:	371c      	adds	r7, #28
 80043a2:	46bd      	mov	sp, r7
 80043a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a8:	4770      	bx	lr
 80043aa:	bf00      	nop
 80043ac:	40023800 	.word	0x40023800
 80043b0:	00bb8000 	.word	0x00bb8000
 80043b4:	007a1200 	.word	0x007a1200
 80043b8:	00f42400 	.word	0x00f42400

080043bc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b082      	sub	sp, #8
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d101      	bne.n	80043ce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80043ca:	2301      	movs	r3, #1
 80043cc:	e07b      	b.n	80044c6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d108      	bne.n	80043e8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80043de:	d009      	beq.n	80043f4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2200      	movs	r2, #0
 80043e4:	61da      	str	r2, [r3, #28]
 80043e6:	e005      	b.n	80043f4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2200      	movs	r2, #0
 80043ec:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2200      	movs	r2, #0
 80043f2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2200      	movs	r2, #0
 80043f8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004400:	b2db      	uxtb	r3, r3
 8004402:	2b00      	cmp	r3, #0
 8004404:	d106      	bne.n	8004414 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2200      	movs	r2, #0
 800440a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800440e:	6878      	ldr	r0, [r7, #4]
 8004410:	f7fc fb96 	bl	8000b40 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2202      	movs	r2, #2
 8004418:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	681a      	ldr	r2, [r3, #0]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800442a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	689b      	ldr	r3, [r3, #8]
 8004438:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800443c:	431a      	orrs	r2, r3
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	68db      	ldr	r3, [r3, #12]
 8004442:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004446:	431a      	orrs	r2, r3
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	691b      	ldr	r3, [r3, #16]
 800444c:	f003 0302 	and.w	r3, r3, #2
 8004450:	431a      	orrs	r2, r3
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	695b      	ldr	r3, [r3, #20]
 8004456:	f003 0301 	and.w	r3, r3, #1
 800445a:	431a      	orrs	r2, r3
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	699b      	ldr	r3, [r3, #24]
 8004460:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004464:	431a      	orrs	r2, r3
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	69db      	ldr	r3, [r3, #28]
 800446a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800446e:	431a      	orrs	r2, r3
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6a1b      	ldr	r3, [r3, #32]
 8004474:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004478:	ea42 0103 	orr.w	r1, r2, r3
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004480:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	430a      	orrs	r2, r1
 800448a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	699b      	ldr	r3, [r3, #24]
 8004490:	0c1b      	lsrs	r3, r3, #16
 8004492:	f003 0104 	and.w	r1, r3, #4
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800449a:	f003 0210 	and.w	r2, r3, #16
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	430a      	orrs	r2, r1
 80044a4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	69da      	ldr	r2, [r3, #28]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80044b4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2200      	movs	r2, #0
 80044ba:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2201      	movs	r2, #1
 80044c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80044c4:	2300      	movs	r3, #0
}
 80044c6:	4618      	mov	r0, r3
 80044c8:	3708      	adds	r7, #8
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}

080044ce <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80044ce:	b580      	push	{r7, lr}
 80044d0:	b082      	sub	sp, #8
 80044d2:	af00      	add	r7, sp, #0
 80044d4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d101      	bne.n	80044e0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80044dc:	2301      	movs	r3, #1
 80044de:	e03f      	b.n	8004560 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044e6:	b2db      	uxtb	r3, r3
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d106      	bne.n	80044fa <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2200      	movs	r2, #0
 80044f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80044f4:	6878      	ldr	r0, [r7, #4]
 80044f6:	f7fc fb6b 	bl	8000bd0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2224      	movs	r2, #36	; 0x24
 80044fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	68da      	ldr	r2, [r3, #12]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004510:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004512:	6878      	ldr	r0, [r7, #4]
 8004514:	f000 f928 	bl	8004768 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	691a      	ldr	r2, [r3, #16]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004526:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	695a      	ldr	r2, [r3, #20]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004536:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	68da      	ldr	r2, [r3, #12]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004546:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2200      	movs	r2, #0
 800454c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2220      	movs	r2, #32
 8004552:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2220      	movs	r2, #32
 800455a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800455e:	2300      	movs	r3, #0
}
 8004560:	4618      	mov	r0, r3
 8004562:	3708      	adds	r7, #8
 8004564:	46bd      	mov	sp, r7
 8004566:	bd80      	pop	{r7, pc}

08004568 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b08a      	sub	sp, #40	; 0x28
 800456c:	af02      	add	r7, sp, #8
 800456e:	60f8      	str	r0, [r7, #12]
 8004570:	60b9      	str	r1, [r7, #8]
 8004572:	603b      	str	r3, [r7, #0]
 8004574:	4613      	mov	r3, r2
 8004576:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004578:	2300      	movs	r3, #0
 800457a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004582:	b2db      	uxtb	r3, r3
 8004584:	2b20      	cmp	r3, #32
 8004586:	d17c      	bne.n	8004682 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d002      	beq.n	8004594 <HAL_UART_Transmit+0x2c>
 800458e:	88fb      	ldrh	r3, [r7, #6]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d101      	bne.n	8004598 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004594:	2301      	movs	r3, #1
 8004596:	e075      	b.n	8004684 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800459e:	2b01      	cmp	r3, #1
 80045a0:	d101      	bne.n	80045a6 <HAL_UART_Transmit+0x3e>
 80045a2:	2302      	movs	r3, #2
 80045a4:	e06e      	b.n	8004684 <HAL_UART_Transmit+0x11c>
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	2201      	movs	r2, #1
 80045aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	2200      	movs	r2, #0
 80045b2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	2221      	movs	r2, #33	; 0x21
 80045b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80045bc:	f7fc fc5c 	bl	8000e78 <HAL_GetTick>
 80045c0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	88fa      	ldrh	r2, [r7, #6]
 80045c6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	88fa      	ldrh	r2, [r7, #6]
 80045cc:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	689b      	ldr	r3, [r3, #8]
 80045d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045d6:	d108      	bne.n	80045ea <HAL_UART_Transmit+0x82>
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	691b      	ldr	r3, [r3, #16]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d104      	bne.n	80045ea <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80045e0:	2300      	movs	r3, #0
 80045e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	61bb      	str	r3, [r7, #24]
 80045e8:	e003      	b.n	80045f2 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80045ea:	68bb      	ldr	r3, [r7, #8]
 80045ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80045ee:	2300      	movs	r3, #0
 80045f0:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	2200      	movs	r2, #0
 80045f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80045fa:	e02a      	b.n	8004652 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	9300      	str	r3, [sp, #0]
 8004600:	697b      	ldr	r3, [r7, #20]
 8004602:	2200      	movs	r2, #0
 8004604:	2180      	movs	r1, #128	; 0x80
 8004606:	68f8      	ldr	r0, [r7, #12]
 8004608:	f000 f840 	bl	800468c <UART_WaitOnFlagUntilTimeout>
 800460c:	4603      	mov	r3, r0
 800460e:	2b00      	cmp	r3, #0
 8004610:	d001      	beq.n	8004616 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004612:	2303      	movs	r3, #3
 8004614:	e036      	b.n	8004684 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004616:	69fb      	ldr	r3, [r7, #28]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d10b      	bne.n	8004634 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800461c:	69bb      	ldr	r3, [r7, #24]
 800461e:	881b      	ldrh	r3, [r3, #0]
 8004620:	461a      	mov	r2, r3
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800462a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800462c:	69bb      	ldr	r3, [r7, #24]
 800462e:	3302      	adds	r3, #2
 8004630:	61bb      	str	r3, [r7, #24]
 8004632:	e007      	b.n	8004644 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004634:	69fb      	ldr	r3, [r7, #28]
 8004636:	781a      	ldrb	r2, [r3, #0]
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800463e:	69fb      	ldr	r3, [r7, #28]
 8004640:	3301      	adds	r3, #1
 8004642:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004648:	b29b      	uxth	r3, r3
 800464a:	3b01      	subs	r3, #1
 800464c:	b29a      	uxth	r2, r3
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004656:	b29b      	uxth	r3, r3
 8004658:	2b00      	cmp	r3, #0
 800465a:	d1cf      	bne.n	80045fc <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	9300      	str	r3, [sp, #0]
 8004660:	697b      	ldr	r3, [r7, #20]
 8004662:	2200      	movs	r2, #0
 8004664:	2140      	movs	r1, #64	; 0x40
 8004666:	68f8      	ldr	r0, [r7, #12]
 8004668:	f000 f810 	bl	800468c <UART_WaitOnFlagUntilTimeout>
 800466c:	4603      	mov	r3, r0
 800466e:	2b00      	cmp	r3, #0
 8004670:	d001      	beq.n	8004676 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004672:	2303      	movs	r3, #3
 8004674:	e006      	b.n	8004684 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	2220      	movs	r2, #32
 800467a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800467e:	2300      	movs	r3, #0
 8004680:	e000      	b.n	8004684 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004682:	2302      	movs	r3, #2
  }
}
 8004684:	4618      	mov	r0, r3
 8004686:	3720      	adds	r7, #32
 8004688:	46bd      	mov	sp, r7
 800468a:	bd80      	pop	{r7, pc}

0800468c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b090      	sub	sp, #64	; 0x40
 8004690:	af00      	add	r7, sp, #0
 8004692:	60f8      	str	r0, [r7, #12]
 8004694:	60b9      	str	r1, [r7, #8]
 8004696:	603b      	str	r3, [r7, #0]
 8004698:	4613      	mov	r3, r2
 800469a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800469c:	e050      	b.n	8004740 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800469e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80046a4:	d04c      	beq.n	8004740 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80046a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d007      	beq.n	80046bc <UART_WaitOnFlagUntilTimeout+0x30>
 80046ac:	f7fc fbe4 	bl	8000e78 <HAL_GetTick>
 80046b0:	4602      	mov	r2, r0
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	1ad3      	subs	r3, r2, r3
 80046b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80046b8:	429a      	cmp	r2, r3
 80046ba:	d241      	bcs.n	8004740 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	330c      	adds	r3, #12
 80046c2:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046c6:	e853 3f00 	ldrex	r3, [r3]
 80046ca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80046cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ce:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80046d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	330c      	adds	r3, #12
 80046da:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80046dc:	637a      	str	r2, [r7, #52]	; 0x34
 80046de:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046e0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80046e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80046e4:	e841 2300 	strex	r3, r2, [r1]
 80046e8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80046ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d1e5      	bne.n	80046bc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	3314      	adds	r3, #20
 80046f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	e853 3f00 	ldrex	r3, [r3]
 80046fe:	613b      	str	r3, [r7, #16]
   return(result);
 8004700:	693b      	ldr	r3, [r7, #16]
 8004702:	f023 0301 	bic.w	r3, r3, #1
 8004706:	63bb      	str	r3, [r7, #56]	; 0x38
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	3314      	adds	r3, #20
 800470e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004710:	623a      	str	r2, [r7, #32]
 8004712:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004714:	69f9      	ldr	r1, [r7, #28]
 8004716:	6a3a      	ldr	r2, [r7, #32]
 8004718:	e841 2300 	strex	r3, r2, [r1]
 800471c:	61bb      	str	r3, [r7, #24]
   return(result);
 800471e:	69bb      	ldr	r3, [r7, #24]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d1e5      	bne.n	80046f0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	2220      	movs	r2, #32
 8004728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	2220      	movs	r2, #32
 8004730:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	2200      	movs	r2, #0
 8004738:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800473c:	2303      	movs	r3, #3
 800473e:	e00f      	b.n	8004760 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	681a      	ldr	r2, [r3, #0]
 8004746:	68bb      	ldr	r3, [r7, #8]
 8004748:	4013      	ands	r3, r2
 800474a:	68ba      	ldr	r2, [r7, #8]
 800474c:	429a      	cmp	r2, r3
 800474e:	bf0c      	ite	eq
 8004750:	2301      	moveq	r3, #1
 8004752:	2300      	movne	r3, #0
 8004754:	b2db      	uxtb	r3, r3
 8004756:	461a      	mov	r2, r3
 8004758:	79fb      	ldrb	r3, [r7, #7]
 800475a:	429a      	cmp	r2, r3
 800475c:	d09f      	beq.n	800469e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800475e:	2300      	movs	r3, #0
}
 8004760:	4618      	mov	r0, r3
 8004762:	3740      	adds	r7, #64	; 0x40
 8004764:	46bd      	mov	sp, r7
 8004766:	bd80      	pop	{r7, pc}

08004768 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004768:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800476c:	b0c0      	sub	sp, #256	; 0x100
 800476e:	af00      	add	r7, sp, #0
 8004770:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004774:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	691b      	ldr	r3, [r3, #16]
 800477c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004780:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004784:	68d9      	ldr	r1, [r3, #12]
 8004786:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800478a:	681a      	ldr	r2, [r3, #0]
 800478c:	ea40 0301 	orr.w	r3, r0, r1
 8004790:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004792:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004796:	689a      	ldr	r2, [r3, #8]
 8004798:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800479c:	691b      	ldr	r3, [r3, #16]
 800479e:	431a      	orrs	r2, r3
 80047a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047a4:	695b      	ldr	r3, [r3, #20]
 80047a6:	431a      	orrs	r2, r3
 80047a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047ac:	69db      	ldr	r3, [r3, #28]
 80047ae:	4313      	orrs	r3, r2
 80047b0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80047b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	68db      	ldr	r3, [r3, #12]
 80047bc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80047c0:	f021 010c 	bic.w	r1, r1, #12
 80047c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047c8:	681a      	ldr	r2, [r3, #0]
 80047ca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80047ce:	430b      	orrs	r3, r1
 80047d0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80047d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	695b      	ldr	r3, [r3, #20]
 80047da:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80047de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047e2:	6999      	ldr	r1, [r3, #24]
 80047e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047e8:	681a      	ldr	r2, [r3, #0]
 80047ea:	ea40 0301 	orr.w	r3, r0, r1
 80047ee:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80047f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047f4:	681a      	ldr	r2, [r3, #0]
 80047f6:	4b8f      	ldr	r3, [pc, #572]	; (8004a34 <UART_SetConfig+0x2cc>)
 80047f8:	429a      	cmp	r2, r3
 80047fa:	d005      	beq.n	8004808 <UART_SetConfig+0xa0>
 80047fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004800:	681a      	ldr	r2, [r3, #0]
 8004802:	4b8d      	ldr	r3, [pc, #564]	; (8004a38 <UART_SetConfig+0x2d0>)
 8004804:	429a      	cmp	r2, r3
 8004806:	d104      	bne.n	8004812 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004808:	f7ff fc84 	bl	8004114 <HAL_RCC_GetPCLK2Freq>
 800480c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004810:	e003      	b.n	800481a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004812:	f7ff fc6b 	bl	80040ec <HAL_RCC_GetPCLK1Freq>
 8004816:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800481a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800481e:	69db      	ldr	r3, [r3, #28]
 8004820:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004824:	f040 810c 	bne.w	8004a40 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004828:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800482c:	2200      	movs	r2, #0
 800482e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004832:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004836:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800483a:	4622      	mov	r2, r4
 800483c:	462b      	mov	r3, r5
 800483e:	1891      	adds	r1, r2, r2
 8004840:	65b9      	str	r1, [r7, #88]	; 0x58
 8004842:	415b      	adcs	r3, r3
 8004844:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004846:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800484a:	4621      	mov	r1, r4
 800484c:	eb12 0801 	adds.w	r8, r2, r1
 8004850:	4629      	mov	r1, r5
 8004852:	eb43 0901 	adc.w	r9, r3, r1
 8004856:	f04f 0200 	mov.w	r2, #0
 800485a:	f04f 0300 	mov.w	r3, #0
 800485e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004862:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004866:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800486a:	4690      	mov	r8, r2
 800486c:	4699      	mov	r9, r3
 800486e:	4623      	mov	r3, r4
 8004870:	eb18 0303 	adds.w	r3, r8, r3
 8004874:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004878:	462b      	mov	r3, r5
 800487a:	eb49 0303 	adc.w	r3, r9, r3
 800487e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004882:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	2200      	movs	r2, #0
 800488a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800488e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004892:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004896:	460b      	mov	r3, r1
 8004898:	18db      	adds	r3, r3, r3
 800489a:	653b      	str	r3, [r7, #80]	; 0x50
 800489c:	4613      	mov	r3, r2
 800489e:	eb42 0303 	adc.w	r3, r2, r3
 80048a2:	657b      	str	r3, [r7, #84]	; 0x54
 80048a4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80048a8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80048ac:	f7fb fc8c 	bl	80001c8 <__aeabi_uldivmod>
 80048b0:	4602      	mov	r2, r0
 80048b2:	460b      	mov	r3, r1
 80048b4:	4b61      	ldr	r3, [pc, #388]	; (8004a3c <UART_SetConfig+0x2d4>)
 80048b6:	fba3 2302 	umull	r2, r3, r3, r2
 80048ba:	095b      	lsrs	r3, r3, #5
 80048bc:	011c      	lsls	r4, r3, #4
 80048be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80048c2:	2200      	movs	r2, #0
 80048c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80048c8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80048cc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80048d0:	4642      	mov	r2, r8
 80048d2:	464b      	mov	r3, r9
 80048d4:	1891      	adds	r1, r2, r2
 80048d6:	64b9      	str	r1, [r7, #72]	; 0x48
 80048d8:	415b      	adcs	r3, r3
 80048da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80048dc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80048e0:	4641      	mov	r1, r8
 80048e2:	eb12 0a01 	adds.w	sl, r2, r1
 80048e6:	4649      	mov	r1, r9
 80048e8:	eb43 0b01 	adc.w	fp, r3, r1
 80048ec:	f04f 0200 	mov.w	r2, #0
 80048f0:	f04f 0300 	mov.w	r3, #0
 80048f4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80048f8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80048fc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004900:	4692      	mov	sl, r2
 8004902:	469b      	mov	fp, r3
 8004904:	4643      	mov	r3, r8
 8004906:	eb1a 0303 	adds.w	r3, sl, r3
 800490a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800490e:	464b      	mov	r3, r9
 8004910:	eb4b 0303 	adc.w	r3, fp, r3
 8004914:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004918:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	2200      	movs	r2, #0
 8004920:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004924:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004928:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800492c:	460b      	mov	r3, r1
 800492e:	18db      	adds	r3, r3, r3
 8004930:	643b      	str	r3, [r7, #64]	; 0x40
 8004932:	4613      	mov	r3, r2
 8004934:	eb42 0303 	adc.w	r3, r2, r3
 8004938:	647b      	str	r3, [r7, #68]	; 0x44
 800493a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800493e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004942:	f7fb fc41 	bl	80001c8 <__aeabi_uldivmod>
 8004946:	4602      	mov	r2, r0
 8004948:	460b      	mov	r3, r1
 800494a:	4611      	mov	r1, r2
 800494c:	4b3b      	ldr	r3, [pc, #236]	; (8004a3c <UART_SetConfig+0x2d4>)
 800494e:	fba3 2301 	umull	r2, r3, r3, r1
 8004952:	095b      	lsrs	r3, r3, #5
 8004954:	2264      	movs	r2, #100	; 0x64
 8004956:	fb02 f303 	mul.w	r3, r2, r3
 800495a:	1acb      	subs	r3, r1, r3
 800495c:	00db      	lsls	r3, r3, #3
 800495e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004962:	4b36      	ldr	r3, [pc, #216]	; (8004a3c <UART_SetConfig+0x2d4>)
 8004964:	fba3 2302 	umull	r2, r3, r3, r2
 8004968:	095b      	lsrs	r3, r3, #5
 800496a:	005b      	lsls	r3, r3, #1
 800496c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004970:	441c      	add	r4, r3
 8004972:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004976:	2200      	movs	r2, #0
 8004978:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800497c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004980:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004984:	4642      	mov	r2, r8
 8004986:	464b      	mov	r3, r9
 8004988:	1891      	adds	r1, r2, r2
 800498a:	63b9      	str	r1, [r7, #56]	; 0x38
 800498c:	415b      	adcs	r3, r3
 800498e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004990:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004994:	4641      	mov	r1, r8
 8004996:	1851      	adds	r1, r2, r1
 8004998:	6339      	str	r1, [r7, #48]	; 0x30
 800499a:	4649      	mov	r1, r9
 800499c:	414b      	adcs	r3, r1
 800499e:	637b      	str	r3, [r7, #52]	; 0x34
 80049a0:	f04f 0200 	mov.w	r2, #0
 80049a4:	f04f 0300 	mov.w	r3, #0
 80049a8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80049ac:	4659      	mov	r1, fp
 80049ae:	00cb      	lsls	r3, r1, #3
 80049b0:	4651      	mov	r1, sl
 80049b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80049b6:	4651      	mov	r1, sl
 80049b8:	00ca      	lsls	r2, r1, #3
 80049ba:	4610      	mov	r0, r2
 80049bc:	4619      	mov	r1, r3
 80049be:	4603      	mov	r3, r0
 80049c0:	4642      	mov	r2, r8
 80049c2:	189b      	adds	r3, r3, r2
 80049c4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80049c8:	464b      	mov	r3, r9
 80049ca:	460a      	mov	r2, r1
 80049cc:	eb42 0303 	adc.w	r3, r2, r3
 80049d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80049d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	2200      	movs	r2, #0
 80049dc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80049e0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80049e4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80049e8:	460b      	mov	r3, r1
 80049ea:	18db      	adds	r3, r3, r3
 80049ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80049ee:	4613      	mov	r3, r2
 80049f0:	eb42 0303 	adc.w	r3, r2, r3
 80049f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80049f6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80049fa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80049fe:	f7fb fbe3 	bl	80001c8 <__aeabi_uldivmod>
 8004a02:	4602      	mov	r2, r0
 8004a04:	460b      	mov	r3, r1
 8004a06:	4b0d      	ldr	r3, [pc, #52]	; (8004a3c <UART_SetConfig+0x2d4>)
 8004a08:	fba3 1302 	umull	r1, r3, r3, r2
 8004a0c:	095b      	lsrs	r3, r3, #5
 8004a0e:	2164      	movs	r1, #100	; 0x64
 8004a10:	fb01 f303 	mul.w	r3, r1, r3
 8004a14:	1ad3      	subs	r3, r2, r3
 8004a16:	00db      	lsls	r3, r3, #3
 8004a18:	3332      	adds	r3, #50	; 0x32
 8004a1a:	4a08      	ldr	r2, [pc, #32]	; (8004a3c <UART_SetConfig+0x2d4>)
 8004a1c:	fba2 2303 	umull	r2, r3, r2, r3
 8004a20:	095b      	lsrs	r3, r3, #5
 8004a22:	f003 0207 	and.w	r2, r3, #7
 8004a26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4422      	add	r2, r4
 8004a2e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004a30:	e106      	b.n	8004c40 <UART_SetConfig+0x4d8>
 8004a32:	bf00      	nop
 8004a34:	40011000 	.word	0x40011000
 8004a38:	40011400 	.word	0x40011400
 8004a3c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004a40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a44:	2200      	movs	r2, #0
 8004a46:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004a4a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004a4e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004a52:	4642      	mov	r2, r8
 8004a54:	464b      	mov	r3, r9
 8004a56:	1891      	adds	r1, r2, r2
 8004a58:	6239      	str	r1, [r7, #32]
 8004a5a:	415b      	adcs	r3, r3
 8004a5c:	627b      	str	r3, [r7, #36]	; 0x24
 8004a5e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004a62:	4641      	mov	r1, r8
 8004a64:	1854      	adds	r4, r2, r1
 8004a66:	4649      	mov	r1, r9
 8004a68:	eb43 0501 	adc.w	r5, r3, r1
 8004a6c:	f04f 0200 	mov.w	r2, #0
 8004a70:	f04f 0300 	mov.w	r3, #0
 8004a74:	00eb      	lsls	r3, r5, #3
 8004a76:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004a7a:	00e2      	lsls	r2, r4, #3
 8004a7c:	4614      	mov	r4, r2
 8004a7e:	461d      	mov	r5, r3
 8004a80:	4643      	mov	r3, r8
 8004a82:	18e3      	adds	r3, r4, r3
 8004a84:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004a88:	464b      	mov	r3, r9
 8004a8a:	eb45 0303 	adc.w	r3, r5, r3
 8004a8e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004a92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004a9e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004aa2:	f04f 0200 	mov.w	r2, #0
 8004aa6:	f04f 0300 	mov.w	r3, #0
 8004aaa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004aae:	4629      	mov	r1, r5
 8004ab0:	008b      	lsls	r3, r1, #2
 8004ab2:	4621      	mov	r1, r4
 8004ab4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ab8:	4621      	mov	r1, r4
 8004aba:	008a      	lsls	r2, r1, #2
 8004abc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004ac0:	f7fb fb82 	bl	80001c8 <__aeabi_uldivmod>
 8004ac4:	4602      	mov	r2, r0
 8004ac6:	460b      	mov	r3, r1
 8004ac8:	4b60      	ldr	r3, [pc, #384]	; (8004c4c <UART_SetConfig+0x4e4>)
 8004aca:	fba3 2302 	umull	r2, r3, r3, r2
 8004ace:	095b      	lsrs	r3, r3, #5
 8004ad0:	011c      	lsls	r4, r3, #4
 8004ad2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004adc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004ae0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004ae4:	4642      	mov	r2, r8
 8004ae6:	464b      	mov	r3, r9
 8004ae8:	1891      	adds	r1, r2, r2
 8004aea:	61b9      	str	r1, [r7, #24]
 8004aec:	415b      	adcs	r3, r3
 8004aee:	61fb      	str	r3, [r7, #28]
 8004af0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004af4:	4641      	mov	r1, r8
 8004af6:	1851      	adds	r1, r2, r1
 8004af8:	6139      	str	r1, [r7, #16]
 8004afa:	4649      	mov	r1, r9
 8004afc:	414b      	adcs	r3, r1
 8004afe:	617b      	str	r3, [r7, #20]
 8004b00:	f04f 0200 	mov.w	r2, #0
 8004b04:	f04f 0300 	mov.w	r3, #0
 8004b08:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004b0c:	4659      	mov	r1, fp
 8004b0e:	00cb      	lsls	r3, r1, #3
 8004b10:	4651      	mov	r1, sl
 8004b12:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b16:	4651      	mov	r1, sl
 8004b18:	00ca      	lsls	r2, r1, #3
 8004b1a:	4610      	mov	r0, r2
 8004b1c:	4619      	mov	r1, r3
 8004b1e:	4603      	mov	r3, r0
 8004b20:	4642      	mov	r2, r8
 8004b22:	189b      	adds	r3, r3, r2
 8004b24:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004b28:	464b      	mov	r3, r9
 8004b2a:	460a      	mov	r2, r1
 8004b2c:	eb42 0303 	adc.w	r3, r2, r3
 8004b30:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004b34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	67bb      	str	r3, [r7, #120]	; 0x78
 8004b3e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004b40:	f04f 0200 	mov.w	r2, #0
 8004b44:	f04f 0300 	mov.w	r3, #0
 8004b48:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004b4c:	4649      	mov	r1, r9
 8004b4e:	008b      	lsls	r3, r1, #2
 8004b50:	4641      	mov	r1, r8
 8004b52:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b56:	4641      	mov	r1, r8
 8004b58:	008a      	lsls	r2, r1, #2
 8004b5a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004b5e:	f7fb fb33 	bl	80001c8 <__aeabi_uldivmod>
 8004b62:	4602      	mov	r2, r0
 8004b64:	460b      	mov	r3, r1
 8004b66:	4611      	mov	r1, r2
 8004b68:	4b38      	ldr	r3, [pc, #224]	; (8004c4c <UART_SetConfig+0x4e4>)
 8004b6a:	fba3 2301 	umull	r2, r3, r3, r1
 8004b6e:	095b      	lsrs	r3, r3, #5
 8004b70:	2264      	movs	r2, #100	; 0x64
 8004b72:	fb02 f303 	mul.w	r3, r2, r3
 8004b76:	1acb      	subs	r3, r1, r3
 8004b78:	011b      	lsls	r3, r3, #4
 8004b7a:	3332      	adds	r3, #50	; 0x32
 8004b7c:	4a33      	ldr	r2, [pc, #204]	; (8004c4c <UART_SetConfig+0x4e4>)
 8004b7e:	fba2 2303 	umull	r2, r3, r2, r3
 8004b82:	095b      	lsrs	r3, r3, #5
 8004b84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b88:	441c      	add	r4, r3
 8004b8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b8e:	2200      	movs	r2, #0
 8004b90:	673b      	str	r3, [r7, #112]	; 0x70
 8004b92:	677a      	str	r2, [r7, #116]	; 0x74
 8004b94:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004b98:	4642      	mov	r2, r8
 8004b9a:	464b      	mov	r3, r9
 8004b9c:	1891      	adds	r1, r2, r2
 8004b9e:	60b9      	str	r1, [r7, #8]
 8004ba0:	415b      	adcs	r3, r3
 8004ba2:	60fb      	str	r3, [r7, #12]
 8004ba4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004ba8:	4641      	mov	r1, r8
 8004baa:	1851      	adds	r1, r2, r1
 8004bac:	6039      	str	r1, [r7, #0]
 8004bae:	4649      	mov	r1, r9
 8004bb0:	414b      	adcs	r3, r1
 8004bb2:	607b      	str	r3, [r7, #4]
 8004bb4:	f04f 0200 	mov.w	r2, #0
 8004bb8:	f04f 0300 	mov.w	r3, #0
 8004bbc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004bc0:	4659      	mov	r1, fp
 8004bc2:	00cb      	lsls	r3, r1, #3
 8004bc4:	4651      	mov	r1, sl
 8004bc6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004bca:	4651      	mov	r1, sl
 8004bcc:	00ca      	lsls	r2, r1, #3
 8004bce:	4610      	mov	r0, r2
 8004bd0:	4619      	mov	r1, r3
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	4642      	mov	r2, r8
 8004bd6:	189b      	adds	r3, r3, r2
 8004bd8:	66bb      	str	r3, [r7, #104]	; 0x68
 8004bda:	464b      	mov	r3, r9
 8004bdc:	460a      	mov	r2, r1
 8004bde:	eb42 0303 	adc.w	r3, r2, r3
 8004be2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004be4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	2200      	movs	r2, #0
 8004bec:	663b      	str	r3, [r7, #96]	; 0x60
 8004bee:	667a      	str	r2, [r7, #100]	; 0x64
 8004bf0:	f04f 0200 	mov.w	r2, #0
 8004bf4:	f04f 0300 	mov.w	r3, #0
 8004bf8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004bfc:	4649      	mov	r1, r9
 8004bfe:	008b      	lsls	r3, r1, #2
 8004c00:	4641      	mov	r1, r8
 8004c02:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c06:	4641      	mov	r1, r8
 8004c08:	008a      	lsls	r2, r1, #2
 8004c0a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004c0e:	f7fb fadb 	bl	80001c8 <__aeabi_uldivmod>
 8004c12:	4602      	mov	r2, r0
 8004c14:	460b      	mov	r3, r1
 8004c16:	4b0d      	ldr	r3, [pc, #52]	; (8004c4c <UART_SetConfig+0x4e4>)
 8004c18:	fba3 1302 	umull	r1, r3, r3, r2
 8004c1c:	095b      	lsrs	r3, r3, #5
 8004c1e:	2164      	movs	r1, #100	; 0x64
 8004c20:	fb01 f303 	mul.w	r3, r1, r3
 8004c24:	1ad3      	subs	r3, r2, r3
 8004c26:	011b      	lsls	r3, r3, #4
 8004c28:	3332      	adds	r3, #50	; 0x32
 8004c2a:	4a08      	ldr	r2, [pc, #32]	; (8004c4c <UART_SetConfig+0x4e4>)
 8004c2c:	fba2 2303 	umull	r2, r3, r2, r3
 8004c30:	095b      	lsrs	r3, r3, #5
 8004c32:	f003 020f 	and.w	r2, r3, #15
 8004c36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4422      	add	r2, r4
 8004c3e:	609a      	str	r2, [r3, #8]
}
 8004c40:	bf00      	nop
 8004c42:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004c46:	46bd      	mov	sp, r7
 8004c48:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c4c:	51eb851f 	.word	0x51eb851f

08004c50 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004c50:	b084      	sub	sp, #16
 8004c52:	b580      	push	{r7, lr}
 8004c54:	b084      	sub	sp, #16
 8004c56:	af00      	add	r7, sp, #0
 8004c58:	6078      	str	r0, [r7, #4]
 8004c5a:	f107 001c 	add.w	r0, r7, #28
 8004c5e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c64:	2b01      	cmp	r3, #1
 8004c66:	d122      	bne.n	8004cae <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c6c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	68db      	ldr	r3, [r3, #12]
 8004c78:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004c7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c80:	687a      	ldr	r2, [r7, #4]
 8004c82:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	68db      	ldr	r3, [r3, #12]
 8004c88:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004c90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c92:	2b01      	cmp	r3, #1
 8004c94:	d105      	bne.n	8004ca2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	68db      	ldr	r3, [r3, #12]
 8004c9a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004ca2:	6878      	ldr	r0, [r7, #4]
 8004ca4:	f000 f9c0 	bl	8005028 <USB_CoreReset>
 8004ca8:	4603      	mov	r3, r0
 8004caa:	73fb      	strb	r3, [r7, #15]
 8004cac:	e01a      	b.n	8004ce4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	68db      	ldr	r3, [r3, #12]
 8004cb2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004cba:	6878      	ldr	r0, [r7, #4]
 8004cbc:	f000 f9b4 	bl	8005028 <USB_CoreReset>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004cc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d106      	bne.n	8004cd8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cce:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	639a      	str	r2, [r3, #56]	; 0x38
 8004cd6:	e005      	b.n	8004ce4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cdc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ce6:	2b01      	cmp	r3, #1
 8004ce8:	d10b      	bne.n	8004d02 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	689b      	ldr	r3, [r3, #8]
 8004cee:	f043 0206 	orr.w	r2, r3, #6
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	689b      	ldr	r3, [r3, #8]
 8004cfa:	f043 0220 	orr.w	r2, r3, #32
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004d02:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d04:	4618      	mov	r0, r3
 8004d06:	3710      	adds	r7, #16
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004d0e:	b004      	add	sp, #16
 8004d10:	4770      	bx	lr

08004d12 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004d12:	b480      	push	{r7}
 8004d14:	b083      	sub	sp, #12
 8004d16:	af00      	add	r7, sp, #0
 8004d18:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	689b      	ldr	r3, [r3, #8]
 8004d1e:	f043 0201 	orr.w	r2, r3, #1
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004d26:	2300      	movs	r3, #0
}
 8004d28:	4618      	mov	r0, r3
 8004d2a:	370c      	adds	r7, #12
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d32:	4770      	bx	lr

08004d34 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004d34:	b480      	push	{r7}
 8004d36:	b083      	sub	sp, #12
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	689b      	ldr	r3, [r3, #8]
 8004d40:	f023 0201 	bic.w	r2, r3, #1
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004d48:	2300      	movs	r3, #0
}
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	370c      	adds	r7, #12
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d54:	4770      	bx	lr

08004d56 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004d56:	b580      	push	{r7, lr}
 8004d58:	b084      	sub	sp, #16
 8004d5a:	af00      	add	r7, sp, #0
 8004d5c:	6078      	str	r0, [r7, #4]
 8004d5e:	460b      	mov	r3, r1
 8004d60:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004d62:	2300      	movs	r3, #0
 8004d64:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	68db      	ldr	r3, [r3, #12]
 8004d6a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004d72:	78fb      	ldrb	r3, [r7, #3]
 8004d74:	2b01      	cmp	r3, #1
 8004d76:	d115      	bne.n	8004da4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	68db      	ldr	r3, [r3, #12]
 8004d7c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004d84:	2001      	movs	r0, #1
 8004d86:	f7fc f883 	bl	8000e90 <HAL_Delay>
      ms++;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	3301      	adds	r3, #1
 8004d8e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004d90:	6878      	ldr	r0, [r7, #4]
 8004d92:	f000 f93a 	bl	800500a <USB_GetMode>
 8004d96:	4603      	mov	r3, r0
 8004d98:	2b01      	cmp	r3, #1
 8004d9a:	d01e      	beq.n	8004dda <USB_SetCurrentMode+0x84>
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	2b31      	cmp	r3, #49	; 0x31
 8004da0:	d9f0      	bls.n	8004d84 <USB_SetCurrentMode+0x2e>
 8004da2:	e01a      	b.n	8004dda <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004da4:	78fb      	ldrb	r3, [r7, #3]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d115      	bne.n	8004dd6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	68db      	ldr	r3, [r3, #12]
 8004dae:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004db6:	2001      	movs	r0, #1
 8004db8:	f7fc f86a 	bl	8000e90 <HAL_Delay>
      ms++;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	3301      	adds	r3, #1
 8004dc0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004dc2:	6878      	ldr	r0, [r7, #4]
 8004dc4:	f000 f921 	bl	800500a <USB_GetMode>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d005      	beq.n	8004dda <USB_SetCurrentMode+0x84>
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	2b31      	cmp	r3, #49	; 0x31
 8004dd2:	d9f0      	bls.n	8004db6 <USB_SetCurrentMode+0x60>
 8004dd4:	e001      	b.n	8004dda <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	e005      	b.n	8004de6 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	2b32      	cmp	r3, #50	; 0x32
 8004dde:	d101      	bne.n	8004de4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004de0:	2301      	movs	r3, #1
 8004de2:	e000      	b.n	8004de6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004de4:	2300      	movs	r3, #0
}
 8004de6:	4618      	mov	r0, r3
 8004de8:	3710      	adds	r7, #16
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bd80      	pop	{r7, pc}
	...

08004df0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004df0:	b480      	push	{r7}
 8004df2:	b085      	sub	sp, #20
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
 8004df8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	3301      	adds	r3, #1
 8004e02:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	4a13      	ldr	r2, [pc, #76]	; (8004e54 <USB_FlushTxFifo+0x64>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d901      	bls.n	8004e10 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004e0c:	2303      	movs	r3, #3
 8004e0e:	e01b      	b.n	8004e48 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	691b      	ldr	r3, [r3, #16]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	daf2      	bge.n	8004dfe <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004e18:	2300      	movs	r3, #0
 8004e1a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	019b      	lsls	r3, r3, #6
 8004e20:	f043 0220 	orr.w	r2, r3, #32
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	3301      	adds	r3, #1
 8004e2c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	4a08      	ldr	r2, [pc, #32]	; (8004e54 <USB_FlushTxFifo+0x64>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d901      	bls.n	8004e3a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004e36:	2303      	movs	r3, #3
 8004e38:	e006      	b.n	8004e48 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	691b      	ldr	r3, [r3, #16]
 8004e3e:	f003 0320 	and.w	r3, r3, #32
 8004e42:	2b20      	cmp	r3, #32
 8004e44:	d0f0      	beq.n	8004e28 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004e46:	2300      	movs	r3, #0
}
 8004e48:	4618      	mov	r0, r3
 8004e4a:	3714      	adds	r7, #20
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e52:	4770      	bx	lr
 8004e54:	00030d40 	.word	0x00030d40

08004e58 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004e58:	b480      	push	{r7}
 8004e5a:	b085      	sub	sp, #20
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004e60:	2300      	movs	r3, #0
 8004e62:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	3301      	adds	r3, #1
 8004e68:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	4a11      	ldr	r2, [pc, #68]	; (8004eb4 <USB_FlushRxFifo+0x5c>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d901      	bls.n	8004e76 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004e72:	2303      	movs	r3, #3
 8004e74:	e018      	b.n	8004ea8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	691b      	ldr	r3, [r3, #16]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	daf2      	bge.n	8004e64 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004e7e:	2300      	movs	r3, #0
 8004e80:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2210      	movs	r2, #16
 8004e86:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	3301      	adds	r3, #1
 8004e8c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	4a08      	ldr	r2, [pc, #32]	; (8004eb4 <USB_FlushRxFifo+0x5c>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d901      	bls.n	8004e9a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004e96:	2303      	movs	r3, #3
 8004e98:	e006      	b.n	8004ea8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	691b      	ldr	r3, [r3, #16]
 8004e9e:	f003 0310 	and.w	r3, r3, #16
 8004ea2:	2b10      	cmp	r3, #16
 8004ea4:	d0f0      	beq.n	8004e88 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004ea6:	2300      	movs	r3, #0
}
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	3714      	adds	r7, #20
 8004eac:	46bd      	mov	sp, r7
 8004eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb2:	4770      	bx	lr
 8004eb4:	00030d40 	.word	0x00030d40

08004eb8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b089      	sub	sp, #36	; 0x24
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	60f8      	str	r0, [r7, #12]
 8004ec0:	60b9      	str	r1, [r7, #8]
 8004ec2:	4611      	mov	r1, r2
 8004ec4:	461a      	mov	r2, r3
 8004ec6:	460b      	mov	r3, r1
 8004ec8:	71fb      	strb	r3, [r7, #7]
 8004eca:	4613      	mov	r3, r2
 8004ecc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004ed6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d123      	bne.n	8004f26 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004ede:	88bb      	ldrh	r3, [r7, #4]
 8004ee0:	3303      	adds	r3, #3
 8004ee2:	089b      	lsrs	r3, r3, #2
 8004ee4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	61bb      	str	r3, [r7, #24]
 8004eea:	e018      	b.n	8004f1e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004eec:	79fb      	ldrb	r3, [r7, #7]
 8004eee:	031a      	lsls	r2, r3, #12
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	4413      	add	r3, r2
 8004ef4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ef8:	461a      	mov	r2, r3
 8004efa:	69fb      	ldr	r3, [r7, #28]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004f00:	69fb      	ldr	r3, [r7, #28]
 8004f02:	3301      	adds	r3, #1
 8004f04:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004f06:	69fb      	ldr	r3, [r7, #28]
 8004f08:	3301      	adds	r3, #1
 8004f0a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004f0c:	69fb      	ldr	r3, [r7, #28]
 8004f0e:	3301      	adds	r3, #1
 8004f10:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004f12:	69fb      	ldr	r3, [r7, #28]
 8004f14:	3301      	adds	r3, #1
 8004f16:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004f18:	69bb      	ldr	r3, [r7, #24]
 8004f1a:	3301      	adds	r3, #1
 8004f1c:	61bb      	str	r3, [r7, #24]
 8004f1e:	69ba      	ldr	r2, [r7, #24]
 8004f20:	693b      	ldr	r3, [r7, #16]
 8004f22:	429a      	cmp	r2, r3
 8004f24:	d3e2      	bcc.n	8004eec <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004f26:	2300      	movs	r3, #0
}
 8004f28:	4618      	mov	r0, r3
 8004f2a:	3724      	adds	r7, #36	; 0x24
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f32:	4770      	bx	lr

08004f34 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004f34:	b480      	push	{r7}
 8004f36:	b08b      	sub	sp, #44	; 0x2c
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	60f8      	str	r0, [r7, #12]
 8004f3c:	60b9      	str	r1, [r7, #8]
 8004f3e:	4613      	mov	r3, r2
 8004f40:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004f4a:	88fb      	ldrh	r3, [r7, #6]
 8004f4c:	089b      	lsrs	r3, r3, #2
 8004f4e:	b29b      	uxth	r3, r3
 8004f50:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004f52:	88fb      	ldrh	r3, [r7, #6]
 8004f54:	f003 0303 	and.w	r3, r3, #3
 8004f58:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	623b      	str	r3, [r7, #32]
 8004f5e:	e014      	b.n	8004f8a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004f60:	69bb      	ldr	r3, [r7, #24]
 8004f62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f66:	681a      	ldr	r2, [r3, #0]
 8004f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f6a:	601a      	str	r2, [r3, #0]
    pDest++;
 8004f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f6e:	3301      	adds	r3, #1
 8004f70:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f74:	3301      	adds	r3, #1
 8004f76:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f7a:	3301      	adds	r3, #1
 8004f7c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f80:	3301      	adds	r3, #1
 8004f82:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004f84:	6a3b      	ldr	r3, [r7, #32]
 8004f86:	3301      	adds	r3, #1
 8004f88:	623b      	str	r3, [r7, #32]
 8004f8a:	6a3a      	ldr	r2, [r7, #32]
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	429a      	cmp	r2, r3
 8004f90:	d3e6      	bcc.n	8004f60 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004f92:	8bfb      	ldrh	r3, [r7, #30]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d01e      	beq.n	8004fd6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004f98:	2300      	movs	r3, #0
 8004f9a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004f9c:	69bb      	ldr	r3, [r7, #24]
 8004f9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004fa2:	461a      	mov	r2, r3
 8004fa4:	f107 0310 	add.w	r3, r7, #16
 8004fa8:	6812      	ldr	r2, [r2, #0]
 8004faa:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004fac:	693a      	ldr	r2, [r7, #16]
 8004fae:	6a3b      	ldr	r3, [r7, #32]
 8004fb0:	b2db      	uxtb	r3, r3
 8004fb2:	00db      	lsls	r3, r3, #3
 8004fb4:	fa22 f303 	lsr.w	r3, r2, r3
 8004fb8:	b2da      	uxtb	r2, r3
 8004fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fbc:	701a      	strb	r2, [r3, #0]
      i++;
 8004fbe:	6a3b      	ldr	r3, [r7, #32]
 8004fc0:	3301      	adds	r3, #1
 8004fc2:	623b      	str	r3, [r7, #32]
      pDest++;
 8004fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc6:	3301      	adds	r3, #1
 8004fc8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004fca:	8bfb      	ldrh	r3, [r7, #30]
 8004fcc:	3b01      	subs	r3, #1
 8004fce:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004fd0:	8bfb      	ldrh	r3, [r7, #30]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d1ea      	bne.n	8004fac <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004fd8:	4618      	mov	r0, r3
 8004fda:	372c      	adds	r7, #44	; 0x2c
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe2:	4770      	bx	lr

08004fe4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	b085      	sub	sp, #20
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	695b      	ldr	r3, [r3, #20]
 8004ff0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	699b      	ldr	r3, [r3, #24]
 8004ff6:	68fa      	ldr	r2, [r7, #12]
 8004ff8:	4013      	ands	r3, r2
 8004ffa:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
}
 8004ffe:	4618      	mov	r0, r3
 8005000:	3714      	adds	r7, #20
 8005002:	46bd      	mov	sp, r7
 8005004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005008:	4770      	bx	lr

0800500a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800500a:	b480      	push	{r7}
 800500c:	b083      	sub	sp, #12
 800500e:	af00      	add	r7, sp, #0
 8005010:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	695b      	ldr	r3, [r3, #20]
 8005016:	f003 0301 	and.w	r3, r3, #1
}
 800501a:	4618      	mov	r0, r3
 800501c:	370c      	adds	r7, #12
 800501e:	46bd      	mov	sp, r7
 8005020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005024:	4770      	bx	lr
	...

08005028 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005028:	b480      	push	{r7}
 800502a:	b085      	sub	sp, #20
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005030:	2300      	movs	r3, #0
 8005032:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	3301      	adds	r3, #1
 8005038:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	4a13      	ldr	r2, [pc, #76]	; (800508c <USB_CoreReset+0x64>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d901      	bls.n	8005046 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005042:	2303      	movs	r3, #3
 8005044:	e01b      	b.n	800507e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	691b      	ldr	r3, [r3, #16]
 800504a:	2b00      	cmp	r3, #0
 800504c:	daf2      	bge.n	8005034 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800504e:	2300      	movs	r3, #0
 8005050:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	691b      	ldr	r3, [r3, #16]
 8005056:	f043 0201 	orr.w	r2, r3, #1
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	3301      	adds	r3, #1
 8005062:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	4a09      	ldr	r2, [pc, #36]	; (800508c <USB_CoreReset+0x64>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d901      	bls.n	8005070 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800506c:	2303      	movs	r3, #3
 800506e:	e006      	b.n	800507e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	691b      	ldr	r3, [r3, #16]
 8005074:	f003 0301 	and.w	r3, r3, #1
 8005078:	2b01      	cmp	r3, #1
 800507a:	d0f0      	beq.n	800505e <USB_CoreReset+0x36>

  return HAL_OK;
 800507c:	2300      	movs	r3, #0
}
 800507e:	4618      	mov	r0, r3
 8005080:	3714      	adds	r7, #20
 8005082:	46bd      	mov	sp, r7
 8005084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005088:	4770      	bx	lr
 800508a:	bf00      	nop
 800508c:	00030d40 	.word	0x00030d40

08005090 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005090:	b084      	sub	sp, #16
 8005092:	b580      	push	{r7, lr}
 8005094:	b086      	sub	sp, #24
 8005096:	af00      	add	r7, sp, #0
 8005098:	6078      	str	r0, [r7, #4]
 800509a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800509e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80050a2:	2300      	movs	r3, #0
 80050a4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80050b0:	461a      	mov	r2, r3
 80050b2:	2300      	movs	r3, #0
 80050b4:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ba:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050c6:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050d2:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d018      	beq.n	8005118 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80050e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050e8:	2b01      	cmp	r3, #1
 80050ea:	d10a      	bne.n	8005102 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	68fa      	ldr	r2, [r7, #12]
 80050f6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80050fa:	f043 0304 	orr.w	r3, r3, #4
 80050fe:	6013      	str	r3, [r2, #0]
 8005100:	e014      	b.n	800512c <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	68fa      	ldr	r2, [r7, #12]
 800510c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005110:	f023 0304 	bic.w	r3, r3, #4
 8005114:	6013      	str	r3, [r2, #0]
 8005116:	e009      	b.n	800512c <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	68fa      	ldr	r2, [r7, #12]
 8005122:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005126:	f023 0304 	bic.w	r3, r3, #4
 800512a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800512c:	2110      	movs	r1, #16
 800512e:	6878      	ldr	r0, [r7, #4]
 8005130:	f7ff fe5e 	bl	8004df0 <USB_FlushTxFifo>
 8005134:	4603      	mov	r3, r0
 8005136:	2b00      	cmp	r3, #0
 8005138:	d001      	beq.n	800513e <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 800513a:	2301      	movs	r3, #1
 800513c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800513e:	6878      	ldr	r0, [r7, #4]
 8005140:	f7ff fe8a 	bl	8004e58 <USB_FlushRxFifo>
 8005144:	4603      	mov	r3, r0
 8005146:	2b00      	cmp	r3, #0
 8005148:	d001      	beq.n	800514e <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 800514a:	2301      	movs	r3, #1
 800514c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800514e:	2300      	movs	r3, #0
 8005150:	613b      	str	r3, [r7, #16]
 8005152:	e015      	b.n	8005180 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8005154:	693b      	ldr	r3, [r7, #16]
 8005156:	015a      	lsls	r2, r3, #5
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	4413      	add	r3, r2
 800515c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005160:	461a      	mov	r2, r3
 8005162:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005166:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005168:	693b      	ldr	r3, [r7, #16]
 800516a:	015a      	lsls	r2, r3, #5
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	4413      	add	r3, r2
 8005170:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005174:	461a      	mov	r2, r3
 8005176:	2300      	movs	r3, #0
 8005178:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800517a:	693b      	ldr	r3, [r7, #16]
 800517c:	3301      	adds	r3, #1
 800517e:	613b      	str	r3, [r7, #16]
 8005180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005182:	693a      	ldr	r2, [r7, #16]
 8005184:	429a      	cmp	r2, r3
 8005186:	d3e5      	bcc.n	8005154 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2200      	movs	r2, #0
 800518c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005194:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800519a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d00b      	beq.n	80051ba <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80051a8:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	4a13      	ldr	r2, [pc, #76]	; (80051fc <USB_HostInit+0x16c>)
 80051ae:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	4a13      	ldr	r2, [pc, #76]	; (8005200 <USB_HostInit+0x170>)
 80051b4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80051b8:	e009      	b.n	80051ce <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2280      	movs	r2, #128	; 0x80
 80051be:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	4a10      	ldr	r2, [pc, #64]	; (8005204 <USB_HostInit+0x174>)
 80051c4:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	4a0f      	ldr	r2, [pc, #60]	; (8005208 <USB_HostInit+0x178>)
 80051ca:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80051ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d105      	bne.n	80051e0 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	699b      	ldr	r3, [r3, #24]
 80051d8:	f043 0210 	orr.w	r2, r3, #16
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	699a      	ldr	r2, [r3, #24]
 80051e4:	4b09      	ldr	r3, [pc, #36]	; (800520c <USB_HostInit+0x17c>)
 80051e6:	4313      	orrs	r3, r2
 80051e8:	687a      	ldr	r2, [r7, #4]
 80051ea:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 80051ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	3718      	adds	r7, #24
 80051f2:	46bd      	mov	sp, r7
 80051f4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80051f8:	b004      	add	sp, #16
 80051fa:	4770      	bx	lr
 80051fc:	01000200 	.word	0x01000200
 8005200:	00e00300 	.word	0x00e00300
 8005204:	00600080 	.word	0x00600080
 8005208:	004000e0 	.word	0x004000e0
 800520c:	a3200008 	.word	0xa3200008

08005210 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005210:	b480      	push	{r7}
 8005212:	b085      	sub	sp, #20
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
 8005218:	460b      	mov	r3, r1
 800521a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	68fa      	ldr	r2, [r7, #12]
 800522a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800522e:	f023 0303 	bic.w	r3, r3, #3
 8005232:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800523a:	681a      	ldr	r2, [r3, #0]
 800523c:	78fb      	ldrb	r3, [r7, #3]
 800523e:	f003 0303 	and.w	r3, r3, #3
 8005242:	68f9      	ldr	r1, [r7, #12]
 8005244:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005248:	4313      	orrs	r3, r2
 800524a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800524c:	78fb      	ldrb	r3, [r7, #3]
 800524e:	2b01      	cmp	r3, #1
 8005250:	d107      	bne.n	8005262 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005258:	461a      	mov	r2, r3
 800525a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800525e:	6053      	str	r3, [r2, #4]
 8005260:	e009      	b.n	8005276 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8005262:	78fb      	ldrb	r3, [r7, #3]
 8005264:	2b02      	cmp	r3, #2
 8005266:	d106      	bne.n	8005276 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800526e:	461a      	mov	r2, r3
 8005270:	f241 7370 	movw	r3, #6000	; 0x1770
 8005274:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8005276:	2300      	movs	r3, #0
}
 8005278:	4618      	mov	r0, r3
 800527a:	3714      	adds	r7, #20
 800527c:	46bd      	mov	sp, r7
 800527e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005282:	4770      	bx	lr

08005284 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005284:	b480      	push	{r7}
 8005286:	b085      	sub	sp, #20
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
 800528c:	460b      	mov	r3, r1
 800528e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005294:	2300      	movs	r3, #0
 8005296:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80052a8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d109      	bne.n	80052c8 <USB_DriveVbus+0x44>
 80052b4:	78fb      	ldrb	r3, [r7, #3]
 80052b6:	2b01      	cmp	r3, #1
 80052b8:	d106      	bne.n	80052c8 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	68fa      	ldr	r2, [r7, #12]
 80052be:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80052c2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80052c6:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80052c8:	68bb      	ldr	r3, [r7, #8]
 80052ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80052ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052d2:	d109      	bne.n	80052e8 <USB_DriveVbus+0x64>
 80052d4:	78fb      	ldrb	r3, [r7, #3]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d106      	bne.n	80052e8 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80052da:	68bb      	ldr	r3, [r7, #8]
 80052dc:	68fa      	ldr	r2, [r7, #12]
 80052de:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80052e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80052e6:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80052e8:	2300      	movs	r3, #0
}
 80052ea:	4618      	mov	r0, r3
 80052ec:	3714      	adds	r7, #20
 80052ee:	46bd      	mov	sp, r7
 80052f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f4:	4770      	bx	lr

080052f6 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80052f6:	b480      	push	{r7}
 80052f8:	b085      	sub	sp, #20
 80052fa:	af00      	add	r7, sp, #0
 80052fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005302:	2300      	movs	r3, #0
 8005304:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	0c5b      	lsrs	r3, r3, #17
 8005314:	f003 0303 	and.w	r3, r3, #3
}
 8005318:	4618      	mov	r0, r3
 800531a:	3714      	adds	r7, #20
 800531c:	46bd      	mov	sp, r7
 800531e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005322:	4770      	bx	lr

08005324 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8005324:	b480      	push	{r7}
 8005326:	b085      	sub	sp, #20
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005336:	689b      	ldr	r3, [r3, #8]
 8005338:	b29b      	uxth	r3, r3
}
 800533a:	4618      	mov	r0, r3
 800533c:	3714      	adds	r7, #20
 800533e:	46bd      	mov	sp, r7
 8005340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005344:	4770      	bx	lr
	...

08005348 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b088      	sub	sp, #32
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
 8005350:	4608      	mov	r0, r1
 8005352:	4611      	mov	r1, r2
 8005354:	461a      	mov	r2, r3
 8005356:	4603      	mov	r3, r0
 8005358:	70fb      	strb	r3, [r7, #3]
 800535a:	460b      	mov	r3, r1
 800535c:	70bb      	strb	r3, [r7, #2]
 800535e:	4613      	mov	r3, r2
 8005360:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005362:	2300      	movs	r3, #0
 8005364:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800536a:	78fb      	ldrb	r3, [r7, #3]
 800536c:	015a      	lsls	r2, r3, #5
 800536e:	693b      	ldr	r3, [r7, #16]
 8005370:	4413      	add	r3, r2
 8005372:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005376:	461a      	mov	r2, r3
 8005378:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800537c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800537e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005382:	2b03      	cmp	r3, #3
 8005384:	d87e      	bhi.n	8005484 <USB_HC_Init+0x13c>
 8005386:	a201      	add	r2, pc, #4	; (adr r2, 800538c <USB_HC_Init+0x44>)
 8005388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800538c:	0800539d 	.word	0x0800539d
 8005390:	08005447 	.word	0x08005447
 8005394:	0800539d 	.word	0x0800539d
 8005398:	08005409 	.word	0x08005409
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800539c:	78fb      	ldrb	r3, [r7, #3]
 800539e:	015a      	lsls	r2, r3, #5
 80053a0:	693b      	ldr	r3, [r7, #16]
 80053a2:	4413      	add	r3, r2
 80053a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053a8:	461a      	mov	r2, r3
 80053aa:	f240 439d 	movw	r3, #1181	; 0x49d
 80053ae:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80053b0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	da10      	bge.n	80053da <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80053b8:	78fb      	ldrb	r3, [r7, #3]
 80053ba:	015a      	lsls	r2, r3, #5
 80053bc:	693b      	ldr	r3, [r7, #16]
 80053be:	4413      	add	r3, r2
 80053c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053c4:	68db      	ldr	r3, [r3, #12]
 80053c6:	78fa      	ldrb	r2, [r7, #3]
 80053c8:	0151      	lsls	r1, r2, #5
 80053ca:	693a      	ldr	r2, [r7, #16]
 80053cc:	440a      	add	r2, r1
 80053ce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80053d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053d6:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 80053d8:	e057      	b.n	800548a <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d051      	beq.n	800548a <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80053e6:	78fb      	ldrb	r3, [r7, #3]
 80053e8:	015a      	lsls	r2, r3, #5
 80053ea:	693b      	ldr	r3, [r7, #16]
 80053ec:	4413      	add	r3, r2
 80053ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053f2:	68db      	ldr	r3, [r3, #12]
 80053f4:	78fa      	ldrb	r2, [r7, #3]
 80053f6:	0151      	lsls	r1, r2, #5
 80053f8:	693a      	ldr	r2, [r7, #16]
 80053fa:	440a      	add	r2, r1
 80053fc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005400:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005404:	60d3      	str	r3, [r2, #12]
      break;
 8005406:	e040      	b.n	800548a <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005408:	78fb      	ldrb	r3, [r7, #3]
 800540a:	015a      	lsls	r2, r3, #5
 800540c:	693b      	ldr	r3, [r7, #16]
 800540e:	4413      	add	r3, r2
 8005410:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005414:	461a      	mov	r2, r3
 8005416:	f240 639d 	movw	r3, #1693	; 0x69d
 800541a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800541c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005420:	2b00      	cmp	r3, #0
 8005422:	da34      	bge.n	800548e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005424:	78fb      	ldrb	r3, [r7, #3]
 8005426:	015a      	lsls	r2, r3, #5
 8005428:	693b      	ldr	r3, [r7, #16]
 800542a:	4413      	add	r3, r2
 800542c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005430:	68db      	ldr	r3, [r3, #12]
 8005432:	78fa      	ldrb	r2, [r7, #3]
 8005434:	0151      	lsls	r1, r2, #5
 8005436:	693a      	ldr	r2, [r7, #16]
 8005438:	440a      	add	r2, r1
 800543a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800543e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005442:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005444:	e023      	b.n	800548e <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005446:	78fb      	ldrb	r3, [r7, #3]
 8005448:	015a      	lsls	r2, r3, #5
 800544a:	693b      	ldr	r3, [r7, #16]
 800544c:	4413      	add	r3, r2
 800544e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005452:	461a      	mov	r2, r3
 8005454:	f240 2325 	movw	r3, #549	; 0x225
 8005458:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800545a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800545e:	2b00      	cmp	r3, #0
 8005460:	da17      	bge.n	8005492 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005462:	78fb      	ldrb	r3, [r7, #3]
 8005464:	015a      	lsls	r2, r3, #5
 8005466:	693b      	ldr	r3, [r7, #16]
 8005468:	4413      	add	r3, r2
 800546a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800546e:	68db      	ldr	r3, [r3, #12]
 8005470:	78fa      	ldrb	r2, [r7, #3]
 8005472:	0151      	lsls	r1, r2, #5
 8005474:	693a      	ldr	r2, [r7, #16]
 8005476:	440a      	add	r2, r1
 8005478:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800547c:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8005480:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005482:	e006      	b.n	8005492 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8005484:	2301      	movs	r3, #1
 8005486:	77fb      	strb	r3, [r7, #31]
      break;
 8005488:	e004      	b.n	8005494 <USB_HC_Init+0x14c>
      break;
 800548a:	bf00      	nop
 800548c:	e002      	b.n	8005494 <USB_HC_Init+0x14c>
      break;
 800548e:	bf00      	nop
 8005490:	e000      	b.n	8005494 <USB_HC_Init+0x14c>
      break;
 8005492:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8005494:	78fb      	ldrb	r3, [r7, #3]
 8005496:	015a      	lsls	r2, r3, #5
 8005498:	693b      	ldr	r3, [r7, #16]
 800549a:	4413      	add	r3, r2
 800549c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054a0:	68db      	ldr	r3, [r3, #12]
 80054a2:	78fa      	ldrb	r2, [r7, #3]
 80054a4:	0151      	lsls	r1, r2, #5
 80054a6:	693a      	ldr	r2, [r7, #16]
 80054a8:	440a      	add	r2, r1
 80054aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80054ae:	f043 0302 	orr.w	r3, r3, #2
 80054b2:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80054b4:	693b      	ldr	r3, [r7, #16]
 80054b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80054ba:	699a      	ldr	r2, [r3, #24]
 80054bc:	78fb      	ldrb	r3, [r7, #3]
 80054be:	f003 030f 	and.w	r3, r3, #15
 80054c2:	2101      	movs	r1, #1
 80054c4:	fa01 f303 	lsl.w	r3, r1, r3
 80054c8:	6939      	ldr	r1, [r7, #16]
 80054ca:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80054ce:	4313      	orrs	r3, r2
 80054d0:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	699b      	ldr	r3, [r3, #24]
 80054d6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80054de:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	da03      	bge.n	80054ee <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80054e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80054ea:	61bb      	str	r3, [r7, #24]
 80054ec:	e001      	b.n	80054f2 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 80054ee:	2300      	movs	r3, #0
 80054f0:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80054f2:	6878      	ldr	r0, [r7, #4]
 80054f4:	f7ff feff 	bl	80052f6 <USB_GetHostSpeed>
 80054f8:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80054fa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80054fe:	2b02      	cmp	r3, #2
 8005500:	d106      	bne.n	8005510 <USB_HC_Init+0x1c8>
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	2b02      	cmp	r3, #2
 8005506:	d003      	beq.n	8005510 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8005508:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800550c:	617b      	str	r3, [r7, #20]
 800550e:	e001      	b.n	8005514 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005510:	2300      	movs	r3, #0
 8005512:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005514:	787b      	ldrb	r3, [r7, #1]
 8005516:	059b      	lsls	r3, r3, #22
 8005518:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800551c:	78bb      	ldrb	r3, [r7, #2]
 800551e:	02db      	lsls	r3, r3, #11
 8005520:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005524:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005526:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800552a:	049b      	lsls	r3, r3, #18
 800552c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005530:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005532:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005534:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005538:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800553a:	69bb      	ldr	r3, [r7, #24]
 800553c:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800553e:	78fb      	ldrb	r3, [r7, #3]
 8005540:	0159      	lsls	r1, r3, #5
 8005542:	693b      	ldr	r3, [r7, #16]
 8005544:	440b      	add	r3, r1
 8005546:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800554a:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800554c:	697b      	ldr	r3, [r7, #20]
 800554e:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005550:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8005552:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005556:	2b03      	cmp	r3, #3
 8005558:	d003      	beq.n	8005562 <USB_HC_Init+0x21a>
 800555a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800555e:	2b01      	cmp	r3, #1
 8005560:	d10f      	bne.n	8005582 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8005562:	78fb      	ldrb	r3, [r7, #3]
 8005564:	015a      	lsls	r2, r3, #5
 8005566:	693b      	ldr	r3, [r7, #16]
 8005568:	4413      	add	r3, r2
 800556a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	78fa      	ldrb	r2, [r7, #3]
 8005572:	0151      	lsls	r1, r2, #5
 8005574:	693a      	ldr	r2, [r7, #16]
 8005576:	440a      	add	r2, r1
 8005578:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800557c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005580:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8005582:	7ffb      	ldrb	r3, [r7, #31]
}
 8005584:	4618      	mov	r0, r3
 8005586:	3720      	adds	r7, #32
 8005588:	46bd      	mov	sp, r7
 800558a:	bd80      	pop	{r7, pc}

0800558c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b08c      	sub	sp, #48	; 0x30
 8005590:	af02      	add	r7, sp, #8
 8005592:	60f8      	str	r0, [r7, #12]
 8005594:	60b9      	str	r1, [r7, #8]
 8005596:	4613      	mov	r3, r2
 8005598:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800559e:	68bb      	ldr	r3, [r7, #8]
 80055a0:	785b      	ldrb	r3, [r3, #1]
 80055a2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80055a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80055a8:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d02d      	beq.n	8005612 <USB_HC_StartXfer+0x86>
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	791b      	ldrb	r3, [r3, #4]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d129      	bne.n	8005612 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 80055be:	79fb      	ldrb	r3, [r7, #7]
 80055c0:	2b01      	cmp	r3, #1
 80055c2:	d117      	bne.n	80055f4 <USB_HC_StartXfer+0x68>
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	79db      	ldrb	r3, [r3, #7]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d003      	beq.n	80055d4 <USB_HC_StartXfer+0x48>
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	79db      	ldrb	r3, [r3, #7]
 80055d0:	2b02      	cmp	r3, #2
 80055d2:	d10f      	bne.n	80055f4 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 80055d4:	69fb      	ldr	r3, [r7, #28]
 80055d6:	015a      	lsls	r2, r3, #5
 80055d8:	6a3b      	ldr	r3, [r7, #32]
 80055da:	4413      	add	r3, r2
 80055dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055e0:	68db      	ldr	r3, [r3, #12]
 80055e2:	69fa      	ldr	r2, [r7, #28]
 80055e4:	0151      	lsls	r1, r2, #5
 80055e6:	6a3a      	ldr	r2, [r7, #32]
 80055e8:	440a      	add	r2, r1
 80055ea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80055ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055f2:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 80055f4:	79fb      	ldrb	r3, [r7, #7]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d10b      	bne.n	8005612 <USB_HC_StartXfer+0x86>
 80055fa:	68bb      	ldr	r3, [r7, #8]
 80055fc:	795b      	ldrb	r3, [r3, #5]
 80055fe:	2b01      	cmp	r3, #1
 8005600:	d107      	bne.n	8005612 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8005602:	68bb      	ldr	r3, [r7, #8]
 8005604:	785b      	ldrb	r3, [r3, #1]
 8005606:	4619      	mov	r1, r3
 8005608:	68f8      	ldr	r0, [r7, #12]
 800560a:	f000 fa0f 	bl	8005a2c <USB_DoPing>
      return HAL_OK;
 800560e:	2300      	movs	r3, #0
 8005610:	e0f8      	b.n	8005804 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8005612:	68bb      	ldr	r3, [r7, #8]
 8005614:	695b      	ldr	r3, [r3, #20]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d018      	beq.n	800564c <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	695b      	ldr	r3, [r3, #20]
 800561e:	68ba      	ldr	r2, [r7, #8]
 8005620:	8912      	ldrh	r2, [r2, #8]
 8005622:	4413      	add	r3, r2
 8005624:	3b01      	subs	r3, #1
 8005626:	68ba      	ldr	r2, [r7, #8]
 8005628:	8912      	ldrh	r2, [r2, #8]
 800562a:	fbb3 f3f2 	udiv	r3, r3, r2
 800562e:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8005630:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005632:	8b7b      	ldrh	r3, [r7, #26]
 8005634:	429a      	cmp	r2, r3
 8005636:	d90b      	bls.n	8005650 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8005638:	8b7b      	ldrh	r3, [r7, #26]
 800563a:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800563c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800563e:	68ba      	ldr	r2, [r7, #8]
 8005640:	8912      	ldrh	r2, [r2, #8]
 8005642:	fb03 f202 	mul.w	r2, r3, r2
 8005646:	68bb      	ldr	r3, [r7, #8]
 8005648:	611a      	str	r2, [r3, #16]
 800564a:	e001      	b.n	8005650 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 800564c:	2301      	movs	r3, #1
 800564e:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	78db      	ldrb	r3, [r3, #3]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d007      	beq.n	8005668 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005658:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800565a:	68ba      	ldr	r2, [r7, #8]
 800565c:	8912      	ldrh	r2, [r2, #8]
 800565e:	fb03 f202 	mul.w	r2, r3, r2
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	611a      	str	r2, [r3, #16]
 8005666:	e003      	b.n	8005670 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	695a      	ldr	r2, [r3, #20]
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	691b      	ldr	r3, [r3, #16]
 8005674:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005678:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800567a:	04d9      	lsls	r1, r3, #19
 800567c:	4b63      	ldr	r3, [pc, #396]	; (800580c <USB_HC_StartXfer+0x280>)
 800567e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005680:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8005682:	68bb      	ldr	r3, [r7, #8]
 8005684:	7a9b      	ldrb	r3, [r3, #10]
 8005686:	075b      	lsls	r3, r3, #29
 8005688:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800568c:	69f9      	ldr	r1, [r7, #28]
 800568e:	0148      	lsls	r0, r1, #5
 8005690:	6a39      	ldr	r1, [r7, #32]
 8005692:	4401      	add	r1, r0
 8005694:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005698:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800569a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800569c:	79fb      	ldrb	r3, [r7, #7]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d009      	beq.n	80056b6 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	68d9      	ldr	r1, [r3, #12]
 80056a6:	69fb      	ldr	r3, [r7, #28]
 80056a8:	015a      	lsls	r2, r3, #5
 80056aa:	6a3b      	ldr	r3, [r7, #32]
 80056ac:	4413      	add	r3, r2
 80056ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056b2:	460a      	mov	r2, r1
 80056b4:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80056b6:	6a3b      	ldr	r3, [r7, #32]
 80056b8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80056bc:	689b      	ldr	r3, [r3, #8]
 80056be:	f003 0301 	and.w	r3, r3, #1
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	bf0c      	ite	eq
 80056c6:	2301      	moveq	r3, #1
 80056c8:	2300      	movne	r3, #0
 80056ca:	b2db      	uxtb	r3, r3
 80056cc:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80056ce:	69fb      	ldr	r3, [r7, #28]
 80056d0:	015a      	lsls	r2, r3, #5
 80056d2:	6a3b      	ldr	r3, [r7, #32]
 80056d4:	4413      	add	r3, r2
 80056d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	69fa      	ldr	r2, [r7, #28]
 80056de:	0151      	lsls	r1, r2, #5
 80056e0:	6a3a      	ldr	r2, [r7, #32]
 80056e2:	440a      	add	r2, r1
 80056e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80056e8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80056ec:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80056ee:	69fb      	ldr	r3, [r7, #28]
 80056f0:	015a      	lsls	r2, r3, #5
 80056f2:	6a3b      	ldr	r3, [r7, #32]
 80056f4:	4413      	add	r3, r2
 80056f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056fa:	681a      	ldr	r2, [r3, #0]
 80056fc:	7e7b      	ldrb	r3, [r7, #25]
 80056fe:	075b      	lsls	r3, r3, #29
 8005700:	69f9      	ldr	r1, [r7, #28]
 8005702:	0148      	lsls	r0, r1, #5
 8005704:	6a39      	ldr	r1, [r7, #32]
 8005706:	4401      	add	r1, r0
 8005708:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800570c:	4313      	orrs	r3, r2
 800570e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005710:	69fb      	ldr	r3, [r7, #28]
 8005712:	015a      	lsls	r2, r3, #5
 8005714:	6a3b      	ldr	r3, [r7, #32]
 8005716:	4413      	add	r3, r2
 8005718:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005720:	693b      	ldr	r3, [r7, #16]
 8005722:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005726:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	78db      	ldrb	r3, [r3, #3]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d004      	beq.n	800573a <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005730:	693b      	ldr	r3, [r7, #16]
 8005732:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005736:	613b      	str	r3, [r7, #16]
 8005738:	e003      	b.n	8005742 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800573a:	693b      	ldr	r3, [r7, #16]
 800573c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005740:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005742:	693b      	ldr	r3, [r7, #16]
 8005744:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005748:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800574a:	69fb      	ldr	r3, [r7, #28]
 800574c:	015a      	lsls	r2, r3, #5
 800574e:	6a3b      	ldr	r3, [r7, #32]
 8005750:	4413      	add	r3, r2
 8005752:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005756:	461a      	mov	r2, r3
 8005758:	693b      	ldr	r3, [r7, #16]
 800575a:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800575c:	79fb      	ldrb	r3, [r7, #7]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d001      	beq.n	8005766 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8005762:	2300      	movs	r3, #0
 8005764:	e04e      	b.n	8005804 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8005766:	68bb      	ldr	r3, [r7, #8]
 8005768:	78db      	ldrb	r3, [r3, #3]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d149      	bne.n	8005802 <USB_HC_StartXfer+0x276>
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	695b      	ldr	r3, [r3, #20]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d045      	beq.n	8005802 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	79db      	ldrb	r3, [r3, #7]
 800577a:	2b03      	cmp	r3, #3
 800577c:	d830      	bhi.n	80057e0 <USB_HC_StartXfer+0x254>
 800577e:	a201      	add	r2, pc, #4	; (adr r2, 8005784 <USB_HC_StartXfer+0x1f8>)
 8005780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005784:	08005795 	.word	0x08005795
 8005788:	080057b9 	.word	0x080057b9
 800578c:	08005795 	.word	0x08005795
 8005790:	080057b9 	.word	0x080057b9
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	695b      	ldr	r3, [r3, #20]
 8005798:	3303      	adds	r3, #3
 800579a:	089b      	lsrs	r3, r3, #2
 800579c:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800579e:	8afa      	ldrh	r2, [r7, #22]
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057a4:	b29b      	uxth	r3, r3
 80057a6:	429a      	cmp	r2, r3
 80057a8:	d91c      	bls.n	80057e4 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	699b      	ldr	r3, [r3, #24]
 80057ae:	f043 0220 	orr.w	r2, r3, #32
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	619a      	str	r2, [r3, #24]
        }
        break;
 80057b6:	e015      	b.n	80057e4 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	695b      	ldr	r3, [r3, #20]
 80057bc:	3303      	adds	r3, #3
 80057be:	089b      	lsrs	r3, r3, #2
 80057c0:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80057c2:	8afa      	ldrh	r2, [r7, #22]
 80057c4:	6a3b      	ldr	r3, [r7, #32]
 80057c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80057ca:	691b      	ldr	r3, [r3, #16]
 80057cc:	b29b      	uxth	r3, r3
 80057ce:	429a      	cmp	r2, r3
 80057d0:	d90a      	bls.n	80057e8 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	699b      	ldr	r3, [r3, #24]
 80057d6:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	619a      	str	r2, [r3, #24]
        }
        break;
 80057de:	e003      	b.n	80057e8 <USB_HC_StartXfer+0x25c>

      default:
        break;
 80057e0:	bf00      	nop
 80057e2:	e002      	b.n	80057ea <USB_HC_StartXfer+0x25e>
        break;
 80057e4:	bf00      	nop
 80057e6:	e000      	b.n	80057ea <USB_HC_StartXfer+0x25e>
        break;
 80057e8:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	68d9      	ldr	r1, [r3, #12]
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	785a      	ldrb	r2, [r3, #1]
 80057f2:	68bb      	ldr	r3, [r7, #8]
 80057f4:	695b      	ldr	r3, [r3, #20]
 80057f6:	b29b      	uxth	r3, r3
 80057f8:	2000      	movs	r0, #0
 80057fa:	9000      	str	r0, [sp, #0]
 80057fc:	68f8      	ldr	r0, [r7, #12]
 80057fe:	f7ff fb5b 	bl	8004eb8 <USB_WritePacket>
  }

  return HAL_OK;
 8005802:	2300      	movs	r3, #0
}
 8005804:	4618      	mov	r0, r3
 8005806:	3728      	adds	r7, #40	; 0x28
 8005808:	46bd      	mov	sp, r7
 800580a:	bd80      	pop	{r7, pc}
 800580c:	1ff80000 	.word	0x1ff80000

08005810 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005810:	b480      	push	{r7}
 8005812:	b085      	sub	sp, #20
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005822:	695b      	ldr	r3, [r3, #20]
 8005824:	b29b      	uxth	r3, r3
}
 8005826:	4618      	mov	r0, r3
 8005828:	3714      	adds	r7, #20
 800582a:	46bd      	mov	sp, r7
 800582c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005830:	4770      	bx	lr

08005832 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8005832:	b480      	push	{r7}
 8005834:	b089      	sub	sp, #36	; 0x24
 8005836:	af00      	add	r7, sp, #0
 8005838:	6078      	str	r0, [r7, #4]
 800583a:	460b      	mov	r3, r1
 800583c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8005842:	78fb      	ldrb	r3, [r7, #3]
 8005844:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8005846:	2300      	movs	r3, #0
 8005848:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800584a:	69bb      	ldr	r3, [r7, #24]
 800584c:	015a      	lsls	r2, r3, #5
 800584e:	69fb      	ldr	r3, [r7, #28]
 8005850:	4413      	add	r3, r2
 8005852:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	0c9b      	lsrs	r3, r3, #18
 800585a:	f003 0303 	and.w	r3, r3, #3
 800585e:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8005860:	69bb      	ldr	r3, [r7, #24]
 8005862:	015a      	lsls	r2, r3, #5
 8005864:	69fb      	ldr	r3, [r7, #28]
 8005866:	4413      	add	r3, r2
 8005868:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	0fdb      	lsrs	r3, r3, #31
 8005870:	f003 0301 	and.w	r3, r3, #1
 8005874:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	689b      	ldr	r3, [r3, #8]
 800587a:	f003 0320 	and.w	r3, r3, #32
 800587e:	2b20      	cmp	r3, #32
 8005880:	d104      	bne.n	800588c <USB_HC_Halt+0x5a>
 8005882:	693b      	ldr	r3, [r7, #16]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d101      	bne.n	800588c <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8005888:	2300      	movs	r3, #0
 800588a:	e0c8      	b.n	8005a1e <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d002      	beq.n	8005898 <USB_HC_Halt+0x66>
 8005892:	697b      	ldr	r3, [r7, #20]
 8005894:	2b02      	cmp	r3, #2
 8005896:	d163      	bne.n	8005960 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005898:	69bb      	ldr	r3, [r7, #24]
 800589a:	015a      	lsls	r2, r3, #5
 800589c:	69fb      	ldr	r3, [r7, #28]
 800589e:	4413      	add	r3, r2
 80058a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	69ba      	ldr	r2, [r7, #24]
 80058a8:	0151      	lsls	r1, r2, #5
 80058aa:	69fa      	ldr	r2, [r7, #28]
 80058ac:	440a      	add	r2, r1
 80058ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80058b2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80058b6:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	689b      	ldr	r3, [r3, #8]
 80058bc:	f003 0320 	and.w	r3, r3, #32
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	f040 80ab 	bne.w	8005a1c <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058ca:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d133      	bne.n	800593a <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80058d2:	69bb      	ldr	r3, [r7, #24]
 80058d4:	015a      	lsls	r2, r3, #5
 80058d6:	69fb      	ldr	r3, [r7, #28]
 80058d8:	4413      	add	r3, r2
 80058da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	69ba      	ldr	r2, [r7, #24]
 80058e2:	0151      	lsls	r1, r2, #5
 80058e4:	69fa      	ldr	r2, [r7, #28]
 80058e6:	440a      	add	r2, r1
 80058e8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80058ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80058f0:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80058f2:	69bb      	ldr	r3, [r7, #24]
 80058f4:	015a      	lsls	r2, r3, #5
 80058f6:	69fb      	ldr	r3, [r7, #28]
 80058f8:	4413      	add	r3, r2
 80058fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	69ba      	ldr	r2, [r7, #24]
 8005902:	0151      	lsls	r1, r2, #5
 8005904:	69fa      	ldr	r2, [r7, #28]
 8005906:	440a      	add	r2, r1
 8005908:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800590c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005910:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	3301      	adds	r3, #1
 8005916:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800591e:	d81d      	bhi.n	800595c <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005920:	69bb      	ldr	r3, [r7, #24]
 8005922:	015a      	lsls	r2, r3, #5
 8005924:	69fb      	ldr	r3, [r7, #28]
 8005926:	4413      	add	r3, r2
 8005928:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005932:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005936:	d0ec      	beq.n	8005912 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005938:	e070      	b.n	8005a1c <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800593a:	69bb      	ldr	r3, [r7, #24]
 800593c:	015a      	lsls	r2, r3, #5
 800593e:	69fb      	ldr	r3, [r7, #28]
 8005940:	4413      	add	r3, r2
 8005942:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	69ba      	ldr	r2, [r7, #24]
 800594a:	0151      	lsls	r1, r2, #5
 800594c:	69fa      	ldr	r2, [r7, #28]
 800594e:	440a      	add	r2, r1
 8005950:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005954:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005958:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800595a:	e05f      	b.n	8005a1c <USB_HC_Halt+0x1ea>
            break;
 800595c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800595e:	e05d      	b.n	8005a1c <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005960:	69bb      	ldr	r3, [r7, #24]
 8005962:	015a      	lsls	r2, r3, #5
 8005964:	69fb      	ldr	r3, [r7, #28]
 8005966:	4413      	add	r3, r2
 8005968:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	69ba      	ldr	r2, [r7, #24]
 8005970:	0151      	lsls	r1, r2, #5
 8005972:	69fa      	ldr	r2, [r7, #28]
 8005974:	440a      	add	r2, r1
 8005976:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800597a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800597e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005980:	69fb      	ldr	r3, [r7, #28]
 8005982:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005986:	691b      	ldr	r3, [r3, #16]
 8005988:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800598c:	2b00      	cmp	r3, #0
 800598e:	d133      	bne.n	80059f8 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005990:	69bb      	ldr	r3, [r7, #24]
 8005992:	015a      	lsls	r2, r3, #5
 8005994:	69fb      	ldr	r3, [r7, #28]
 8005996:	4413      	add	r3, r2
 8005998:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	69ba      	ldr	r2, [r7, #24]
 80059a0:	0151      	lsls	r1, r2, #5
 80059a2:	69fa      	ldr	r2, [r7, #28]
 80059a4:	440a      	add	r2, r1
 80059a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80059aa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80059ae:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80059b0:	69bb      	ldr	r3, [r7, #24]
 80059b2:	015a      	lsls	r2, r3, #5
 80059b4:	69fb      	ldr	r3, [r7, #28]
 80059b6:	4413      	add	r3, r2
 80059b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	69ba      	ldr	r2, [r7, #24]
 80059c0:	0151      	lsls	r1, r2, #5
 80059c2:	69fa      	ldr	r2, [r7, #28]
 80059c4:	440a      	add	r2, r1
 80059c6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80059ca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80059ce:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	3301      	adds	r3, #1
 80059d4:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80059dc:	d81d      	bhi.n	8005a1a <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80059de:	69bb      	ldr	r3, [r7, #24]
 80059e0:	015a      	lsls	r2, r3, #5
 80059e2:	69fb      	ldr	r3, [r7, #28]
 80059e4:	4413      	add	r3, r2
 80059e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80059f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80059f4:	d0ec      	beq.n	80059d0 <USB_HC_Halt+0x19e>
 80059f6:	e011      	b.n	8005a1c <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80059f8:	69bb      	ldr	r3, [r7, #24]
 80059fa:	015a      	lsls	r2, r3, #5
 80059fc:	69fb      	ldr	r3, [r7, #28]
 80059fe:	4413      	add	r3, r2
 8005a00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	69ba      	ldr	r2, [r7, #24]
 8005a08:	0151      	lsls	r1, r2, #5
 8005a0a:	69fa      	ldr	r2, [r7, #28]
 8005a0c:	440a      	add	r2, r1
 8005a0e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005a16:	6013      	str	r3, [r2, #0]
 8005a18:	e000      	b.n	8005a1c <USB_HC_Halt+0x1ea>
          break;
 8005a1a:	bf00      	nop
    }
  }

  return HAL_OK;
 8005a1c:	2300      	movs	r3, #0
}
 8005a1e:	4618      	mov	r0, r3
 8005a20:	3724      	adds	r7, #36	; 0x24
 8005a22:	46bd      	mov	sp, r7
 8005a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a28:	4770      	bx	lr
	...

08005a2c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b087      	sub	sp, #28
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
 8005a34:	460b      	mov	r3, r1
 8005a36:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8005a3c:	78fb      	ldrb	r3, [r7, #3]
 8005a3e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8005a40:	2301      	movs	r3, #1
 8005a42:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	04da      	lsls	r2, r3, #19
 8005a48:	4b15      	ldr	r3, [pc, #84]	; (8005aa0 <USB_DoPing+0x74>)
 8005a4a:	4013      	ands	r3, r2
 8005a4c:	693a      	ldr	r2, [r7, #16]
 8005a4e:	0151      	lsls	r1, r2, #5
 8005a50:	697a      	ldr	r2, [r7, #20]
 8005a52:	440a      	add	r2, r1
 8005a54:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a58:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005a5c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8005a5e:	693b      	ldr	r3, [r7, #16]
 8005a60:	015a      	lsls	r2, r3, #5
 8005a62:	697b      	ldr	r3, [r7, #20]
 8005a64:	4413      	add	r3, r2
 8005a66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005a6e:	68bb      	ldr	r3, [r7, #8]
 8005a70:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005a74:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005a7c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8005a7e:	693b      	ldr	r3, [r7, #16]
 8005a80:	015a      	lsls	r2, r3, #5
 8005a82:	697b      	ldr	r3, [r7, #20]
 8005a84:	4413      	add	r3, r2
 8005a86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a8a:	461a      	mov	r2, r3
 8005a8c:	68bb      	ldr	r3, [r7, #8]
 8005a8e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8005a90:	2300      	movs	r3, #0
}
 8005a92:	4618      	mov	r0, r3
 8005a94:	371c      	adds	r7, #28
 8005a96:	46bd      	mov	sp, r7
 8005a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9c:	4770      	bx	lr
 8005a9e:	bf00      	nop
 8005aa0:	1ff80000 	.word	0x1ff80000

08005aa4 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b088      	sub	sp, #32
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8005aac:	2300      	movs	r3, #0
 8005aae:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8005ab8:	6878      	ldr	r0, [r7, #4]
 8005aba:	f7ff f93b 	bl	8004d34 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005abe:	2110      	movs	r1, #16
 8005ac0:	6878      	ldr	r0, [r7, #4]
 8005ac2:	f7ff f995 	bl	8004df0 <USB_FlushTxFifo>
 8005ac6:	4603      	mov	r3, r0
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d001      	beq.n	8005ad0 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8005acc:	2301      	movs	r3, #1
 8005ace:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005ad0:	6878      	ldr	r0, [r7, #4]
 8005ad2:	f7ff f9c1 	bl	8004e58 <USB_FlushRxFifo>
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d001      	beq.n	8005ae0 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8005adc:	2301      	movs	r3, #1
 8005ade:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	61bb      	str	r3, [r7, #24]
 8005ae4:	e01f      	b.n	8005b26 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8005ae6:	69bb      	ldr	r3, [r7, #24]
 8005ae8:	015a      	lsls	r2, r3, #5
 8005aea:	697b      	ldr	r3, [r7, #20]
 8005aec:	4413      	add	r3, r2
 8005aee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8005af6:	693b      	ldr	r3, [r7, #16]
 8005af8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005afc:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8005afe:	693b      	ldr	r3, [r7, #16]
 8005b00:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005b04:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005b06:	693b      	ldr	r3, [r7, #16]
 8005b08:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005b0c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8005b0e:	69bb      	ldr	r3, [r7, #24]
 8005b10:	015a      	lsls	r2, r3, #5
 8005b12:	697b      	ldr	r3, [r7, #20]
 8005b14:	4413      	add	r3, r2
 8005b16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b1a:	461a      	mov	r2, r3
 8005b1c:	693b      	ldr	r3, [r7, #16]
 8005b1e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8005b20:	69bb      	ldr	r3, [r7, #24]
 8005b22:	3301      	adds	r3, #1
 8005b24:	61bb      	str	r3, [r7, #24]
 8005b26:	69bb      	ldr	r3, [r7, #24]
 8005b28:	2b0f      	cmp	r3, #15
 8005b2a:	d9dc      	bls.n	8005ae6 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	61bb      	str	r3, [r7, #24]
 8005b30:	e034      	b.n	8005b9c <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8005b32:	69bb      	ldr	r3, [r7, #24]
 8005b34:	015a      	lsls	r2, r3, #5
 8005b36:	697b      	ldr	r3, [r7, #20]
 8005b38:	4413      	add	r3, r2
 8005b3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8005b42:	693b      	ldr	r3, [r7, #16]
 8005b44:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005b48:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8005b4a:	693b      	ldr	r3, [r7, #16]
 8005b4c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005b50:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005b52:	693b      	ldr	r3, [r7, #16]
 8005b54:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005b58:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8005b5a:	69bb      	ldr	r3, [r7, #24]
 8005b5c:	015a      	lsls	r2, r3, #5
 8005b5e:	697b      	ldr	r3, [r7, #20]
 8005b60:	4413      	add	r3, r2
 8005b62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b66:	461a      	mov	r2, r3
 8005b68:	693b      	ldr	r3, [r7, #16]
 8005b6a:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	3301      	adds	r3, #1
 8005b70:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005b78:	d80c      	bhi.n	8005b94 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005b7a:	69bb      	ldr	r3, [r7, #24]
 8005b7c:	015a      	lsls	r2, r3, #5
 8005b7e:	697b      	ldr	r3, [r7, #20]
 8005b80:	4413      	add	r3, r2
 8005b82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b8c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b90:	d0ec      	beq.n	8005b6c <USB_StopHost+0xc8>
 8005b92:	e000      	b.n	8005b96 <USB_StopHost+0xf2>
        break;
 8005b94:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8005b96:	69bb      	ldr	r3, [r7, #24]
 8005b98:	3301      	adds	r3, #1
 8005b9a:	61bb      	str	r3, [r7, #24]
 8005b9c:	69bb      	ldr	r3, [r7, #24]
 8005b9e:	2b0f      	cmp	r3, #15
 8005ba0:	d9c7      	bls.n	8005b32 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8005ba2:	697b      	ldr	r3, [r7, #20]
 8005ba4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ba8:	461a      	mov	r2, r3
 8005baa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005bae:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005bb6:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8005bb8:	6878      	ldr	r0, [r7, #4]
 8005bba:	f7ff f8aa 	bl	8004d12 <USB_EnableGlobalInt>

  return ret;
 8005bbe:	7ffb      	ldrb	r3, [r7, #31]
}
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	3720      	adds	r7, #32
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	bd80      	pop	{r7, pc}

08005bc8 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8005bc8:	b590      	push	{r4, r7, lr}
 8005bca:	b089      	sub	sp, #36	; 0x24
 8005bcc:	af04      	add	r7, sp, #16
 8005bce:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8005bd0:	2301      	movs	r3, #1
 8005bd2:	2202      	movs	r2, #2
 8005bd4:	2102      	movs	r1, #2
 8005bd6:	6878      	ldr	r0, [r7, #4]
 8005bd8:	f000 fc66 	bl	80064a8 <USBH_FindInterface>
 8005bdc:	4603      	mov	r3, r0
 8005bde:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8005be0:	7bfb      	ldrb	r3, [r7, #15]
 8005be2:	2bff      	cmp	r3, #255	; 0xff
 8005be4:	d002      	beq.n	8005bec <USBH_CDC_InterfaceInit+0x24>
 8005be6:	7bfb      	ldrb	r3, [r7, #15]
 8005be8:	2b01      	cmp	r3, #1
 8005bea:	d901      	bls.n	8005bf0 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005bec:	2302      	movs	r3, #2
 8005bee:	e13d      	b.n	8005e6c <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8005bf0:	7bfb      	ldrb	r3, [r7, #15]
 8005bf2:	4619      	mov	r1, r3
 8005bf4:	6878      	ldr	r0, [r7, #4]
 8005bf6:	f000 fc3b 	bl	8006470 <USBH_SelectInterface>
 8005bfa:	4603      	mov	r3, r0
 8005bfc:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8005bfe:	7bbb      	ldrb	r3, [r7, #14]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d001      	beq.n	8005c08 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8005c04:	2302      	movs	r3, #2
 8005c06:	e131      	b.n	8005e6c <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8005c0e:	2050      	movs	r0, #80	; 0x50
 8005c10:	f001 fae8 	bl	80071e4 <malloc>
 8005c14:	4603      	mov	r3, r0
 8005c16:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005c1e:	69db      	ldr	r3, [r3, #28]
 8005c20:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8005c22:	68bb      	ldr	r3, [r7, #8]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d101      	bne.n	8005c2c <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8005c28:	2302      	movs	r3, #2
 8005c2a:	e11f      	b.n	8005e6c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8005c2c:	2250      	movs	r2, #80	; 0x50
 8005c2e:	2100      	movs	r1, #0
 8005c30:	68b8      	ldr	r0, [r7, #8]
 8005c32:	f001 fb93 	bl	800735c <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8005c36:	7bfb      	ldrb	r3, [r7, #15]
 8005c38:	687a      	ldr	r2, [r7, #4]
 8005c3a:	211a      	movs	r1, #26
 8005c3c:	fb01 f303 	mul.w	r3, r1, r3
 8005c40:	4413      	add	r3, r2
 8005c42:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005c46:	781b      	ldrb	r3, [r3, #0]
 8005c48:	b25b      	sxtb	r3, r3
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	da15      	bge.n	8005c7a <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005c4e:	7bfb      	ldrb	r3, [r7, #15]
 8005c50:	687a      	ldr	r2, [r7, #4]
 8005c52:	211a      	movs	r1, #26
 8005c54:	fb01 f303 	mul.w	r3, r1, r3
 8005c58:	4413      	add	r3, r2
 8005c5a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005c5e:	781a      	ldrb	r2, [r3, #0]
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005c64:	7bfb      	ldrb	r3, [r7, #15]
 8005c66:	687a      	ldr	r2, [r7, #4]
 8005c68:	211a      	movs	r1, #26
 8005c6a:	fb01 f303 	mul.w	r3, r1, r3
 8005c6e:	4413      	add	r3, r2
 8005c70:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005c74:	881a      	ldrh	r2, [r3, #0]
 8005c76:	68bb      	ldr	r3, [r7, #8]
 8005c78:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8005c7a:	68bb      	ldr	r3, [r7, #8]
 8005c7c:	785b      	ldrb	r3, [r3, #1]
 8005c7e:	4619      	mov	r1, r3
 8005c80:	6878      	ldr	r0, [r7, #4]
 8005c82:	f000 ff9c 	bl	8006bbe <USBH_AllocPipe>
 8005c86:	4603      	mov	r3, r0
 8005c88:	461a      	mov	r2, r3
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	7819      	ldrb	r1, [r3, #0]
 8005c92:	68bb      	ldr	r3, [r7, #8]
 8005c94:	7858      	ldrb	r0, [r3, #1]
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005ca2:	68ba      	ldr	r2, [r7, #8]
 8005ca4:	8952      	ldrh	r2, [r2, #10]
 8005ca6:	9202      	str	r2, [sp, #8]
 8005ca8:	2203      	movs	r2, #3
 8005caa:	9201      	str	r2, [sp, #4]
 8005cac:	9300      	str	r3, [sp, #0]
 8005cae:	4623      	mov	r3, r4
 8005cb0:	4602      	mov	r2, r0
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	f000 ff54 	bl	8006b60 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	781b      	ldrb	r3, [r3, #0]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	4619      	mov	r1, r3
 8005cc0:	6878      	ldr	r0, [r7, #4]
 8005cc2:	f001 fa17 	bl	80070f4 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	2200      	movs	r2, #0
 8005cca:	210a      	movs	r1, #10
 8005ccc:	6878      	ldr	r0, [r7, #4]
 8005cce:	f000 fbeb 	bl	80064a8 <USBH_FindInterface>
 8005cd2:	4603      	mov	r3, r0
 8005cd4:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8005cd6:	7bfb      	ldrb	r3, [r7, #15]
 8005cd8:	2bff      	cmp	r3, #255	; 0xff
 8005cda:	d002      	beq.n	8005ce2 <USBH_CDC_InterfaceInit+0x11a>
 8005cdc:	7bfb      	ldrb	r3, [r7, #15]
 8005cde:	2b01      	cmp	r3, #1
 8005ce0:	d901      	bls.n	8005ce6 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005ce2:	2302      	movs	r3, #2
 8005ce4:	e0c2      	b.n	8005e6c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8005ce6:	7bfb      	ldrb	r3, [r7, #15]
 8005ce8:	687a      	ldr	r2, [r7, #4]
 8005cea:	211a      	movs	r1, #26
 8005cec:	fb01 f303 	mul.w	r3, r1, r3
 8005cf0:	4413      	add	r3, r2
 8005cf2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005cf6:	781b      	ldrb	r3, [r3, #0]
 8005cf8:	b25b      	sxtb	r3, r3
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	da16      	bge.n	8005d2c <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005cfe:	7bfb      	ldrb	r3, [r7, #15]
 8005d00:	687a      	ldr	r2, [r7, #4]
 8005d02:	211a      	movs	r1, #26
 8005d04:	fb01 f303 	mul.w	r3, r1, r3
 8005d08:	4413      	add	r3, r2
 8005d0a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005d0e:	781a      	ldrb	r2, [r3, #0]
 8005d10:	68bb      	ldr	r3, [r7, #8]
 8005d12:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005d14:	7bfb      	ldrb	r3, [r7, #15]
 8005d16:	687a      	ldr	r2, [r7, #4]
 8005d18:	211a      	movs	r1, #26
 8005d1a:	fb01 f303 	mul.w	r3, r1, r3
 8005d1e:	4413      	add	r3, r2
 8005d20:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005d24:	881a      	ldrh	r2, [r3, #0]
 8005d26:	68bb      	ldr	r3, [r7, #8]
 8005d28:	835a      	strh	r2, [r3, #26]
 8005d2a:	e015      	b.n	8005d58 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005d2c:	7bfb      	ldrb	r3, [r7, #15]
 8005d2e:	687a      	ldr	r2, [r7, #4]
 8005d30:	211a      	movs	r1, #26
 8005d32:	fb01 f303 	mul.w	r3, r1, r3
 8005d36:	4413      	add	r3, r2
 8005d38:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005d3c:	781a      	ldrb	r2, [r3, #0]
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005d42:	7bfb      	ldrb	r3, [r7, #15]
 8005d44:	687a      	ldr	r2, [r7, #4]
 8005d46:	211a      	movs	r1, #26
 8005d48:	fb01 f303 	mul.w	r3, r1, r3
 8005d4c:	4413      	add	r3, r2
 8005d4e:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005d52:	881a      	ldrh	r2, [r3, #0]
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8005d58:	7bfb      	ldrb	r3, [r7, #15]
 8005d5a:	687a      	ldr	r2, [r7, #4]
 8005d5c:	211a      	movs	r1, #26
 8005d5e:	fb01 f303 	mul.w	r3, r1, r3
 8005d62:	4413      	add	r3, r2
 8005d64:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005d68:	781b      	ldrb	r3, [r3, #0]
 8005d6a:	b25b      	sxtb	r3, r3
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	da16      	bge.n	8005d9e <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005d70:	7bfb      	ldrb	r3, [r7, #15]
 8005d72:	687a      	ldr	r2, [r7, #4]
 8005d74:	211a      	movs	r1, #26
 8005d76:	fb01 f303 	mul.w	r3, r1, r3
 8005d7a:	4413      	add	r3, r2
 8005d7c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005d80:	781a      	ldrb	r2, [r3, #0]
 8005d82:	68bb      	ldr	r3, [r7, #8]
 8005d84:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005d86:	7bfb      	ldrb	r3, [r7, #15]
 8005d88:	687a      	ldr	r2, [r7, #4]
 8005d8a:	211a      	movs	r1, #26
 8005d8c:	fb01 f303 	mul.w	r3, r1, r3
 8005d90:	4413      	add	r3, r2
 8005d92:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8005d96:	881a      	ldrh	r2, [r3, #0]
 8005d98:	68bb      	ldr	r3, [r7, #8]
 8005d9a:	835a      	strh	r2, [r3, #26]
 8005d9c:	e015      	b.n	8005dca <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005d9e:	7bfb      	ldrb	r3, [r7, #15]
 8005da0:	687a      	ldr	r2, [r7, #4]
 8005da2:	211a      	movs	r1, #26
 8005da4:	fb01 f303 	mul.w	r3, r1, r3
 8005da8:	4413      	add	r3, r2
 8005daa:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005dae:	781a      	ldrb	r2, [r3, #0]
 8005db0:	68bb      	ldr	r3, [r7, #8]
 8005db2:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005db4:	7bfb      	ldrb	r3, [r7, #15]
 8005db6:	687a      	ldr	r2, [r7, #4]
 8005db8:	211a      	movs	r1, #26
 8005dba:	fb01 f303 	mul.w	r3, r1, r3
 8005dbe:	4413      	add	r3, r2
 8005dc0:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8005dc4:	881a      	ldrh	r2, [r3, #0]
 8005dc6:	68bb      	ldr	r3, [r7, #8]
 8005dc8:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8005dca:	68bb      	ldr	r3, [r7, #8]
 8005dcc:	7b9b      	ldrb	r3, [r3, #14]
 8005dce:	4619      	mov	r1, r3
 8005dd0:	6878      	ldr	r0, [r7, #4]
 8005dd2:	f000 fef4 	bl	8006bbe <USBH_AllocPipe>
 8005dd6:	4603      	mov	r3, r0
 8005dd8:	461a      	mov	r2, r3
 8005dda:	68bb      	ldr	r3, [r7, #8]
 8005ddc:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8005dde:	68bb      	ldr	r3, [r7, #8]
 8005de0:	7bdb      	ldrb	r3, [r3, #15]
 8005de2:	4619      	mov	r1, r3
 8005de4:	6878      	ldr	r0, [r7, #4]
 8005de6:	f000 feea 	bl	8006bbe <USBH_AllocPipe>
 8005dea:	4603      	mov	r3, r0
 8005dec:	461a      	mov	r2, r3
 8005dee:	68bb      	ldr	r3, [r7, #8]
 8005df0:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	7b59      	ldrb	r1, [r3, #13]
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	7b98      	ldrb	r0, [r3, #14]
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005e06:	68ba      	ldr	r2, [r7, #8]
 8005e08:	8b12      	ldrh	r2, [r2, #24]
 8005e0a:	9202      	str	r2, [sp, #8]
 8005e0c:	2202      	movs	r2, #2
 8005e0e:	9201      	str	r2, [sp, #4]
 8005e10:	9300      	str	r3, [sp, #0]
 8005e12:	4623      	mov	r3, r4
 8005e14:	4602      	mov	r2, r0
 8005e16:	6878      	ldr	r0, [r7, #4]
 8005e18:	f000 fea2 	bl	8006b60 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	7b19      	ldrb	r1, [r3, #12]
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	7bd8      	ldrb	r0, [r3, #15]
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005e30:	68ba      	ldr	r2, [r7, #8]
 8005e32:	8b52      	ldrh	r2, [r2, #26]
 8005e34:	9202      	str	r2, [sp, #8]
 8005e36:	2202      	movs	r2, #2
 8005e38:	9201      	str	r2, [sp, #4]
 8005e3a:	9300      	str	r3, [sp, #0]
 8005e3c:	4623      	mov	r3, r4
 8005e3e:	4602      	mov	r2, r0
 8005e40:	6878      	ldr	r0, [r7, #4]
 8005e42:	f000 fe8d 	bl	8006b60 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8005e46:	68bb      	ldr	r3, [r7, #8]
 8005e48:	2200      	movs	r2, #0
 8005e4a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8005e4e:	68bb      	ldr	r3, [r7, #8]
 8005e50:	7b5b      	ldrb	r3, [r3, #13]
 8005e52:	2200      	movs	r2, #0
 8005e54:	4619      	mov	r1, r3
 8005e56:	6878      	ldr	r0, [r7, #4]
 8005e58:	f001 f94c 	bl	80070f4 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	7b1b      	ldrb	r3, [r3, #12]
 8005e60:	2200      	movs	r2, #0
 8005e62:	4619      	mov	r1, r3
 8005e64:	6878      	ldr	r0, [r7, #4]
 8005e66:	f001 f945 	bl	80070f4 <USBH_LL_SetToggle>

  return USBH_OK;
 8005e6a:	2300      	movs	r3, #0
}
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	3714      	adds	r7, #20
 8005e70:	46bd      	mov	sp, r7
 8005e72:	bd90      	pop	{r4, r7, pc}

08005e74 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b084      	sub	sp, #16
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005e82:	69db      	ldr	r3, [r3, #28]
 8005e84:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	781b      	ldrb	r3, [r3, #0]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d00e      	beq.n	8005eac <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	781b      	ldrb	r3, [r3, #0]
 8005e92:	4619      	mov	r1, r3
 8005e94:	6878      	ldr	r0, [r7, #4]
 8005e96:	f000 fe82 	bl	8006b9e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	781b      	ldrb	r3, [r3, #0]
 8005e9e:	4619      	mov	r1, r3
 8005ea0:	6878      	ldr	r0, [r7, #4]
 8005ea2:	f000 fead 	bl	8006c00 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	7b1b      	ldrb	r3, [r3, #12]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d00e      	beq.n	8005ed2 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	7b1b      	ldrb	r3, [r3, #12]
 8005eb8:	4619      	mov	r1, r3
 8005eba:	6878      	ldr	r0, [r7, #4]
 8005ebc:	f000 fe6f 	bl	8006b9e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	7b1b      	ldrb	r3, [r3, #12]
 8005ec4:	4619      	mov	r1, r3
 8005ec6:	6878      	ldr	r0, [r7, #4]
 8005ec8:	f000 fe9a 	bl	8006c00 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	2200      	movs	r2, #0
 8005ed0:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	7b5b      	ldrb	r3, [r3, #13]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d00e      	beq.n	8005ef8 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	7b5b      	ldrb	r3, [r3, #13]
 8005ede:	4619      	mov	r1, r3
 8005ee0:	6878      	ldr	r0, [r7, #4]
 8005ee2:	f000 fe5c 	bl	8006b9e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	7b5b      	ldrb	r3, [r3, #13]
 8005eea:	4619      	mov	r1, r3
 8005eec:	6878      	ldr	r0, [r7, #4]
 8005eee:	f000 fe87 	bl	8006c00 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005efe:	69db      	ldr	r3, [r3, #28]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d00b      	beq.n	8005f1c <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005f0a:	69db      	ldr	r3, [r3, #28]
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	f001 f971 	bl	80071f4 <free>
    phost->pActiveClass->pData = 0U;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005f18:	2200      	movs	r2, #0
 8005f1a:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8005f1c:	2300      	movs	r3, #0
}
 8005f1e:	4618      	mov	r0, r3
 8005f20:	3710      	adds	r7, #16
 8005f22:	46bd      	mov	sp, r7
 8005f24:	bd80      	pop	{r7, pc}

08005f26 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8005f26:	b580      	push	{r7, lr}
 8005f28:	b084      	sub	sp, #16
 8005f2a:	af00      	add	r7, sp, #0
 8005f2c:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005f34:	69db      	ldr	r3, [r3, #28]
 8005f36:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	3340      	adds	r3, #64	; 0x40
 8005f3c:	4619      	mov	r1, r3
 8005f3e:	6878      	ldr	r0, [r7, #4]
 8005f40:	f000 f8b1 	bl	80060a6 <GetLineCoding>
 8005f44:	4603      	mov	r3, r0
 8005f46:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8005f48:	7afb      	ldrb	r3, [r7, #11]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d105      	bne.n	8005f5a <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005f54:	2102      	movs	r1, #2
 8005f56:	6878      	ldr	r0, [r7, #4]
 8005f58:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8005f5a:	7afb      	ldrb	r3, [r7, #11]
}
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	3710      	adds	r7, #16
 8005f60:	46bd      	mov	sp, r7
 8005f62:	bd80      	pop	{r7, pc}

08005f64 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b084      	sub	sp, #16
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8005f6c:	2301      	movs	r3, #1
 8005f6e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8005f70:	2300      	movs	r3, #0
 8005f72:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005f7a:	69db      	ldr	r3, [r3, #28]
 8005f7c:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8005f7e:	68bb      	ldr	r3, [r7, #8]
 8005f80:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8005f84:	2b04      	cmp	r3, #4
 8005f86:	d877      	bhi.n	8006078 <USBH_CDC_Process+0x114>
 8005f88:	a201      	add	r2, pc, #4	; (adr r2, 8005f90 <USBH_CDC_Process+0x2c>)
 8005f8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f8e:	bf00      	nop
 8005f90:	08005fa5 	.word	0x08005fa5
 8005f94:	08005fab 	.word	0x08005fab
 8005f98:	08005fdb 	.word	0x08005fdb
 8005f9c:	0800604f 	.word	0x0800604f
 8005fa0:	0800605d 	.word	0x0800605d
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	73fb      	strb	r3, [r7, #15]
      break;
 8005fa8:	e06d      	b.n	8006086 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8005faa:	68bb      	ldr	r3, [r7, #8]
 8005fac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005fae:	4619      	mov	r1, r3
 8005fb0:	6878      	ldr	r0, [r7, #4]
 8005fb2:	f000 f897 	bl	80060e4 <SetLineCoding>
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8005fba:	7bbb      	ldrb	r3, [r7, #14]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d104      	bne.n	8005fca <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8005fc0:	68bb      	ldr	r3, [r7, #8]
 8005fc2:	2202      	movs	r2, #2
 8005fc4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8005fc8:	e058      	b.n	800607c <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8005fca:	7bbb      	ldrb	r3, [r7, #14]
 8005fcc:	2b01      	cmp	r3, #1
 8005fce:	d055      	beq.n	800607c <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	2204      	movs	r2, #4
 8005fd4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8005fd8:	e050      	b.n	800607c <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8005fda:	68bb      	ldr	r3, [r7, #8]
 8005fdc:	3340      	adds	r3, #64	; 0x40
 8005fde:	4619      	mov	r1, r3
 8005fe0:	6878      	ldr	r0, [r7, #4]
 8005fe2:	f000 f860 	bl	80060a6 <GetLineCoding>
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8005fea:	7bbb      	ldrb	r3, [r7, #14]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d126      	bne.n	800603e <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8005ff0:	68bb      	ldr	r3, [r7, #8]
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8005ff8:	68bb      	ldr	r3, [r7, #8]
 8005ffa:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8005ffe:	68bb      	ldr	r3, [r7, #8]
 8006000:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006002:	791b      	ldrb	r3, [r3, #4]
 8006004:	429a      	cmp	r2, r3
 8006006:	d13b      	bne.n	8006080 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800600e:	68bb      	ldr	r3, [r7, #8]
 8006010:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006012:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006014:	429a      	cmp	r2, r3
 8006016:	d133      	bne.n	8006080 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800601e:	68bb      	ldr	r3, [r7, #8]
 8006020:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006022:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006024:	429a      	cmp	r2, r3
 8006026:	d12b      	bne.n	8006080 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006030:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006032:	429a      	cmp	r2, r3
 8006034:	d124      	bne.n	8006080 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	f000 f958 	bl	80062ec <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800603c:	e020      	b.n	8006080 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800603e:	7bbb      	ldrb	r3, [r7, #14]
 8006040:	2b01      	cmp	r3, #1
 8006042:	d01d      	beq.n	8006080 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	2204      	movs	r2, #4
 8006048:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800604c:	e018      	b.n	8006080 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800604e:	6878      	ldr	r0, [r7, #4]
 8006050:	f000 f867 	bl	8006122 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006054:	6878      	ldr	r0, [r7, #4]
 8006056:	f000 f8da 	bl	800620e <CDC_ProcessReception>
      break;
 800605a:	e014      	b.n	8006086 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800605c:	2100      	movs	r1, #0
 800605e:	6878      	ldr	r0, [r7, #4]
 8006060:	f000 fb08 	bl	8006674 <USBH_ClrFeature>
 8006064:	4603      	mov	r3, r0
 8006066:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006068:	7bbb      	ldrb	r3, [r7, #14]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d10a      	bne.n	8006084 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800606e:	68bb      	ldr	r3, [r7, #8]
 8006070:	2200      	movs	r2, #0
 8006072:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8006076:	e005      	b.n	8006084 <USBH_CDC_Process+0x120>

    default:
      break;
 8006078:	bf00      	nop
 800607a:	e004      	b.n	8006086 <USBH_CDC_Process+0x122>
      break;
 800607c:	bf00      	nop
 800607e:	e002      	b.n	8006086 <USBH_CDC_Process+0x122>
      break;
 8006080:	bf00      	nop
 8006082:	e000      	b.n	8006086 <USBH_CDC_Process+0x122>
      break;
 8006084:	bf00      	nop

  }

  return status;
 8006086:	7bfb      	ldrb	r3, [r7, #15]
}
 8006088:	4618      	mov	r0, r3
 800608a:	3710      	adds	r7, #16
 800608c:	46bd      	mov	sp, r7
 800608e:	bd80      	pop	{r7, pc}

08006090 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006090:	b480      	push	{r7}
 8006092:	b083      	sub	sp, #12
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006098:	2300      	movs	r3, #0
}
 800609a:	4618      	mov	r0, r3
 800609c:	370c      	adds	r7, #12
 800609e:	46bd      	mov	sp, r7
 80060a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a4:	4770      	bx	lr

080060a6 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80060a6:	b580      	push	{r7, lr}
 80060a8:	b082      	sub	sp, #8
 80060aa:	af00      	add	r7, sp, #0
 80060ac:	6078      	str	r0, [r7, #4]
 80060ae:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	22a1      	movs	r2, #161	; 0xa1
 80060b4:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2221      	movs	r2, #33	; 0x21
 80060ba:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2200      	movs	r2, #0
 80060c0:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2200      	movs	r2, #0
 80060c6:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2207      	movs	r2, #7
 80060cc:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	2207      	movs	r2, #7
 80060d2:	4619      	mov	r1, r3
 80060d4:	6878      	ldr	r0, [r7, #4]
 80060d6:	f000 faf1 	bl	80066bc <USBH_CtlReq>
 80060da:	4603      	mov	r3, r0
}
 80060dc:	4618      	mov	r0, r3
 80060de:	3708      	adds	r7, #8
 80060e0:	46bd      	mov	sp, r7
 80060e2:	bd80      	pop	{r7, pc}

080060e4 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b082      	sub	sp, #8
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
 80060ec:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2221      	movs	r2, #33	; 0x21
 80060f2:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2220      	movs	r2, #32
 80060f8:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2200      	movs	r2, #0
 80060fe:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2200      	movs	r2, #0
 8006104:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2207      	movs	r2, #7
 800610a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	2207      	movs	r2, #7
 8006110:	4619      	mov	r1, r3
 8006112:	6878      	ldr	r0, [r7, #4]
 8006114:	f000 fad2 	bl	80066bc <USBH_CtlReq>
 8006118:	4603      	mov	r3, r0
}
 800611a:	4618      	mov	r0, r3
 800611c:	3708      	adds	r7, #8
 800611e:	46bd      	mov	sp, r7
 8006120:	bd80      	pop	{r7, pc}

08006122 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8006122:	b580      	push	{r7, lr}
 8006124:	b086      	sub	sp, #24
 8006126:	af02      	add	r7, sp, #8
 8006128:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006130:	69db      	ldr	r3, [r3, #28]
 8006132:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006134:	2300      	movs	r3, #0
 8006136:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800613e:	2b01      	cmp	r3, #1
 8006140:	d002      	beq.n	8006148 <CDC_ProcessTransmission+0x26>
 8006142:	2b02      	cmp	r3, #2
 8006144:	d023      	beq.n	800618e <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8006146:	e05e      	b.n	8006206 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800614c:	68fa      	ldr	r2, [r7, #12]
 800614e:	8b12      	ldrh	r2, [r2, #24]
 8006150:	4293      	cmp	r3, r2
 8006152:	d90b      	bls.n	800616c <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	69d9      	ldr	r1, [r3, #28]
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	8b1a      	ldrh	r2, [r3, #24]
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	7b5b      	ldrb	r3, [r3, #13]
 8006160:	2001      	movs	r0, #1
 8006162:	9000      	str	r0, [sp, #0]
 8006164:	6878      	ldr	r0, [r7, #4]
 8006166:	f000 fcb8 	bl	8006ada <USBH_BulkSendData>
 800616a:	e00b      	b.n	8006184 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8006174:	b29a      	uxth	r2, r3
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	7b5b      	ldrb	r3, [r3, #13]
 800617a:	2001      	movs	r0, #1
 800617c:	9000      	str	r0, [sp, #0]
 800617e:	6878      	ldr	r0, [r7, #4]
 8006180:	f000 fcab 	bl	8006ada <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	2202      	movs	r2, #2
 8006188:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800618c:	e03b      	b.n	8006206 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	7b5b      	ldrb	r3, [r3, #13]
 8006192:	4619      	mov	r1, r3
 8006194:	6878      	ldr	r0, [r7, #4]
 8006196:	f000 ff83 	bl	80070a0 <USBH_LL_GetURBState>
 800619a:	4603      	mov	r3, r0
 800619c:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800619e:	7afb      	ldrb	r3, [r7, #11]
 80061a0:	2b01      	cmp	r3, #1
 80061a2:	d128      	bne.n	80061f6 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061a8:	68fa      	ldr	r2, [r7, #12]
 80061aa:	8b12      	ldrh	r2, [r2, #24]
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d90e      	bls.n	80061ce <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061b4:	68fa      	ldr	r2, [r7, #12]
 80061b6:	8b12      	ldrh	r2, [r2, #24]
 80061b8:	1a9a      	subs	r2, r3, r2
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	69db      	ldr	r3, [r3, #28]
 80061c2:	68fa      	ldr	r2, [r7, #12]
 80061c4:	8b12      	ldrh	r2, [r2, #24]
 80061c6:	441a      	add	r2, r3
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	61da      	str	r2, [r3, #28]
 80061cc:	e002      	b.n	80061d4 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	2200      	movs	r2, #0
 80061d2:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d004      	beq.n	80061e6 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	2201      	movs	r2, #1
 80061e0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80061e4:	e00e      	b.n	8006204 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	2200      	movs	r2, #0
 80061ea:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 80061ee:	6878      	ldr	r0, [r7, #4]
 80061f0:	f000 f868 	bl	80062c4 <USBH_CDC_TransmitCallback>
      break;
 80061f4:	e006      	b.n	8006204 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 80061f6:	7afb      	ldrb	r3, [r7, #11]
 80061f8:	2b02      	cmp	r3, #2
 80061fa:	d103      	bne.n	8006204 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	2201      	movs	r2, #1
 8006200:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006204:	bf00      	nop
  }
}
 8006206:	bf00      	nop
 8006208:	3710      	adds	r7, #16
 800620a:	46bd      	mov	sp, r7
 800620c:	bd80      	pop	{r7, pc}

0800620e <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800620e:	b580      	push	{r7, lr}
 8006210:	b086      	sub	sp, #24
 8006212:	af00      	add	r7, sp, #0
 8006214:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800621c:	69db      	ldr	r3, [r3, #28]
 800621e:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006220:	2300      	movs	r3, #0
 8006222:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8006224:	697b      	ldr	r3, [r7, #20]
 8006226:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800622a:	2b03      	cmp	r3, #3
 800622c:	d002      	beq.n	8006234 <CDC_ProcessReception+0x26>
 800622e:	2b04      	cmp	r3, #4
 8006230:	d00e      	beq.n	8006250 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8006232:	e043      	b.n	80062bc <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8006234:	697b      	ldr	r3, [r7, #20]
 8006236:	6a19      	ldr	r1, [r3, #32]
 8006238:	697b      	ldr	r3, [r7, #20]
 800623a:	8b5a      	ldrh	r2, [r3, #26]
 800623c:	697b      	ldr	r3, [r7, #20]
 800623e:	7b1b      	ldrb	r3, [r3, #12]
 8006240:	6878      	ldr	r0, [r7, #4]
 8006242:	f000 fc6f 	bl	8006b24 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8006246:	697b      	ldr	r3, [r7, #20]
 8006248:	2204      	movs	r2, #4
 800624a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800624e:	e035      	b.n	80062bc <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8006250:	697b      	ldr	r3, [r7, #20]
 8006252:	7b1b      	ldrb	r3, [r3, #12]
 8006254:	4619      	mov	r1, r3
 8006256:	6878      	ldr	r0, [r7, #4]
 8006258:	f000 ff22 	bl	80070a0 <USBH_LL_GetURBState>
 800625c:	4603      	mov	r3, r0
 800625e:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8006260:	7cfb      	ldrb	r3, [r7, #19]
 8006262:	2b01      	cmp	r3, #1
 8006264:	d129      	bne.n	80062ba <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8006266:	697b      	ldr	r3, [r7, #20]
 8006268:	7b1b      	ldrb	r3, [r3, #12]
 800626a:	4619      	mov	r1, r3
 800626c:	6878      	ldr	r0, [r7, #4]
 800626e:	f000 fe85 	bl	8006f7c <USBH_LL_GetLastXferSize>
 8006272:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8006274:	697b      	ldr	r3, [r7, #20]
 8006276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006278:	68fa      	ldr	r2, [r7, #12]
 800627a:	429a      	cmp	r2, r3
 800627c:	d016      	beq.n	80062ac <CDC_ProcessReception+0x9e>
 800627e:	697b      	ldr	r3, [r7, #20]
 8006280:	8b5b      	ldrh	r3, [r3, #26]
 8006282:	461a      	mov	r2, r3
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	4293      	cmp	r3, r2
 8006288:	d910      	bls.n	80062ac <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800628a:	697b      	ldr	r3, [r7, #20]
 800628c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	1ad2      	subs	r2, r2, r3
 8006292:	697b      	ldr	r3, [r7, #20]
 8006294:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8006296:	697b      	ldr	r3, [r7, #20]
 8006298:	6a1a      	ldr	r2, [r3, #32]
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	441a      	add	r2, r3
 800629e:	697b      	ldr	r3, [r7, #20]
 80062a0:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80062a2:	697b      	ldr	r3, [r7, #20]
 80062a4:	2203      	movs	r2, #3
 80062a6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80062aa:	e006      	b.n	80062ba <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 80062ac:	697b      	ldr	r3, [r7, #20]
 80062ae:	2200      	movs	r2, #0
 80062b0:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 80062b4:	6878      	ldr	r0, [r7, #4]
 80062b6:	f000 f80f 	bl	80062d8 <USBH_CDC_ReceiveCallback>
      break;
 80062ba:	bf00      	nop
  }
}
 80062bc:	bf00      	nop
 80062be:	3718      	adds	r7, #24
 80062c0:	46bd      	mov	sp, r7
 80062c2:	bd80      	pop	{r7, pc}

080062c4 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80062c4:	b480      	push	{r7}
 80062c6:	b083      	sub	sp, #12
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80062cc:	bf00      	nop
 80062ce:	370c      	adds	r7, #12
 80062d0:	46bd      	mov	sp, r7
 80062d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d6:	4770      	bx	lr

080062d8 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 80062d8:	b480      	push	{r7}
 80062da:	b083      	sub	sp, #12
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80062e0:	bf00      	nop
 80062e2:	370c      	adds	r7, #12
 80062e4:	46bd      	mov	sp, r7
 80062e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ea:	4770      	bx	lr

080062ec <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80062ec:	b480      	push	{r7}
 80062ee:	b083      	sub	sp, #12
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80062f4:	bf00      	nop
 80062f6:	370c      	adds	r7, #12
 80062f8:	46bd      	mov	sp, r7
 80062fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fe:	4770      	bx	lr

08006300 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b084      	sub	sp, #16
 8006304:	af00      	add	r7, sp, #0
 8006306:	60f8      	str	r0, [r7, #12]
 8006308:	60b9      	str	r1, [r7, #8]
 800630a:	4613      	mov	r3, r2
 800630c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d101      	bne.n	8006318 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006314:	2302      	movs	r3, #2
 8006316:	e029      	b.n	800636c <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	79fa      	ldrb	r2, [r7, #7]
 800631c:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	2200      	movs	r2, #0
 8006324:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	2200      	movs	r2, #0
 800632c:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8006330:	68f8      	ldr	r0, [r7, #12]
 8006332:	f000 f81f 	bl	8006374 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	2200      	movs	r2, #0
 800633a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	2200      	movs	r2, #0
 8006342:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	2200      	movs	r2, #0
 800634a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	2200      	movs	r2, #0
 8006352:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8006356:	68bb      	ldr	r3, [r7, #8]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d003      	beq.n	8006364 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	68ba      	ldr	r2, [r7, #8]
 8006360:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8006364:	68f8      	ldr	r0, [r7, #12]
 8006366:	f000 fd97 	bl	8006e98 <USBH_LL_Init>

  return USBH_OK;
 800636a:	2300      	movs	r3, #0
}
 800636c:	4618      	mov	r0, r3
 800636e:	3710      	adds	r7, #16
 8006370:	46bd      	mov	sp, r7
 8006372:	bd80      	pop	{r7, pc}

08006374 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006374:	b480      	push	{r7}
 8006376:	b085      	sub	sp, #20
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800637c:	2300      	movs	r3, #0
 800637e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006380:	2300      	movs	r3, #0
 8006382:	60fb      	str	r3, [r7, #12]
 8006384:	e009      	b.n	800639a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8006386:	687a      	ldr	r2, [r7, #4]
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	33e0      	adds	r3, #224	; 0xe0
 800638c:	009b      	lsls	r3, r3, #2
 800638e:	4413      	add	r3, r2
 8006390:	2200      	movs	r2, #0
 8006392:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	3301      	adds	r3, #1
 8006398:	60fb      	str	r3, [r7, #12]
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	2b0f      	cmp	r3, #15
 800639e:	d9f2      	bls.n	8006386 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80063a0:	2300      	movs	r3, #0
 80063a2:	60fb      	str	r3, [r7, #12]
 80063a4:	e009      	b.n	80063ba <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 80063a6:	687a      	ldr	r2, [r7, #4]
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	4413      	add	r3, r2
 80063ac:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80063b0:	2200      	movs	r2, #0
 80063b2:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	3301      	adds	r3, #1
 80063b8:	60fb      	str	r3, [r7, #12]
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80063c0:	d3f1      	bcc.n	80063a6 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2200      	movs	r2, #0
 80063c6:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2200      	movs	r2, #0
 80063cc:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2201      	movs	r2, #1
 80063d2:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2200      	movs	r2, #0
 80063d8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2201      	movs	r2, #1
 80063e0:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2240      	movs	r2, #64	; 0x40
 80063e6:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2200      	movs	r2, #0
 80063ec:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2200      	movs	r2, #0
 80063f2:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	2201      	movs	r2, #1
 80063fa:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2200      	movs	r2, #0
 8006402:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2200      	movs	r2, #0
 800640a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800640e:	2300      	movs	r3, #0
}
 8006410:	4618      	mov	r0, r3
 8006412:	3714      	adds	r7, #20
 8006414:	46bd      	mov	sp, r7
 8006416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641a:	4770      	bx	lr

0800641c <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800641c:	b480      	push	{r7}
 800641e:	b085      	sub	sp, #20
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
 8006424:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8006426:	2300      	movs	r3, #0
 8006428:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d016      	beq.n	800645e <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006436:	2b00      	cmp	r3, #0
 8006438:	d10e      	bne.n	8006458 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006440:	1c59      	adds	r1, r3, #1
 8006442:	687a      	ldr	r2, [r7, #4]
 8006444:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8006448:	687a      	ldr	r2, [r7, #4]
 800644a:	33de      	adds	r3, #222	; 0xde
 800644c:	6839      	ldr	r1, [r7, #0]
 800644e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8006452:	2300      	movs	r3, #0
 8006454:	73fb      	strb	r3, [r7, #15]
 8006456:	e004      	b.n	8006462 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8006458:	2302      	movs	r3, #2
 800645a:	73fb      	strb	r3, [r7, #15]
 800645c:	e001      	b.n	8006462 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800645e:	2302      	movs	r3, #2
 8006460:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006462:	7bfb      	ldrb	r3, [r7, #15]
}
 8006464:	4618      	mov	r0, r3
 8006466:	3714      	adds	r7, #20
 8006468:	46bd      	mov	sp, r7
 800646a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646e:	4770      	bx	lr

08006470 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006470:	b480      	push	{r7}
 8006472:	b085      	sub	sp, #20
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
 8006478:	460b      	mov	r3, r1
 800647a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800647c:	2300      	movs	r3, #0
 800647e:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8006486:	78fa      	ldrb	r2, [r7, #3]
 8006488:	429a      	cmp	r2, r3
 800648a:	d204      	bcs.n	8006496 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	78fa      	ldrb	r2, [r7, #3]
 8006490:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8006494:	e001      	b.n	800649a <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8006496:	2302      	movs	r3, #2
 8006498:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800649a:	7bfb      	ldrb	r3, [r7, #15]
}
 800649c:	4618      	mov	r0, r3
 800649e:	3714      	adds	r7, #20
 80064a0:	46bd      	mov	sp, r7
 80064a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a6:	4770      	bx	lr

080064a8 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80064a8:	b480      	push	{r7}
 80064aa:	b087      	sub	sp, #28
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
 80064b0:	4608      	mov	r0, r1
 80064b2:	4611      	mov	r1, r2
 80064b4:	461a      	mov	r2, r3
 80064b6:	4603      	mov	r3, r0
 80064b8:	70fb      	strb	r3, [r7, #3]
 80064ba:	460b      	mov	r3, r1
 80064bc:	70bb      	strb	r3, [r7, #2]
 80064be:	4613      	mov	r3, r2
 80064c0:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80064c2:	2300      	movs	r3, #0
 80064c4:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 80064c6:	2300      	movs	r3, #0
 80064c8:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80064d0:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80064d2:	e025      	b.n	8006520 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80064d4:	7dfb      	ldrb	r3, [r7, #23]
 80064d6:	221a      	movs	r2, #26
 80064d8:	fb02 f303 	mul.w	r3, r2, r3
 80064dc:	3308      	adds	r3, #8
 80064de:	68fa      	ldr	r2, [r7, #12]
 80064e0:	4413      	add	r3, r2
 80064e2:	3302      	adds	r3, #2
 80064e4:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80064e6:	693b      	ldr	r3, [r7, #16]
 80064e8:	795b      	ldrb	r3, [r3, #5]
 80064ea:	78fa      	ldrb	r2, [r7, #3]
 80064ec:	429a      	cmp	r2, r3
 80064ee:	d002      	beq.n	80064f6 <USBH_FindInterface+0x4e>
 80064f0:	78fb      	ldrb	r3, [r7, #3]
 80064f2:	2bff      	cmp	r3, #255	; 0xff
 80064f4:	d111      	bne.n	800651a <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80064f6:	693b      	ldr	r3, [r7, #16]
 80064f8:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80064fa:	78ba      	ldrb	r2, [r7, #2]
 80064fc:	429a      	cmp	r2, r3
 80064fe:	d002      	beq.n	8006506 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006500:	78bb      	ldrb	r3, [r7, #2]
 8006502:	2bff      	cmp	r3, #255	; 0xff
 8006504:	d109      	bne.n	800651a <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006506:	693b      	ldr	r3, [r7, #16]
 8006508:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800650a:	787a      	ldrb	r2, [r7, #1]
 800650c:	429a      	cmp	r2, r3
 800650e:	d002      	beq.n	8006516 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006510:	787b      	ldrb	r3, [r7, #1]
 8006512:	2bff      	cmp	r3, #255	; 0xff
 8006514:	d101      	bne.n	800651a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8006516:	7dfb      	ldrb	r3, [r7, #23]
 8006518:	e006      	b.n	8006528 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800651a:	7dfb      	ldrb	r3, [r7, #23]
 800651c:	3301      	adds	r3, #1
 800651e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006520:	7dfb      	ldrb	r3, [r7, #23]
 8006522:	2b01      	cmp	r3, #1
 8006524:	d9d6      	bls.n	80064d4 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8006526:	23ff      	movs	r3, #255	; 0xff
}
 8006528:	4618      	mov	r0, r3
 800652a:	371c      	adds	r7, #28
 800652c:	46bd      	mov	sp, r7
 800652e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006532:	4770      	bx	lr

08006534 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8006534:	b580      	push	{r7, lr}
 8006536:	b082      	sub	sp, #8
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800653c:	6878      	ldr	r0, [r7, #4]
 800653e:	f000 fce7 	bl	8006f10 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8006542:	2101      	movs	r1, #1
 8006544:	6878      	ldr	r0, [r7, #4]
 8006546:	f000 fdbe 	bl	80070c6 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800654a:	2300      	movs	r3, #0
}
 800654c:	4618      	mov	r0, r3
 800654e:	3708      	adds	r7, #8
 8006550:	46bd      	mov	sp, r7
 8006552:	bd80      	pop	{r7, pc}

08006554 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8006554:	b480      	push	{r7}
 8006556:	b083      	sub	sp, #12
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
 800655c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	683a      	ldr	r2, [r7, #0]
 8006562:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8006566:	bf00      	nop
 8006568:	370c      	adds	r7, #12
 800656a:	46bd      	mov	sp, r7
 800656c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006570:	4770      	bx	lr

08006572 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8006572:	b580      	push	{r7, lr}
 8006574:	b082      	sub	sp, #8
 8006576:	af00      	add	r7, sp, #0
 8006578:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006580:	1c5a      	adds	r2, r3, #1
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8006588:	6878      	ldr	r0, [r7, #4]
 800658a:	f000 f804 	bl	8006596 <USBH_HandleSof>
}
 800658e:	bf00      	nop
 8006590:	3708      	adds	r7, #8
 8006592:	46bd      	mov	sp, r7
 8006594:	bd80      	pop	{r7, pc}

08006596 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8006596:	b580      	push	{r7, lr}
 8006598:	b082      	sub	sp, #8
 800659a:	af00      	add	r7, sp, #0
 800659c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	781b      	ldrb	r3, [r3, #0]
 80065a2:	b2db      	uxtb	r3, r3
 80065a4:	2b0b      	cmp	r3, #11
 80065a6:	d10a      	bne.n	80065be <USBH_HandleSof+0x28>
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d005      	beq.n	80065be <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80065b8:	699b      	ldr	r3, [r3, #24]
 80065ba:	6878      	ldr	r0, [r7, #4]
 80065bc:	4798      	blx	r3
  }
}
 80065be:	bf00      	nop
 80065c0:	3708      	adds	r7, #8
 80065c2:	46bd      	mov	sp, r7
 80065c4:	bd80      	pop	{r7, pc}

080065c6 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80065c6:	b480      	push	{r7}
 80065c8:	b083      	sub	sp, #12
 80065ca:	af00      	add	r7, sp, #0
 80065cc:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2201      	movs	r2, #1
 80065d2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 80065d6:	bf00      	nop
}
 80065d8:	370c      	adds	r7, #12
 80065da:	46bd      	mov	sp, r7
 80065dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e0:	4770      	bx	lr

080065e2 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80065e2:	b480      	push	{r7}
 80065e4:	b083      	sub	sp, #12
 80065e6:	af00      	add	r7, sp, #0
 80065e8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2200      	movs	r2, #0
 80065ee:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 80065f2:	bf00      	nop
}
 80065f4:	370c      	adds	r7, #12
 80065f6:	46bd      	mov	sp, r7
 80065f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fc:	4770      	bx	lr

080065fe <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80065fe:	b480      	push	{r7}
 8006600:	b083      	sub	sp, #12
 8006602:	af00      	add	r7, sp, #0
 8006604:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2201      	movs	r2, #1
 800660a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2200      	movs	r2, #0
 8006612:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2200      	movs	r2, #0
 800661a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800661e:	2300      	movs	r3, #0
}
 8006620:	4618      	mov	r0, r3
 8006622:	370c      	adds	r7, #12
 8006624:	46bd      	mov	sp, r7
 8006626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662a:	4770      	bx	lr

0800662c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b082      	sub	sp, #8
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2201      	movs	r2, #1
 8006638:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2200      	movs	r2, #0
 8006640:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2200      	movs	r2, #0
 8006648:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800664c:	6878      	ldr	r0, [r7, #4]
 800664e:	f000 fc7a 	bl	8006f46 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	791b      	ldrb	r3, [r3, #4]
 8006656:	4619      	mov	r1, r3
 8006658:	6878      	ldr	r0, [r7, #4]
 800665a:	f000 fad1 	bl	8006c00 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	795b      	ldrb	r3, [r3, #5]
 8006662:	4619      	mov	r1, r3
 8006664:	6878      	ldr	r0, [r7, #4]
 8006666:	f000 facb 	bl	8006c00 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800666a:	2300      	movs	r3, #0
}
 800666c:	4618      	mov	r0, r3
 800666e:	3708      	adds	r7, #8
 8006670:	46bd      	mov	sp, r7
 8006672:	bd80      	pop	{r7, pc}

08006674 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8006674:	b580      	push	{r7, lr}
 8006676:	b082      	sub	sp, #8
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
 800667c:	460b      	mov	r3, r1
 800667e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	789b      	ldrb	r3, [r3, #2]
 8006684:	2b01      	cmp	r3, #1
 8006686:	d10f      	bne.n	80066a8 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2202      	movs	r2, #2
 800668c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2201      	movs	r2, #1
 8006692:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2200      	movs	r2, #0
 8006698:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800669a:	78fb      	ldrb	r3, [r7, #3]
 800669c:	b29a      	uxth	r2, r3
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2200      	movs	r2, #0
 80066a6:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 80066a8:	2200      	movs	r2, #0
 80066aa:	2100      	movs	r1, #0
 80066ac:	6878      	ldr	r0, [r7, #4]
 80066ae:	f000 f805 	bl	80066bc <USBH_CtlReq>
 80066b2:	4603      	mov	r3, r0
}
 80066b4:	4618      	mov	r0, r3
 80066b6:	3708      	adds	r7, #8
 80066b8:	46bd      	mov	sp, r7
 80066ba:	bd80      	pop	{r7, pc}

080066bc <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b086      	sub	sp, #24
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	60f8      	str	r0, [r7, #12]
 80066c4:	60b9      	str	r1, [r7, #8]
 80066c6:	4613      	mov	r3, r2
 80066c8:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80066ca:	2301      	movs	r3, #1
 80066cc:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	789b      	ldrb	r3, [r3, #2]
 80066d2:	2b01      	cmp	r3, #1
 80066d4:	d002      	beq.n	80066dc <USBH_CtlReq+0x20>
 80066d6:	2b02      	cmp	r3, #2
 80066d8:	d00f      	beq.n	80066fa <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 80066da:	e027      	b.n	800672c <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	68ba      	ldr	r2, [r7, #8]
 80066e0:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	88fa      	ldrh	r2, [r7, #6]
 80066e6:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	2201      	movs	r2, #1
 80066ec:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	2202      	movs	r2, #2
 80066f2:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80066f4:	2301      	movs	r3, #1
 80066f6:	75fb      	strb	r3, [r7, #23]
      break;
 80066f8:	e018      	b.n	800672c <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 80066fa:	68f8      	ldr	r0, [r7, #12]
 80066fc:	f000 f81c 	bl	8006738 <USBH_HandleControl>
 8006700:	4603      	mov	r3, r0
 8006702:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8006704:	7dfb      	ldrb	r3, [r7, #23]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d002      	beq.n	8006710 <USBH_CtlReq+0x54>
 800670a:	7dfb      	ldrb	r3, [r7, #23]
 800670c:	2b03      	cmp	r3, #3
 800670e:	d106      	bne.n	800671e <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	2201      	movs	r2, #1
 8006714:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	2200      	movs	r2, #0
 800671a:	761a      	strb	r2, [r3, #24]
      break;
 800671c:	e005      	b.n	800672a <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800671e:	7dfb      	ldrb	r3, [r7, #23]
 8006720:	2b02      	cmp	r3, #2
 8006722:	d102      	bne.n	800672a <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	2201      	movs	r2, #1
 8006728:	709a      	strb	r2, [r3, #2]
      break;
 800672a:	bf00      	nop
  }
  return status;
 800672c:	7dfb      	ldrb	r3, [r7, #23]
}
 800672e:	4618      	mov	r0, r3
 8006730:	3718      	adds	r7, #24
 8006732:	46bd      	mov	sp, r7
 8006734:	bd80      	pop	{r7, pc}
	...

08006738 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b086      	sub	sp, #24
 800673c:	af02      	add	r7, sp, #8
 800673e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8006740:	2301      	movs	r3, #1
 8006742:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006744:	2300      	movs	r3, #0
 8006746:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	7e1b      	ldrb	r3, [r3, #24]
 800674c:	3b01      	subs	r3, #1
 800674e:	2b0a      	cmp	r3, #10
 8006750:	f200 8156 	bhi.w	8006a00 <USBH_HandleControl+0x2c8>
 8006754:	a201      	add	r2, pc, #4	; (adr r2, 800675c <USBH_HandleControl+0x24>)
 8006756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800675a:	bf00      	nop
 800675c:	08006789 	.word	0x08006789
 8006760:	080067a3 	.word	0x080067a3
 8006764:	0800680d 	.word	0x0800680d
 8006768:	08006833 	.word	0x08006833
 800676c:	0800686b 	.word	0x0800686b
 8006770:	08006895 	.word	0x08006895
 8006774:	080068e7 	.word	0x080068e7
 8006778:	08006909 	.word	0x08006909
 800677c:	08006945 	.word	0x08006945
 8006780:	0800696b 	.word	0x0800696b
 8006784:	080069a9 	.word	0x080069a9
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	f103 0110 	add.w	r1, r3, #16
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	795b      	ldrb	r3, [r3, #5]
 8006792:	461a      	mov	r2, r3
 8006794:	6878      	ldr	r0, [r7, #4]
 8006796:	f000 f943 	bl	8006a20 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	2202      	movs	r2, #2
 800679e:	761a      	strb	r2, [r3, #24]
      break;
 80067a0:	e139      	b.n	8006a16 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	795b      	ldrb	r3, [r3, #5]
 80067a6:	4619      	mov	r1, r3
 80067a8:	6878      	ldr	r0, [r7, #4]
 80067aa:	f000 fc79 	bl	80070a0 <USBH_LL_GetURBState>
 80067ae:	4603      	mov	r3, r0
 80067b0:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80067b2:	7bbb      	ldrb	r3, [r7, #14]
 80067b4:	2b01      	cmp	r3, #1
 80067b6:	d11e      	bne.n	80067f6 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	7c1b      	ldrb	r3, [r3, #16]
 80067bc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80067c0:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	8adb      	ldrh	r3, [r3, #22]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d00a      	beq.n	80067e0 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 80067ca:	7b7b      	ldrb	r3, [r7, #13]
 80067cc:	2b80      	cmp	r3, #128	; 0x80
 80067ce:	d103      	bne.n	80067d8 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2203      	movs	r2, #3
 80067d4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80067d6:	e115      	b.n	8006a04 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2205      	movs	r2, #5
 80067dc:	761a      	strb	r2, [r3, #24]
      break;
 80067de:	e111      	b.n	8006a04 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 80067e0:	7b7b      	ldrb	r3, [r7, #13]
 80067e2:	2b80      	cmp	r3, #128	; 0x80
 80067e4:	d103      	bne.n	80067ee <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	2209      	movs	r2, #9
 80067ea:	761a      	strb	r2, [r3, #24]
      break;
 80067ec:	e10a      	b.n	8006a04 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2207      	movs	r2, #7
 80067f2:	761a      	strb	r2, [r3, #24]
      break;
 80067f4:	e106      	b.n	8006a04 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80067f6:	7bbb      	ldrb	r3, [r7, #14]
 80067f8:	2b04      	cmp	r3, #4
 80067fa:	d003      	beq.n	8006804 <USBH_HandleControl+0xcc>
 80067fc:	7bbb      	ldrb	r3, [r7, #14]
 80067fe:	2b02      	cmp	r3, #2
 8006800:	f040 8100 	bne.w	8006a04 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	220b      	movs	r2, #11
 8006808:	761a      	strb	r2, [r3, #24]
      break;
 800680a:	e0fb      	b.n	8006a04 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006812:	b29a      	uxth	r2, r3
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	6899      	ldr	r1, [r3, #8]
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	899a      	ldrh	r2, [r3, #12]
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	791b      	ldrb	r3, [r3, #4]
 8006824:	6878      	ldr	r0, [r7, #4]
 8006826:	f000 f93a 	bl	8006a9e <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2204      	movs	r2, #4
 800682e:	761a      	strb	r2, [r3, #24]
      break;
 8006830:	e0f1      	b.n	8006a16 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	791b      	ldrb	r3, [r3, #4]
 8006836:	4619      	mov	r1, r3
 8006838:	6878      	ldr	r0, [r7, #4]
 800683a:	f000 fc31 	bl	80070a0 <USBH_LL_GetURBState>
 800683e:	4603      	mov	r3, r0
 8006840:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8006842:	7bbb      	ldrb	r3, [r7, #14]
 8006844:	2b01      	cmp	r3, #1
 8006846:	d102      	bne.n	800684e <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2209      	movs	r2, #9
 800684c:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800684e:	7bbb      	ldrb	r3, [r7, #14]
 8006850:	2b05      	cmp	r3, #5
 8006852:	d102      	bne.n	800685a <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8006854:	2303      	movs	r3, #3
 8006856:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8006858:	e0d6      	b.n	8006a08 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800685a:	7bbb      	ldrb	r3, [r7, #14]
 800685c:	2b04      	cmp	r3, #4
 800685e:	f040 80d3 	bne.w	8006a08 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	220b      	movs	r2, #11
 8006866:	761a      	strb	r2, [r3, #24]
      break;
 8006868:	e0ce      	b.n	8006a08 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6899      	ldr	r1, [r3, #8]
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	899a      	ldrh	r2, [r3, #12]
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	795b      	ldrb	r3, [r3, #5]
 8006876:	2001      	movs	r0, #1
 8006878:	9000      	str	r0, [sp, #0]
 800687a:	6878      	ldr	r0, [r7, #4]
 800687c:	f000 f8ea 	bl	8006a54 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006886:	b29a      	uxth	r2, r3
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2206      	movs	r2, #6
 8006890:	761a      	strb	r2, [r3, #24]
      break;
 8006892:	e0c0      	b.n	8006a16 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	795b      	ldrb	r3, [r3, #5]
 8006898:	4619      	mov	r1, r3
 800689a:	6878      	ldr	r0, [r7, #4]
 800689c:	f000 fc00 	bl	80070a0 <USBH_LL_GetURBState>
 80068a0:	4603      	mov	r3, r0
 80068a2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80068a4:	7bbb      	ldrb	r3, [r7, #14]
 80068a6:	2b01      	cmp	r3, #1
 80068a8:	d103      	bne.n	80068b2 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2207      	movs	r2, #7
 80068ae:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80068b0:	e0ac      	b.n	8006a0c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 80068b2:	7bbb      	ldrb	r3, [r7, #14]
 80068b4:	2b05      	cmp	r3, #5
 80068b6:	d105      	bne.n	80068c4 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	220c      	movs	r2, #12
 80068bc:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80068be:	2303      	movs	r3, #3
 80068c0:	73fb      	strb	r3, [r7, #15]
      break;
 80068c2:	e0a3      	b.n	8006a0c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 80068c4:	7bbb      	ldrb	r3, [r7, #14]
 80068c6:	2b02      	cmp	r3, #2
 80068c8:	d103      	bne.n	80068d2 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2205      	movs	r2, #5
 80068ce:	761a      	strb	r2, [r3, #24]
      break;
 80068d0:	e09c      	b.n	8006a0c <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 80068d2:	7bbb      	ldrb	r3, [r7, #14]
 80068d4:	2b04      	cmp	r3, #4
 80068d6:	f040 8099 	bne.w	8006a0c <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	220b      	movs	r2, #11
 80068de:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 80068e0:	2302      	movs	r3, #2
 80068e2:	73fb      	strb	r3, [r7, #15]
      break;
 80068e4:	e092      	b.n	8006a0c <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	791b      	ldrb	r3, [r3, #4]
 80068ea:	2200      	movs	r2, #0
 80068ec:	2100      	movs	r1, #0
 80068ee:	6878      	ldr	r0, [r7, #4]
 80068f0:	f000 f8d5 	bl	8006a9e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80068fa:	b29a      	uxth	r2, r3
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2208      	movs	r2, #8
 8006904:	761a      	strb	r2, [r3, #24]

      break;
 8006906:	e086      	b.n	8006a16 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	791b      	ldrb	r3, [r3, #4]
 800690c:	4619      	mov	r1, r3
 800690e:	6878      	ldr	r0, [r7, #4]
 8006910:	f000 fbc6 	bl	80070a0 <USBH_LL_GetURBState>
 8006914:	4603      	mov	r3, r0
 8006916:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8006918:	7bbb      	ldrb	r3, [r7, #14]
 800691a:	2b01      	cmp	r3, #1
 800691c:	d105      	bne.n	800692a <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	220d      	movs	r2, #13
 8006922:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8006924:	2300      	movs	r3, #0
 8006926:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8006928:	e072      	b.n	8006a10 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800692a:	7bbb      	ldrb	r3, [r7, #14]
 800692c:	2b04      	cmp	r3, #4
 800692e:	d103      	bne.n	8006938 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	220b      	movs	r2, #11
 8006934:	761a      	strb	r2, [r3, #24]
      break;
 8006936:	e06b      	b.n	8006a10 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8006938:	7bbb      	ldrb	r3, [r7, #14]
 800693a:	2b05      	cmp	r3, #5
 800693c:	d168      	bne.n	8006a10 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800693e:	2303      	movs	r3, #3
 8006940:	73fb      	strb	r3, [r7, #15]
      break;
 8006942:	e065      	b.n	8006a10 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	795b      	ldrb	r3, [r3, #5]
 8006948:	2201      	movs	r2, #1
 800694a:	9200      	str	r2, [sp, #0]
 800694c:	2200      	movs	r2, #0
 800694e:	2100      	movs	r1, #0
 8006950:	6878      	ldr	r0, [r7, #4]
 8006952:	f000 f87f 	bl	8006a54 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800695c:	b29a      	uxth	r2, r3
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	220a      	movs	r2, #10
 8006966:	761a      	strb	r2, [r3, #24]
      break;
 8006968:	e055      	b.n	8006a16 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	795b      	ldrb	r3, [r3, #5]
 800696e:	4619      	mov	r1, r3
 8006970:	6878      	ldr	r0, [r7, #4]
 8006972:	f000 fb95 	bl	80070a0 <USBH_LL_GetURBState>
 8006976:	4603      	mov	r3, r0
 8006978:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800697a:	7bbb      	ldrb	r3, [r7, #14]
 800697c:	2b01      	cmp	r3, #1
 800697e:	d105      	bne.n	800698c <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8006980:	2300      	movs	r3, #0
 8006982:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	220d      	movs	r2, #13
 8006988:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800698a:	e043      	b.n	8006a14 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800698c:	7bbb      	ldrb	r3, [r7, #14]
 800698e:	2b02      	cmp	r3, #2
 8006990:	d103      	bne.n	800699a <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2209      	movs	r2, #9
 8006996:	761a      	strb	r2, [r3, #24]
      break;
 8006998:	e03c      	b.n	8006a14 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800699a:	7bbb      	ldrb	r3, [r7, #14]
 800699c:	2b04      	cmp	r3, #4
 800699e:	d139      	bne.n	8006a14 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	220b      	movs	r2, #11
 80069a4:	761a      	strb	r2, [r3, #24]
      break;
 80069a6:	e035      	b.n	8006a14 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	7e5b      	ldrb	r3, [r3, #25]
 80069ac:	3301      	adds	r3, #1
 80069ae:	b2da      	uxtb	r2, r3
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	765a      	strb	r2, [r3, #25]
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	7e5b      	ldrb	r3, [r3, #25]
 80069b8:	2b02      	cmp	r3, #2
 80069ba:	d806      	bhi.n	80069ca <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2201      	movs	r2, #1
 80069c0:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2201      	movs	r2, #1
 80069c6:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 80069c8:	e025      	b.n	8006a16 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80069d0:	2106      	movs	r1, #6
 80069d2:	6878      	ldr	r0, [r7, #4]
 80069d4:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2200      	movs	r2, #0
 80069da:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	795b      	ldrb	r3, [r3, #5]
 80069e0:	4619      	mov	r1, r3
 80069e2:	6878      	ldr	r0, [r7, #4]
 80069e4:	f000 f90c 	bl	8006c00 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	791b      	ldrb	r3, [r3, #4]
 80069ec:	4619      	mov	r1, r3
 80069ee:	6878      	ldr	r0, [r7, #4]
 80069f0:	f000 f906 	bl	8006c00 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2200      	movs	r2, #0
 80069f8:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80069fa:	2302      	movs	r3, #2
 80069fc:	73fb      	strb	r3, [r7, #15]
      break;
 80069fe:	e00a      	b.n	8006a16 <USBH_HandleControl+0x2de>

    default:
      break;
 8006a00:	bf00      	nop
 8006a02:	e008      	b.n	8006a16 <USBH_HandleControl+0x2de>
      break;
 8006a04:	bf00      	nop
 8006a06:	e006      	b.n	8006a16 <USBH_HandleControl+0x2de>
      break;
 8006a08:	bf00      	nop
 8006a0a:	e004      	b.n	8006a16 <USBH_HandleControl+0x2de>
      break;
 8006a0c:	bf00      	nop
 8006a0e:	e002      	b.n	8006a16 <USBH_HandleControl+0x2de>
      break;
 8006a10:	bf00      	nop
 8006a12:	e000      	b.n	8006a16 <USBH_HandleControl+0x2de>
      break;
 8006a14:	bf00      	nop
  }

  return status;
 8006a16:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a18:	4618      	mov	r0, r3
 8006a1a:	3710      	adds	r7, #16
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	bd80      	pop	{r7, pc}

08006a20 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b088      	sub	sp, #32
 8006a24:	af04      	add	r7, sp, #16
 8006a26:	60f8      	str	r0, [r7, #12]
 8006a28:	60b9      	str	r1, [r7, #8]
 8006a2a:	4613      	mov	r3, r2
 8006a2c:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8006a2e:	79f9      	ldrb	r1, [r7, #7]
 8006a30:	2300      	movs	r3, #0
 8006a32:	9303      	str	r3, [sp, #12]
 8006a34:	2308      	movs	r3, #8
 8006a36:	9302      	str	r3, [sp, #8]
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	9301      	str	r3, [sp, #4]
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	9300      	str	r3, [sp, #0]
 8006a40:	2300      	movs	r3, #0
 8006a42:	2200      	movs	r2, #0
 8006a44:	68f8      	ldr	r0, [r7, #12]
 8006a46:	f000 fafa 	bl	800703e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8006a4a:	2300      	movs	r3, #0
}
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	3710      	adds	r7, #16
 8006a50:	46bd      	mov	sp, r7
 8006a52:	bd80      	pop	{r7, pc}

08006a54 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b088      	sub	sp, #32
 8006a58:	af04      	add	r7, sp, #16
 8006a5a:	60f8      	str	r0, [r7, #12]
 8006a5c:	60b9      	str	r1, [r7, #8]
 8006a5e:	4611      	mov	r1, r2
 8006a60:	461a      	mov	r2, r3
 8006a62:	460b      	mov	r3, r1
 8006a64:	80fb      	strh	r3, [r7, #6]
 8006a66:	4613      	mov	r3, r2
 8006a68:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d001      	beq.n	8006a78 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8006a74:	2300      	movs	r3, #0
 8006a76:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8006a78:	7979      	ldrb	r1, [r7, #5]
 8006a7a:	7e3b      	ldrb	r3, [r7, #24]
 8006a7c:	9303      	str	r3, [sp, #12]
 8006a7e:	88fb      	ldrh	r3, [r7, #6]
 8006a80:	9302      	str	r3, [sp, #8]
 8006a82:	68bb      	ldr	r3, [r7, #8]
 8006a84:	9301      	str	r3, [sp, #4]
 8006a86:	2301      	movs	r3, #1
 8006a88:	9300      	str	r3, [sp, #0]
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	68f8      	ldr	r0, [r7, #12]
 8006a90:	f000 fad5 	bl	800703e <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8006a94:	2300      	movs	r3, #0
}
 8006a96:	4618      	mov	r0, r3
 8006a98:	3710      	adds	r7, #16
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	bd80      	pop	{r7, pc}

08006a9e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8006a9e:	b580      	push	{r7, lr}
 8006aa0:	b088      	sub	sp, #32
 8006aa2:	af04      	add	r7, sp, #16
 8006aa4:	60f8      	str	r0, [r7, #12]
 8006aa6:	60b9      	str	r1, [r7, #8]
 8006aa8:	4611      	mov	r1, r2
 8006aaa:	461a      	mov	r2, r3
 8006aac:	460b      	mov	r3, r1
 8006aae:	80fb      	strh	r3, [r7, #6]
 8006ab0:	4613      	mov	r3, r2
 8006ab2:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8006ab4:	7979      	ldrb	r1, [r7, #5]
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	9303      	str	r3, [sp, #12]
 8006aba:	88fb      	ldrh	r3, [r7, #6]
 8006abc:	9302      	str	r3, [sp, #8]
 8006abe:	68bb      	ldr	r3, [r7, #8]
 8006ac0:	9301      	str	r3, [sp, #4]
 8006ac2:	2301      	movs	r3, #1
 8006ac4:	9300      	str	r3, [sp, #0]
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	2201      	movs	r2, #1
 8006aca:	68f8      	ldr	r0, [r7, #12]
 8006acc:	f000 fab7 	bl	800703e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8006ad0:	2300      	movs	r3, #0

}
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	3710      	adds	r7, #16
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	bd80      	pop	{r7, pc}

08006ada <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8006ada:	b580      	push	{r7, lr}
 8006adc:	b088      	sub	sp, #32
 8006ade:	af04      	add	r7, sp, #16
 8006ae0:	60f8      	str	r0, [r7, #12]
 8006ae2:	60b9      	str	r1, [r7, #8]
 8006ae4:	4611      	mov	r1, r2
 8006ae6:	461a      	mov	r2, r3
 8006ae8:	460b      	mov	r3, r1
 8006aea:	80fb      	strh	r3, [r7, #6]
 8006aec:	4613      	mov	r3, r2
 8006aee:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d001      	beq.n	8006afe <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8006afa:	2300      	movs	r3, #0
 8006afc:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8006afe:	7979      	ldrb	r1, [r7, #5]
 8006b00:	7e3b      	ldrb	r3, [r7, #24]
 8006b02:	9303      	str	r3, [sp, #12]
 8006b04:	88fb      	ldrh	r3, [r7, #6]
 8006b06:	9302      	str	r3, [sp, #8]
 8006b08:	68bb      	ldr	r3, [r7, #8]
 8006b0a:	9301      	str	r3, [sp, #4]
 8006b0c:	2301      	movs	r3, #1
 8006b0e:	9300      	str	r3, [sp, #0]
 8006b10:	2302      	movs	r3, #2
 8006b12:	2200      	movs	r2, #0
 8006b14:	68f8      	ldr	r0, [r7, #12]
 8006b16:	f000 fa92 	bl	800703e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8006b1a:	2300      	movs	r3, #0
}
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	3710      	adds	r7, #16
 8006b20:	46bd      	mov	sp, r7
 8006b22:	bd80      	pop	{r7, pc}

08006b24 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b088      	sub	sp, #32
 8006b28:	af04      	add	r7, sp, #16
 8006b2a:	60f8      	str	r0, [r7, #12]
 8006b2c:	60b9      	str	r1, [r7, #8]
 8006b2e:	4611      	mov	r1, r2
 8006b30:	461a      	mov	r2, r3
 8006b32:	460b      	mov	r3, r1
 8006b34:	80fb      	strh	r3, [r7, #6]
 8006b36:	4613      	mov	r3, r2
 8006b38:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8006b3a:	7979      	ldrb	r1, [r7, #5]
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	9303      	str	r3, [sp, #12]
 8006b40:	88fb      	ldrh	r3, [r7, #6]
 8006b42:	9302      	str	r3, [sp, #8]
 8006b44:	68bb      	ldr	r3, [r7, #8]
 8006b46:	9301      	str	r3, [sp, #4]
 8006b48:	2301      	movs	r3, #1
 8006b4a:	9300      	str	r3, [sp, #0]
 8006b4c:	2302      	movs	r3, #2
 8006b4e:	2201      	movs	r2, #1
 8006b50:	68f8      	ldr	r0, [r7, #12]
 8006b52:	f000 fa74 	bl	800703e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8006b56:	2300      	movs	r3, #0
}
 8006b58:	4618      	mov	r0, r3
 8006b5a:	3710      	adds	r7, #16
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	bd80      	pop	{r7, pc}

08006b60 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b086      	sub	sp, #24
 8006b64:	af04      	add	r7, sp, #16
 8006b66:	6078      	str	r0, [r7, #4]
 8006b68:	4608      	mov	r0, r1
 8006b6a:	4611      	mov	r1, r2
 8006b6c:	461a      	mov	r2, r3
 8006b6e:	4603      	mov	r3, r0
 8006b70:	70fb      	strb	r3, [r7, #3]
 8006b72:	460b      	mov	r3, r1
 8006b74:	70bb      	strb	r3, [r7, #2]
 8006b76:	4613      	mov	r3, r2
 8006b78:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8006b7a:	7878      	ldrb	r0, [r7, #1]
 8006b7c:	78ba      	ldrb	r2, [r7, #2]
 8006b7e:	78f9      	ldrb	r1, [r7, #3]
 8006b80:	8b3b      	ldrh	r3, [r7, #24]
 8006b82:	9302      	str	r3, [sp, #8]
 8006b84:	7d3b      	ldrb	r3, [r7, #20]
 8006b86:	9301      	str	r3, [sp, #4]
 8006b88:	7c3b      	ldrb	r3, [r7, #16]
 8006b8a:	9300      	str	r3, [sp, #0]
 8006b8c:	4603      	mov	r3, r0
 8006b8e:	6878      	ldr	r0, [r7, #4]
 8006b90:	f000 fa07 	bl	8006fa2 <USBH_LL_OpenPipe>

  return USBH_OK;
 8006b94:	2300      	movs	r3, #0
}
 8006b96:	4618      	mov	r0, r3
 8006b98:	3708      	adds	r7, #8
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	bd80      	pop	{r7, pc}

08006b9e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8006b9e:	b580      	push	{r7, lr}
 8006ba0:	b082      	sub	sp, #8
 8006ba2:	af00      	add	r7, sp, #0
 8006ba4:	6078      	str	r0, [r7, #4]
 8006ba6:	460b      	mov	r3, r1
 8006ba8:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8006baa:	78fb      	ldrb	r3, [r7, #3]
 8006bac:	4619      	mov	r1, r3
 8006bae:	6878      	ldr	r0, [r7, #4]
 8006bb0:	f000 fa26 	bl	8007000 <USBH_LL_ClosePipe>

  return USBH_OK;
 8006bb4:	2300      	movs	r3, #0
}
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	3708      	adds	r7, #8
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	bd80      	pop	{r7, pc}

08006bbe <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8006bbe:	b580      	push	{r7, lr}
 8006bc0:	b084      	sub	sp, #16
 8006bc2:	af00      	add	r7, sp, #0
 8006bc4:	6078      	str	r0, [r7, #4]
 8006bc6:	460b      	mov	r3, r1
 8006bc8:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8006bca:	6878      	ldr	r0, [r7, #4]
 8006bcc:	f000 f836 	bl	8006c3c <USBH_GetFreePipe>
 8006bd0:	4603      	mov	r3, r0
 8006bd2:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8006bd4:	89fb      	ldrh	r3, [r7, #14]
 8006bd6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d00a      	beq.n	8006bf4 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8006bde:	78fa      	ldrb	r2, [r7, #3]
 8006be0:	89fb      	ldrh	r3, [r7, #14]
 8006be2:	f003 030f 	and.w	r3, r3, #15
 8006be6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006bea:	6879      	ldr	r1, [r7, #4]
 8006bec:	33e0      	adds	r3, #224	; 0xe0
 8006bee:	009b      	lsls	r3, r3, #2
 8006bf0:	440b      	add	r3, r1
 8006bf2:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8006bf4:	89fb      	ldrh	r3, [r7, #14]
 8006bf6:	b2db      	uxtb	r3, r3
}
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	3710      	adds	r7, #16
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	bd80      	pop	{r7, pc}

08006c00 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8006c00:	b480      	push	{r7}
 8006c02:	b083      	sub	sp, #12
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
 8006c08:	460b      	mov	r3, r1
 8006c0a:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8006c0c:	78fb      	ldrb	r3, [r7, #3]
 8006c0e:	2b0f      	cmp	r3, #15
 8006c10:	d80d      	bhi.n	8006c2e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8006c12:	78fb      	ldrb	r3, [r7, #3]
 8006c14:	687a      	ldr	r2, [r7, #4]
 8006c16:	33e0      	adds	r3, #224	; 0xe0
 8006c18:	009b      	lsls	r3, r3, #2
 8006c1a:	4413      	add	r3, r2
 8006c1c:	685a      	ldr	r2, [r3, #4]
 8006c1e:	78fb      	ldrb	r3, [r7, #3]
 8006c20:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8006c24:	6879      	ldr	r1, [r7, #4]
 8006c26:	33e0      	adds	r3, #224	; 0xe0
 8006c28:	009b      	lsls	r3, r3, #2
 8006c2a:	440b      	add	r3, r1
 8006c2c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8006c2e:	2300      	movs	r3, #0
}
 8006c30:	4618      	mov	r0, r3
 8006c32:	370c      	adds	r7, #12
 8006c34:	46bd      	mov	sp, r7
 8006c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3a:	4770      	bx	lr

08006c3c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8006c3c:	b480      	push	{r7}
 8006c3e:	b085      	sub	sp, #20
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8006c44:	2300      	movs	r3, #0
 8006c46:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8006c48:	2300      	movs	r3, #0
 8006c4a:	73fb      	strb	r3, [r7, #15]
 8006c4c:	e00f      	b.n	8006c6e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8006c4e:	7bfb      	ldrb	r3, [r7, #15]
 8006c50:	687a      	ldr	r2, [r7, #4]
 8006c52:	33e0      	adds	r3, #224	; 0xe0
 8006c54:	009b      	lsls	r3, r3, #2
 8006c56:	4413      	add	r3, r2
 8006c58:	685b      	ldr	r3, [r3, #4]
 8006c5a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d102      	bne.n	8006c68 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8006c62:	7bfb      	ldrb	r3, [r7, #15]
 8006c64:	b29b      	uxth	r3, r3
 8006c66:	e007      	b.n	8006c78 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8006c68:	7bfb      	ldrb	r3, [r7, #15]
 8006c6a:	3301      	adds	r3, #1
 8006c6c:	73fb      	strb	r3, [r7, #15]
 8006c6e:	7bfb      	ldrb	r3, [r7, #15]
 8006c70:	2b0f      	cmp	r3, #15
 8006c72:	d9ec      	bls.n	8006c4e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8006c74:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8006c78:	4618      	mov	r0, r3
 8006c7a:	3714      	adds	r7, #20
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c82:	4770      	bx	lr

08006c84 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8006c88:	2201      	movs	r2, #1
 8006c8a:	490e      	ldr	r1, [pc, #56]	; (8006cc4 <MX_USB_HOST_Init+0x40>)
 8006c8c:	480e      	ldr	r0, [pc, #56]	; (8006cc8 <MX_USB_HOST_Init+0x44>)
 8006c8e:	f7ff fb37 	bl	8006300 <USBH_Init>
 8006c92:	4603      	mov	r3, r0
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d001      	beq.n	8006c9c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8006c98:	f7f9 fe5c 	bl	8000954 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8006c9c:	490b      	ldr	r1, [pc, #44]	; (8006ccc <MX_USB_HOST_Init+0x48>)
 8006c9e:	480a      	ldr	r0, [pc, #40]	; (8006cc8 <MX_USB_HOST_Init+0x44>)
 8006ca0:	f7ff fbbc 	bl	800641c <USBH_RegisterClass>
 8006ca4:	4603      	mov	r3, r0
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d001      	beq.n	8006cae <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8006caa:	f7f9 fe53 	bl	8000954 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8006cae:	4806      	ldr	r0, [pc, #24]	; (8006cc8 <MX_USB_HOST_Init+0x44>)
 8006cb0:	f7ff fc40 	bl	8006534 <USBH_Start>
 8006cb4:	4603      	mov	r3, r0
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d001      	beq.n	8006cbe <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8006cba:	f7f9 fe4b 	bl	8000954 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8006cbe:	bf00      	nop
 8006cc0:	bd80      	pop	{r7, pc}
 8006cc2:	bf00      	nop
 8006cc4:	08006cd1 	.word	0x08006cd1
 8006cc8:	200001d8 	.word	0x200001d8
 8006ccc:	2000000c 	.word	0x2000000c

08006cd0 <USBH_UserProcess>:
}
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8006cd0:	b480      	push	{r7}
 8006cd2:	b083      	sub	sp, #12
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
 8006cd8:	460b      	mov	r3, r1
 8006cda:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8006cdc:	78fb      	ldrb	r3, [r7, #3]
 8006cde:	3b01      	subs	r3, #1
 8006ce0:	2b04      	cmp	r3, #4
 8006ce2:	d819      	bhi.n	8006d18 <USBH_UserProcess+0x48>
 8006ce4:	a201      	add	r2, pc, #4	; (adr r2, 8006cec <USBH_UserProcess+0x1c>)
 8006ce6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cea:	bf00      	nop
 8006cec:	08006d19 	.word	0x08006d19
 8006cf0:	08006d09 	.word	0x08006d09
 8006cf4:	08006d19 	.word	0x08006d19
 8006cf8:	08006d11 	.word	0x08006d11
 8006cfc:	08006d01 	.word	0x08006d01
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8006d00:	4b09      	ldr	r3, [pc, #36]	; (8006d28 <USBH_UserProcess+0x58>)
 8006d02:	2203      	movs	r2, #3
 8006d04:	701a      	strb	r2, [r3, #0]
  break;
 8006d06:	e008      	b.n	8006d1a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8006d08:	4b07      	ldr	r3, [pc, #28]	; (8006d28 <USBH_UserProcess+0x58>)
 8006d0a:	2202      	movs	r2, #2
 8006d0c:	701a      	strb	r2, [r3, #0]
  break;
 8006d0e:	e004      	b.n	8006d1a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8006d10:	4b05      	ldr	r3, [pc, #20]	; (8006d28 <USBH_UserProcess+0x58>)
 8006d12:	2201      	movs	r2, #1
 8006d14:	701a      	strb	r2, [r3, #0]
  break;
 8006d16:	e000      	b.n	8006d1a <USBH_UserProcess+0x4a>

  default:
  break;
 8006d18:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8006d1a:	bf00      	nop
 8006d1c:	370c      	adds	r7, #12
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d24:	4770      	bx	lr
 8006d26:	bf00      	nop
 8006d28:	200005b0 	.word	0x200005b0

08006d2c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b08a      	sub	sp, #40	; 0x28
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006d34:	f107 0314 	add.w	r3, r7, #20
 8006d38:	2200      	movs	r2, #0
 8006d3a:	601a      	str	r2, [r3, #0]
 8006d3c:	605a      	str	r2, [r3, #4]
 8006d3e:	609a      	str	r2, [r3, #8]
 8006d40:	60da      	str	r2, [r3, #12]
 8006d42:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006d4c:	d147      	bne.n	8006dde <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006d4e:	2300      	movs	r3, #0
 8006d50:	613b      	str	r3, [r7, #16]
 8006d52:	4b25      	ldr	r3, [pc, #148]	; (8006de8 <HAL_HCD_MspInit+0xbc>)
 8006d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d56:	4a24      	ldr	r2, [pc, #144]	; (8006de8 <HAL_HCD_MspInit+0xbc>)
 8006d58:	f043 0301 	orr.w	r3, r3, #1
 8006d5c:	6313      	str	r3, [r2, #48]	; 0x30
 8006d5e:	4b22      	ldr	r3, [pc, #136]	; (8006de8 <HAL_HCD_MspInit+0xbc>)
 8006d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d62:	f003 0301 	and.w	r3, r3, #1
 8006d66:	613b      	str	r3, [r7, #16]
 8006d68:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8006d6a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006d6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006d70:	2300      	movs	r3, #0
 8006d72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d74:	2300      	movs	r3, #0
 8006d76:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8006d78:	f107 0314 	add.w	r3, r7, #20
 8006d7c:	4619      	mov	r1, r3
 8006d7e:	481b      	ldr	r0, [pc, #108]	; (8006dec <HAL_HCD_MspInit+0xc0>)
 8006d80:	f7fa f9bc 	bl	80010fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8006d84:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8006d88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d8a:	2302      	movs	r3, #2
 8006d8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d8e:	2300      	movs	r3, #0
 8006d90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006d92:	2300      	movs	r3, #0
 8006d94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006d96:	230a      	movs	r3, #10
 8006d98:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006d9a:	f107 0314 	add.w	r3, r7, #20
 8006d9e:	4619      	mov	r1, r3
 8006da0:	4812      	ldr	r0, [pc, #72]	; (8006dec <HAL_HCD_MspInit+0xc0>)
 8006da2:	f7fa f9ab 	bl	80010fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006da6:	4b10      	ldr	r3, [pc, #64]	; (8006de8 <HAL_HCD_MspInit+0xbc>)
 8006da8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006daa:	4a0f      	ldr	r2, [pc, #60]	; (8006de8 <HAL_HCD_MspInit+0xbc>)
 8006dac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006db0:	6353      	str	r3, [r2, #52]	; 0x34
 8006db2:	2300      	movs	r3, #0
 8006db4:	60fb      	str	r3, [r7, #12]
 8006db6:	4b0c      	ldr	r3, [pc, #48]	; (8006de8 <HAL_HCD_MspInit+0xbc>)
 8006db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dba:	4a0b      	ldr	r2, [pc, #44]	; (8006de8 <HAL_HCD_MspInit+0xbc>)
 8006dbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006dc0:	6453      	str	r3, [r2, #68]	; 0x44
 8006dc2:	4b09      	ldr	r3, [pc, #36]	; (8006de8 <HAL_HCD_MspInit+0xbc>)
 8006dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006dca:	60fb      	str	r3, [r7, #12]
 8006dcc:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006dce:	2200      	movs	r2, #0
 8006dd0:	2100      	movs	r1, #0
 8006dd2:	2043      	movs	r0, #67	; 0x43
 8006dd4:	f7fa f95b 	bl	800108e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006dd8:	2043      	movs	r0, #67	; 0x43
 8006dda:	f7fa f974 	bl	80010c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006dde:	bf00      	nop
 8006de0:	3728      	adds	r7, #40	; 0x28
 8006de2:	46bd      	mov	sp, r7
 8006de4:	bd80      	pop	{r7, pc}
 8006de6:	bf00      	nop
 8006de8:	40023800 	.word	0x40023800
 8006dec:	40020000 	.word	0x40020000

08006df0 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b082      	sub	sp, #8
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8006dfe:	4618      	mov	r0, r3
 8006e00:	f7ff fbb7 	bl	8006572 <USBH_LL_IncTimer>
}
 8006e04:	bf00      	nop
 8006e06:	3708      	adds	r7, #8
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	bd80      	pop	{r7, pc}

08006e0c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b082      	sub	sp, #8
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	f7ff fbef 	bl	80065fe <USBH_LL_Connect>
}
 8006e20:	bf00      	nop
 8006e22:	3708      	adds	r7, #8
 8006e24:	46bd      	mov	sp, r7
 8006e26:	bd80      	pop	{r7, pc}

08006e28 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b082      	sub	sp, #8
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8006e36:	4618      	mov	r0, r3
 8006e38:	f7ff fbf8 	bl	800662c <USBH_LL_Disconnect>
}
 8006e3c:	bf00      	nop
 8006e3e:	3708      	adds	r7, #8
 8006e40:	46bd      	mov	sp, r7
 8006e42:	bd80      	pop	{r7, pc}

08006e44 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8006e44:	b480      	push	{r7}
 8006e46:	b083      	sub	sp, #12
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
 8006e4c:	460b      	mov	r3, r1
 8006e4e:	70fb      	strb	r3, [r7, #3]
 8006e50:	4613      	mov	r3, r2
 8006e52:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8006e54:	bf00      	nop
 8006e56:	370c      	adds	r7, #12
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5e:	4770      	bx	lr

08006e60 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b082      	sub	sp, #8
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8006e6e:	4618      	mov	r0, r3
 8006e70:	f7ff fba9 	bl	80065c6 <USBH_LL_PortEnabled>
}
 8006e74:	bf00      	nop
 8006e76:	3708      	adds	r7, #8
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	bd80      	pop	{r7, pc}

08006e7c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b082      	sub	sp, #8
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	f7ff fba9 	bl	80065e2 <USBH_LL_PortDisabled>
}
 8006e90:	bf00      	nop
 8006e92:	3708      	adds	r7, #8
 8006e94:	46bd      	mov	sp, r7
 8006e96:	bd80      	pop	{r7, pc}

08006e98 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b082      	sub	sp, #8
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8006ea6:	2b01      	cmp	r3, #1
 8006ea8:	d12a      	bne.n	8006f00 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8006eaa:	4a18      	ldr	r2, [pc, #96]	; (8006f0c <USBH_LL_Init+0x74>)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	4a15      	ldr	r2, [pc, #84]	; (8006f0c <USBH_LL_Init+0x74>)
 8006eb6:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006eba:	4b14      	ldr	r3, [pc, #80]	; (8006f0c <USBH_LL_Init+0x74>)
 8006ebc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8006ec0:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8006ec2:	4b12      	ldr	r3, [pc, #72]	; (8006f0c <USBH_LL_Init+0x74>)
 8006ec4:	2208      	movs	r2, #8
 8006ec6:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8006ec8:	4b10      	ldr	r3, [pc, #64]	; (8006f0c <USBH_LL_Init+0x74>)
 8006eca:	2201      	movs	r2, #1
 8006ecc:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8006ece:	4b0f      	ldr	r3, [pc, #60]	; (8006f0c <USBH_LL_Init+0x74>)
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8006ed4:	4b0d      	ldr	r3, [pc, #52]	; (8006f0c <USBH_LL_Init+0x74>)
 8006ed6:	2202      	movs	r2, #2
 8006ed8:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8006eda:	4b0c      	ldr	r3, [pc, #48]	; (8006f0c <USBH_LL_Init+0x74>)
 8006edc:	2200      	movs	r2, #0
 8006ede:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8006ee0:	480a      	ldr	r0, [pc, #40]	; (8006f0c <USBH_LL_Init+0x74>)
 8006ee2:	f7fa fac0 	bl	8001466 <HAL_HCD_Init>
 8006ee6:	4603      	mov	r3, r0
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d001      	beq.n	8006ef0 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8006eec:	f7f9 fd32 	bl	8000954 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8006ef0:	4806      	ldr	r0, [pc, #24]	; (8006f0c <USBH_LL_Init+0x74>)
 8006ef2:	f7fa fe96 	bl	8001c22 <HAL_HCD_GetCurrentFrame>
 8006ef6:	4603      	mov	r3, r0
 8006ef8:	4619      	mov	r1, r3
 8006efa:	6878      	ldr	r0, [r7, #4]
 8006efc:	f7ff fb2a 	bl	8006554 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8006f00:	2300      	movs	r3, #0
}
 8006f02:	4618      	mov	r0, r3
 8006f04:	3708      	adds	r7, #8
 8006f06:	46bd      	mov	sp, r7
 8006f08:	bd80      	pop	{r7, pc}
 8006f0a:	bf00      	nop
 8006f0c:	200005b4 	.word	0x200005b4

08006f10 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b084      	sub	sp, #16
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006f18:	2300      	movs	r3, #0
 8006f1a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8006f26:	4618      	mov	r0, r3
 8006f28:	f7fa fe13 	bl	8001b52 <HAL_HCD_Start>
 8006f2c:	4603      	mov	r3, r0
 8006f2e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8006f30:	7bfb      	ldrb	r3, [r7, #15]
 8006f32:	4618      	mov	r0, r3
 8006f34:	f000 f90e 	bl	8007154 <USBH_Get_USB_Status>
 8006f38:	4603      	mov	r3, r0
 8006f3a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006f3c:	7bbb      	ldrb	r3, [r7, #14]
}
 8006f3e:	4618      	mov	r0, r3
 8006f40:	3710      	adds	r7, #16
 8006f42:	46bd      	mov	sp, r7
 8006f44:	bd80      	pop	{r7, pc}

08006f46 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8006f46:	b580      	push	{r7, lr}
 8006f48:	b084      	sub	sp, #16
 8006f4a:	af00      	add	r7, sp, #0
 8006f4c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006f4e:	2300      	movs	r3, #0
 8006f50:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006f52:	2300      	movs	r3, #0
 8006f54:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	f7fa fe1b 	bl	8001b98 <HAL_HCD_Stop>
 8006f62:	4603      	mov	r3, r0
 8006f64:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8006f66:	7bfb      	ldrb	r3, [r7, #15]
 8006f68:	4618      	mov	r0, r3
 8006f6a:	f000 f8f3 	bl	8007154 <USBH_Get_USB_Status>
 8006f6e:	4603      	mov	r3, r0
 8006f70:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006f72:	7bbb      	ldrb	r3, [r7, #14]
}
 8006f74:	4618      	mov	r0, r3
 8006f76:	3710      	adds	r7, #16
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	bd80      	pop	{r7, pc}

08006f7c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b082      	sub	sp, #8
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
 8006f84:	460b      	mov	r3, r1
 8006f86:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8006f8e:	78fa      	ldrb	r2, [r7, #3]
 8006f90:	4611      	mov	r1, r2
 8006f92:	4618      	mov	r0, r3
 8006f94:	f7fa fe31 	bl	8001bfa <HAL_HCD_HC_GetXferCount>
 8006f98:	4603      	mov	r3, r0
}
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	3708      	adds	r7, #8
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	bd80      	pop	{r7, pc}

08006fa2 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8006fa2:	b590      	push	{r4, r7, lr}
 8006fa4:	b089      	sub	sp, #36	; 0x24
 8006fa6:	af04      	add	r7, sp, #16
 8006fa8:	6078      	str	r0, [r7, #4]
 8006faa:	4608      	mov	r0, r1
 8006fac:	4611      	mov	r1, r2
 8006fae:	461a      	mov	r2, r3
 8006fb0:	4603      	mov	r3, r0
 8006fb2:	70fb      	strb	r3, [r7, #3]
 8006fb4:	460b      	mov	r3, r1
 8006fb6:	70bb      	strb	r3, [r7, #2]
 8006fb8:	4613      	mov	r3, r2
 8006fba:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8006fca:	787c      	ldrb	r4, [r7, #1]
 8006fcc:	78ba      	ldrb	r2, [r7, #2]
 8006fce:	78f9      	ldrb	r1, [r7, #3]
 8006fd0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006fd2:	9302      	str	r3, [sp, #8]
 8006fd4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006fd8:	9301      	str	r3, [sp, #4]
 8006fda:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006fde:	9300      	str	r3, [sp, #0]
 8006fe0:	4623      	mov	r3, r4
 8006fe2:	f7fa faa2 	bl	800152a <HAL_HCD_HC_Init>
 8006fe6:	4603      	mov	r3, r0
 8006fe8:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8006fea:	7bfb      	ldrb	r3, [r7, #15]
 8006fec:	4618      	mov	r0, r3
 8006fee:	f000 f8b1 	bl	8007154 <USBH_Get_USB_Status>
 8006ff2:	4603      	mov	r3, r0
 8006ff4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006ff6:	7bbb      	ldrb	r3, [r7, #14]
}
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	3714      	adds	r7, #20
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	bd90      	pop	{r4, r7, pc}

08007000 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007000:	b580      	push	{r7, lr}
 8007002:	b084      	sub	sp, #16
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
 8007008:	460b      	mov	r3, r1
 800700a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800700c:	2300      	movs	r3, #0
 800700e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007010:	2300      	movs	r3, #0
 8007012:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800701a:	78fa      	ldrb	r2, [r7, #3]
 800701c:	4611      	mov	r1, r2
 800701e:	4618      	mov	r0, r3
 8007020:	f7fa fb12 	bl	8001648 <HAL_HCD_HC_Halt>
 8007024:	4603      	mov	r3, r0
 8007026:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007028:	7bfb      	ldrb	r3, [r7, #15]
 800702a:	4618      	mov	r0, r3
 800702c:	f000 f892 	bl	8007154 <USBH_Get_USB_Status>
 8007030:	4603      	mov	r3, r0
 8007032:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007034:	7bbb      	ldrb	r3, [r7, #14]
}
 8007036:	4618      	mov	r0, r3
 8007038:	3710      	adds	r7, #16
 800703a:	46bd      	mov	sp, r7
 800703c:	bd80      	pop	{r7, pc}

0800703e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800703e:	b590      	push	{r4, r7, lr}
 8007040:	b089      	sub	sp, #36	; 0x24
 8007042:	af04      	add	r7, sp, #16
 8007044:	6078      	str	r0, [r7, #4]
 8007046:	4608      	mov	r0, r1
 8007048:	4611      	mov	r1, r2
 800704a:	461a      	mov	r2, r3
 800704c:	4603      	mov	r3, r0
 800704e:	70fb      	strb	r3, [r7, #3]
 8007050:	460b      	mov	r3, r1
 8007052:	70bb      	strb	r3, [r7, #2]
 8007054:	4613      	mov	r3, r2
 8007056:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007058:	2300      	movs	r3, #0
 800705a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800705c:	2300      	movs	r3, #0
 800705e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8007066:	787c      	ldrb	r4, [r7, #1]
 8007068:	78ba      	ldrb	r2, [r7, #2]
 800706a:	78f9      	ldrb	r1, [r7, #3]
 800706c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007070:	9303      	str	r3, [sp, #12]
 8007072:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007074:	9302      	str	r3, [sp, #8]
 8007076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007078:	9301      	str	r3, [sp, #4]
 800707a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800707e:	9300      	str	r3, [sp, #0]
 8007080:	4623      	mov	r3, r4
 8007082:	f7fa fb05 	bl	8001690 <HAL_HCD_HC_SubmitRequest>
 8007086:	4603      	mov	r3, r0
 8007088:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800708a:	7bfb      	ldrb	r3, [r7, #15]
 800708c:	4618      	mov	r0, r3
 800708e:	f000 f861 	bl	8007154 <USBH_Get_USB_Status>
 8007092:	4603      	mov	r3, r0
 8007094:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007096:	7bbb      	ldrb	r3, [r7, #14]
}
 8007098:	4618      	mov	r0, r3
 800709a:	3714      	adds	r7, #20
 800709c:	46bd      	mov	sp, r7
 800709e:	bd90      	pop	{r4, r7, pc}

080070a0 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b082      	sub	sp, #8
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
 80070a8:	460b      	mov	r3, r1
 80070aa:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80070b2:	78fa      	ldrb	r2, [r7, #3]
 80070b4:	4611      	mov	r1, r2
 80070b6:	4618      	mov	r0, r3
 80070b8:	f7fa fd8b 	bl	8001bd2 <HAL_HCD_HC_GetURBState>
 80070bc:	4603      	mov	r3, r0
}
 80070be:	4618      	mov	r0, r3
 80070c0:	3708      	adds	r7, #8
 80070c2:	46bd      	mov	sp, r7
 80070c4:	bd80      	pop	{r7, pc}

080070c6 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80070c6:	b580      	push	{r7, lr}
 80070c8:	b082      	sub	sp, #8
 80070ca:	af00      	add	r7, sp, #0
 80070cc:	6078      	str	r0, [r7, #4]
 80070ce:	460b      	mov	r3, r1
 80070d0:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80070d8:	2b01      	cmp	r3, #1
 80070da:	d103      	bne.n	80070e4 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80070dc:	78fb      	ldrb	r3, [r7, #3]
 80070de:	4618      	mov	r0, r3
 80070e0:	f000 f864 	bl	80071ac <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80070e4:	20c8      	movs	r0, #200	; 0xc8
 80070e6:	f7f9 fed3 	bl	8000e90 <HAL_Delay>
  return USBH_OK;
 80070ea:	2300      	movs	r3, #0
}
 80070ec:	4618      	mov	r0, r3
 80070ee:	3708      	adds	r7, #8
 80070f0:	46bd      	mov	sp, r7
 80070f2:	bd80      	pop	{r7, pc}

080070f4 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80070f4:	b480      	push	{r7}
 80070f6:	b085      	sub	sp, #20
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
 80070fc:	460b      	mov	r3, r1
 80070fe:	70fb      	strb	r3, [r7, #3]
 8007100:	4613      	mov	r3, r2
 8007102:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800710a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800710c:	78fb      	ldrb	r3, [r7, #3]
 800710e:	68fa      	ldr	r2, [r7, #12]
 8007110:	212c      	movs	r1, #44	; 0x2c
 8007112:	fb01 f303 	mul.w	r3, r1, r3
 8007116:	4413      	add	r3, r2
 8007118:	333b      	adds	r3, #59	; 0x3b
 800711a:	781b      	ldrb	r3, [r3, #0]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d009      	beq.n	8007134 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8007120:	78fb      	ldrb	r3, [r7, #3]
 8007122:	68fa      	ldr	r2, [r7, #12]
 8007124:	212c      	movs	r1, #44	; 0x2c
 8007126:	fb01 f303 	mul.w	r3, r1, r3
 800712a:	4413      	add	r3, r2
 800712c:	3354      	adds	r3, #84	; 0x54
 800712e:	78ba      	ldrb	r2, [r7, #2]
 8007130:	701a      	strb	r2, [r3, #0]
 8007132:	e008      	b.n	8007146 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8007134:	78fb      	ldrb	r3, [r7, #3]
 8007136:	68fa      	ldr	r2, [r7, #12]
 8007138:	212c      	movs	r1, #44	; 0x2c
 800713a:	fb01 f303 	mul.w	r3, r1, r3
 800713e:	4413      	add	r3, r2
 8007140:	3355      	adds	r3, #85	; 0x55
 8007142:	78ba      	ldrb	r2, [r7, #2]
 8007144:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8007146:	2300      	movs	r3, #0
}
 8007148:	4618      	mov	r0, r3
 800714a:	3714      	adds	r7, #20
 800714c:	46bd      	mov	sp, r7
 800714e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007152:	4770      	bx	lr

08007154 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007154:	b480      	push	{r7}
 8007156:	b085      	sub	sp, #20
 8007158:	af00      	add	r7, sp, #0
 800715a:	4603      	mov	r3, r0
 800715c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800715e:	2300      	movs	r3, #0
 8007160:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007162:	79fb      	ldrb	r3, [r7, #7]
 8007164:	2b03      	cmp	r3, #3
 8007166:	d817      	bhi.n	8007198 <USBH_Get_USB_Status+0x44>
 8007168:	a201      	add	r2, pc, #4	; (adr r2, 8007170 <USBH_Get_USB_Status+0x1c>)
 800716a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800716e:	bf00      	nop
 8007170:	08007181 	.word	0x08007181
 8007174:	08007187 	.word	0x08007187
 8007178:	0800718d 	.word	0x0800718d
 800717c:	08007193 	.word	0x08007193
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8007180:	2300      	movs	r3, #0
 8007182:	73fb      	strb	r3, [r7, #15]
    break;
 8007184:	e00b      	b.n	800719e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8007186:	2302      	movs	r3, #2
 8007188:	73fb      	strb	r3, [r7, #15]
    break;
 800718a:	e008      	b.n	800719e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800718c:	2301      	movs	r3, #1
 800718e:	73fb      	strb	r3, [r7, #15]
    break;
 8007190:	e005      	b.n	800719e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8007192:	2302      	movs	r3, #2
 8007194:	73fb      	strb	r3, [r7, #15]
    break;
 8007196:	e002      	b.n	800719e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8007198:	2302      	movs	r3, #2
 800719a:	73fb      	strb	r3, [r7, #15]
    break;
 800719c:	bf00      	nop
  }
  return usb_status;
 800719e:	7bfb      	ldrb	r3, [r7, #15]
}
 80071a0:	4618      	mov	r0, r3
 80071a2:	3714      	adds	r7, #20
 80071a4:	46bd      	mov	sp, r7
 80071a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071aa:	4770      	bx	lr

080071ac <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b084      	sub	sp, #16
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	4603      	mov	r3, r0
 80071b4:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 80071b6:	79fb      	ldrb	r3, [r7, #7]
 80071b8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80071ba:	79fb      	ldrb	r3, [r7, #7]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d102      	bne.n	80071c6 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 80071c0:	2300      	movs	r3, #0
 80071c2:	73fb      	strb	r3, [r7, #15]
 80071c4:	e001      	b.n	80071ca <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 80071c6:	2301      	movs	r3, #1
 80071c8:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 80071ca:	7bfb      	ldrb	r3, [r7, #15]
 80071cc:	461a      	mov	r2, r3
 80071ce:	2101      	movs	r1, #1
 80071d0:	4803      	ldr	r0, [pc, #12]	; (80071e0 <MX_DriverVbusFS+0x34>)
 80071d2:	f7fa f92f 	bl	8001434 <HAL_GPIO_WritePin>
}
 80071d6:	bf00      	nop
 80071d8:	3710      	adds	r7, #16
 80071da:	46bd      	mov	sp, r7
 80071dc:	bd80      	pop	{r7, pc}
 80071de:	bf00      	nop
 80071e0:	40020800 	.word	0x40020800

080071e4 <malloc>:
 80071e4:	4b02      	ldr	r3, [pc, #8]	; (80071f0 <malloc+0xc>)
 80071e6:	4601      	mov	r1, r0
 80071e8:	6818      	ldr	r0, [r3, #0]
 80071ea:	f000 b82b 	b.w	8007244 <_malloc_r>
 80071ee:	bf00      	nop
 80071f0:	20000078 	.word	0x20000078

080071f4 <free>:
 80071f4:	4b02      	ldr	r3, [pc, #8]	; (8007200 <free+0xc>)
 80071f6:	4601      	mov	r1, r0
 80071f8:	6818      	ldr	r0, [r3, #0]
 80071fa:	f000 b8f3 	b.w	80073e4 <_free_r>
 80071fe:	bf00      	nop
 8007200:	20000078 	.word	0x20000078

08007204 <sbrk_aligned>:
 8007204:	b570      	push	{r4, r5, r6, lr}
 8007206:	4e0e      	ldr	r6, [pc, #56]	; (8007240 <sbrk_aligned+0x3c>)
 8007208:	460c      	mov	r4, r1
 800720a:	6831      	ldr	r1, [r6, #0]
 800720c:	4605      	mov	r5, r0
 800720e:	b911      	cbnz	r1, 8007216 <sbrk_aligned+0x12>
 8007210:	f000 f8ac 	bl	800736c <_sbrk_r>
 8007214:	6030      	str	r0, [r6, #0]
 8007216:	4621      	mov	r1, r4
 8007218:	4628      	mov	r0, r5
 800721a:	f000 f8a7 	bl	800736c <_sbrk_r>
 800721e:	1c43      	adds	r3, r0, #1
 8007220:	d00a      	beq.n	8007238 <sbrk_aligned+0x34>
 8007222:	1cc4      	adds	r4, r0, #3
 8007224:	f024 0403 	bic.w	r4, r4, #3
 8007228:	42a0      	cmp	r0, r4
 800722a:	d007      	beq.n	800723c <sbrk_aligned+0x38>
 800722c:	1a21      	subs	r1, r4, r0
 800722e:	4628      	mov	r0, r5
 8007230:	f000 f89c 	bl	800736c <_sbrk_r>
 8007234:	3001      	adds	r0, #1
 8007236:	d101      	bne.n	800723c <sbrk_aligned+0x38>
 8007238:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800723c:	4620      	mov	r0, r4
 800723e:	bd70      	pop	{r4, r5, r6, pc}
 8007240:	200008bc 	.word	0x200008bc

08007244 <_malloc_r>:
 8007244:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007248:	1ccd      	adds	r5, r1, #3
 800724a:	f025 0503 	bic.w	r5, r5, #3
 800724e:	3508      	adds	r5, #8
 8007250:	2d0c      	cmp	r5, #12
 8007252:	bf38      	it	cc
 8007254:	250c      	movcc	r5, #12
 8007256:	2d00      	cmp	r5, #0
 8007258:	4607      	mov	r7, r0
 800725a:	db01      	blt.n	8007260 <_malloc_r+0x1c>
 800725c:	42a9      	cmp	r1, r5
 800725e:	d905      	bls.n	800726c <_malloc_r+0x28>
 8007260:	230c      	movs	r3, #12
 8007262:	603b      	str	r3, [r7, #0]
 8007264:	2600      	movs	r6, #0
 8007266:	4630      	mov	r0, r6
 8007268:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800726c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007340 <_malloc_r+0xfc>
 8007270:	f000 f868 	bl	8007344 <__malloc_lock>
 8007274:	f8d8 3000 	ldr.w	r3, [r8]
 8007278:	461c      	mov	r4, r3
 800727a:	bb5c      	cbnz	r4, 80072d4 <_malloc_r+0x90>
 800727c:	4629      	mov	r1, r5
 800727e:	4638      	mov	r0, r7
 8007280:	f7ff ffc0 	bl	8007204 <sbrk_aligned>
 8007284:	1c43      	adds	r3, r0, #1
 8007286:	4604      	mov	r4, r0
 8007288:	d155      	bne.n	8007336 <_malloc_r+0xf2>
 800728a:	f8d8 4000 	ldr.w	r4, [r8]
 800728e:	4626      	mov	r6, r4
 8007290:	2e00      	cmp	r6, #0
 8007292:	d145      	bne.n	8007320 <_malloc_r+0xdc>
 8007294:	2c00      	cmp	r4, #0
 8007296:	d048      	beq.n	800732a <_malloc_r+0xe6>
 8007298:	6823      	ldr	r3, [r4, #0]
 800729a:	4631      	mov	r1, r6
 800729c:	4638      	mov	r0, r7
 800729e:	eb04 0903 	add.w	r9, r4, r3
 80072a2:	f000 f863 	bl	800736c <_sbrk_r>
 80072a6:	4581      	cmp	r9, r0
 80072a8:	d13f      	bne.n	800732a <_malloc_r+0xe6>
 80072aa:	6821      	ldr	r1, [r4, #0]
 80072ac:	1a6d      	subs	r5, r5, r1
 80072ae:	4629      	mov	r1, r5
 80072b0:	4638      	mov	r0, r7
 80072b2:	f7ff ffa7 	bl	8007204 <sbrk_aligned>
 80072b6:	3001      	adds	r0, #1
 80072b8:	d037      	beq.n	800732a <_malloc_r+0xe6>
 80072ba:	6823      	ldr	r3, [r4, #0]
 80072bc:	442b      	add	r3, r5
 80072be:	6023      	str	r3, [r4, #0]
 80072c0:	f8d8 3000 	ldr.w	r3, [r8]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d038      	beq.n	800733a <_malloc_r+0xf6>
 80072c8:	685a      	ldr	r2, [r3, #4]
 80072ca:	42a2      	cmp	r2, r4
 80072cc:	d12b      	bne.n	8007326 <_malloc_r+0xe2>
 80072ce:	2200      	movs	r2, #0
 80072d0:	605a      	str	r2, [r3, #4]
 80072d2:	e00f      	b.n	80072f4 <_malloc_r+0xb0>
 80072d4:	6822      	ldr	r2, [r4, #0]
 80072d6:	1b52      	subs	r2, r2, r5
 80072d8:	d41f      	bmi.n	800731a <_malloc_r+0xd6>
 80072da:	2a0b      	cmp	r2, #11
 80072dc:	d917      	bls.n	800730e <_malloc_r+0xca>
 80072de:	1961      	adds	r1, r4, r5
 80072e0:	42a3      	cmp	r3, r4
 80072e2:	6025      	str	r5, [r4, #0]
 80072e4:	bf18      	it	ne
 80072e6:	6059      	strne	r1, [r3, #4]
 80072e8:	6863      	ldr	r3, [r4, #4]
 80072ea:	bf08      	it	eq
 80072ec:	f8c8 1000 	streq.w	r1, [r8]
 80072f0:	5162      	str	r2, [r4, r5]
 80072f2:	604b      	str	r3, [r1, #4]
 80072f4:	4638      	mov	r0, r7
 80072f6:	f104 060b 	add.w	r6, r4, #11
 80072fa:	f000 f829 	bl	8007350 <__malloc_unlock>
 80072fe:	f026 0607 	bic.w	r6, r6, #7
 8007302:	1d23      	adds	r3, r4, #4
 8007304:	1af2      	subs	r2, r6, r3
 8007306:	d0ae      	beq.n	8007266 <_malloc_r+0x22>
 8007308:	1b9b      	subs	r3, r3, r6
 800730a:	50a3      	str	r3, [r4, r2]
 800730c:	e7ab      	b.n	8007266 <_malloc_r+0x22>
 800730e:	42a3      	cmp	r3, r4
 8007310:	6862      	ldr	r2, [r4, #4]
 8007312:	d1dd      	bne.n	80072d0 <_malloc_r+0x8c>
 8007314:	f8c8 2000 	str.w	r2, [r8]
 8007318:	e7ec      	b.n	80072f4 <_malloc_r+0xb0>
 800731a:	4623      	mov	r3, r4
 800731c:	6864      	ldr	r4, [r4, #4]
 800731e:	e7ac      	b.n	800727a <_malloc_r+0x36>
 8007320:	4634      	mov	r4, r6
 8007322:	6876      	ldr	r6, [r6, #4]
 8007324:	e7b4      	b.n	8007290 <_malloc_r+0x4c>
 8007326:	4613      	mov	r3, r2
 8007328:	e7cc      	b.n	80072c4 <_malloc_r+0x80>
 800732a:	230c      	movs	r3, #12
 800732c:	603b      	str	r3, [r7, #0]
 800732e:	4638      	mov	r0, r7
 8007330:	f000 f80e 	bl	8007350 <__malloc_unlock>
 8007334:	e797      	b.n	8007266 <_malloc_r+0x22>
 8007336:	6025      	str	r5, [r4, #0]
 8007338:	e7dc      	b.n	80072f4 <_malloc_r+0xb0>
 800733a:	605b      	str	r3, [r3, #4]
 800733c:	deff      	udf	#255	; 0xff
 800733e:	bf00      	nop
 8007340:	200008b8 	.word	0x200008b8

08007344 <__malloc_lock>:
 8007344:	4801      	ldr	r0, [pc, #4]	; (800734c <__malloc_lock+0x8>)
 8007346:	f000 b84b 	b.w	80073e0 <__retarget_lock_acquire_recursive>
 800734a:	bf00      	nop
 800734c:	200009f8 	.word	0x200009f8

08007350 <__malloc_unlock>:
 8007350:	4801      	ldr	r0, [pc, #4]	; (8007358 <__malloc_unlock+0x8>)
 8007352:	f000 b846 	b.w	80073e2 <__retarget_lock_release_recursive>
 8007356:	bf00      	nop
 8007358:	200009f8 	.word	0x200009f8

0800735c <memset>:
 800735c:	4402      	add	r2, r0
 800735e:	4603      	mov	r3, r0
 8007360:	4293      	cmp	r3, r2
 8007362:	d100      	bne.n	8007366 <memset+0xa>
 8007364:	4770      	bx	lr
 8007366:	f803 1b01 	strb.w	r1, [r3], #1
 800736a:	e7f9      	b.n	8007360 <memset+0x4>

0800736c <_sbrk_r>:
 800736c:	b538      	push	{r3, r4, r5, lr}
 800736e:	4d06      	ldr	r5, [pc, #24]	; (8007388 <_sbrk_r+0x1c>)
 8007370:	2300      	movs	r3, #0
 8007372:	4604      	mov	r4, r0
 8007374:	4608      	mov	r0, r1
 8007376:	602b      	str	r3, [r5, #0]
 8007378:	f7f9 fca6 	bl	8000cc8 <_sbrk>
 800737c:	1c43      	adds	r3, r0, #1
 800737e:	d102      	bne.n	8007386 <_sbrk_r+0x1a>
 8007380:	682b      	ldr	r3, [r5, #0]
 8007382:	b103      	cbz	r3, 8007386 <_sbrk_r+0x1a>
 8007384:	6023      	str	r3, [r4, #0]
 8007386:	bd38      	pop	{r3, r4, r5, pc}
 8007388:	200009fc 	.word	0x200009fc

0800738c <__errno>:
 800738c:	4b01      	ldr	r3, [pc, #4]	; (8007394 <__errno+0x8>)
 800738e:	6818      	ldr	r0, [r3, #0]
 8007390:	4770      	bx	lr
 8007392:	bf00      	nop
 8007394:	20000078 	.word	0x20000078

08007398 <__libc_init_array>:
 8007398:	b570      	push	{r4, r5, r6, lr}
 800739a:	4d0d      	ldr	r5, [pc, #52]	; (80073d0 <__libc_init_array+0x38>)
 800739c:	4c0d      	ldr	r4, [pc, #52]	; (80073d4 <__libc_init_array+0x3c>)
 800739e:	1b64      	subs	r4, r4, r5
 80073a0:	10a4      	asrs	r4, r4, #2
 80073a2:	2600      	movs	r6, #0
 80073a4:	42a6      	cmp	r6, r4
 80073a6:	d109      	bne.n	80073bc <__libc_init_array+0x24>
 80073a8:	4d0b      	ldr	r5, [pc, #44]	; (80073d8 <__libc_init_array+0x40>)
 80073aa:	4c0c      	ldr	r4, [pc, #48]	; (80073dc <__libc_init_array+0x44>)
 80073ac:	f000 f866 	bl	800747c <_init>
 80073b0:	1b64      	subs	r4, r4, r5
 80073b2:	10a4      	asrs	r4, r4, #2
 80073b4:	2600      	movs	r6, #0
 80073b6:	42a6      	cmp	r6, r4
 80073b8:	d105      	bne.n	80073c6 <__libc_init_array+0x2e>
 80073ba:	bd70      	pop	{r4, r5, r6, pc}
 80073bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80073c0:	4798      	blx	r3
 80073c2:	3601      	adds	r6, #1
 80073c4:	e7ee      	b.n	80073a4 <__libc_init_array+0xc>
 80073c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80073ca:	4798      	blx	r3
 80073cc:	3601      	adds	r6, #1
 80073ce:	e7f2      	b.n	80073b6 <__libc_init_array+0x1e>
 80073d0:	080074c8 	.word	0x080074c8
 80073d4:	080074c8 	.word	0x080074c8
 80073d8:	080074c8 	.word	0x080074c8
 80073dc:	080074cc 	.word	0x080074cc

080073e0 <__retarget_lock_acquire_recursive>:
 80073e0:	4770      	bx	lr

080073e2 <__retarget_lock_release_recursive>:
 80073e2:	4770      	bx	lr

080073e4 <_free_r>:
 80073e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80073e6:	2900      	cmp	r1, #0
 80073e8:	d044      	beq.n	8007474 <_free_r+0x90>
 80073ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80073ee:	9001      	str	r0, [sp, #4]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	f1a1 0404 	sub.w	r4, r1, #4
 80073f6:	bfb8      	it	lt
 80073f8:	18e4      	addlt	r4, r4, r3
 80073fa:	f7ff ffa3 	bl	8007344 <__malloc_lock>
 80073fe:	4a1e      	ldr	r2, [pc, #120]	; (8007478 <_free_r+0x94>)
 8007400:	9801      	ldr	r0, [sp, #4]
 8007402:	6813      	ldr	r3, [r2, #0]
 8007404:	b933      	cbnz	r3, 8007414 <_free_r+0x30>
 8007406:	6063      	str	r3, [r4, #4]
 8007408:	6014      	str	r4, [r2, #0]
 800740a:	b003      	add	sp, #12
 800740c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007410:	f7ff bf9e 	b.w	8007350 <__malloc_unlock>
 8007414:	42a3      	cmp	r3, r4
 8007416:	d908      	bls.n	800742a <_free_r+0x46>
 8007418:	6825      	ldr	r5, [r4, #0]
 800741a:	1961      	adds	r1, r4, r5
 800741c:	428b      	cmp	r3, r1
 800741e:	bf01      	itttt	eq
 8007420:	6819      	ldreq	r1, [r3, #0]
 8007422:	685b      	ldreq	r3, [r3, #4]
 8007424:	1949      	addeq	r1, r1, r5
 8007426:	6021      	streq	r1, [r4, #0]
 8007428:	e7ed      	b.n	8007406 <_free_r+0x22>
 800742a:	461a      	mov	r2, r3
 800742c:	685b      	ldr	r3, [r3, #4]
 800742e:	b10b      	cbz	r3, 8007434 <_free_r+0x50>
 8007430:	42a3      	cmp	r3, r4
 8007432:	d9fa      	bls.n	800742a <_free_r+0x46>
 8007434:	6811      	ldr	r1, [r2, #0]
 8007436:	1855      	adds	r5, r2, r1
 8007438:	42a5      	cmp	r5, r4
 800743a:	d10b      	bne.n	8007454 <_free_r+0x70>
 800743c:	6824      	ldr	r4, [r4, #0]
 800743e:	4421      	add	r1, r4
 8007440:	1854      	adds	r4, r2, r1
 8007442:	42a3      	cmp	r3, r4
 8007444:	6011      	str	r1, [r2, #0]
 8007446:	d1e0      	bne.n	800740a <_free_r+0x26>
 8007448:	681c      	ldr	r4, [r3, #0]
 800744a:	685b      	ldr	r3, [r3, #4]
 800744c:	6053      	str	r3, [r2, #4]
 800744e:	440c      	add	r4, r1
 8007450:	6014      	str	r4, [r2, #0]
 8007452:	e7da      	b.n	800740a <_free_r+0x26>
 8007454:	d902      	bls.n	800745c <_free_r+0x78>
 8007456:	230c      	movs	r3, #12
 8007458:	6003      	str	r3, [r0, #0]
 800745a:	e7d6      	b.n	800740a <_free_r+0x26>
 800745c:	6825      	ldr	r5, [r4, #0]
 800745e:	1961      	adds	r1, r4, r5
 8007460:	428b      	cmp	r3, r1
 8007462:	bf04      	itt	eq
 8007464:	6819      	ldreq	r1, [r3, #0]
 8007466:	685b      	ldreq	r3, [r3, #4]
 8007468:	6063      	str	r3, [r4, #4]
 800746a:	bf04      	itt	eq
 800746c:	1949      	addeq	r1, r1, r5
 800746e:	6021      	streq	r1, [r4, #0]
 8007470:	6054      	str	r4, [r2, #4]
 8007472:	e7ca      	b.n	800740a <_free_r+0x26>
 8007474:	b003      	add	sp, #12
 8007476:	bd30      	pop	{r4, r5, pc}
 8007478:	200008b8 	.word	0x200008b8

0800747c <_init>:
 800747c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800747e:	bf00      	nop
 8007480:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007482:	bc08      	pop	{r3}
 8007484:	469e      	mov	lr, r3
 8007486:	4770      	bx	lr

08007488 <_fini>:
 8007488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800748a:	bf00      	nop
 800748c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800748e:	bc08      	pop	{r3}
 8007490:	469e      	mov	lr, r3
 8007492:	4770      	bx	lr
